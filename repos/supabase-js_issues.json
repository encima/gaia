{
    "issues": [
        {
            "id": "MDU6SXNzdWU2NTYyNzgzNzE=",
            "number": 3,
            "title": "Auth",
            "body": "Tracks progress on https://github.com/supabase/supabase/issues/111\r\n",
            "author": {
                "login": "kiwicopple"
            },
            "state": "CLOSED",
            "createdAt": "2020-07-14T02:37:40Z",
            "closedAt": "2020-07-21T10:50:08Z",
            "url": "https://github.com/supabase/supabase-js/issues/3",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY1ODA1OTUwNg==",
                    "body": "issue to discuss the specification of methods in supabase-js to invoke auth endpoints on auth/v1\r\n\r\nthe endpoints that will be targeted are:\r\n\r\n    `auth/v1/signup`\r\n    `auth/v1/login` (actually makes a claim on the gotrue /token endpoint. also does token refreshing)\r\n    `auth/v1/logout`\r\n    `auth/v1/recover`? (sends recovery email)\r\n    `auth/v1/user`? (returns current user details)\r\n    `auth/v1/verify`? (verifies a token sent over email to activate an account)\r\n    `auth/v1/invite`? (sends invite email)\r\n\r\nmore details regarding the function of the endpoints found [here](https://github.com/netlify/gotrue) (you'll have to scroll past the env vars to the relevant section)\r\n\r\ninitial idea discussed with @kiwicopple was to allow the user to create a single client and call methods on an auth namespace like:\r\n```javascript\r\nimport { createClient } from '@supabase/supabase-js'\r\n\r\nconst supabase = createClient(URL, KEY)\r\n\r\nawait supabase.auth.signup(new_email, new_password)\r\nawait supabase.auth.login(email, password) // might also return jwt so it can be managed manually \r\nawait supabase.auth.logout()\r\n```\r\nsignup (if not requiring email confirmation) and login will set a cookie containing the auth-token, which will then be sent in a header for any call to logout, or calls to rest or realtime methods (subscribe(), select() etc.)",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2020-07-14T08:53:32Z",
                    "url": "https://github.com/supabase/supabase-js/issues/3#issuecomment-658059506"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY1ODA1OTg0Mw==",
                    "body": "just linking this here https://github.com/netlify/gotrue/issues/255 as the gotrue /token interface may change",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2020-07-14T08:54:09Z",
                    "url": "https://github.com/supabase/supabase-js/issues/3#issuecomment-658059843"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY1ODY4ODU0NQ==",
                    "body": "I think we also want to take on the work of refreshing the token depending on the jwt_expiry built into the client",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2020-07-15T10:28:59Z",
                    "url": "https://github.com/supabase/supabase-js/issues/3#issuecomment-658688545"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY2MDQ2ODgwNA==",
                    "body": "Cross-referencing https://github.com/supabase/postgres/issues/27 which has a JWT dependency",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-07-18T11:25:32Z",
                    "url": "https://github.com/supabase/supabase-js/issues/3#issuecomment-660468804"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU2NjM0NzY0OTc=",
            "number": 5,
            "title": "Auth routes fail if the database contains a `users` table",
            "body": "Steps to replicate:\r\n\r\n1. Start a new project on Supabase\r\n2. Add the API details to `test/integration/testAuth.js`\r\n3. Run the tests -> success\r\n4. Add a table in the database (eg: countries)\r\n5. Run the tests -> success\r\n6. Add a users table in the database (template below)\r\n7. Run the tests -> fail\r\n\r\n\r\nExample template to use:\r\n\r\n```sql\r\nCREATE TABLE public.users (\r\n  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,\r\n  inserted_at timestamp without time zone DEFAULT timezone('utc'::text, now()) NOT NULL,\r\n  updated_at timestamp without time zone DEFAULT timezone('utc'::text, now()) NOT NULL,\r\n  data jsonb DEFAULT null,\r\n  username text\r\n);\r\n\r\n```",
            "author": {
                "login": "kiwicopple"
            },
            "state": "CLOSED",
            "createdAt": "2020-07-22T05:04:38Z",
            "closedAt": "2020-07-27T06:20:31Z",
            "url": "https://github.com/supabase/supabase-js/issues/5",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY2NDE0MzcxOA==",
                    "body": "I think this was solved by the new role and search path system we introduced",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2020-07-27T06:20:31Z",
                    "url": "https://github.com/supabase/supabase-js/issues/5#issuecomment-664143718"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY2NDE0Njk4MQ==",
                    "body": "phew, glad the search path works well",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-07-27T06:30:05Z",
                    "url": "https://github.com/supabase/supabase-js/issues/5#issuecomment-664146981"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU2NzQ3MTY3MDg=",
            "number": 12,
            "title": "Outdated autogenerated documentation",
            "body": "Hey all, I was trying supabase on a local project and I tried to do the following:\r\n\r\n``` javascript\r\n    const response = await supabase.auth.signup({  email,  password })\r\n```\r\n\r\nWhich gives the following error:\r\n\r\n```\r\n{\"code\":400,\"msg\":\"Could not read Signup params: json: cannot unmarshal object into Go struct field SignupParams.email of type string\"}\r\n```\r\n\r\nThis was on my autogenerated docs under User Management.\r\n\r\nUpon digging deeper I realize that the official docs have the right syntax, which is not a function that takes an object but two arguments. \r\n\r\nThis worked:\r\n\r\n``` javascript\r\n    const response = await supabase.auth.signup(email,  password)\r\n```\r\n\r\nAnyway, didn\u2019t know if this was the right place to post this but thought I shared. Also using the opportunity to thank you for such a cool project!",
            "author": {
                "login": "rnmp"
            },
            "state": "CLOSED",
            "createdAt": "2020-08-07T02:46:27Z",
            "closedAt": "2020-08-07T04:31:14Z",
            "url": "https://github.com/supabase/supabase-js/issues/12",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY3MDMxNTUwNw==",
                    "body": "ah! good catch @rnmp , fixing now",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2020-08-07T04:31:14Z",
                    "url": "https://github.com/supabase/supabase-js/issues/12#issuecomment-670315507"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU2NzQ3ODM2ODk=",
            "number": 14,
            "title": "Multi-schema in test suite",
            "body": "The test suite includes a test for multi-schema on PostgREST:\r\n\r\nhttps://github.com/supabase/supabase-js/blob/33939998516e9325e207a63a8a3f10463e89aa41/test/integration/testRest.js#L164-L175\r\n\r\nBut adding schemas on-the-fly on KPS hasn't been implemented yet: https://github.com/supabase/infrastructure/issues/33.\r\n\r\nI've also seen other weird quirks while testing https://github.com/supabase/supabase-js/pull/13, will figure it out before merging it.",
            "author": {
                "login": "soedirgo"
            },
            "state": "CLOSED",
            "createdAt": "2020-08-07T06:07:30Z",
            "closedAt": "2020-11-14T23:06:26Z",
            "url": "https://github.com/supabase/supabase-js/issues/14",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDcyNzI3ODM5NA==",
                    "body": "Closing this, n/a due to the TS migration.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2020-11-14T23:06:26Z",
                    "url": "https://github.com/supabase/supabase-js/issues/14#issuecomment-727278394"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU2NzU1MDA4MTQ=",
            "number": 15,
            "title": "`supabase.auth.logout()` throws \"Invalid user\" error.",
            "body": "I found this to only happen sometimes, but couldn't figure out why:\r\n![image](https://user-images.githubusercontent.com/5748289/89707661-e5b51280-d9a2-11ea-914d-a202a825ab4e.png)\r\n\r\n@kiwicopple have you seen this before?",
            "author": {
                "login": "thorwebdev"
            },
            "state": "CLOSED",
            "createdAt": "2020-08-08T10:15:17Z",
            "closedAt": "2020-11-02T03:13:49Z",
            "url": "https://github.com/supabase/supabase-js/issues/15",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY3MTI3OTU4Mg==",
                    "body": "The only thing I could think is that the token is expired when you try to log out. A couple of questions:\r\n\r\n- Is the browser left open, and then you try to log out after >3 hours?\r\n- There is a `logout` network call about 10 requests above the erroneous network call. Did you hit the button twice? Perhaps you're logged out already and the redirect to the home screen failed for some reason",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-08-10T10:32:19Z",
                    "url": "https://github.com/supabase/supabase-js/issues/15#issuecomment-671279582"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY3MTcyOTQ3Nw==",
                    "body": "> Is the browser left open, and then you try to log out after >3 hours?\r\n\r\nI'm able to reproduce this multiple times within a time window of less than 1h\r\n\r\n> There is a logout network call about 10 requests above the erroneous network call. Did you hit the button twice? Perhaps you're logged out already and the redirect to the home screen failed for some reason\r\n\r\nYes, there are times where the logout call is successful. You can see in the network comms though that after the logout there is a login (`token?grant_types=password`, right?). So don't think it's that.",
                    "author": {
                        "login": "thorwebdev"
                    },
                    "createdAt": "2020-08-11T05:13:24Z",
                    "url": "https://github.com/supabase/supabase-js/issues/15#issuecomment-671729477"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY3MTk3ODM4NQ==",
                    "body": "@thorwebdev are you just using the OG slack clone example here?",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2020-08-11T14:24:41Z",
                    "url": "https://github.com/supabase/supabase-js/issues/15#issuecomment-671978385"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY3MjYzODQyMQ==",
                    "body": "@awalias yes, I'm able to observe this also on the official https://supabase-slack-clone.vercel.app/\r\n\r\n![slack-clone-logout-error](https://user-images.githubusercontent.com/5748289/89982635-b48d5880-dca8-11ea-877d-4cc20f2e925b.gif)\r\n",
                    "author": {
                        "login": "thorwebdev"
                    },
                    "createdAt": "2020-08-12T06:33:18Z",
                    "url": "https://github.com/supabase/supabase-js/issues/15#issuecomment-672638421"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY3MzMxMDQ3NA==",
                    "body": "could be some race-condition here? https://github.com/supabase/supabase/blob/1e49eaeb7e0540c9cc1e4dad627e779a33b0500f/examples/slack-clone/pages/_app.js#L43\r\n\r\n",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2020-08-13T07:25:24Z",
                    "url": "https://github.com/supabase/supabase-js/issues/15#issuecomment-673310474"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY3MzM0MjE4NA==",
                    "body": "issue is when a user instantiates two or more supabase clients - fix is to always check localStorage before adding this.accessToken as an auth bearer token to see if there is one on the browser",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2020-08-13T08:32:46Z",
                    "url": "https://github.com/supabase/supabase-js/issues/15#issuecomment-673342184"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY3NDYzMDg3Nw==",
                    "body": "It's gotrue logout api bug. The cookie is cleared before calling `getUserFromClaims `.\r\n\r\n![Screenshot 2020-08-17 at 10 50 15 AM](https://user-images.githubusercontent.com/689843/90352976-86789180-e077-11ea-8697-bc587d5f6de7.png)\r\n\r\n![Screenshot 2020-08-17 at 10 51 54 AM](https://user-images.githubusercontent.com/689843/90353059-c17ac500-e077-11ea-92e5-296075c383ff.png)\r\n![Screenshot 2020-08-17 at 10 52 23 AM](https://user-images.githubusercontent.com/689843/90353062-c2abf200-e077-11ea-8061-0a5dc215f575.png)\r\n",
                    "author": {
                        "login": "phamhieu"
                    },
                    "createdAt": "2020-08-17T03:03:16Z",
                    "url": "https://github.com/supabase/supabase-js/issues/15#issuecomment-674630877"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY3NDYzMTQzNQ==",
                    "body": "On slack-clone app, after an `Invalid user` error fires, I can login and logout successfully!!! no idea why the logout can goes through `getUserFromClaims ` check\r\n\r\nHowever the next login/logout will trigger `Invalid user` error again. ",
                    "author": {
                        "login": "phamhieu"
                    },
                    "createdAt": "2020-08-17T03:05:59Z",
                    "url": "https://github.com/supabase/supabase-js/issues/15#issuecomment-674631435"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY3NTI0OTE4NQ==",
                    "body": "Oh we didn't update this issue after meeting @thorwebdev last week about this.\r\n\r\nThe issue here is that Slack-clone app uses two different supabase client instances, and supabase-js only reads from local storage on initiation, and manages it's own state of which user is logged in after that point - so multiple clients can easily get out of sync on current user state\r\n\r\nOur options here are: \r\n\r\n1) supabase-js should check local storage before each call to see if there has been a change in user auth by a different client instance. This may be expensive\r\n\r\n2) we direct people to only init a single supabase client if they're using auth\r\n\r\n3) we make createClient return a singleton\r\n\r\nany other?",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2020-08-18T04:57:48Z",
                    "url": "https://github.com/supabase/supabase-js/issues/15#issuecomment-675249185"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY3NTI3MzY3OQ==",
                    "body": "@awalias what you describe seems to be another issue related to front-end.\r\n\r\nThe original error reported by @thorwebdev is from gotrue logout api. It can be reproduced easily.\r\n1. start your test supabase project, run `slack clone` quick start to create required tables\r\n2. pull slack clone app, update env with your test project keys and run it\r\n3. login and logout multiple times slack-clone client (with the same acc and client) you can see the error\r\n\r\n![Screenshot 2020-08-18 at 1 54 51 PM](https://user-images.githubusercontent.com/689843/90475722-9b7a2100-e15a-11ea-80ac-4b4066280d22.png)\r\n\r\nI already check `logout` api on gotrue. The last commit on `logout.go` breaks the check mechanism. \r\n\r\n**Before**\r\nit works properly, because the claim is retrieved before clearing token\r\nhttps://github.com/netlify/gotrue/blob/47cc9ce137a24c96985ee3e742b0f0adfb6f146c/api/logout.go\r\n![Screenshot 2020-08-18 at 2 02 43 PM](https://user-images.githubusercontent.com/689843/90476193-98336500-e15b-11ea-90ee-defefa98c782.png)\r\n\r\n**After**\r\nhttps://github.com/netlify/gotrue/blob/8304885327eb93a7346f4b27658f470499c39107/api/logout.go\r\n![Screenshot 2020-08-18 at 2 04 32 PM](https://user-images.githubusercontent.com/689843/90476289-cf097b00-e15b-11ea-835d-9d6b755e5823.png)\r\n\r\n\r\n\r\n",
                    "author": {
                        "login": "phamhieu"
                    },
                    "createdAt": "2020-08-18T06:06:22Z",
                    "url": "https://github.com/supabase/supabase-js/issues/15#issuecomment-675273679"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY3NTI4MDgyNw==",
                    "body": "I think the response from gotrue is actually correct in this instance, if you look at the request headers on the slack clone app, you will see that the apikey and auth bearer headers are the same, in this case the jwt being (mistakenly) sent is the `anon` key:\r\n\r\n![image](https://user-images.githubusercontent.com/458736/90477015-2d832900-e15d-11ea-863b-de12e3ba9cdf.png)\r\n![image](https://user-images.githubusercontent.com/458736/90477169-80f57700-e15d-11ea-8d85-c702e9cfc4e2.png)\r\n\r\nfor comparison here is an example of a successful logout, with decoded jwt below:\r\n![image](https://user-images.githubusercontent.com/458736/90477112-63c0a880-e15d-11ea-811d-0afeabb904cf.png)\r\n![image](https://user-images.githubusercontent.com/458736/90477143-73d88800-e15d-11ea-91ec-9c782a8b776f.png)\r\n\r\nThe bug seems to be that the supabase-js client calling `logout` does not have the current user token, since it was already cleared from the client by the other instance\r\n\r\nthe \"double logout\" seems to be coming from here: https://github.com/supabase/supabase/blob/fed822f48c5e441eb867fa756443e362ac47423f/examples/slack-clone/components/Layout.js#L59\r\n\r\nand here: https://github.com/supabase/supabase/blob/fed822f48c5e441eb867fa756443e362ac47423f/examples/slack-clone/pages/channels/%5Bid%5D.js#L16",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2020-08-18T06:25:34Z",
                    "url": "https://github.com/supabase/supabase-js/issues/15#issuecomment-675280827"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY3NTI4MTgwNg==",
                    "body": "also as a side note - we actually don't make use of the cookies set by go-true, we manage these ourselves using local storage inside supabase-js",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2020-08-18T06:28:13Z",
                    "url": "https://github.com/supabase/supabase-js/issues/15#issuecomment-675281806"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY3NTMzMjQ0MQ==",
                    "body": "Thanks @awalias for clarification. After modifying `slack clone` example to use a single Supabase client, everything works properly.\r\n",
                    "author": {
                        "login": "phamhieu"
                    },
                    "createdAt": "2020-08-18T08:16:20Z",
                    "url": "https://github.com/supabase/supabase-js/issues/15#issuecomment-675332441"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY3NTM1NDE5MA==",
                    "body": "Currently, supabase-js persists `accessToken`, `refreshToken` and `currentUser` to localstorage while also keeps them as class params inside supabase.auth. When we have multi supabase clients, these params can be out of sync. \r\n\r\nWe should use localstorage as the source of true and don't keep them as class params. It's the same as how we get authHeader to supply PostgrestClient. What do you think? @kiwicopple ",
                    "author": {
                        "login": "phamhieu"
                    },
                    "createdAt": "2020-08-18T08:58:19Z",
                    "url": "https://github.com/supabase/supabase-js/issues/15#issuecomment-675354190"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY3NTM3MTYwOA==",
                    "body": "1) is it inefficient to fetch from local storage every time?\r\n2) what about server-side / node\r\n\r\nmaybe keep track of them internally but always check local storage first (if it exists?)",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2020-08-18T09:31:38Z",
                    "url": "https://github.com/supabase/supabase-js/issues/15#issuecomment-675371608"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY3NTQwMzcxMg==",
                    "body": "1. right now everytime you call a request with postgrest client, it will read localstorage for accessToken to include in the header. It works ok until now. So i think it's efficient enough.\r\n![Screenshot 2020-08-18 at 6 37 24 PM](https://user-images.githubusercontent.com/689843/90503358-e0657e00-e181-11ea-9f3d-e9d26960e3f6.png)\r\n2. for server-side, accessToken should included in the header. To get refreshToken and currentUser we can call gotrue `/user` endpoint with `accessToken`\r\n",
                    "author": {
                        "login": "phamhieu"
                    },
                    "createdAt": "2020-08-18T10:40:50Z",
                    "url": "https://github.com/supabase/supabase-js/issues/15#issuecomment-675403712"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU2NzYwNTgyMzQ=",
            "number": 17,
            "title": "Add option to prevent \"updates\" on unmodified updates.",
            "body": "Possible implementation:\r\n\r\n```\r\nconst mySubscription = supabase\r\n  .from('countries')\r\n  .on('UPDATE', payload => {  })\r\n  .subscribe({ ignoreDuplicates: true })\r\n```\r\nObject comparisons in JS aren't very \"performant\" (if there is such a word), so we will want to make the `ignoreDuplicates = false` by default. \r\n\r\nContext:\r\n\r\n![image](https://user-images.githubusercontent.com/10214025/89777377-28f7b880-db3e-11ea-92de-404a5962419d.png)\r\n\r\n",
            "author": {
                "login": "kiwicopple"
            },
            "state": "OPEN",
            "createdAt": "2020-08-10T11:17:48Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/17",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY3MTI5NzA1OQ==",
                    "body": "Note that we only need this in the `supabase-js` level, I don't think it needs to be in `realtime-js`\r\n",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-08-10T11:18:56Z",
                    "url": "https://github.com/supabase/supabase-js/issues/17#issuecomment-671297059"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU2ODUyOTI5NzI=",
            "number": 20,
            "title": "Auth: Change DX of user management",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nAs it stands today, you have to do \r\n```js\r\ntry {\r\nconst {\r\n  body: { user },\r\n} = await supabase.auth.signup(\r\n  'someone@email.com',\r\n  'password'\r\n)\r\n...\r\n```\r\nTo get the user object, and\r\n```js\r\n...} catch (error) {\r\n      console.log('Error message:', error.response.body.error_description);\r\n    } \r\n```\r\nto get to the error message.\r\n\r\n## Describe the solution you'd like\r\n\r\nmy preferred DX would be \r\n\r\n```js\r\nconst { error, user } = await supabase.auth.signup(\r\n  'someone@email.com',\r\n  'password'\r\n);\r\nif (error) alert(error);\r\n```\r\n\r\nHowever, I know that @awalias is a big fan of returning the whole response object, which I personally find rather distracting. Maybe we can do something like\r\n\r\n```js\r\nconst { error, user, raw_response } = await supabase.auth.signup(\r\n  'someone@email.com',\r\n  'password'\r\n);\r\nif (error) alert(error);\r\n```\r\nTo give folks the option to access the raw object, but not overload folks who don't care about most of the stuff in the raw response. Wdyt? This probably warrants a new issue?\r\n\r\n## Describe alternatives you've considered\r\n\r\nSolve via documentation? Not ideal IMO.\r\n\r\n## Additional context\r\n\r\nRelates to https://github.com/supabase/supabase/issues/143\r\n",
            "author": {
                "login": "thorwebdev"
            },
            "state": "CLOSED",
            "createdAt": "2020-08-25T08:43:05Z",
            "closedAt": "2020-11-02T03:13:50Z",
            "url": "https://github.com/supabase/supabase-js/issues/20",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY3OTkwNTU4Nw==",
                    "body": "as mentioned by @kiwicopple will also want to revisit `signup(email, password)` to allow different types of signup.\r\n\r\nand also wrapping https://github.com/netlify/gotrue-js - note here that we may have to fork initially since our own gotrue api has diverged on some details (such as how email/password are passed in body as opposed to query params etc.)",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2020-08-25T09:11:29Z",
                    "url": "https://github.com/supabase/supabase-js/issues/20#issuecomment-679905587"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4MzI4MzE4MQ==",
                    "body": "See ongoing PR here for GoTrue changes: https://github.com/supabase/gotrue-js/pull/1\r\n\r\nShould we shift the convo over there and roll the changes into our gotrue-js fork?",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-08-29T12:20:49Z",
                    "url": "https://github.com/supabase/supabase-js/issues/20#issuecomment-683283181"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY5ODc1ODI5NQ==",
                    "body": "Starting the new spec here: https://deploy-preview-210--supabase.netlify.app/ref/gotrue/signup/",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-09-25T06:56:22Z",
                    "url": "https://github.com/supabase/supabase-js/issues/20#issuecomment-698758295"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU2ODYwMTA0Mzg=",
            "number": 21,
            "title": "How to handle fields like confirmationToken, resetPasswordToken, etc?",
            "body": "# How to handle fields like confirmationToken, resetPasswordToken, etc?\r\n\r\n## Should these be attached to `user_metadata` or in a separate table?\r\n\r\nIdeally I'd like to keep all auth-related stuff within the user auth object, perhaps within the `user_metadata` field. But I don't see a way to initialize or update that field with the API (perhaps it's meant for internal Supabase stuff?).  For now I'll create a separate table to handle resetting passwords, confirmation tokens, etc, but I wanted to get a sense of where this type of information should be stored from the community.\r\n",
            "author": {
                "login": "hansy"
            },
            "state": "CLOSED",
            "createdAt": "2020-08-26T05:09:47Z",
            "closedAt": "2020-08-28T18:09:41Z",
            "url": "https://github.com/supabase/supabase-js/issues/21",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4MDcwOTIzNQ==",
                    "body": "Hey @hansy - you're about 2 days too early. We're releasing some updates now which will handle some of the confirmations/resets.\r\n\r\nWe're also doing a re-think on ways to improve the Auth interface to make it simpler.\r\n\r\nLet's reassess your question in a few days and tease out any items that haven't been addressed?\r\n\r\nThanks for posting this in the right repo too!",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-08-26T07:26:53Z",
                    "url": "https://github.com/supabase/supabase-js/issues/21#issuecomment-680709235"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4MTA2OTMzNw==",
                    "body": "Thanks @kiwicopple for the heads up. Also, in hindsight, my question is actually really dumb, considering the operations I'm talking about (resetting passwords, confirming password tokens) are generally taken with unauthenticated users. So maybe that kind of info does NOT belong within the user auth object.  Anyway, looking forward to seeing what you smarter people decide is best practice.",
                    "author": {
                        "login": "hansy"
                    },
                    "createdAt": "2020-08-26T19:09:06Z",
                    "url": "https://github.com/supabase/supabase-js/issues/21#issuecomment-681069337"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4MjQ0OTc5NA==",
                    "body": "Hey @hansy we did an initial release but I don't think it addresses your points. So let me check what you're looking for here.\r\n\r\n**It looks like you need a way to update the `user_metadata ` data** \r\n\r\n(You're right, you shouldn't put tokens in there)\r\n\r\nAlthough you can do this via the API, we haven't released this on the supabase-js library yet sorry. We are working on it and will release soon\r\n\r\nHere is the API endpoint: https://github.com/netlify/gotrue\r\n\r\n![image](https://user-images.githubusercontent.com/10214025/91550474-2cbb7580-e95b-11ea-9d90-5607d2e30e03.png)\r\n\r\n** You need a way for users to reset their own passwords**\r\n\r\nThis one is in our next release - should be about 2 weeks away\r\n\r\n**confirmationToken**\r\n\r\nI'm not too sure what you want to do with this one yet - can you clarify your use case?\r\n\r\n\r\n\r\n",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-08-28T10:23:06Z",
                    "url": "https://github.com/supabase/supabase-js/issues/21#issuecomment-682449794"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4MjQ1NTAxNw==",
                    "body": "sorry that I'm late to the party here:\r\n\r\nthese two things - password recovery and confirmations are actually already built in to your supabase instance (just not documented yet)\r\n\r\nLike @kiwicopple said, all the endpoints documented in https://github.com/netlify/gotrue are available at `<your-ref>.supabase.co/auth/v1/`\r\n\r\n### recovery \r\nyou can use the `/recover` endpoint to send a reset email - \r\n\r\n```bash\r\ncurl -X POST 'https://oqfypmgvqclxkcrxjleh.supabase.net/auth/v1/recover' \\\r\n-H \"apikey: SUPABASE_KEY\" \\\r\n-H \"Content-Type: application/json\" \\\r\n-d '{\r\n  \"email\": \"ant@supabase.io\",                                          \r\n}'\r\n```\r\n\r\nand use the returned token to get an accessToken:\r\n\r\n```bash\r\ncurl -X POST 'https://oqfypmgvqclxkcrxjleh.supabase.net/auth/v1/verify' \\\r\n-H \"apikey: SUPABASE_KEY\" \\\r\n-H \"Content-Type: application/json\" \\\r\n-d '{\r\n  \"type\": \"recovery\", \"token\":\"AzRjugJzJhB4J_N8IDY41g\"\r\n}'\r\n```\r\n\r\nwhich can then be used to set a password:\r\n\r\n```bash\r\ncurl -X PUT 'https://oqfypmgvqclxkcrxjleh.supabase.net/auth/v1/user' \\\r\n-H \"apikey: SUPABASE_KEY\" \\\r\n-H \"Authorization: Bearer USER_ACCESS_TOKEN\" \\\r\n-H \"Content-Type: application/json\" \\\r\n-d '{\r\n  \"password\" : \"new-password\"\r\n}'\r\n```\r\n\r\n### email confirmation\r\nif you check your supabase dashboard you should find a new section under Auth > settings where you can enable email confirmations, and also a templates section where you can customize the confirmation email\r\n\r\n![image](https://user-images.githubusercontent.com/458736/91551840-6f7e4d00-e95d-11ea-9b58-9ac79cd81c2e.png)\r\n\r\n\r\nhope this helps! Let me know",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2020-08-28T10:36:56Z",
                    "url": "https://github.com/supabase/supabase-js/issues/21#issuecomment-682455017"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4Mjc3NjQ5NQ==",
                    "body": "Ah the GoTrue docs was what I was looking for. Thanks for the suggestion @awalias and @kiwicopple. I think this should address my pain points for now. ",
                    "author": {
                        "login": "hansy"
                    },
                    "createdAt": "2020-08-28T16:00:29Z",
                    "url": "https://github.com/supabase/supabase-js/issues/21#issuecomment-682776495"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4MzAxOTM5NQ==",
                    "body": "good stuff! closing issue for now - feel free to ping us with any further questions",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2020-08-28T18:09:41Z",
                    "url": "https://github.com/supabase/supabase-js/issues/21#issuecomment-683019395"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU2ODgzMjI5NTQ=",
            "number": 22,
            "title": "Undefined `confirmed_at` on signup",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen calling the `signup` method while email confirmations are enabled, an error is thrown: `TypeError: Cannot read property 'confirmed_at' of undefined`.\r\n\r\n## To Reproduce\r\n\r\nFirst enable email confirmations in Supabase dashboard. Then:\r\n\r\n```\r\nconst supabase = client.createClient(SUPABASE_URL, SUPABASE_API_KEY);\r\nconst createUser = async () => {\r\n  try {\r\n    const { body: { user } } = await supabase.auth.signup(\"user@example.com\", \"password\");\r\n    return user\r\n  } catch (e) {\r\n    return Promise.reject(e)\r\n  }\r\n};\r\n\r\ncreateUser()\r\n  .then(res => console.log(res))\r\n  .catch(err => console.log(err))\r\n```\r\n\r\nLooks like the error is happening here:\r\n\r\nhttps://github.com/supabase/supabase-js/blob/8318ed14ff33a7ee4a847509c97308420b1fafe1/src/Auth.js#L23\r\n\r\nThe response returned doesn't include a `user` key in the body. I think the body is the user object itself.\r\n\r\n## Expected behavior\r\n\r\nSignup should return response from POST request to /signup on auth url .\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Version of supabase-js: 0.36.4\r\n- Version of Node.js: 14.5.0\r\n",
            "author": {
                "login": "hansy"
            },
            "state": "CLOSED",
            "createdAt": "2020-08-28T19:54:38Z",
            "closedAt": "2020-08-29T04:54:36Z",
            "url": "https://github.com/supabase/supabase-js/issues/22",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4MzIyOTkzMw==",
                    "body": "good catch @hansy will get this patched asap",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2020-08-29T03:34:07Z",
                    "url": "https://github.com/supabase/supabase-js/issues/22#issuecomment-683229933"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU2ODg0NDk5NzM=",
            "number": 23,
            "title": "Update user data",
            "body": "# Question\r\nHow can you update user data? Here are the possibilities I see:\r\n1. I see there is `user_metadata` but don't see a way to update it.\r\n2. I could add a table called `user` and join on the UID the signup generates. If that is the case how can we create a foreign key to the auth'd user row?",
            "author": {
                "login": "zlwaterfield"
            },
            "state": "CLOSED",
            "createdAt": "2020-08-29T03:37:47Z",
            "closedAt": "2020-08-29T05:20:49Z",
            "url": "https://github.com/supabase/supabase-js/issues/23",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4MzIzNjQ4MA==",
                    "body": "@zlwaterfield Check out Issue #21. In short, you can update user info by directly sending a request to your supabase endpoint. Supabase is using [Netlify's GoTrue API](https://github.com/netlify/gotrue) to power authentication so you should be able to call any endpoint listed there using your unique supabase url and API key.",
                    "author": {
                        "login": "hansy"
                    },
                    "createdAt": "2020-08-29T04:49:15Z",
                    "url": "https://github.com/supabase/supabase-js/issues/23#issuecomment-683236480"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4MzIzODk5Mg==",
                    "body": "Awesome thanks, I'll take a look. ",
                    "author": {
                        "login": "zlwaterfield"
                    },
                    "createdAt": "2020-08-29T05:18:28Z",
                    "url": "https://github.com/supabase/supabase-js/issues/23#issuecomment-683238992"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4MzI0NzM2OA==",
                    "body": "thanks for pitching in here @hansy ",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-08-29T06:53:29Z",
                    "url": "https://github.com/supabase/supabase-js/issues/23#issuecomment-683247368"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4NDk4NTU1MQ==",
                    "body": "For anyone else coming here, here is an example snippet to help:\r\n```\r\n  async changeEmail(email) {\r\n    return await axios({\r\n      method: 'PUT',\r\n      url: `${SupabaseService.auth.authUrl}/user`,\r\n      headers: {\r\n        authorization: `Bearer ${SupabaseService.auth.accessToken}`,\r\n        apikey: SupabaseService.auth.supabaseKey,\r\n      },\r\n      data: {\r\n        email,\r\n      },\r\n    });\r\n  }\r\n```",
                    "author": {
                        "login": "zlwaterfield"
                    },
                    "createdAt": "2020-09-01T16:36:17Z",
                    "url": "https://github.com/supabase/supabase-js/issues/23#issuecomment-684985551"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4NTMwNTQyMQ==",
                    "body": "Also a note that we will be adding this to supabase-js - we are revising the auth API now",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-09-02T05:19:20Z",
                    "url": "https://github.com/supabase/supabase-js/issues/23#issuecomment-685305421"
                },
                {
                    "id": "IC_kwDOD79Crs42Gb2A",
                    "body": "Now that it's 2021, curious what the preferred solution is. \r\n\r\nthere is \r\n```\r\nawait supabase.auth.update({\r\n  data: {\r\n    email: 'foo@bar.com'\r\n  },\r\n});\r\n```\r\n\r\nhowever, this doesn't seem to correlate with the `users.email` column. \r\n\r\nAlso, not clear how to re-trigger a confirmation email on email change.",
                    "author": {
                        "login": "tconroy"
                    },
                    "createdAt": "2021-08-28T17:14:17Z",
                    "url": "https://github.com/supabase/supabase-js/issues/23#issuecomment-907656576"
                },
                {
                    "id": "IC_kwDOD79Crs42_4Z2",
                    "body": "@tconroy for email it's `const { user, error } = await supabase.auth.update({email: 'new@email.com'})`\r\n\r\nThis will send an email to both the user's current and new email with a confirmation link.\r\n\r\n\r\n",
                    "author": {
                        "login": "thorwebdev"
                    },
                    "createdAt": "2021-09-20T08:13:24Z",
                    "url": "https://github.com/supabase/supabase-js/issues/23#issuecomment-922715766"
                },
                {
                    "id": "IC_kwDOD79Crs47VESe",
                    "body": "Any idea on how to restrict updates to that column for specific values? \r\n\r\n```\r\n// I want to throw an error for when a user does this, but let them update anything else\r\nawait supabase.auth.update({\r\n  data: {\r\n    read_only_property: true\r\n  },\r\n})\r\n```",
                    "author": {
                        "login": "raimille1"
                    },
                    "createdAt": "2021-12-16T02:19:02Z",
                    "url": "https://github.com/supabase/supabase-js/issues/23#issuecomment-995378334"
                },
                {
                    "id": "IC_kwDOD79Crs5GCrPF",
                    "body": "It's 2022, boys. Now you can do these:\r\n\r\n- On server (with service_role key):\r\n```js\r\nawait supabase.auth.api.updateUserById(userId, { email: 'foo@bar.com' })\r\n```\r\n\r\n- On client / browser, with JWT:\r\n```js\r\nawait supabase.auth.api.updateUser(userJwt, { email: 'foo@bar.com' })\r\n```",
                    "author": {
                        "login": "rommyarb"
                    },
                    "createdAt": "2022-07-05T14:09:35Z",
                    "url": "https://github.com/supabase/supabase-js/issues/23#issuecomment-1175106501"
                },
                {
                    "id": "IC_kwDOD79Crs5RWEYc",
                    "body": "@rommyarb it's still 2022, but it looks like the `supabase.auth.api.updateUser` method doesn't exist anymore in version 2.0+ :( \r\n\r\nIs there an updated way to do this client-side with JWT?",
                    "author": {
                        "login": "ankushg"
                    },
                    "createdAt": "2022-12-25T21:17:22Z",
                    "url": "https://github.com/supabase/supabase-js/issues/23#issuecomment-1364739612"
                },
                {
                    "id": "IC_kwDOD79Crs5SJcQK",
                    "body": "You can update a logged in user client-side by calling: `supabase.auth.updateUser`: https://supabase.com/docs/reference/javascript/auth-updateuser",
                    "author": {
                        "login": "thorwebdev"
                    },
                    "createdAt": "2023-01-11T03:50:31Z",
                    "url": "https://github.com/supabase/supabase-js/issues/23#issuecomment-1378206730"
                },
                {
                    "id": "IC_kwDOD79Crs5bJxA3",
                    "body": "Once this update happens on the client, if im updating metadata, the user object in session doesn't reflect the change",
                    "author": {
                        "login": "AwesomeZaidi"
                    },
                    "createdAt": "2023-05-01T03:01:13Z",
                    "url": "https://github.com/supabase/supabase-js/issues/23#issuecomment-1529286711"
                },
                {
                    "id": "IC_kwDOD79Crs5cnMgD",
                    "body": "> Once this update happens on the client, if im updating metadata, the user object in session doesn't reflect the change\r\n\r\nI had the same problem. It works if you refreshes the session after updating the user data.\r\n\r\n`await supabase.auth.refreshSession();`",
                    "author": {
                        "login": "tiagopaespride"
                    },
                    "createdAt": "2023-05-18T23:30:03Z",
                    "url": "https://github.com/supabase/supabase-js/issues/23#issuecomment-1553778691"
                },
                {
                    "id": "IC_kwDOD79Crs5kcrUG",
                    "body": "> @rommyarb it's still 2022, but it looks like the supabase.auth.api.updateUser method doesn't exist anymore in version 2.0+ :(\r\n\r\n\r\nHey, this can now be done from server side using this API:\r\nsupabase.auth.admin.updateUserById(userId, { email: 'foo@bar.com' });",
                    "author": {
                        "login": "aldrinjenson"
                    },
                    "createdAt": "2023-08-20T09:39:53Z",
                    "url": "https://github.com/supabase/supabase-js/issues/23#issuecomment-1685239046"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU2ODg0NjI0NDE=",
            "number": 25,
            "title": "How to set/get the JWT secret?",
            "body": "# Question\r\n\r\nIs there a way to get or set the secret used to sign the JWT access tokens? My use case is to use the Supabase-generated tokens for authorization in other micro-services, so having the secret will help verify their signatures.\r\n",
            "author": {
                "login": "hansy"
            },
            "state": "CLOSED",
            "createdAt": "2020-08-29T05:14:57Z",
            "closedAt": "2020-09-06T03:33:10Z",
            "url": "https://github.com/supabase/supabase-js/issues/25",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4MzIzOTQ0NA==",
                    "body": "hey @hansy , the secret is available in your database, run `show app.settings.jwt_secret;` in the SQL editor to view it\r\n\r\nthere is no ability to set it yet (you could set this value in the database but it would not update on the supabase api server yet, we should build this capability in)",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2020-08-29T05:23:30Z",
                    "url": "https://github.com/supabase/supabase-js/issues/25#issuecomment-683239444"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4MzI3Nzc1MQ==",
                    "body": "> we should build this capability in\r\n\r\nFor a first step we could even just expose it (read only) so that devs can get it easily. Should we put it down in the \"Settings\" section with the API keys? Or in the \"Auth\" section? \r\n\r\nMy initial thought is in the \"Settings\" - down where the developers will live. The \"Auth\" section might be more \"business user\" config",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-08-29T11:29:05Z",
                    "url": "https://github.com/supabase/supabase-js/issues/25#issuecomment-683277751"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4MzMyNjk1NQ==",
                    "body": "As long as devs know how to get the secret (via the SQL editor is more than fine), this isn't a huge priority. Thanks for yall's prompt response.\r\n\r\nThis might be a separate discussion but I can't seem to validate a token signature with the secret obtained from the editor. And this even after turning the secret back into a byte array (the way GoTrue signs the tokens: https://github.com/netlify/gotrue/blob/c2a56b766367217c280c80851d79af68f0031a5a/api/token.go#L166).\r\n\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"github.com/dgrijalva/jwt-go\"\r\n)\r\n\r\nvar jwtSecret = []byte(\"secret\")\r\nvar token = \"<ACCESS TOKEN HERE>\"\r\n\r\nfunc VerifyToken(tokenString string) (c jwt.MapClaims, err error) {\r\n\ttoken, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {\r\n\t\treturn jwtSecret, nil\r\n\t})\r\n\r\n\tif !token.Valid {\r\n\t\treturn\r\n\t}\r\n\ttokenMap, _ := token.Claims.(jwt.MapClaims)\r\n\treturn tokenMap, err\r\n}\r\n\r\nfunc main() {\r\n\tfmt.Println(VerifyToken(token)) // Prints: map[] signature is invalid\r\n}\r\n```\r\n\r\nIf anyone knows off the top of their head what I'm doing wrong, direction would be appreciated. Otherwise I'll plug away at this and report my findings for anyone else interested in using the JWT secret for signature verification.",
                    "author": {
                        "login": "hansy"
                    },
                    "createdAt": "2020-08-29T18:32:55Z",
                    "url": "https://github.com/supabase/supabase-js/issues/25#issuecomment-683326955"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4NDQ4MTMxMA==",
                    "body": "@phamhieu could we expose this in a new panel on the API settings? (read only for now)\r\n\r\n![image](https://user-images.githubusercontent.com/10214025/91811589-524dc500-ec62-11ea-9f9b-50020d62bd27.png)\r\n\r\n@awalias any thoughts on the signature validation? Can you replicate on GoTrue?\r\n",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-09-01T06:51:36Z",
                    "url": "https://github.com/supabase/supabase-js/issues/25#issuecomment-684481310"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4NDUyNzY3Mw==",
                    "body": "@hansy your code works for me.\r\n\r\n![Screenshot 2020-09-01 at 3 53 23 PM](https://user-images.githubusercontent.com/689843/91823108-50d4ca80-ec6b-11ea-81b5-0788db363171.png)\r\n\r\n@kiwicopple I will update the UI to show JWT secret",
                    "author": {
                        "login": "phamhieu"
                    },
                    "createdAt": "2020-09-01T07:54:08Z",
                    "url": "https://github.com/supabase/supabase-js/issues/25#issuecomment-684527673"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4NjYxNDQ4Mg==",
                    "body": "@phamhieu huh weird it didn't for me, but I'll take your word for it. That's good news! Thanks for your help!",
                    "author": {
                        "login": "hansy"
                    },
                    "createdAt": "2020-09-03T16:40:12Z",
                    "url": "https://github.com/supabase/supabase-js/issues/25#issuecomment-686614482"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4Njg0Njg3OQ==",
                    "body": "Also the UI is showing the secret now @hansy - Hiue made the updates a few days back.\r\n\r\nIf you're happy with this, feel free to close!",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-09-04T01:29:33Z",
                    "url": "https://github.com/supabase/supabase-js/issues/25#issuecomment-686846879"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4NzY5NDQwOA==",
                    "body": "Closing for now - feel free to reopen ",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-09-06T03:33:10Z",
                    "url": "https://github.com/supabase/supabase-js/issues/25#issuecomment-687694408"
                },
                {
                    "id": "IC_kwDOD79Crs48wRpv",
                    "body": "Is there any way to get the JWT secret during local development? My hosted version of supabase shows the JWT secret with `show app.settings.jwt_secret;`, but my local version does not.\r\n\r\n```\r\nERROR:  unrecognized configuration parameter \"app.settings.jwt_secret\"\r\n```",
                    "author": {
                        "login": "RobertB4"
                    },
                    "createdAt": "2022-01-22T15:07:15Z",
                    "url": "https://github.com/supabase/supabase-js/issues/25#issuecomment-1019288175"
                },
                {
                    "id": "IC_kwDOD79Crs48yvyQ",
                    "body": "@RobertB4 it's undocumented, but the local dev's JWT secret is hardcoded to `super-secret-jwt-token-with-at-least-32-characters-long`.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-01-24T10:17:59Z",
                    "url": "https://github.com/supabase/supabase-js/issues/25#issuecomment-1019935888"
                },
                {
                    "id": "IC_kwDOD79Crs5k_-MG",
                    "body": "@soedirgo thank you so much, I saw that on the console and didn't even bothered to think it was that \ud83d\ude04 ",
                    "author": {
                        "login": "kengru"
                    },
                    "createdAt": "2023-08-26T19:57:27Z",
                    "url": "https://github.com/supabase/supabase-js/issues/25#issuecomment-1694491398"
                },
                {
                    "id": "IC_kwDOD79Crs5l9kpg",
                    "body": "I got in touch with Supabase support. If you're using the Supabase CLI, the environment variable you must set in `.env` is `SUPABASE_AUTH_JWT_SECRET`.\r\n\r\n```\r\n$ grep JWT_SECRET .env\r\nSUPABASE_AUTH_JWT_SECRET=something-boring-and-repetitive-boring-and-repetitive\r\n\r\n$ yarn run supabase stop; yarn run supabase start\r\n[...]\r\nStarted supabase local development setup.\r\n\r\n         API URL: http://localhost:54321\r\n     GraphQL URL: http://localhost:54321/graphql/v1\r\n          DB URL: postgresql://postgres:postgres@localhost:54322/postgres\r\n      Studio URL: http://localhost:54323\r\n    Inbucket URL: http://localhost:54324\r\n      JWT secret: something-boring-and-repetitive-boring-and-repetitive\r\n```\r\n\r\nYou can then use the form at https://supabase.com/docs/guides/self-hosting#api-keys to compute `ANON_KEY`.",
                    "author": {
                        "login": "thomergil"
                    },
                    "createdAt": "2023-09-07T19:05:18Z",
                    "url": "https://github.com/supabase/supabase-js/issues/25#issuecomment-1710639712"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU2ODkyNzIwNzE=",
            "number": 26,
            "title": "Updates are not working",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nI am running an update on a single row in the table `wedding` and it is 404ing. I've confirmed I am using the correct id and table. It seems the request being made is not correct.\r\n\r\nHere is the code:\r\n```\r\n  async update(weddingId, wedding) {\r\n\t// weddingId = c81c8ab3-9fc5-41d6-9a68-843109ba95b0\r\n\t// wedding = {slug: \"yes-\"}\r\n    return await SupabaseService\r\n      .from<Wedding>('wedding')\r\n      .update(wedding)\r\n      .eq('id', weddingId);\r\n  }\r\n```\r\n\r\nThe request url is:\r\n```\r\nhttps://wqzrlmhkwwtfqmbwirha.supabase.co/rest/v1/wedding?slug=eq.y&id=neq.c81c8ab3-9fc5-41d6-9a68-843109ba95b0&slug=eq.ye&id=neq.c81c8ab3-9fc5-41d6-9a68-843109ba95b0&slug=eq.yes&id=neq.c81c8ab3-9fc5-41d6-9a68-843109ba95b0&slug=eq.yes-&id=neq.c81c8ab3-9fc5-41d6-9a68-843109ba95b0&id=eq.c81c8ab3-9fc5-41d6-9a68-843109ba95b0\r\n```\r\n\r\nIf you break that down:\r\n```\r\n> queryString.parse('?slug=eq.y&id=neq.c81c8ab3-9fc5-41d6-9a68-843109ba95b0&slug=eq.ye&id=neq.c81c8ab3-9fc5-41d6-9a68-843109ba95b0&slug=eq.yes&id=neq.c81c8ab3-9fc5-41d6-9a68-843109ba95b0&slug=eq.yes-&id=neq.c81c8ab3-9fc5-41d6-9a68-843109ba95b0&id=eq.c81c8ab3-9fc5-41d6-9a68-843109ba95b0')\r\n[Object: null prototype] {\r\n  '?slug': 'eq.y',\r\n  id: [\r\n    'neq.c81c8ab3-9fc5-41d6-9a68-843109ba95b0',\r\n    'neq.c81c8ab3-9fc5-41d6-9a68-843109ba95b0',\r\n    'neq.c81c8ab3-9fc5-41d6-9a68-843109ba95b0',\r\n    'neq.c81c8ab3-9fc5-41d6-9a68-843109ba95b0',\r\n    'eq.c81c8ab3-9fc5-41d6-9a68-843109ba95b0'\r\n  ],\r\n  slug: [ 'eq.ye', 'eq.yes', 'eq.yes-' ]\r\n}\r\n```\r\n\r\nWhy are both `neq` and `eq` being applied and why is `neq` there 4 times? Also, why is slug there? The slug was not included in the filter, just in the body. \r\n\r\n## Screenshots\r\n\r\n![Screen Shot 2020-08-31 at 10 54 35 AM](https://user-images.githubusercontent.com/6392501/91734054-67e6c000-eb78-11ea-8089-e1546cb141ba.png)\r\n\r\n\r\n## System information\r\n\r\n- Version of supabase-js: v0.36.4\r\n- Version of Node.js: v12.12.0\r\n",
            "author": {
                "login": "zlwaterfield"
            },
            "state": "CLOSED",
            "createdAt": "2020-08-31T14:56:30Z",
            "closedAt": "2020-09-03T05:15:49Z",
            "url": "https://github.com/supabase/supabase-js/issues/26",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4NjI1ODIwMQ==",
                    "body": "I will close this for now, I haven\u2019t experienced this since I opened it and I am not sure how it happened. If I see it again I will create a repo to replicate it.",
                    "author": {
                        "login": "zlwaterfield"
                    },
                    "createdAt": "2020-09-03T05:15:48Z",
                    "url": "https://github.com/supabase/supabase-js/issues/26#issuecomment-686258201"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4NjI4NTUyNw==",
                    "body": "Here were the ideas discussed on Slack, in case it gets reopened:\r\n\r\n- it could be caused by the way the library / code is set up - `SupabaseService` indicates that you\u2019re somehow adding filters to the query from some other area of your app before executing the call with `select()` / update() etc.\r\n-  could be caused by an auto-reloading dev environment and that is somehow caching the filters each reload",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-09-03T06:32:41Z",
                    "url": "https://github.com/supabase/supabase-js/issues/26#issuecomment-686285527"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg2NzY5NTc5Mg==",
                    "body": "What's the possible fix for this? I'm getting same `404` error on a Next.js app. I tried after `yarn build` but same. ",
                    "author": {
                        "login": "surjithctly"
                    },
                    "createdAt": "2021-06-24T14:46:18Z",
                    "url": "https://github.com/supabase/supabase-js/issues/26#issuecomment-867695792"
                },
                {
                    "id": "IC_kwDOD79Crs44CX8J",
                    "body": "I'm having the same behaviour with `update` method and I'm also using Next.js.\r\n\r\n```\r\n    let { data: profiles, error } = await supabase\r\n        .from(\"profiles\")\r\n        .select(\"*\")\r\n        .eq(\"id\", \"f4a2d4dd-4aec-4af6-8ba9-9556be7349c3\");\r\n```\r\n\r\nworks fine.\r\n\r\nBut this does not (404 error):\r\n\r\n```\r\n     let { data: profiles, error } = await supabase\r\n        .from(\"profiles\")\r\n        .update({ username })\r\n        .eq(\"id\", \"f4a2d4dd-4aec-4af6-8ba9-9556be7349c3\");\r\n```\r\n\r\nHaving a 404 error. The endpoint is `https://url.supabase.co/rest/v1/profiles?id=eq.f4a2d4dd-4aec-4af6-8ba9-9556be7349c3`\r\n",
                    "author": {
                        "login": "KevTale"
                    },
                    "createdAt": "2021-10-11T15:48:10Z",
                    "url": "https://github.com/supabase/supabase-js/issues/26#issuecomment-940146441"
                },
                {
                    "id": "IC_kwDOD79Crs44o9kc",
                    "body": "Same here. I'm using `\"@supabase/supabase-js\": \"^1.24.0\"` with Next.js.\r\n\r\n This works.\r\n\r\n```ts\r\nconst { data, error } = await supabase\r\n  .from('post_likes')\r\n  .select()\r\n  .match({ post_id: postId, account_id: accountId })\r\n```\r\n\r\n```\r\n// console.log(data)\r\n[\r\n    {\r\n        \"postId\": 1,\r\n        \"accountId\": 1,\r\n        \"read\": false\r\n    }\r\n]\r\n```\r\n\r\nBut this doesn't work.\r\n\r\n```ts\r\nconst { data, error } = await supabase\r\n  .from('post_likes')\r\n  .update({\r\n    read: true,\r\n  })\r\n  .match({ post_id: postId, account_id: accountId })\r\n```\r\n\r\n```\r\n// console.log(data, error)\r\nnull []\r\n```\r\n\r\nThe response status of `PUT /rest/v1/post_likes?post_id=eq.1&account_id=eq.1` is 404.\r\n\r\nGET and DELETE methods are ok.",
                    "author": {
                        "login": "KushibikiMashu"
                    },
                    "createdAt": "2021-10-24T05:14:56Z",
                    "url": "https://github.com/supabase/supabase-js/issues/26#issuecomment-950262044"
                },
                {
                    "id": "IC_kwDOD79Crs44o93Z",
                    "body": "I solved this problem by myself. There was something wrong with the update policy.\r\n\r\n```sql\r\ncreate policy \"Users can update their own like.\"\r\n  on comment_likes for update with check ( auth.role() = 'authenticated' );\r\n```\r\n\r\nI changed `with check` to `using`.\r\n\r\n```sql\r\ncreate policy \"Users can update their own like.\"\r\n  on comment_likes for update using ( auth.role() = 'authenticated' );\r\n```\r\n\r\nThen, `update` from JS works.",
                    "author": {
                        "login": "KushibikiMashu"
                    },
                    "createdAt": "2021-10-24T05:31:12Z",
                    "url": "https://github.com/supabase/supabase-js/issues/26#issuecomment-950263257"
                },
                {
                    "id": "IC_kwDOD79Crs45v_i-",
                    "body": "For anyone facing similar issues with other update queries, please note that\r\n\r\n- Existing table rows are checked against the expression specified in `USING`\r\n- New rows that would be created via `INSERT` or `UPDATE` are checked against the expression specified in `WITH CHECK`\r\n\r\nhttps://www.postgresql.org/docs/current/sql-createpolicy.html",
                    "author": {
                        "login": "AgarwalPragy"
                    },
                    "createdAt": "2021-11-15T12:54:56Z",
                    "url": "https://github.com/supabase/supabase-js/issues/26#issuecomment-968882366"
                },
                {
                    "id": "IC_kwDOD79Crs5Hh2aS",
                    "body": "@AgarwalPragy You mean INSERT or UPSERT, right? I thought that UPDATE cannot add a new row.",
                    "author": {
                        "login": "EskelCz"
                    },
                    "createdAt": "2022-07-30T01:07:11Z",
                    "url": "https://github.com/supabase/supabase-js/issues/26#issuecomment-1200055954"
                },
                {
                    "id": "IC_kwDOD79Crs5Hh3O9",
                    "body": "> @AgarwalPragy You mean INSERT or UPSERT, right? I thought that UPDATE cannot add a new row.\r\n\r\nThat is a little confusing actually. I just quoted the line direct from the postgres docs: https://www.postgresql.org/docs/current/sql-createpolicy.html\r\n\r\nIt explicitly says\r\n\r\n> ... while new rows that would be created via INSERT or UPDATE are checked against the expression specified in WITH CHECK ...\r\n\r\nProbably means \"rows that are created as a side effect of the update operation\" - in case of triggers for example.",
                    "author": {
                        "login": "AgarwalPragy"
                    },
                    "createdAt": "2022-07-30T01:25:08Z",
                    "url": "https://github.com/supabase/supabase-js/issues/26#issuecomment-1200059325"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU2ODkyODI1NjY=",
            "number": 27,
            "title": "SupabaseClient returned when `.select()` is not included on query",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen I do not include `.select('*')` on the query the SupabaseClient is returned and the request is not made. [The documentation says](https://supabase.io/docs/library/get#select): \"If not used, all columns in the table will be returned.\" so both should work based on that wording.\r\n\r\n### With select\r\n```\r\n  async getAll() {\r\n    const res = await SupabaseService\r\n      .from<InvitationQuestion>('invitation_question')\r\n\t  .select('*')\r\n      .eq('wedding_id', this.weddingId)\r\n    return res.body;\r\n  }\r\n```\r\n\r\nres result:\r\n![Screen Shot 2020-08-31 at 11 06 19 AM](https://user-images.githubusercontent.com/6392501/91735254-07588280-eb7a-11ea-902a-83c34f5a6a50.png)\r\n\r\n\r\n### Without select\r\n```\r\n  async getAll() {\r\n    const res = await SupabaseService\r\n      .from<InvitationQuestion>('invitation_question')\r\n      .eq('wedding_id', this.weddingId)\r\n    return res.body;\r\n  }\r\n```\r\n\r\nres result:\r\n![Screen Shot 2020-08-31 at 11 07 19 AM](https://user-images.githubusercontent.com/6392501/91735575-7c2bbc80-eb7a-11ea-8ade-7668a6f500f8.png)\r\n\r\n- Version of supabase-js: v0.36.4",
            "author": {
                "login": "zlwaterfield"
            },
            "state": "CLOSED",
            "createdAt": "2020-08-31T15:10:56Z",
            "closedAt": "2020-09-02T23:27:56Z",
            "url": "https://github.com/supabase/supabase-js/issues/27",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4NTcyMzUzMA==",
                    "body": "I think this one should be a docs edit.\r\n\r\nWe don't won't \"execute\" the command until we know whether the users is `select`ing, `update`ing, `delete`ing etc\r\n\r\nI'm guessing the \"If not used, all columns in the table will be returned\" is referring to not using the `columns` param. i.e.\r\n```\r\nawait SupabaseService\r\n      .from<InvitationQuestion>('invitation_question')\r\n\t  .select('*')\r\n      .eq('wedding_id', this.weddingId)\r\n      .select()\r\n```\r\n\r\nThe empty `.select()` should return all columns\r\n",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-09-02T13:07:16Z",
                    "url": "https://github.com/supabase/supabase-js/issues/27#issuecomment-685723530"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4NTc2Mjg3OA==",
                    "body": "Ah ok thanks, ya it might just be a document change needed. I can make a PR for that.",
                    "author": {
                        "login": "zlwaterfield"
                    },
                    "createdAt": "2020-09-02T14:10:34Z",
                    "url": "https://github.com/supabase/supabase-js/issues/27#issuecomment-685762878"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4NTc3MDM2Ng==",
                    "body": "PR: https://github.com/supabase/supabase/pull/174",
                    "author": {
                        "login": "zlwaterfield"
                    },
                    "createdAt": "2020-09-02T14:22:47Z",
                    "url": "https://github.com/supabase/supabase-js/issues/27#issuecomment-685770366"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4NjA5MTY3Ng==",
                    "body": "PR was merge.",
                    "author": {
                        "login": "zlwaterfield"
                    },
                    "createdAt": "2020-09-02T23:27:56Z",
                    "url": "https://github.com/supabase/supabase-js/issues/27#issuecomment-686091676"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4NjE1ODQxOQ==",
                    "body": "Thanks for the PR @zlwaterfield !",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-09-03T00:32:38Z",
                    "url": "https://github.com/supabase/supabase-js/issues/27#issuecomment-686158419"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU2OTAzNDk0NzU=",
            "number": 30,
            "title": "Supabase auth interface missing informiation",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nThe Supabase auth object has keys on it like the `accessToken`, `supabaseKey`, `authUrl`, etc. which are missing from the Typescript interface definition: https://github.com/supabase/supabase-js/blob/master/src/index.d.ts#L92\r\n\r\nExisting keys:\r\n```\r\n    signup: (email: string, password: string) => Promise<SupabaseAuthResponse>\r\n    login: (email: string, password: string) => Promise<SupabaseAuthResponse>\r\n    user: () => Promise<SupabaseAuthUser>\r\n    logout: () => Promise<void>\r\n```\r\n\r\nKeys to be added:\r\n```\r\n\taccessToken: string\r\n\tauthHeader: () => {\u2026}\r\n\tauthUrl: string\r\n\tautoRefreshToken: boolean\r\n\tcallRefreshToken: () => {\u2026}\r\n\tcurrentUser: SupabaseAuthUser\r\n\tpersistSession: boolean\r\n\trecoverSession: () => {\u2026}\r\n\trefreshToken: string\r\n\tremoveSavedSession: () => {\u2026}\r\n\tsaveSession: () => {\u2026}\r\n\tsupabaseKey: string\r\n```",
            "author": {
                "login": "zlwaterfield"
            },
            "state": "CLOSED",
            "createdAt": "2020-09-01T18:19:12Z",
            "closedAt": "2020-11-02T03:13:50Z",
            "url": "https://github.com/supabase/supabase-js/issues/30",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY5ODc1NzgwOA==",
                    "body": "FYI, this will be corrected when we integrate our new [gotrue-js library](https://github.com/supabase/gotrue-js)\r\n\r\nspec is being developed here: https://deploy-preview-210--supabase.netlify.app/ref/gotrue/signup/",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-09-25T06:55:05Z",
                    "url": "https://github.com/supabase/supabase-js/issues/30#issuecomment-698757808"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU2OTI2NjIxNjM=",
            "number": 31,
            "title": "chore: set up semantic releases",
            "body": "We should automate the releases, with fixes/breaking changes, and releasing to NPM",
            "author": {
                "login": "kiwicopple"
            },
            "state": "CLOSED",
            "createdAt": "2020-09-04T03:33:09Z",
            "closedAt": "2020-11-02T03:13:49Z",
            "url": "https://github.com/supabase/supabase-js/issues/31",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4NzIxMTEzMA==",
                    "body": "Next.js does a great job of this. Using GH actions you can run a release shell script like this: https://github.com/vercel/next.js/blob/canary/publish-release.sh, and auto-generate release messages: https://github.com/vercel/next.js/blob/canary/release.js",
                    "author": {
                        "login": "zlwaterfield"
                    },
                    "createdAt": "2020-09-04T15:13:00Z",
                    "url": "https://github.com/supabase/supabase-js/issues/31#issuecomment-687211130"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU2OTQwNDYzOTM=",
            "number": 32,
            "title": "Major DX change: response and error handling ",
            "body": "## Decision\r\n\r\nWe've decided to make a major change to support a better developer experience for working with supabase-js. Instead of throwing an error, we will return the error object as part of the response.\r\n\r\n## Example\r\n\r\nGiven a successful query, e.g. `const response = await supabase.from('products').select('*')`, `response` will be:\r\n\r\n```\r\n{\r\n  \"error\": null,\r\n  \"data\": [...],\r\n  \"status\": 200,\r\n  \"statusCode\": 200,\r\n  \"statusText\": \"\",\r\n  \"body\": [...] // for backwards compatibility: `body === data`\r\n}\r\n```\r\n\r\nGiven a bad query, e.g. `const response = await supabase.from('productx').select('*')`, `response` will be:\r\n\r\n```\r\n{\r\n  \"error\": {\r\n    \"code\": 404,\r\n    \"message\": \"relation \\\"public.productx\\\" does not exist\",\r\n    \"details\": null,\r\n    \"hint\": null\r\n  },\r\n  \"data\": null,\r\n  \"status\": 404,\r\n  \"statusCode\": 404,\r\n  \"statusText\": \"\",\r\n  \"body\": null // for backwards compatibility: `body === data`\r\n}\r\n```\r\n\r\n## Future DX\r\nThis will enable the following experience:\r\n\r\n```js\r\nconst { error, data: products } = await supabase.from('products').select('*')\r\nif (error) {\r\n  alert(error.message)\r\n  return // abort\r\n}\r\nconsole.log(`Found ${products.length} products.`)\r\n```\r\n\r\n## Additional context\r\n\r\nInspiration has been taken from https://github.com/vercel/swr#quick-start:\r\n\r\n```js\r\nimport useSWR from 'swr'\r\n\r\nfunction Profile() {\r\n  const { data, error } = useSWR('/api/user', fetcher)\r\n\r\n  if (error) return <div>failed to load</div>\r\n  if (!data) return <div>loading...</div>\r\n  return <div>hello {data.name}!</div>\r\n}\r\n```\r\n\r\nas well as Stripe.js : https://stripe.com/docs/js/payment_methods/create_payment_method\r\n![image](https://user-images.githubusercontent.com/5748289/92302379-51889c00-ef9e-11ea-8546-c64e38062ada.png)\r\n",
            "author": {
                "login": "thorwebdev"
            },
            "state": "CLOSED",
            "createdAt": "2020-09-05T09:37:20Z",
            "closedAt": "2020-11-02T03:13:49Z",
            "url": "https://github.com/supabase/supabase-js/issues/32",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4Nzc4MzU5NA==",
                    "body": "Does this error handling include [programmer errors](https://www.joyent.com/node-js/production/design/errors#operational-errors-vs-programmer-errors)? Say I pass a list to `match` where I expect an object, and I use `Object.keys` on it. Having to handle each and every kind of such exceptions in JS, with the appropriate error messages, is very painful IMO.\r\n\r\nFor the record, https://github.com/supabase/postgrest-js/pull/93 uses a fetch polyfill for the HTTP client, so there's no need to use the `data` field in place of `body`. Currently the error handling looks more like this, though we can shape it to your proposed format:\r\n\r\n```ts\r\nconst { ok, body: products } = await supabase.from('products').select('*')\r\nif (!ok) { // status code is not 2XX\r\n  alert(products.message) // PostgREST's error is stored in body (`T | T[] | PostgrestError`) in case of error\r\n  return // abort\r\n}\r\nconsole.log(`Found ${products.length} products.`)\r\n```",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2020-09-06T13:00:22Z",
                    "url": "https://github.com/supabase/supabase-js/issues/32#issuecomment-687783594"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY4ODAwMDEwNQ==",
                    "body": "> Does this error handling include programmer errors? \r\n\r\nI don't think this should be expected, just catch and rethrow unexpected errors. As you say, handling every possible error would be unwieldy. We should just shape expected errors.\r\n\r\n> so there's no need to use the data field in place of body.\r\n\r\nThis one is just a preference. I guess we should decide now what is the more appropriate name for the key. IMO `body` seems like a throwback to when we used ajax used to request HTML snippets that would be injected into HTML. \r\n\r\n> Currently the error handling looks more like this\r\n\r\n```\r\nif (!ok) { // status code is not 2XX\r\n  return // abort\r\n}\r\n```\r\n\r\nI'd far prefer this one to look like the suggested change (`if (error)`). The term `ok` is unexpected, and `error` is very clear\r\n\r\n",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-09-07T03:11:08Z",
                    "url": "https://github.com/supabase/supabase-js/issues/32#issuecomment-688000105"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDcwMDQ3NzQ3Mg==",
                    "body": "Tasks:\r\n\r\n- [x] Update `postgrest-js`\r\n- [x] Update `gotrue-js`\r\n- [ ] Update `realtime-js`\r\n- [ ] Update `supabase-js`\r\n  - [ ] Install new libs\r\n  - [ ] Change the realtime to work with one socket connection per client\r\n\r\n\r\nAlso solves:\r\n\r\n- [ ] Client & server side method for validating user auth token : https://github.com/supabase/supabase/issues/147\r\n- [ ] `supabase.auth.logout()` throws \"Invalid user\" error: https://github.com/supabase/supabase-js/issues/15",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-09-29T06:24:16Z",
                    "url": "https://github.com/supabase/supabase-js/issues/32#issuecomment-700477472"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDcwMzU4MDI5MQ==",
                    "body": "Are there plans to expose the `Content-Range` header in the response object?",
                    "author": {
                        "login": "stupidawesome"
                    },
                    "createdAt": "2020-10-05T11:48:25Z",
                    "url": "https://github.com/supabase/supabase-js/issues/32#issuecomment-703580291"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDcwNDA1OTA0OQ==",
                    "body": "@stupidawesome is there a use case for this? PostgREST [supports this](http://postgrest.org/en/v7.0.0/api.html#limits-and-pagination), but we haven't really considered having this in. If you just want the `COUNT`, there's an [open issue](https://github.com/supabase/postgrest-js/issues/94) for it.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2020-10-06T06:27:24Z",
                    "url": "https://github.com/supabase/supabase-js/issues/32#issuecomment-704059049"
                },
                {
                    "id": "IC_kwDOD79Crs4_QsZQ",
                    "body": "```\r\nconst { error, data: products } = await supabase.from('products').select('*')\r\nif (error) {\r\n  alert(error.message)\r\n  return // abort\r\n}\r\nconsole.log(`Found ${products.length} products.`)\r\n```\r\nDo i still need to use `try-catch` after using above pattern?",
                    "author": {
                        "login": "roker15"
                    },
                    "createdAt": "2022-03-08T02:25:16Z",
                    "url": "https://github.com/supabase/supabase-js/issues/32#issuecomment-1061340752"
                },
                {
                    "id": "IC_kwDOD79Crs4_Q26d",
                    "body": "You don't - if it throws it might be sign of a postgrest-js bug.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-03-08T04:06:04Z",
                    "url": "https://github.com/supabase/supabase-js/issues/32#issuecomment-1061383837"
                },
                {
                    "id": "IC_kwDOD79Crs4_RAW5",
                    "body": "> You don't - if it throws it might be sign of a postgrest-js bug.\r\n\r\nSo does supabase return network failure in `error `object? I think it does not. So what should i do then?",
                    "author": {
                        "login": "roker15"
                    },
                    "createdAt": "2022-03-08T05:32:02Z",
                    "url": "https://github.com/supabase/supabase-js/issues/32#issuecomment-1061422521"
                },
                {
                    "id": "IC_kwDOD79Crs4_RAqB",
                    "body": "I'm not sure about the other dependencies, but postgrest-js should return network failure in `error`. If not, can you create an issue in supabase/postgrest-js along with your client lib verison?",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-03-08T05:35:02Z",
                    "url": "https://github.com/supabase/supabase-js/issues/32#issuecomment-1061423745"
                },
                {
                    "id": "IC_kwDOD79Crs4_RwSQ",
                    "body": "```\r\nimport useSWR from 'swr'\r\n\r\nfunction Profile() {\r\n  const { data, error } = useSWR('/api/user', fetcher)\r\n\r\n  if (error) return <div>failed to load</div>\r\n  if (!data) return <div>loading...</div>\r\n  return <div>hello {data.name}!</div>\r\n}\r\n```\r\n**Here is the text from swr documentation -** \r\n**\r\n\r\n> \"If an error is thrown inside [fetcher](https://swr.vercel.app/docs/data-fetching), it will be returned as error by the hook.\" [here is link](https://swr.vercel.app/docs/error-handling#:~:text=English-,Error%20Handling,-If%20an%20error)\r\n\r\n**\r\nSo if supabase does not throw error and simply return `response `object how we will catch supabase error inside `swr`? \r\n\r\nWill following code work then? Because in following code supabase is not throwing error, so what will be error in following code?\r\n```\r\nconst { data, error } = useSWR(\r\n    subheadingId == undefined || userid == undefined\r\n      ? null\r\n      : [`/subheading/${subheadingId}/${userid}`],\r\n    async () =>\r\n      await supabase.rpc<SharedNotesList>(\"subheadingg\", {\r\n        subheadingid: subheadingId,\r\n        sharedwith: userid,\r\n      }),\r\n     );\r\n```",
                    "author": {
                        "login": "roker15"
                    },
                    "createdAt": "2022-03-08T10:17:42Z",
                    "url": "https://github.com/supabase/supabase-js/issues/32#issuecomment-1061618832"
                },
                {
                    "id": "IC_kwDOD79Crs4_Rx8Q",
                    "body": "If you want the `.rpc()` call to throw errors, you can use `.throwOnError()` (example: https://github.com/supabase/postgrest-js/blob/a972b993487fe99990a6be7995f0c6a2dc50b784/test/basic.ts#L136)",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-03-08T10:25:25Z",
                    "url": "https://github.com/supabase/supabase-js/issues/32#issuecomment-1061625616"
                },
                {
                    "id": "IC_kwDOD79Crs4_Rznh",
                    "body": "> If you want the `.rpc()` call to throw errors, you can use `.throwOnError()` (example: https://github.com/supabase/postgrest-js/blob/a972b993487fe99990a6be7995f0c6a2dc50b784/test/basic.ts#L136)\r\n\r\nI am not specific about rpc. take it as general supabase query and answer what i am asking please.",
                    "author": {
                        "login": "roker15"
                    },
                    "createdAt": "2022-03-08T10:32:55Z",
                    "url": "https://github.com/supabase/supabase-js/issues/32#issuecomment-1061632481"
                },
                {
                    "id": "IC_kwDOD79Crs4_R0UO",
                    "body": "This is not specific to `.rpc()`. You can use `.throwOnError()` on `.select()`, `.insert()`, etc. and it will throw errors instead of returning it in the response object. See the example I linked above.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-03-08T10:35:48Z",
                    "url": "https://github.com/supabase/supabase-js/issues/32#issuecomment-1061635342"
                },
                {
                    "id": "IC_kwDOD79Crs5E7Hb6",
                    "body": "Can we set this as a default behaviour **globally** via a parameter or smth? This is super unusual behaviour, as SDKs ussually throw errors, otherwise we have to add lots of additional checks around that which doesn't make sense.",
                    "author": {
                        "login": "n-sviridenko"
                    },
                    "createdAt": "2022-06-15T11:22:13Z",
                    "url": "https://github.com/supabase/supabase-js/issues/32#issuecomment-1156347642"
                },
                {
                    "id": "IC_kwDOD79Crs5dRo2V",
                    "body": "Throwing errors by default, or have that as an option on `createClient`, would be a great improvement for us too. We use a lot of rxjs with supabase and regular error throwing would make the whole process more logical. Now we have to remember to write `throwOnError` after every query, because otherwise the error will go silent",
                    "author": {
                        "login": "rienheuver"
                    },
                    "createdAt": "2023-05-26T20:22:47Z",
                    "url": "https://github.com/supabase/supabase-js/issues/32#issuecomment-1564904853"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU3MDk2ODE5Mzg=",
            "number": 44,
            "title": "Program doesn't terminate even after removing subscription",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nI would expect the program to terminate if there are no open realtime subscriptions. \r\n\r\n## To Reproduce\r\n\r\n```\r\nconst { createClient } = require(\"@supabase/supabase-js\");\r\nconst supabase = createClient(process.env.SUPABASE_URL, process.env.supabaseKey);\r\n\r\nconst res = supabase\r\n  .from(\"table\")\r\n  .on(\"*\", (payload) => {\r\n    console.log(\"Change received!\", payload);\r\n  })\r\n  .subscribe();\r\n\r\nsetTimeout(() => {\r\n  console.log(1), supabase.removeSubscription(res);\r\n}, 1000);\r\n```\r\n\r\n## Expected behavior\r\n\r\nI would expect that running this script would exit after the subscription has been removed. Looks like something is still pending in the event loop which prevents the program from exiting? \r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "inian"
            },
            "state": "CLOSED",
            "createdAt": "2020-09-27T06:52:14Z",
            "closedAt": "2021-08-04T01:22:16Z",
            "url": "https://github.com/supabase/supabase-js/issues/44",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDcwOTAyNDEzOA==",
                    "body": "I can replicate this, but I don't know how to resolve it - looking at the `websocket` module they listen to the `onclose` event then close everything:\r\n\r\nhttps://github.com/theturtle32/WebSocket-Node/blob/c91a6cb8f0cf896edf0d2d49faa0c9e0a9985172/test/unit/w3cwebsocket.js#L36\r\n\r\n```js\r\n    ws.onclose = function(event) {\r\n      t.equal(++counter, 3, 'onclose should be called last');\r\n      echoServer.kill();\r\n      t.end();\r\n    };\r\n```\r\n\r\nI am updating the library now, and this is how it would be handled:\r\n\r\n```js\r\nconst sub = supabase\r\n  .from('todos')\r\n  .on('*', (payload) => {\r\n    console.log('Change received!', payload)\r\n  })\r\n  .subscribe()\r\n\r\nsetTimeout(async () => {\r\n  let { error, data } = await supabase.removeSubscription(sub)\r\n  if (!error && data.openSubscriptions == 0) process.exit()\r\n}, 1000)\r\n```\r\n\r\nIf anyone wants to dig into the `websocket` module to see if there is a better approach that would be great, otherwise I think we will have to use this for now",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-10-15T09:11:46Z",
                    "url": "https://github.com/supabase/supabase-js/issues/44#issuecomment-709024138"
                },
                {
                    "id": "IC_kwDOD79Crs41AXNU",
                    "body": "@kiwicopple https://github.com/supabase/realtime-js/pull/99 fixes the root cause of this issue and removes the need to call `process.exit()`. Calling `disconnect()` on the subscription/client will remove the open handles, and `node` will exit on its own.",
                    "author": {
                        "login": "bermi"
                    },
                    "createdAt": "2021-07-29T16:24:13Z",
                    "url": "https://github.com/supabase/supabase-js/issues/44#issuecomment-889287508"
                },
                {
                    "id": "IC_kwDOD79Crs41Lz5G",
                    "body": "@kiwicopple @inian i think the main issue here, and was surfaced in @bermi's [PR](supabase/realtime-js#99), is the usage of `setInterval` for the `heartbeatTimer` while Phoenix's `phoenix.js`, used `setTimeout` even before the big refactor a few months ago (see: https://github.com/phoenixframework/phoenix/pull/4337/files#diff-67dd284a7a45ebff4d5bc22164d4dd84d64171872f1d508c56c3fcb74f5dd25aL1059). \r\n\r\nThe primary fix was by clearing the existing interval (see: https://github.com/supabase/realtime-js/pull/99/files#diff-f5a6b192eb9d6c05f61c33d8629b814ad893fbfb729bfa7af9b226e5c87d2e85R154).",
                    "author": {
                        "login": "w3b6x9"
                    },
                    "createdAt": "2021-08-04T01:31:16Z",
                    "url": "https://github.com/supabase/supabase-js/issues/44#issuecomment-892288582"
                },
                {
                    "id": "IC_kwDOD79Crs41L0If",
                    "body": "I think this issue was automatically closed but if this issue resurfaces then we can reopen.",
                    "author": {
                        "login": "w3b6x9"
                    },
                    "createdAt": "2021-08-04T01:33:56Z",
                    "url": "https://github.com/supabase/supabase-js/issues/44#issuecomment-892289567"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU3MTg5MTkxOTM=",
            "number": 49,
            "title": "When no `supabaseKey` is passed in it throws an error",
            "body": "# Chore\r\n\r\n## Describe the chore\r\nif `createClient` is called and the `supabaseKey` passed in is `null` or `undefined` then a non-specfic error thrown. This can happen if you make a call like this:\r\n``` \r\n    return createClient(\r\n      process.env.SUPABASE_URL,\r\n      process.env.SUPABASE_PUBLIC_KEY\r\n    );\r\n```\r\nand the env variable is empty.\r\n\r\nThe error is:\r\n```\r\nTypeError: Cannot read property 'length' of undefined\r\n    at SupabaseClient.initClient (/Users/zlwaterfield/programming/switch-log/node_modules/@supabase/supabase-js/lib/index.js:7:263)\r\n    at SupabaseClient.select (/Users/zlwaterfield/programming/switch-log/node_modules/@supabase/supabase-js/lib/index.js:7:920)\r\n    at CategoryRepository.findByLabel (webpack-internal:///./repositories/CategoryRepository.ts:12:54)\r\n    at LogEntry._findCategory (webpack-internal:///./services/LogEntryService.ts:86:42)\r\n    at LogEntry.timeStart (webpack-internal:///./services/LogEntryService.ts:17:31)\r\n    at __webpack_exports__.default (webpack-internal:///./pages/api/log.ts:11:31)\r\n    at apiResolver (/Users/zlwaterfield/programming/switch-log/node_modules/next/dist/next-server/server/api-utils.js:8:7)\r\n    at processTicksAndRejections (internal/process/task_queues.js:93:5)\r\n    at async DevServer.handleApiRequest (/Users/zlwaterfield/programming/switch-log/node_modules/next/dist/next-server/server/next-server.js:45:397)\r\n    at async Object.fn (/Users/zlwaterfield/programming/switch-log/node_modules/next/dist/next-server/server/next-server.js:37:176)\r\n```\r\n\r\nWe should add validation that the `supabaseKey` is passed in or at least fix [this](https://github.com/supabase/supabase-js/blob/33939998516e9325e207a63a8a3f10463e89aa41/src/index.js#L96) line so the error is better handled.",
            "author": {
                "login": "zlwaterfield"
            },
            "state": "CLOSED",
            "createdAt": "2020-10-11T20:19:58Z",
            "closedAt": "2020-11-02T03:13:49Z",
            "url": "https://github.com/supabase/supabase-js/issues/49",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDcwNjgzMDc2Mg==",
                    "body": "ah this is a great catch @zlwaterfield we should def add some validation here",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2020-10-12T03:09:56Z",
                    "url": "https://github.com/supabase/supabase-js/issues/49#issuecomment-706830762"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU3NDA2MjQ3MjI=",
            "number": 71,
            "title": "Add UMD build",
            "body": "# Chore\r\n\r\n## Describe the chore\r\n\r\nSee discussion: https://github.com/supabase/supabase/discussions/278#discussioncomment-125671\r\n\r\nI think we can do this with rollup: https://gist.github.com/jayphelps/51bafb4505558736fdba0aaf8bfe69d3\r\n\r\n",
            "author": {
                "login": "kiwicopple"
            },
            "state": "CLOSED",
            "createdAt": "2020-11-11T09:48:20Z",
            "closedAt": "2020-11-12T01:07:29Z",
            "url": "https://github.com/supabase/supabase-js/issues/71",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDcyNTMyMzg1MA==",
                    "body": "+1",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2020-11-11T09:52:52Z",
                    "url": "https://github.com/supabase/supabase-js/issues/71#issuecomment-725323850"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDcyNTc1NTIxMA==",
                    "body": "Fixed by @soedirgo : https://github.com/supabase/supabase-js/pull/72",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-11-12T01:07:29Z",
                    "url": "https://github.com/supabase/supabase-js/issues/71#issuecomment-725755210"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU3NTczMzkzNjQ=",
            "number": 89,
            "title": "supabase-js fails with @sveltejs/kit (warning, sveltejs/kit is experimental)",
            "body": "# Bug report\r\nadding\r\n```js\r\nimport { createClient } from '@supabase/supabase-js'\r\n```\r\ninto any script tag in a svelte project will cause a 500.\r\n\r\n## Describe the bug\r\nI believe this has to do with svelte kit renders being executed on both the server side and client side. It also appears to be related to the javascript parser they use ([meriyah](https://github.com/meriyah/meriyah)). Starting the project, and opening a page containing the supabase import results in the following error:\r\n```\r\n500\r\n[778:36]: Unexpected token: 'get'\r\n\r\nSyntaxError: [778:36]: Unexpected token: 'get'\r\n    at report (/home/andrew/Code/development/telebum3/web/node_modules/.pnpm/@sveltejs/kit@1.0.0-next.5/node_modules/node_modules/.pnpm/meriyah@3.0.3/node_modules/meriyah/dist/meriyah.esm.js:182:11)\r\n    at matchOrInsertSemicolon (/home/andrew/Code/development/telebum3/web/node_modules/.pnpm/@sveltejs/kit@1.0.0-next.5/node_modules/node_modules/.pnpm/meriyah@3.0.3/node_modules/meriyah/dist/meriyah.esm.js:2096:9)\r\n    at parseLetIdentOrVarDeclarationStatement (/home/andrew/Code/development/telebum3/web/node_modules/.pnpm/@sveltejs/kit@1.0.0-next.5/node_modules/node_modules/.pnpm/meriyah@3.0.3/node_modules/meriyah/dist/meriyah.esm.js:3024:9)\r\n    at parseStatementListItem (/home/andrew/Code/development/telebum3/web/node_modules/.pnpm/@sveltejs/kit@1.0.0-next.5/node_modules/node_modules/.pnpm/meriyah@3.0.3/node_modules/meriyah/dist/meriyah.esm.js:2595:20)\r\n    at parseBlock (/home/andrew/Code/development/telebum3/web/node_modules/.pnpm/@sveltejs/kit@1.0.0-next.5/node_modules/node_modules/.pnpm/meriyah@3.0.3/node_modules/meriyah/dist/meriyah.esm.js:2692:19)\r\n    at parseTryStatement (/home/andrew/Code/development/telebum3/web/node_modules/.pnpm/@sveltejs/kit@1.0.0-next.5/node_modules/node_modules/.pnpm/meriyah@3.0.3/node_modules/meriyah/dist/meriyah.esm.js:2958:19)\r\n    at parseStatement (/home/andrew/Code/development/telebum3/web/node_modules/.pnpm/@sveltejs/kit@1.0.0-next.5/node_modules/node_modules/.pnpm/meriyah@3.0.3/node_modules/meriyah/dist/meriyah.esm.js:2641:20)\r\n    at parseStatementListItem (/home/andrew/Code/development/telebum3/web/node_modules/.pnpm/@sveltejs/kit@1.0.0-next.5/node_modules/node_modules/.pnpm/meriyah@3.0.3/node_modules/meriyah/dist/meriyah.esm.js:2611:20)\r\n    at parseFunctionBody (/home/andrew/Code/development/telebum3/web/node_modules/.pnpm/@sveltejs/kit@1.0.0-next.5/node_modules/node_modules/.pnpm/meriyah@3.0.3/node_modules/meriyah/dist/meriyah.esm.js:3800:19)\r\n    at parseFunctionExpression (/home/andrew/Code/development/telebum3/web/node_modules/.pnpm/@sveltejs/kit@1.0.0-next.5/node_modules/node_modules/.pnpm/meriyah@3.0.3/node_modules/meriyah/dist/meriyah.esm.js:4389:18)\r\n```\r\n\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\nrepro repo: https://github.com/andykais/supabase-svelte-kit-bug-repro\r\n\r\n1. `npm install`\r\n2. `npm run dev`\r\n3. Go to `http://localhost:3000`\r\n4. See error\r\n\r\n## Expected behavior\r\n\r\nsupabase should ideally work in both the client and server environments of svelte kit.\r\n\r\n\r\n## Screenshots\r\nN/A\r\n\r\n## System information\r\n\r\n- OS: Linux, macOS\r\n- Browser: Firefox & Chrome\r\n- Version of supabase-js: 1.0.7\r\n- Version of Node.js: 14.15.1\r\n\r\n## Additional context\r\nNote: this is an error that is present in an _*experimental*_ web framework. It is therefore likely a result of this project not being fully featured. Still, this feels like it is worth tracking.\r\n\r\nI attempted dropping the supabase-js built files into the meriyah [online compiler](https://meriyah.github.io/meriyah/) to see if the errors were visible there. However it appeared to compile the js code without any issue. There may be specific knobs that svelte kit has tweaked which cause the `Unexpected token` error, but I am unsure.",
            "author": {
                "login": "andykais"
            },
            "state": "CLOSED",
            "createdAt": "2020-12-04T19:14:02Z",
            "closedAt": "2021-04-15T00:32:58Z",
            "url": "https://github.com/supabase/supabase-js/issues/89",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDczODk2NzM0OQ==",
                    "body": "on a related note, building the project (as opposed to running the dev server) results in this error:\r\n```\r\n andrew \ue0b0 sveltekit-supabase-bug \ue0b0 npm run build\r\n\r\n> sveltekit-supabase-bug@0.0.1 build /home/andrew/Code/development/sveltekit-supabase-bug\r\n> svelte-kit build\r\n\r\nTransforming...\r\n  \u2714 client\r\n  \u2714 server\r\nOptimizing...\r\n  \u29d7 client\r\n  \u29d7 server\r\n> 'process' is imported but could not be bundled\r\nError: 'process' is imported but could not be bundled\r\n    at error (/home/andrew/Code/development/sveltekit-supabase-bug/node_modules/rollup/dist/shared/rollup.js:5265:30)\r\n    at throwPluginError (/home/andrew/Code/development/sveltekit-supabase-bug/node_modules/rollup/dist/shared/rollup.js:17949:12)\r\n    at Object.error (/home/andrew/Code/development/sveltekit-supabase-bug/node_modules/rollup/dist/shared/rollup.js:18556:24)\r\n    at find_deps (/home/andrew/Code/development/sveltekit-supabase-bug/node_modules/@sveltejs/kit/src/api/build/index.js:164:13)\r\n    at /home/andrew/Code/development/sveltekit-supabase-bug/node_modules/@sveltejs/kit/src/api/build/index.js:159:11\r\n    at Array.forEach (<anonymous>)\r\n    at find_deps (/home/andrew/Code/development/sveltekit-supabase-bug/node_modules/@sveltejs/kit/src/api/build/index.js:154:17)\r\n    at get_deps (/home/andrew/Code/development/sveltekit-supabase-bug/node_modules/@sveltejs/kit/src/api/build/index.js:174:7)\r\n    at /home/andrew/Code/development/sveltekit-supabase-bug/node_modules/@sveltejs/kit/src/api/build/index.js:188:37\r\n    at Array.forEach (<anonymous>)\r\nnpm ERR! code ELIFECYCLE\r\nnpm ERR! errno 1\r\nnpm ERR! sveltekit-supabase-bug@0.0.1 build: `svelte-kit build`\r\nnpm ERR! Exit status 1\r\nnpm ERR! \r\nnpm ERR! Failed at the sveltekit-supabase-bug@0.0.1 build script.\r\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\r\n\r\nnpm ERR! A complete log of this run can be found in:\r\nnpm ERR!     /home/andrew/.npm/_logs/2020-12-04T19_14_36_594Z-debug.log\r\n```\r\nwhich seems to clearly be stating that it is attempting to bundle the built in nodejs module `process`  for the browser.",
                    "author": {
                        "login": "andykais"
                    },
                    "createdAt": "2020-12-04T19:16:11Z",
                    "url": "https://github.com/supabase/supabase-js/issues/89#issuecomment-738967349"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1NTEyMDI1OQ==",
                    "body": "Updated:\r\nThe issue context is [@supabase/gotrue-js](https://github.com/supabase/gotrue-js/blob/70ade224d7509a23a43e8f56ff0b0c02b4266a36/src/lib/constants.ts) using `process` to detect constants\r\n\r\n------------------------\r\n\r\nThe issue from `@sveltejs/kit` itself\r\n\r\nThey treat `process` as external package and prevent `snowpack:rollup-plugin-node-process-polyfill` handle it for the browser.\r\nFrom `@sveltejs/snowpack-config/snowpack.config.js`:\r\n```\r\n/* ... */\r\ninstallOptions: {\r\n  // ignore `import fs from 'fs'` etc\r\n  externalPackage: require('module').builtinModules  // NOTE: this include `process` package\r\n},\r\n/* ... */\r\n\r\n```\r\n\r\nMy workaround for @sveltejs/kit users:\r\n```\r\n// From your project snowpack.config.js, add this:\r\n// ...\r\ninstallOptions: {\r\n  externalPackage: require('module').builtinModules.filter(pkg_name => pkg_name !== \"process\")\r\n},\r\n// ...\r\n```\r\n\r\n_My English is not good_",
                    "author": {
                        "login": "utherpally"
                    },
                    "createdAt": "2021-01-06T06:52:05Z",
                    "url": "https://github.com/supabase/supabase-js/issues/89#issuecomment-755120259"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1NTI5NTg4Mg==",
                    "body": "Hey @langbamit  I just [released](https://github.com/supabase/supabase-js/releases/tag/v1.1.4) a new version. Can you please reinstall supabase `npm install @supabase/supabase-js@latest` and try again?",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-01-06T13:22:09Z",
                    "url": "https://github.com/supabase/supabase-js/issues/89#issuecomment-755295882"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1NTM3MDI0Nw==",
                    "body": "@kiwicopple, @langbamit thanks for your help. I just updated the deps to latest and added the suggested fix to my snowpack.config.js, I still see the same error.\r\n\r\n```bash\r\n andrew \ue0b0 sveltekit-supabase-bug \ue0b0 npm ls --depth=0\r\nsveltekit-supabase-bug@0.0.1 /home/andrew/Code/development/sveltekit-supabase-bug\r\n\u251c\u2500\u2500 @supabase/supabase-js@1.1.4\r\n\u251c\u2500\u2500 @sveltejs/adapter-node@1.0.0-next.0\r\n\u251c\u2500\u2500 @sveltejs/kit@1.0.0-next.17\r\n\u251c\u2500\u2500 @sveltejs/snowpack-config@1.0.0-next.0\r\n\u2514\u2500\u2500 svelte@3.31.2\r\n```\r\n\r\nI have updated the repro repo here https://github.com/andykais/supabase-svelte-kit-bug-repro",
                    "author": {
                        "login": "andykais"
                    },
                    "createdAt": "2021-01-06T15:34:31Z",
                    "url": "https://github.com/supabase/supabase-js/issues/89#issuecomment-755370247"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc2MTAxNzI2MA==",
                    "body": "`SyntaxError: [778:36]: Unexpected token: 'get'`\r\nThis issue related to https://github.com/meriyah/meriyah/issues/164 issue, which is fixed in v4.0.0.\r\nWe can't testing it by add `resolutions: { \"meriyah\": \"4.0.0\" }` to prepro repo, because `@sveltejs/kit` bundled this package inside their code (svelte-kit still in alpha state)\r\n\r\nI think we can close this issue now.",
                    "author": {
                        "login": "utherpally"
                    },
                    "createdAt": "2021-01-15T15:43:40Z",
                    "url": "https://github.com/supabase/supabase-js/issues/89#issuecomment-761017260"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgwMzU1MzMxNg==",
                    "body": "This issue should be closed and new issue made if it still persists with the open beta version of sveltekit. Should be noted that Sveltekit dropped Snowpack and use Vite instead (https://github.com/vitejs/vite)",
                    "author": {
                        "login": "msyyn"
                    },
                    "createdAt": "2021-03-21T10:50:20Z",
                    "url": "https://github.com/supabase/supabase-js/issues/89#issuecomment-803553316"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgwNzE1MTE3Mw==",
                    "body": "hi, yes there is still an issue with the public beta version of sveltekit (or more probably, vite)\r\n\r\nthis is the error that happens when i require supabase in an api route:\r\n\r\n```bash\r\n500\r\nENOENT: no such file or directory, open '/Users/swyx/Work/testbeds/trysveltething/fullstack-sveltekit/node_modules/@supabase/supabase-js/src/index.ts'\r\n\r\nError: ENOENT: no such file or directory, open '/Users/swyx/Work/testbeds/trysveltething/fullstack-sveltekit/node_modules/@supabase/supabase-js/src/index.ts'\r\n```\r\n\r\ni have no idea where the /src/index.ts reference comes from, it doesnt show up in the module's package.json....\r\n\r\n---\r\n\r\nupdate: looks like it's getting it from the sourcemap https://github.com/sveltejs/kit/issues/673",
                    "author": {
                        "login": "swyxio"
                    },
                    "createdAt": "2021-03-25T17:33:37Z",
                    "url": "https://github.com/supabase/supabase-js/issues/89#issuecomment-807151173"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgwOTM4NTE0Mw==",
                    "body": "FWIW -  installing as a dev dependency seems to resolve the issue in my SvelteKit project: `npm install -D @supabase/supabase-js`.",
                    "author": {
                        "login": "ixxie"
                    },
                    "createdAt": "2021-03-29T13:39:47Z",
                    "url": "https://github.com/supabase/supabase-js/issues/89#issuecomment-809385143"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxODY2MDI3NQ==",
                    "body": "Instead of your import, maybe:\r\n\r\n```\r\nimport _supabase from '@supabase/supabase-js';\r\nconst {createClient} = __supabase;\r\n```\r\n\r\n[Idea from here](https://redfin.engineering/node-modules-at-war-why-commonjs-and-es-modules-cant-get-along-9617135eeca1).",
                    "author": {
                        "login": "mankins"
                    },
                    "createdAt": "2021-04-13T11:24:02Z",
                    "url": "https://github.com/supabase/supabase-js/issues/89#issuecomment-818660275"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxODY2NTg2Ng==",
                    "body": "@mankins - unfortunately this doesn't seem to work, neither with `supabase-js` as a dev dependency nor as a prod dependency.",
                    "author": {
                        "login": "ixxie"
                    },
                    "createdAt": "2021-04-13T11:34:53Z",
                    "url": "https://github.com/supabase/supabase-js/issues/89#issuecomment-818665866"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxODY3OTY0Ng==",
                    "body": "I found [this note in the SvelteKit FAQ](https://github.com/sveltejs/kit/blob/0ce1b6e1703b6c71465e64cab00fd96acb8c6fa8/documentation/faq/70-packages.md) which may be relevant:\r\n\r\n>question: How do I fix the error I'm getting trying to include a package?\r\n>\r\n>Most of these issues come from Vite trying to deal with non-ESM libraries. You may find helpful examples in [the Vite issue tracker](https://github.com/vitejs/vite/issues). The most common solutions would be to try moving the package between `dependencies` and `devDependencies` or trying to `include` or `exclude` it in `optimizeDeps`. Packages which use `exports` instead of `module.exports` are currently failing due to a [known Vite issue](https://github.com/vitejs/vite/issues/2579). You should also consider asking the library author to distribute an ESM version of their package or even converting the source for the package entirely to ESM.\r\n>\r\n>You should also add any Svelte components to `ssr.noExternal`. [We hope to do this automatically in the future](https://github.com/sveltejs/kit/issues/904) by detecting the `svelte` field in a package's `package.json`.\r\n\r\nAs suggested, I just tried to `include` or `exclude` `@supabase/supabase-js`in `optimizeDeps` in my `svelte.config.cjs` under `vite` but this not only didn't work for prod, it also broke the previously working `npm run dev`.\r\n\r\nThat leads me to wonder if somewhere in the dependency tree, we need to ask some package maintainer to provide ESM support?",
                    "author": {
                        "login": "ixxie"
                    },
                    "createdAt": "2021-04-13T12:00:45Z",
                    "url": "https://github.com/supabase/supabase-js/issues/89#issuecomment-818679646"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxODc4NTA2Ng==",
                    "body": "This bug report is old. It's from when SvelteKit was built on top of Snowpack. SvelteKit is now built on Vite and meriyah was removed as part of that transition: https://github.com/sveltejs/kit/pull/409. I can't find meriyah in the SvelteKit dependencies anymore. Can you make sure you're using the latest version of SvelteKit? If so, and there's still an issue, can you share the new stack trace?",
                    "author": {
                        "login": "benmccann"
                    },
                    "createdAt": "2021-04-13T14:33:20Z",
                    "url": "https://github.com/supabase/supabase-js/issues/89#issuecomment-818785066"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxODc4ODAwNA==",
                    "body": "Oh, nevermind. I see the comment above that there was a new error: https://github.com/supabase/supabase-js/issues/89#issuecomment-807151173. But then I'm really confused because the next message says it's been fixed: https://github.com/supabase/supabase-js/issues/89#issuecomment-809385143\r\n\r\nI think we should probably file a new issue and close this one which has gotten quite muddled. I can't tell what issue exists if any",
                    "author": {
                        "login": "benmccann"
                    },
                    "createdAt": "2021-04-13T14:37:11Z",
                    "url": "https://github.com/supabase/supabase-js/issues/89#issuecomment-818788004"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxODgxMjczNQ==",
                    "body": "Yeah it seems a similar issue is happening in Vite; it has to do with the bundler managing a mixture of CSJ and ESM modules as far as I can tell. Someone mentioned this is a growing pain for these next generation build tools which leveral native ESM imports.\r\n\r\nI'll try and draft a new issue on this topic today still; I'm collecting as much info as I can to elucidate it.",
                    "author": {
                        "login": "ixxie"
                    },
                    "createdAt": "2021-04-13T15:09:27Z",
                    "url": "https://github.com/supabase/supabase-js/issues/89#issuecomment-818812735"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxOTMyNzc4Mw==",
                    "body": "If you're using SvelteKit's `adapter-node` or `adapter-static` you can use the trick of putting Supabase in `devDependencies` as a workaround. For everyone else I believe you will need Supabase's sourcemap to be fixed and this issue should be closed in favor of https://github.com/supabase/supabase-js/issues/153",
                    "author": {
                        "login": "benmccann"
                    },
                    "createdAt": "2021-04-14T08:17:20Z",
                    "url": "https://github.com/supabase/supabase-js/issues/89#issuecomment-819327783"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxOTUxMjMyMA==",
                    "body": "OK #153 is resolved now \ud83d\udc4d . Let me know if this one can also be closed",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-04-14T13:19:35Z",
                    "url": "https://github.com/supabase/supabase-js/issues/89#issuecomment-819512320"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxOTYwMDU3OA==",
                    "body": "Now that the sourcemap issue has been fixed we can see the real underlying error which is https://github.com/supabase/supabase-js/issues/155. I think this issue could be closed in favor of that one",
                    "author": {
                        "login": "benmccann"
                    },
                    "createdAt": "2021-04-14T15:18:02Z",
                    "url": "https://github.com/supabase/supabase-js/issues/89#issuecomment-819600578"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU3NTg5NzEzNDM=",
            "number": 92,
            "title": "add `unwrap()` method to supabase client",
            "body": "# Feature request\r\nadd an `unwrap()` method or a an either monad `left()` method to pull the data out of a postgrest response.\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nNot exactly a problem, but the way the client is designed requires every database query to individually handle database failures. For the most part, I want to assume that the query succeeded, and throw an error if it did not. That makes most of my db calls look like this:\r\n```ts\r\n  const res = await context.supabase\r\n    .from<tables['my_table']>('my_table')\r\n    .select()\r\n    .filter('status', 'eq', 'COMPLETED')\r\n    .limit(1)\r\n  if (res.error) throw new Error(`SupabaseError: query failed: \\n${res.error}`)\r\n```\r\n\r\n## Describe the solution you'd like\r\nThe solution I would like best, would be to add a method which can optionally unwrap the `{ error: object } | { data: object[] }` response from supabase into just the data field. If there is an error present, the client should throw an error. This should not break any existing workflows, its just an optional convenience method.\r\n\r\nUsage:\r\n```ts\r\nconst data: table['my_table'] = await supabase.from<table['my_table']>('my_table')\r\n  .select()\r\n  .unwrap()\r\n\r\n// handling an error:\r\ntry {\r\n  const data = await supabase.from('my_table').delete().unwrap()\r\n} catch (e) {\r\n  if (e.name === 'SupabaseError') {\r\n    // handle it\r\n  } else {\r\n    throw e\r\n  }\r\n}\r\n```\r\n\r\n## Describe alternatives you've considered\r\nI have attempted building this on top of the supabase client, but because of the way queries are built, I need to use proxies:\r\n```ts\r\n  const supabase_proxy_handler = {\r\n    get: function (target: any, prop: string) {\r\n      if (prop === 'unwrap') {\r\n        return new Promise((resolve, reject) => {\r\n          target.then((res: PostgrestResponse) => {\r\n            if (res.error) throw new Error(`SupabaseError: query failed: \\n${JSON.stringify(res.error)}`)\r\n            else return res.data\r\n          })\r\n        })\r\n      } else {\r\n        return target[prop]\r\n      }\r\n    },\r\n  }\r\n  const supabase_proxy = new Proxy(supabase, supabase_proxy_handler)\r\n```\r\nThis technically works, but manipulating the types to include the `unwrap()` method is harder.\r\n\r\n## Additional context\r\n`unwrap` is a common pattern in several languages & libraries. Here is an example in rust: https://doc.rust-lang.org/rust-by-example/error/option_unwrap.html\r\n",
            "author": {
                "login": "andykais"
            },
            "state": "CLOSED",
            "createdAt": "2020-12-08T01:04:01Z",
            "closedAt": "2021-06-12T01:48:15Z",
            "url": "https://github.com/supabase/supabase-js/issues/92",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1MDg5NTQ4MQ==",
                    "body": "Out of curiosity, why do all the calls return an error instead of rejecting the Promise? This seems like a very unusual pattern for Javascript/Typescript.",
                    "author": {
                        "login": "emschwartz"
                    },
                    "createdAt": "2020-12-24T14:18:53Z",
                    "url": "https://github.com/supabase/supabase-js/issues/92#issuecomment-750895481"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1MTg2OTI4MQ==",
                    "body": "@emschwartz they are rejecting the promise. This is async/await syntax, which can use try/catch blocks to catch rejected promises",
                    "author": {
                        "login": "andykais"
                    },
                    "createdAt": "2020-12-28T21:25:58Z",
                    "url": "https://github.com/supabase/supabase-js/issues/92#issuecomment-751869281"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1MTg3NDI4MQ==",
                    "body": "They are? I'm familiar with async/await syntax but all of the examples [here](https://supabase.io/docs/client/insert) show `data` and `error` in the object that the Promise resolves to:\r\n\r\n```ts\r\nconst { data, error } = await supabase\r\n  .from('cities')\r\n```\r\n\r\nAs as result, it seems like we need to write code like this:\r\n\r\n```ts\r\ntry {\r\n  const { data, error } = await supabase\r\n    .from('cities')\r\n  if (error) {\r\n    throw error\r\n  }\r\n} catch (err) {\r\n  // handle err\r\n}\r\n```\r\n\r\nIf the Promise were rejected instead of returning the error object, you could leave out the `if (error) { throw error }` bit.\r\n\r\n([This](https://github.com/supabase/postgrest-js/blob/master/src/lib/types.ts#L89) is the line I would expect to throw instead of returning)",
                    "author": {
                        "login": "emschwartz"
                    },
                    "createdAt": "2020-12-28T21:46:42Z",
                    "url": "https://github.com/supabase/supabase-js/issues/92#issuecomment-751874281"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1MTg5NjY1Mw==",
                    "body": "I understand your confusion now. If you look at my first message, the error is being thrown in the \"Describe the solution you'd like\" section. This is my suggestion on how an `unwrap` method should work. Above that I have an example of how the supabase client works currently, which is what you are describing.",
                    "author": {
                        "login": "andykais"
                    },
                    "createdAt": "2020-12-28T23:37:08Z",
                    "url": "https://github.com/supabase/supabase-js/issues/92#issuecomment-751896653"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1MTg5OTE4NA==",
                    "body": "Oh whoops, @andykais sorry for the misunderstanding. My question was actually about the library as it currently stands rather than your suggestion. \r\n\r\nI think your proposal seems like a reasonable way to improve the ergonomics without breaking backwards compatibility.\r\n\r\nIf there is going to be a major version change with breaking changes, I would vote for the pattern to be changed entirely so that all errors cause the Promise to be rejected.",
                    "author": {
                        "login": "emschwartz"
                    },
                    "createdAt": "2020-12-28T23:53:04Z",
                    "url": "https://github.com/supabase/supabase-js/issues/92#issuecomment-751899184"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1MjA5NDI5Mg==",
                    "body": "Hi @emschwartz - this is just a DX decision. We purposely chose to return errors rather than throw them. There is no right or wrong here, only preferences. We decided to return because (we believe) it is a nicer developer experience :) . I'm sorry you don't share the view - I didn't either until I started using it, so perhaps this library will change your mind",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-12-29T14:23:03Z",
                    "url": "https://github.com/supabase/supabase-js/issues/92#issuecomment-752094292"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1MjEwMzYzNQ==",
                    "body": "Hi @kiwicopple I hear that and could accept that it's just a different style choice if the Promise were guaranteed never to reject (because then you wouldn't need to wrap it in a try/catch). However, [this call to `fetch`](https://github.com/supabase/postgrest-js/blob/master/src/lib/types.ts#L77) can \"reject on network failure or if anything prevented the request from completing\" ([MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API#Differences_from_jQuery)), which means you need to handle the error in two places instead of one. Always wrapping it in a try/catch _and_ re-throwing the error returned seems worse than handling all types of errors in one way.\r\n\r\nAll of that said, I'm using your open source library so take my comments with a grain of salt :)",
                    "author": {
                        "login": "emschwartz"
                    },
                    "createdAt": "2020-12-29T14:45:35Z",
                    "url": "https://github.com/supabase/supabase-js/issues/92#issuecomment-752103635"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc3MTUzODA3Mw==",
                    "body": "I agree with @emschwartz, we end up try-catch'ing + checking for error in the returned object.\r\nIf the goal was to enhance the DX I think it should be harmonized (e.g catch thrown errors and put them in `res.error`).\r\n\r\nEdit: The auth part already does this (e.g [signUp](https://github.com/supabase/gotrue-js/blob/05aafdaf6c4a14d5ad56e9f6093d74ae4a3b8577/src/GoTrueClient.ts#L92-L111))",
                    "author": {
                        "login": "malobre"
                    },
                    "createdAt": "2021-02-02T10:32:12Z",
                    "url": "https://github.com/supabase/supabase-js/issues/92#issuecomment-771538073"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgwMjM0MTYyOQ==",
                    "body": "I do second this feature request.\r\n\r\nSince a database call isn't usually the only thing that's happening, I've found that I've often needed to double catch errors. For instance:\r\n\r\n```ts\r\ntry {\r\n    const { data, error } = await supabase.from('table').select('*')\r\n    if (error) throw new Error(error)\r\n\r\n    // do other post-processing\r\n} catch (error) {\r\n    // handle the errors\r\n}\r\n```\r\n\r\nThis is a short example, but it can get especially cumbersome when combining this with other API calls for other services. Here's a contrived example that should hopefully get the point across.\r\n\r\n```ts\r\ntry {\r\n    const [{ data, error }, fetchResponse, otherApiResponse] = await Promise.all([\r\n        supabase.from('table').select('*'),\r\n        fetch('https://example.com/api-endpoint'),\r\n        someOtherApiFunctionCall(),\r\n    ])\r\n    if (error) throw new Error(error)\r\n\r\n    // do other post-processing\r\n} catch (error) {\r\n    // handle the errors\r\n}\r\n```\r\n\r\nNotice how the Supabase error is handled differently from everything else?\r\n\r\nOr what if you don't use async/await, and you use then/catch. For instance, inside of a react useEffect hook, then/catch is preferred since you cannot use async/await directly in hook.\r\n\r\n```ts\r\nconst [posts, setPosts] = useState()\r\nconst [errorMessage, setErrorMessage] = useState('')\r\n\r\n// example with no error handling\r\nuseEffect(() => {\r\n    supabase\r\n        .from('posts')\r\n        .select('*')\r\n        .then(({ data }) => setPosts(data))\r\n}, [])\r\n\r\n// with error handling\r\nuseEffect(() => {\r\n    const getData = async () => {\r\n        const { data, error } = await supabase.from('posts').select('*')\r\n        if (error) setError(error)\r\n        else setPosts(data)\r\n    }\r\n    getData()\r\n}, [])\r\n\r\n// error handling if supabase unwrapped promises\r\nuseEffect(() => {\r\n    supabase\r\n        .from('posts')\r\n        .select('*')\r\n        .unwrap()\r\n        .then((data) => setPosts(data))\r\n        .catch((error) => setError(error))\r\n}, [])\r\n```\r\n\r\nI would argue that the unwrap option is the clearest option to read and write.\r\n\r\nI understand that this is a matter of opinion and not objective fact, but when a lot of JavaScript is built around being able to reject promises, I find it hard to believe that _not_ rejecting on errors is always better. At least having the option with `unwrap` I think is much better than the current schema.",
                    "author": {
                        "login": "Nick-Mazuk"
                    },
                    "createdAt": "2021-03-18T22:12:51Z",
                    "url": "https://github.com/supabase/supabase-js/issues/92#issuecomment-802341629"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg1NDExMDA2Nw==",
                    "body": "For what it's worth, the decision to return the error as a result rather than throw is described in #32. I opened a discussion about this some time ago asking pretty much the same thing as you, with a slightly (but not meaningfully) different take on it: https://github.com/supabase/supabase/discussions/604\r\n\r\nWe've found that we use both the `{ data, error } = supabase ...` pattern _and_ a variant of unwrap, so I'm not sure either way is strictly better and an `.unwrap()` modifier seems like a good way to go. What we do with our variant right now is (ironically) to wrap the query and throw if there's an error, like so:\r\n\r\n```javascript\r\ntry { \r\n  const data = await throwOnError(supabase ...)\r\n} catch (error) {\r\n  ...\r\n}\r\n```\r\n\r\nI'm gonna take a stab at a PR for this, because it's annoying me to no end. \ud83d\ude05",
                    "author": {
                        "login": "mstade"
                    },
                    "createdAt": "2021-06-03T19:09:14Z",
                    "url": "https://github.com/supabase/supabase-js/issues/92#issuecomment-854110067"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg1NDI5MzMyNw==",
                    "body": "Proposed implementation available in supabase/postgrest-js#188.",
                    "author": {
                        "login": "mstade"
                    },
                    "createdAt": "2021-06-04T01:39:27Z",
                    "url": "https://github.com/supabase/supabase-js/issues/92#issuecomment-854293327"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg1OTcyMDg3NA==",
                    "body": "I guess supabase/postgrest-js#188 doesn't technically fit the definition of the unwrap pattern described here, but more or less solves the problem anyway? Is it enough to close this issue, @andykais?",
                    "author": {
                        "login": "mstade"
                    },
                    "createdAt": "2021-06-11T17:05:28Z",
                    "url": "https://github.com/supabase/supabase-js/issues/92#issuecomment-859720874"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg1OTk3OTc1Mw==",
                    "body": "I would say it definitely covers my initial use case @mstade. Hats off to you! Thanks for putting in the time.",
                    "author": {
                        "login": "andykais"
                    },
                    "createdAt": "2021-06-12T01:48:02Z",
                    "url": "https://github.com/supabase/supabase-js/issues/92#issuecomment-859979753"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg2MDAzMDc2Ng==",
                    "body": "Happy to help! \ud83d\ude0a",
                    "author": {
                        "login": "mstade"
                    },
                    "createdAt": "2021-06-12T09:57:22Z",
                    "url": "https://github.com/supabase/supabase-js/issues/92#issuecomment-860030766"
                },
                {
                    "id": "IC_kwDOD79Crs5VgwKc",
                    "body": "OMG i just discovered that now, felt so annoyed by that as well, i tried to unwrap in SDK v2, but method seems not available how to use it in V2?",
                    "author": {
                        "login": "riderx"
                    },
                    "createdAt": "2023-02-17T13:25:58Z",
                    "url": "https://github.com/supabase/supabase-js/issues/92#issuecomment-1434649244"
                },
                {
                    "id": "IC_kwDOD79Crs5Vgwko",
                    "body": "Ok found it `.throwOnError()`",
                    "author": {
                        "login": "riderx"
                    },
                    "createdAt": "2023-02-17T13:27:35Z",
                    "url": "https://github.com/supabase/supabase-js/issues/92#issuecomment-1434650920"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU3NjAzMzAzNzA=",
            "number": 96,
            "title": "Compilation errors with TypeScript",
            "body": "# Improve documentation\r\n\r\n## Link \r\n\r\nhttps://supabase.io/docs/client/installing\r\n\r\n## Describe the problem\r\n\r\nHi, I wasn't sure whether to file this as a bug report or a documentation issue as I am not sure which it is.\r\n\r\nTypescript and Node really aren't my forte so sorry if this is something basic, but after running the install steps at the above link and then following the createClient example (https://supabase.io/docs/client/initializing) I run into the following compilation errors while compiling with Typescript:\r\n\r\n> node_modules/@supabase/gotrue-js/dist/main/GoTrueClient.d.ts:19:29 - error TS2304: Cannot find name 'Storage'.\r\n> 19     protected localStorage: Storage;\r\n\r\n> node_modules/@supabase/gotrue-js/dist/main/GoTrueClient.d.ts:38:24 - error TS2304: Cannot find name 'Storage'.\r\n> 38         localStorage?: Storage;\r\n\r\n> node_modules/@supabase/postgrest-js/dist/main/lib/types.d.ts:33:20 - error TS2304: Cannot find name 'URL'.\r\n> 33     protected url: URL;\r\n\r\n> node_modules/@supabase/supabase-js/dist/main/lib/SupabaseAuthClient.d.ts:11:24 - error TS2304: Cannot find name 'Storage'.\r\n> 11         localStorage?: Storage;\r\n\r\n> node_modules/@supabase/supabase-js/dist/main/lib/types.d.ts:27:20 - error TS2304: Cannot find name 'Storage'.\r\n27     localStorage?: Storage;\r\n\r\n\r\n## Describe the improvement\r\n\r\nIf there are additional steps required to work with Typescript, it would be nice if the documentation provided direction. Or if it already exists, maybe just a link on the installation page to the Typescript-specific documentation.\r\n\r\nThanks :-)\r\n",
            "author": {
                "login": "ohnv"
            },
            "state": "CLOSED",
            "createdAt": "2020-12-09T13:28:38Z",
            "closedAt": "2021-08-11T16:51:42Z",
            "url": "https://github.com/supabase/supabase-js/issues/96",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc0MjE0NzY2OQ==",
                    "body": "Hi @TheTrainor - this looks like it was due to some missing exports on our side.\r\n\r\n@calendee fixed it here: https://github.com/supabase/supabase-js/issues/97. Can you try to instlall the latest supabase version?\r\n\r\n`npm install @supabase/supabase@latest` \r\n\r\nthis should bump it to `v1.1.0` ",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-12-10T00:20:49Z",
                    "url": "https://github.com/supabase/supabase-js/issues/96#issuecomment-742147669"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc0MjE4MjMyNA==",
                    "body": "Unfortunately, I can't reproduce the problem even when I checkout the previous releases and build them. Hopefully I'm just doing something wrong though.\r\n\r\n@TheTrainor Did updating the `@supabase/supabase` package solve the problem? \ud83e\udd1e\r\n\r\nIf not, can you create a public repo that demonstrates the problem?\r\n\r\nThanks!",
                    "author": {
                        "login": "calendee"
                    },
                    "createdAt": "2020-12-10T01:55:57Z",
                    "url": "https://github.com/supabase/supabase-js/issues/96#issuecomment-742182324"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc0MjQzODQxMQ==",
                    "body": "Thanks for the help guys. \r\n\r\nIt turned out the problem was my tsconfig.json file:\r\n\r\n```\r\n\"compilerOptions\": {\r\n      \"experimentalDecorators\": true,\r\n      \"target\": \"ES2015\",\r\n      \"module\": \"commonjs\",\r\n      \"outDir\": \"../build\", \r\n      \"noEmit\": false,\r\n      \"sourceMap\": true,\r\n      \"lib\": [ //---\r\n        \"ES6\"  // Removing these 3 lines fixed the problem.\r\n      ]        //---\r\n    },\r\n```\r\n\r\nThanks for the quick response @kiwicopple and @calendee. I am looking forward to trying out Supabase properly.",
                    "author": {
                        "login": "ohnv"
                    },
                    "createdAt": "2020-12-10T10:41:05Z",
                    "url": "https://github.com/supabase/supabase-js/issues/96#issuecomment-742438411"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxMjcxODUxMA==",
                    "body": "Sorry for reopening this issue, but for anyone else having issues with this, ensure you have the following in your `tsconfig.json`\r\n\r\n```\r\n{\r\n  \"compilerOptions\": {\r\n    \"skipLibCheck\": true\r\n  },\r\n}\r\n```\r\n\r\nIt seems like there might still be some weirdness going on with the lib, but it's easy enough to fix with the above.",
                    "author": {
                        "login": "ChronSyn"
                    },
                    "createdAt": "2021-04-02T21:14:20Z",
                    "url": "https://github.com/supabase/supabase-js/issues/96#issuecomment-812718510"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg0MDM4Nzk4OQ==",
                    "body": "I think we should fix the type errors here.",
                    "author": {
                        "login": "inian"
                    },
                    "createdAt": "2021-05-13T07:52:30Z",
                    "url": "https://github.com/supabase/supabase-js/issues/96#issuecomment-840387989"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg0MjI4NDczMw==",
                    "body": "Not sure if we can fix this issue in the library itself. I fixed this by adding the \"DOM\" to tsconfig lib attribute in the project consuming supabase-js. \r\nThe AWS SDK seems to have the [same issue](https://github.com/aws/aws-sdk-js-v3/issues/2085) and they recommend adding dom types to your tsconfig file. ",
                    "author": {
                        "login": "inian"
                    },
                    "createdAt": "2021-05-17T12:28:51Z",
                    "url": "https://github.com/supabase/supabase-js/issues/96#issuecomment-842284733"
                },
                {
                    "id": "IC_kwDOD79Crs41dvMe",
                    "body": "Doesn't seem like there's a better alternative to adding `DOM` to `lib`, so closing this for now.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-08-11T16:51:42Z",
                    "url": "https://github.com/supabase/supabase-js/issues/96#issuecomment-896987934"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU3NjA0ODMyNDA=",
            "number": 97,
            "title": "Export types for use by downstream librarys",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nYes. Because the supabase-js does not export all types from the gotrue-js nor realtime-js libraries, client side developers cannot fully type their projects.\r\n\r\nFor example, you cannot do the following without these additional exports:\r\n\r\n```\r\nconst subscriptionRef = useRef<null | RealtimeSubscription>(null)\r\n```\r\n\r\nor \r\n\r\n```\r\n.on('*', (payload: SupabaseRealtimePayload<Todos>) => {\r\n```\r\n\r\nor\r\n\r\n```\r\nconst [supabase, setSupabase] = useState<undefined | SupabaseClient>()\r\n```\r\n\r\n## Describe the solution you'd like\r\n\r\nExport additional types for client side use\r\n\r\n## Describe alternatives you've considered\r\n\r\nNone\r\n\r\n## Additional context\r\n\r\nRelated: https://github.com/supabase/gotrue-js/issues/28.\r\n",
            "author": {
                "login": "calendee"
            },
            "state": "CLOSED",
            "createdAt": "2020-12-09T16:34:33Z",
            "closedAt": "2020-12-10T00:18:16Z",
            "url": "https://github.com/supabase/supabase-js/issues/97",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc0MjE0NjY0Mg==",
                    "body": "@calendee thanks for sorting this - `gotrue-js` was released on v1.9.0 \r\n\r\nhttps://github.com/supabase/gotrue-js/releases/tag/v1.9.0\r\n\r\nThis one is going out on v1.1.0.\r\n\r\n",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-12-10T00:18:01Z",
                    "url": "https://github.com/supabase/supabase-js/issues/97#issuecomment-742146642"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU3NzM5MTc3MDg=",
            "number": 109,
            "title": "Provider login refreshes page after callback?",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen calling the `supabase.auth.signIn({ provider })` method, after the provider redirect, the response payload returns to the login page, but a sudden page refresh occurs, causing the response to result in a null state. It does not happen when the grant_type is password, only when trying to use a provider login. The local storage session is properly set.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Go to https://github.com/Anstroy/alacena-vue-3.git\r\n2. Clone the repo and install dependencies and add supabase url and key \r\n3. Start repo using yarn serve\r\n4. Try logging in using a provider. \r\n5. Take a look at the console. The console.log within `services/supabase` login function should output the response, but you will see it outputs the response then suddenly swaps to null, due to what seems like a sudden page refresh. \r\n\r\n## Expected behavior\r\n\r\nResponse from callback should return to the callback URL and a page refresh after the site has returned should not occur?\r\n\r\n## Screenshots\r\n\r\nWill work on getting screenshots.\r\n\r\n## System information\r\n\r\n- OS: Windows\r\n- Browser (if applies) Brave\r\n- Version of supabase-js: latest\r\n- Version of Node.js: 12.18.3\r\n",
            "author": {
                "login": "xavidram"
            },
            "state": "CLOSED",
            "createdAt": "2020-12-23T16:29:00Z",
            "closedAt": "2020-12-29T21:16:08Z",
            "url": "https://github.com/supabase/supabase-js/issues/109",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1MDM3Nzc0NQ==",
                    "body": "> a sudden page refresh occurs\r\n\r\nHey @ykdojo - are you seeing this behaviour in your Vue app?",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-12-23T16:36:43Z",
                    "url": "https://github.com/supabase/supabase-js/issues/109#issuecomment-750377745"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1MTE5ODgxOA==",
                    "body": "The reason I want to catch the response from the authorization is to set the reactive state. And the login page has a route guard to prevent authenticated users to access the login page. When the call returns from the 3rd party login page, it returns to the login page, which does not have a user loaded into the reactive state. My work around for now is to check the localstorage for the session and shove it into the state at that point and time if it gets back to the login page.",
                    "author": {
                        "login": "xavidram"
                    },
                    "createdAt": "2020-12-25T07:39:11Z",
                    "url": "https://github.com/supabase/supabase-js/issues/109#issuecomment-751198818"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1MTU1OTM1Nw==",
                    "body": "@kiwicopple when I log in using an OAuth provider (GitHub) on our Vue to-do example app, I do see the login page being shown for a split second after the redirect - but I'm not sure if it's the same thing as what @xavidram described here.\r\n\r\n@xavidram -  I tried reproducing your bug, but it seems like you've made some changes to your codebase since you filed this issue here - could you tell me which commit I can reproduce this bug on?",
                    "author": {
                        "login": "ykdojo"
                    },
                    "createdAt": "2020-12-28T03:15:24Z",
                    "url": "https://github.com/supabase/supabase-js/issues/109#issuecomment-751559357"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1MjI0MzUxMw==",
                    "body": "@ykdojo The current commit should produce the same issue. On login, the provider redirects me to the Github page, then redirects me back. \r\n\r\nThe route guard doesn't seem to protect the route on return from the provider callback. So I need to sit and tinker with it some more. I am going to close this issue. I need to find a workaround for collecting the authenticated payload from the providers, and do some handling on my end.\r\n",
                    "author": {
                        "login": "xavidram"
                    },
                    "createdAt": "2020-12-29T21:16:08Z",
                    "url": "https://github.com/supabase/supabase-js/issues/109#issuecomment-752243513"
                },
                {
                    "id": "IC_kwDOD79Crs40iOLA",
                    "body": "@xavidram do you remember any solution to this? ",
                    "author": {
                        "login": "seenickcode"
                    },
                    "createdAt": "2021-07-16T11:42:55Z",
                    "url": "https://github.com/supabase/supabase-js/issues/109#issuecomment-881386176"
                },
                {
                    "id": "IC_kwDOD79Crs40jixj",
                    "body": "No. I never got it to work so I just built my own auth server for the project.",
                    "author": {
                        "login": "xavidram"
                    },
                    "createdAt": "2021-07-16T21:38:21Z",
                    "url": "https://github.com/supabase/supabase-js/issues/109#issuecomment-881732707"
                },
                {
                    "id": "IC_kwDOD79Crs40rZr7",
                    "body": "Ok thanks.",
                    "author": {
                        "login": "seenickcode"
                    },
                    "createdAt": "2021-07-21T00:26:24Z",
                    "url": "https://github.com/supabase/supabase-js/issues/109#issuecomment-883792635"
                },
                {
                    "id": "IC_kwDOD79Crs5lKqiI",
                    "body": "I actually just dealt with this today. It was a heck of a pain to debug. Turns out it is mostly harmless to the user, and I am keeping it as a feature for now.",
                    "author": {
                        "login": "th-m"
                    },
                    "createdAt": "2023-08-29T11:52:23Z",
                    "url": "https://github.com/supabase/supabase-js/issues/109#issuecomment-1697294472"
                },
                {
                    "id": "IC_kwDOD79Crs5op2Ge",
                    "body": "some issue (only) with supabase.auth.signInWithOAuth({provider}) ---> i m working with next js and PKCE",
                    "author": {
                        "login": "Pfurr"
                    },
                    "createdAt": "2023-10-10T16:30:18Z",
                    "url": "https://github.com/supabase/supabase-js/issues/109#issuecomment-1755799966"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU3NzcxOTAyMjc=",
            "number": 111,
            "title": "ignore",
            "body": "",
            "author": {
                "login": "vdaita"
            },
            "state": "CLOSED",
            "createdAt": "2021-01-01T04:03:38Z",
            "closedAt": "2021-01-05T18:20:14Z",
            "url": "https://github.com/supabase/supabase-js/issues/111",
            "comments": []
        },
        {
            "id": "MDU6SXNzdWU3NzgyMjAxNjA=",
            "number": 113,
            "title": "Uncaught ReferenceError: process is not defined",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nUsing Angular, creating the client produce this error on the console: `Uncaught ReferenceError: process is not defined`\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Create Angular project\r\n2. Install supabase-js\r\n3. Create angular service\r\n4. Import createClient with supabase-js on top of the newly created service\r\n5. Add that on top of the file, after the import `const supabase = createClient('yoururl', 'yourkey')`\r\n6. Link service to component\r\n7. See result in console\r\n\r\n## Expected behavior\r\n\r\nNo errors should happen\r\n\r\n## System information\r\n\r\n- OS: MacOS Big Sur\r\n- Browser (if applies) Firefox\r\n- Version of supabase-js: v1.1.3\r\n- Version of Node.js: v12.18.3\r\n",
            "author": {
                "login": "Penkie"
            },
            "state": "CLOSED",
            "createdAt": "2021-01-04T16:43:31Z",
            "closedAt": "2021-01-20T15:27:17Z",
            "url": "https://github.com/supabase/supabase-js/issues/113",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1NDg4MjI5Nw==",
                    "body": "I think this may have been fixed by https://github.com/supabase/gotrue-js/pull/37 What version of `gotrue-js` is it pulling in?",
                    "author": {
                        "login": "emschwartz"
                    },
                    "createdAt": "2021-01-05T20:32:44Z",
                    "url": "https://github.com/supabase/supabase-js/issues/113#issuecomment-754882297"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1NTI5NDgxNA==",
                    "body": ":tada: This issue has been resolved in version 1.1.4 :tada:\n\nThe release is available on:\n- [npm package (@latest dist-tag)](https://www.npmjs.com/package/@supabase/supabase-js/v/1.1.4)\n- [GitHub release](https://github.com/supabase/supabase-js/releases/tag/v1.1.4)\n\nYour **[semantic-release](https://github.com/semantic-release/semantic-release)** bot :package::rocket:",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-01-06T13:19:58Z",
                    "url": "https://github.com/supabase/supabase-js/issues/113#issuecomment-755294814"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1NTQ2MDE1Nw==",
                    "body": "I updated supabase-js to 1.1.4 and checked that gotrue-js is 1.9.3 (wich is the case) and I'm still having this issue",
                    "author": {
                        "login": "Penkie"
                    },
                    "createdAt": "2021-01-06T17:58:27Z",
                    "url": "https://github.com/supabase/supabase-js/issues/113#issuecomment-755460157"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1NTQ2NDExNw==",
                    "body": "OK thanks for the update @Penkie . Reopening to investigate ..",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-01-06T18:05:50Z",
                    "url": "https://github.com/supabase/supabase-js/issues/113#issuecomment-755464117"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1NTQ2NjE0Mw==",
                    "body": "> 1. Create Angular project\r\n> 3. Create angular service\r\n\r\nCould you please set this up on codesandbox or give some instructions? I've never used angular, this would probably take me an hour to figure out. Even better if you can start ad branch with an`angular-todo-list` in our [examples](https://github.com/supabase/supabase/tree/master/examples). That would be massively helpful for the community (but not necessary, I just need a way to debug this)",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-01-06T18:09:29Z",
                    "url": "https://github.com/supabase/supabase-js/issues/113#issuecomment-755466143"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1NTUyMDQ4MA==",
                    "body": "I tried with stackblitz, no problem I didn't have any errors. Tried also on codesandbox, loads of problems, maybe the dependencies not working. Anyway I created a repo with the Angular project inside : https://github.com/Penkie/supabase-js-debug-angular\r\nYou can check there\r\nNote that I did not create any service (like I mentionned up there that you have to, but actually no you don't), so everything is on `app.component.ts` ",
                    "author": {
                        "login": "Penkie"
                    },
                    "createdAt": "2021-01-06T18:58:54Z",
                    "url": "https://github.com/supabase/supabase-js/issues/113#issuecomment-755520480"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1NzM4OTg2Nw==",
                    "body": "For what it's worth, I'm having the same issue in a svelte/sapper app. For now, I'm bypassing the error with `window.process = window.process || null` in the page's script. It's not exactly ideal, but for now I can move on :)\r\n\r\nI've setup a basic repro repo at https://github.com/laurentS/supabase-bug-repro-113\r\nto reproduce:\r\n- clone the repo\r\n- yarn install\r\n- yarn run dev\r\n- open the landing page (should be http://localhost:3000) and watch the error message appear after a few milliseconds\r\n\r\nAll it takes is importing the supabase client (see the last commit in the main branch).\r\nHope this helps!\r\n",
                    "author": {
                        "login": "laurentS"
                    },
                    "createdAt": "2021-01-10T00:29:08Z",
                    "url": "https://github.com/supabase/supabase-js/issues/113#issuecomment-757389867"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1ODMwOTk4MA==",
                    "body": "Looks like gotrue-js is using `process.env`, which makes it non-isomorphic. https://github.com/supabase/gotrue-js/pull/37 moves the problem to the bundler (Rollup) instead, which wasn't able to match-replace `process.env`. So if you add `\"process\": undefined` in the Rollup replace plugin in laurentS's example above, the app works.\r\n\r\nCan we maybe refactor gotrue-js to use e.g. default parameters when initializing the client instead?",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-01-12T00:24:09Z",
                    "url": "https://github.com/supabase/supabase-js/issues/113#issuecomment-758309980"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1ODc3NzE3Ng==",
                    "body": "Error report from @thorwebdev \r\nour unpkg build (https://unpkg.com/@supabase/supabase-js@1.1.4/dist/umd/supabase.js) is erroring\r\n![image](https://user-images.githubusercontent.com/2155545/104343328-c49ab400-5536-11eb-860f-a8e6fe8f2924.png)\r\n",
                    "author": {
                        "login": "inian"
                    },
                    "createdAt": "2021-01-12T16:32:17Z",
                    "url": "https://github.com/supabase/supabase-js/issues/113#issuecomment-758777176"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1OTEyMjYwNw==",
                    "body": "Hey @soedirgo - just checking on [this commit](https://github.com/supabase/supabase-js/commit/446f672649e2f0df4249c6feea63a11bc9dbf34c#diff-1fb26bc12ac780c7ad7325730ed09fc4c2c3d757c276c3dacc44bfe20faf166fR28-R34)\r\n\r\nparticularly these lines:\r\n\r\n```\r\n    new webpack.DefinePlugin({\r\n      'process.env.GOTRUE_URL': undefined,\r\n      'process.env.AUDIENCE': undefined,\r\n      'process.env.EXPIRY_MARGIN': undefined,\r\n      'process.env.STORAGE_KEY': undefined,\r\n    }),\r\n```\r\n\r\nIs there a webpack plugin that can fix this issue for browser builds? Maybe [this](https://stackoverflow.com/a/64553486/8677079)?",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-01-13T00:27:27Z",
                    "url": "https://github.com/supabase/supabase-js/issues/113#issuecomment-759122607"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1OTEyNjQ4OA==",
                    "body": "Huh, I don't remember adding those... let me try that.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-01-13T00:39:41Z",
                    "url": "https://github.com/supabase/supabase-js/issues/113#issuecomment-759126488"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1OTEzOTA5MQ==",
                    "body": "Hey @Penkie, can you update the supabase-js client and see if it works now? I tried @laurentS's Sapper app with the update and saw no issue.\r\n\r\nEdit: my bad, it's still not working. Give me a moment.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-01-13T01:16:30Z",
                    "url": "https://github.com/supabase/supabase-js/issues/113#issuecomment-759139091"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1OTE0MjgwMA==",
                    "body": "So using the Webpack plugin above wouldn't fix it, because it only affects the browser build that's in `dist/umd`. So the change needs to be in the user's bundler config.\r\n\r\n@kiwicopple is there a specific reason to use `process.env` in gotrue-js? Looks like it's only used as default options for the client. Otherwise I can make a quick PR to fix this.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-01-13T01:27:50Z",
                    "url": "https://github.com/supabase/supabase-js/issues/113#issuecomment-759142800"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1OTE1MzcxOQ==",
                    "body": "> is there a specific reason to use process.env in gotrue-js\r\n\r\nThat was just as a convenience, but looks like it's problematic. How are these usually handled in isomorphic libs? Using dotenv?",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-01-13T02:01:56Z",
                    "url": "https://github.com/supabase/supabase-js/issues/113#issuecomment-759153719"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1OTE2NzgxNw==",
                    "body": "I don't think libraries in general use `process.env`, only apps. *Maybe* it's possible to use Webpack for all 3 builds, but that's an antipattern (bundling should be done by end-user apps, not libraries), and more trouble than it's worth, IMO.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-01-13T02:46:54Z",
                    "url": "https://github.com/supabase/supabase-js/issues/113#issuecomment-759167817"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc2MzIzOTgxMw==",
                    "body": "For another data point, I was running into a similar issue, and applied the fix you put up in https://github.com/supabase/gotrue-js/pull/42 locally, and it resolved the issue.",
                    "author": {
                        "login": "jhoch"
                    },
                    "createdAt": "2021-01-20T00:29:04Z",
                    "url": "https://github.com/supabase/supabase-js/issues/113#issuecomment-763239813"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc2MzI4NTk3MA==",
                    "body": "OK , just pushing the new version - I'll keep it open this time until we've confirmed that it's resolved ",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-01-20T02:32:31Z",
                    "url": "https://github.com/supabase/supabase-js/issues/113#issuecomment-763285970"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc2MzI5MjkyNg==",
                    "body": ":tada: This issue has been resolved in version 1.3.2 :tada:\n\nThe release is available on:\n- [npm package (@latest dist-tag)](https://www.npmjs.com/package/@supabase/supabase-js/v/1.3.2)\n- [GitHub release](https://github.com/supabase/supabase-js/releases/tag/v1.3.2)\n\nYour **[semantic-release](https://github.com/semantic-release/semantic-release)** bot :package::rocket:",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-01-20T02:53:45Z",
                    "url": "https://github.com/supabase/supabase-js/issues/113#issuecomment-763292926"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc2MzI5NzkwNw==",
                    "body": "Should be working now, when trying laurentS's example above make sure to `yarn upgrade` first. Let us know if it works for y'all!",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-01-20T03:07:55Z",
                    "url": "https://github.com/supabase/supabase-js/issues/113#issuecomment-763297907"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc2MzUzOTgwMg==",
                    "body": "Updating to `1.3.2` did fix the problem for me.",
                    "author": {
                        "login": "malobre"
                    },
                    "createdAt": "2021-01-20T11:28:54Z",
                    "url": "https://github.com/supabase/supabase-js/issues/113#issuecomment-763539802"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc2MzcwOTI3NQ==",
                    "body": "thanks for the patience everyone! We're super busy, so a bit slow getting to some of these items. I'll close this, and feel free to reopen if you have any issues\r\n\r\nAnd thanks for checking out Supabase \u26a1 ",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-01-20T15:27:17Z",
                    "url": "https://github.com/supabase/supabase-js/issues/113#issuecomment-763709275"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU3ODc1NjY1NzA=",
            "number": 120,
            "title": "Instantiating supabase from unpkg stopped working",
            "body": "# Bug report\r\n\r\nInstantiating supabase from unpkg stopped working.\r\n\r\n## Describe the bug\r\n\r\nBelow results in `Cannot read 'createClient' of undefined`. It used to work.\r\n\r\n```\r\n<script src=\"https://unpkg.com/@supabase/supabase-js\"></script>\r\n<script>\r\n    const supabaseUrl = 'my supabase url'\r\n    const supabaseAnonKey = 'my anon key'\r\n    var supabase = supabase.createClient(supabaseUrl, supabaseAnonKey)\r\n</script>\r\n```\r\n\r\n## Expected behavior\r\n\r\nIt is expected that the above code or a similar construct will work. Maybe the API changed?\r\n",
            "author": {
                "login": "richcorbs"
            },
            "state": "CLOSED",
            "createdAt": "2021-01-16T22:34:00Z",
            "closedAt": "2021-01-18T17:51:12Z",
            "url": "https://github.com/supabase/supabase-js/issues/120",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc2MjM5NDA2Mw==",
                    "body": "Hi @richcorbs. this is a duplicate of https://github.com/supabase/supabase-js/issues/113#issuecomment-758777176. Tracking it in that issue",
                    "author": {
                        "login": "inian"
                    },
                    "createdAt": "2021-01-18T17:51:12Z",
                    "url": "https://github.com/supabase/supabase-js/issues/120#issuecomment-762394063"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU3ODc2NjAyNjk=",
            "number": 122,
            "title": "Row level query subscription not listening to deletes.",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nRealtime subscription of row level query is not able to listen to changes of type `delete`\r\n\r\n## To Reproduce\r\n\r\nHere is a snippet of my code:\r\n```\r\nsupabase.from(`posts:author=eq.${user.id}`)\r\n        .on('*', (payload) => {\r\n          console.log('changes: ', payload)\r\n          fetchNewPosts();\r\n        })\r\n        .subscribe()\r\n```\r\n\r\n## Expected behavior\r\n\r\nIt should be able to listen to all types of changes. But it only works for `INSERT` and `UPDATE`.\r\n\r\n## Screenshots\r\n\r\nNone.\r\n\r\n## System information\r\n\r\n- OS: Windows\r\n- Browser: chrome\r\n- Version of supabase-js: 1.2.1\r\n- Version of Node.js: v15..0.1\r\n\r\n## Additional context\r\n\r\nNone.\r\n",
            "author": {
                "login": "VaibhavAcharya"
            },
            "state": "CLOSED",
            "createdAt": "2021-01-17T08:41:32Z",
            "closedAt": "2021-01-18T11:56:14Z",
            "url": "https://github.com/supabase/supabase-js/issues/122",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc2MTc3ODk0MA==",
                    "body": "I researched more and found out that this issue has been fixed in @supabase/realtime `v0.7.11`.\r\nWhen is this dependency expected to be updated here?\r\nIt has been quite a time since that fix was released.\ud83d\ude05",
                    "author": {
                        "login": "VaibhavAcharya"
                    },
                    "createdAt": "2021-01-17T11:23:58Z",
                    "url": "https://github.com/supabase/supabase-js/issues/122#issuecomment-761778940"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc2MjIwMjU5Mg==",
                    "body": "Hi @VaibhavAcharya, this is already released, but I imagine you are missing the \"full\" replication:\r\n\r\nhttps://supabase.io/docs/client/subscribe#listening-to-deletes\r\n\r\nyou will need to run this to listen to deletes: `alter table \"your_table\" replica identity full;`\r\n\r\nI'll close this now but feel free to reopen if it's a bug on our side",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-01-18T11:56:14Z",
                    "url": "https://github.com/supabase/supabase-js/issues/122#issuecomment-762202592"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU3ODc4MzM1ODc=",
            "number": 123,
            "title": "Problem running javascript-auth example",
            "body": "# Bug report\r\n\r\nI'm trying to recreate the javascript-auth example.  I copied all of the files from the directory and added my supabase URL and supabase key where indicated.\r\n\r\nWhen I run the repo with `npm run dev`, the local page loads with two errors:\r\n\r\n* Uncaught ReferenceError: process is not defined\r\n* Uncaught ReferenceError: Supabase is not defined\r\n\r\nWhen I try entering an email address and password to create a user, the page refreshes with the email and password values in the URL, although no user is created in my Supabase project and no email is received on the email address indicated\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Clone the javascript-auth folder\r\n2. In index.js, add the Supabase URL and Supabase key where indicated \r\n3. On terminal, run `npm run dev'\r\n4. When the local page loads, in the Sign Up section, an email address and password and click the \"submit query\" button\r\n5. See error\r\n\r\n## Expected behavior\r\n\r\nI expected:\r\n\r\n1. To receive a visual confirmation on the page of the submitted query\r\n2. To receive an email confirmation at the email address indicated\r\n3. To see a new user created in my Supabase project\r\n\r\n## Screenshots\r\n\r\n### This is what I'm seeing on page load\r\n<img width=\"1297\" alt=\"Screen Shot 2021-01-17 at 7 21 16 PM\" src=\"https://user-images.githubusercontent.com/46165064/104860514-4a9a6e80-592c-11eb-9c38-227844af0ba6.png\">\r\n\r\n### When I submit a sign-up query, here is the response in the CLI\r\n<img width=\"552\" alt=\"Screen Shot 2021-01-17 at 7 22 09 PM\" src=\"https://user-images.githubusercontent.com/46165064/104860528-60a82f00-592c-11eb-9e0b-213ec5883eb5.png\">\r\n\r\n\r\n## System information\r\n\r\n- OS: [macOS\r\n- Browser (if applies): Chrome, Firefox\r\n- Version of supabase-js: No version of supabase-js in the repository, I presume because it's loaded via an unpkg script?\r\n- Version of Node.js: [e.g. 12.10.0]\r\n\r\n## Additional context\r\n\r\nIn this example, I did not run npm install @supabase/supabase-js, because I didn't see an instruction to do that.\r\n\r\nHowever, I reproduced a javascript-auth instance to attempt that fix, and I saw the same behavior even after running npm install @supabase/supabase-js on the repo\r\n",
            "author": {
                "login": "sbutler-gh"
            },
            "state": "CLOSED",
            "createdAt": "2021-01-18T00:34:18Z",
            "closedAt": "2021-04-07T07:24:48Z",
            "url": "https://github.com/supabase/supabase-js/issues/123",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxNDY3MjU2MQ==",
                    "body": "should be fixed by https://github.com/supabase/supabase/commit/d0b3b372905e57c55e41f77f1854fe678073d861",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2021-04-07T07:24:48Z",
                    "url": "https://github.com/supabase/supabase-js/issues/123#issuecomment-814672561"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU3OTM4NTc3NzQ=",
            "number": 124,
            "title": "Trouble with svelte/sapper template",
            "body": "# Sapper#rollup throws warnings on import \r\n\r\nSupabase is amazing, so thank you!\r\n\r\nI'm trying to use it with svelte/sapper and running into some hiccups.  It seems there's some underlying problem with rollup and maybe ES versions, and in the end it runs but with a large number of warnings that clutter feedback in `npm run dev`.\r\n\r\n\r\n## To Reproduce\r\n\r\n1. Start with a fresh sapper template\r\n``` \r\nnpx degit sveltejs/template fresh\r\ncd fresh \r\nnpm i\r\n```\r\n2. Install supabase-js `npm i --save @supabase/supabase-js`\r\n3. Import in `src/App.svelte`\r\n```\r\n\timport { createClient } from '@supabase/supabase-js'\r\n```\r\n4. Run `npm run build` to see a rollup error suggesting @rollup/plugin-json\r\n```> rollup -c\r\n\r\n\r\nsrc/main.js \u2192 public/build/bundle.js...\r\n(!) `this` has been rewritten to `undefined`\r\nhttps://rollupjs.org/guide/en/#error-this-is-undefined\r\nnode_modules/@supabase/supabase-js/dist/module/SupabaseClient.js\r\n1: var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n                    ^\r\n2:     function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n3:     return new (P || (P = Promise))(function (resolve, reject) {\r\n...and 1 other occurrence\r\nnode_modules/@supabase/realtime-js/dist/module/RealtimeClient.js\r\n1: var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n                    ^\r\n2:     function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n3:     return new (P || (P = Promise))(function (resolve, reject) {\r\n...and 1 other occurrence\r\nnode_modules/@supabase/gotrue-js/dist/module/GoTrueApi.js\r\n1: var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n                    ^\r\n2:     function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n3:     return new (P || (P = Promise))(function (resolve, reject) {\r\n...and 1 other occurrence\r\n\r\n...and 3 other files\r\n[!] Error: Unexpected token (Note that you need @rollup/plugin-json to import JSON files)\r\nnode_modules/websocket/package.json (2:9)\r\n1: {\r\n2:   \"_from\": \"websocket@^1.0.31\",\r\n            ^\r\n3:   \"_id\": \"websocket@1.0.33\",\r\n4:   \"_inBundle\": false,\r\nError: Unexpected token (Note that you need @rollup/plugin-json to import JSON files)\r\n    at error (/repos/voboda/fresh-3/node_modules/rollup/dist/shared/rollup.js:4528:30)\r\n    at Module.error (/repos/voboda/fresh-3/node_modules/rollup/dist/shared/rollup.js:9935:16)\r\n    at tryParse (/repos/voboda/fresh-3/node_modules/rollup/dist/shared/rollup.js:9794:23)\r\n    at Module.setSource (/repos/voboda/fresh-3/node_modules/rollup/dist/shared/rollup.js:10242:19)\r\n    at ModuleLoader.addModuleSource (/repos/voboda/fresh-3/node_modules/rollup/dist/shared/rollup.js:18525:20)\r\n    at ModuleLoader.fetchModule (/repos/voboda/fresh-3/node_modules/rollup/dist/shared/rollup.js:18581:9)\r\n    at async Promise.all (index 0)\r\n    at ModuleLoader.fetchStaticDependencies (/repos/voboda/fresh-3/node_modules/rollup/dist/shared/rollup.js:18606:34)\r\n    at async Promise.all (index 0)\r\n    at ModuleLoader.fetchModule (/repos/voboda/fresh-3/node_modules/rollup/dist/shared/rollup.js:18583:9)\r\n\r\nnpm ERR! code ELIFECYCLE\r\nnpm ERR! errno 1\r\nnpm ERR! svelte-app@1.0.0 build: `rollup -c`\r\nnpm ERR! Exit status 1\r\nnpm ERR! \r\nnpm ERR! Failed at the svelte-app@1.0.0 build script.\r\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\r\n\r\n```\r\n\r\n\r\n5. Install the requested rollup plugin per [instructions](https://github.com/rollup/plugins/tree/master/packages/json)\r\n`npm install @rollup/plugin-json --save-dev`\r\nAnd modify rollup.config.js accordingly, adding:\r\n```\r\nimport json from '@rollup/plugin-json';\r\n```\r\nand modifying the plugins section:\r\n```\r\n...\r\n        plugins: [\r\n                json(),\r\n                svelte({\r\n                        compilerOptions: {\r\n\r\n...\r\n```\r\nAnd running `npm run build` again, you should see the following warning:\r\n```> rollup -c\r\n\r\n\r\nsrc/main.js \u2192 public/build/bundle.js...\r\n(!) `this` has been rewritten to `undefined`\r\nhttps://rollupjs.org/guide/en/#error-this-is-undefined\r\nnode_modules/@supabase/supabase-js/dist/module/SupabaseClient.js\r\n1: var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n                    ^\r\n2:     function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n3:     return new (P || (P = Promise))(function (resolve, reject) {\r\n...and 1 other occurrence\r\nnode_modules/@supabase/realtime-js/dist/module/RealtimeClient.js\r\n1: var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n                    ^\r\n2:     function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n3:     return new (P || (P = Promise))(function (resolve, reject) {\r\n...and 1 other occurrence\r\nnode_modules/@supabase/gotrue-js/dist/module/GoTrueApi.js\r\n1: var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n                    ^\r\n2:     function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n3:     return new (P || (P = Promise))(function (resolve, reject) {\r\n...and 1 other occurrence\r\n\r\n...and 3 other files\r\ncreated public/build/bundle.js in 1s\r\n\r\n```\r\n\r\n\r\n\r\n## Expected behavior\r\n\r\n\r\nAs a novice developer, it's alarming to see these warnings -- I'm not sure if they're significant.\r\n\r\nIn a more complex application, these warning messages are repeated many more times, cluttering the output of `npm run dev`  on each rebuild.  How can this be resolved so the warnings don't occur?\r\n\r\n## Notes\r\n\r\nHaving searched a little, I found some notes referring to `this.__awaiter` as a Typescript helper for earlier ES versions that don't have async/await.  These lines seem to be from the GoTrue packages.  Might this have something to do with combining various ES versions in rollup?\r\n\r\nI also noticed that I don't get this problem when using snowpack and svelte, so this seems to be isolated to sapper or rollup.  \r\n\r\nThis is getting beyond my level of understanding of JS versions and build tools, but I thought it might be worth reporting here, since Sapper and Supabase are such complimentary combo. \r\n\r\n### System information\r\n\r\n- Manjaro Linux (Arch-based)\r\n- Node 15.6.0\r\n\r\npackage.json:\r\n```\r\n{\r\n  \"name\": \"svelte-app\",\r\n  \"version\": \"1.0.0\",\r\n  \"scripts\": {\r\n    \"build\": \"rollup -c\",\r\n    \"dev\": \"rollup -c -w\",\r\n    \"start\": \"sirv public\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@rollup/plugin-commonjs\": \"^17.0.0\",\r\n    \"@rollup/plugin-json\": \"^4.1.0\",\r\n    \"@rollup/plugin-node-resolve\": \"^11.0.0\",\r\n    \"rollup\": \"^2.3.4\",\r\n    \"rollup-plugin-css-only\": \"^3.1.0\",\r\n    \"rollup-plugin-livereload\": \"^2.0.0\",\r\n    \"rollup-plugin-svelte\": \"^7.0.0\",\r\n    \"rollup-plugin-terser\": \"^7.0.0\",\r\n    \"svelte\": \"^3.0.0\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@supabase/supabase-js\": \"^1.3.2\",\r\n    \"sirv-cli\": \"^1.0.0\"\r\n  }\r\n}```\r\n\r\nThanks!\r\n\r\n",
            "author": {
                "login": "voboda"
            },
            "state": "CLOSED",
            "createdAt": "2021-01-26T01:47:25Z",
            "closedAt": "2021-01-29T23:45:29Z",
            "url": "https://github.com/supabase/supabase-js/issues/124",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc3MDEwODE3Mw==",
                    "body": "I've found a solution.  It's to add `context: 'window',` to rolllup.config.js, as follows:\r\n\r\n```\r\nexport default {\r\n\tclient: {\r\n\t\tinput: config.client.input(),\r\n\t\tcontext: 'window', \r\n```\r\n\r\n",
                    "author": {
                        "login": "voboda"
                    },
                    "createdAt": "2021-01-29T23:45:29Z",
                    "url": "https://github.com/supabase/supabase-js/issues/124#issuecomment-770108173"
                },
                {
                    "id": "IC_kwDOD79Crs40uz1r",
                    "body": "Solution didn't work for me, Svelte typescript starter, @supabase/supabase-js 1.20.0.\r\n\"websocket\" 1.0.34 package requires its package.json for version in browser version. \r\nfixed by just adding @rollup/plugin-json rollup plugin as documented in https://www.npmjs.com/package/@rollup/plugin-json",
                    "author": {
                        "login": "asafamr"
                    },
                    "createdAt": "2021-07-22T06:32:55Z",
                    "url": "https://github.com/supabase/supabase-js/issues/124#issuecomment-884686187"
                },
                {
                    "id": "IC_kwDOD79Crs42JTKf",
                    "body": "For Svelte + Rollup, Just add `json` plugin\r\n\r\n```npm\r\nnpm i @rollup/plugin-json\r\n```\r\nAdd it into `rollup.configs.js`\r\n```js\r\nimport json from '@rollup/plugin-json';\r\n```\r\nGo to plugins array and add this:\r\n```js\r\nplugins: [\r\n\t\tjson(),\r\n]\r\n```",
                    "author": {
                        "login": "zakaria-chahboun"
                    },
                    "createdAt": "2021-08-30T14:49:42Z",
                    "url": "https://github.com/supabase/supabase-js/issues/124#issuecomment-908407455"
                },
                {
                    "id": "IC_kwDOD79Crs47_4Jq",
                    "body": "> \r\n\r\nit doesn't solve the problem",
                    "author": {
                        "login": "giopalma"
                    },
                    "createdAt": "2022-01-06T13:41:16Z",
                    "url": "https://github.com/supabase/supabase-js/issues/124#issuecomment-1006600810"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4MDYwMzk4Njk=",
            "number": 127,
            "title": "Permission denied for stored procedure that updates user's email address in auth.users ",
            "body": "I created a stored procedure (aka function) in the database that I hoped would allow the user's email address to be updated from the supabase JS client. When I ran it, I was met with an error message: 'permission denied for schema auth'\r\n\r\nHere's what my 'CREATE FUNCTION' query looks like:\r\n```sql\r\nCREATE FUNCTION updateauthemail (new_email text, auth_id text)\r\nRETURNS text AS $updated_data$\r\n\tDECLARE\r\n\t\tupdated_data text;\r\n\tBEGIN\r\n\t\tUPDATE auth.users set email = new_email where id = auth_id;\r\n\t\tRETURN updated_data;\r\nEND;\r\n$updated_data$ LANGUAGE plpgsql;\r\n```\r\n\r\nDo I need to add something to the function when creating it, or pass a certain param through the JS client on my Node.js server? Here's the function I'm calling through the JS client:\r\n```javascript\r\nconst { data: rpcData, error: rpcErr } = await supabase.rpc(\r\n      \"updateauthemail\",\r\n      {\r\n        auth_id: authId,\r\n        new_email: updatedData.email,\r\n      }\r\n    );\r\n```\r\n\r\n_Originally posted by @dayvista in https://github.com/supabase/supabase/discussions/573#discussioncomment-358474_",
            "author": {
                "login": "dayvista"
            },
            "state": "CLOSED",
            "createdAt": "2021-02-11T02:57:06Z",
            "closedAt": "2021-02-11T08:16:42Z",
            "url": "https://github.com/supabase/supabase-js/issues/127",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc3NzI2OTQ4OA==",
                    "body": "Hey @dayvista, I think you're running up against this issue: \r\nhttps://github.com/supabase/supabase/discussions/393#discussioncomment-256608\r\n\r\n> Basically you will want to add security definer and the search_path to your function:\r\n\r\nI'll close this for now, but if that doesn't work feel free to re-open",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-02-11T08:16:42Z",
                    "url": "https://github.com/supabase/supabase-js/issues/127#issuecomment-777269488"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc3NzY0NzUzOA==",
                    "body": "I added a security definer and the search_path, and now I'm running into another issue. Originally, I created the function as:\r\n\r\n```sql\r\nCREATE FUNCTION updateauthemail (new_email text, auth_id text)\r\n```\r\n\r\n... but that returned an error message: \r\n\r\n```javascript\r\nmessage: 'operator does not exist: uuid = text'\r\n```\r\n\r\nWhen I changed the CREATE FUNCTION to define auth_id as the uuid type:\r\n\r\n```sql\r\nCREATE FUNCTION updateauthemail (new_email text, auth_id uuid)\r\n```\r\n\r\n... the operation seems to run successfully without an error, but it returns null and the email isn't updated in auth.users. I'm thinking it's just an issue with how my SQL function is written/structured (it's basically the first legit one I've made). Here it is in it's entirety:\r\n\r\n```sql\r\nCREATE OR REPLACE FUNCTION update_auth_email (new_email text, auth_id uuid)\r\nRETURNS text AS $updated_data$\r\n\tDECLARE\r\n\t\tupdated_data text;\r\n\tBEGIN\r\n\t\tUPDATE auth.users set email = new_email where auth.uid() = auth_id;\r\n\t\tRETURN updated_data;\r\nEND;\r\n$updated_data$ LANGUAGE plpgsql\r\n\t\t\t   SECURITY DEFINER\r\n    \t\t   SET search_path = public, auth;\r\n```",
                    "author": {
                        "login": "dayvista"
                    },
                    "createdAt": "2021-02-11T17:08:00Z",
                    "url": "https://github.com/supabase/supabase-js/issues/127#issuecomment-777647538"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc3NzY2MTU3Ng==",
                    "body": "P.S. I don't believe I had the necessary permissions to re-open this issue. I believe figuring out an in-app way to do this would be really beneficial for those using Supabase in production. Allowing users to update the emails they use to log in is a common need.",
                    "author": {
                        "login": "dayvista"
                    },
                    "createdAt": "2021-02-11T17:29:24Z",
                    "url": "https://github.com/supabase/supabase-js/issues/127#issuecomment-777661576"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc3NzY3ODQ0Nw==",
                    "body": "@dayvista The `auth.uid() = auth_id;` part in the UPDATE looks wrong.\r\n\r\nShouldn't that be:\r\n\r\n```sql\r\nUPDATE auth.users set email = new_email where id = auth.uid();\r\n```",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-02-11T17:56:44Z",
                    "url": "https://github.com/supabase/supabase-js/issues/127#issuecomment-777678447"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc3NzcwNjg3Ng==",
                    "body": "Thanks for the tip, @steve-chavez \r\nThat almost did it, but I had to compare my declared `auth_id` variable against `id` rather than `auth.uid()`, like so:\r\n\r\n```sql\r\nUPDATE auth.users set email = new_email where id = auth_id;\r\n```\r\n\r\nThat enabled me to pass the id through Node.js like this:\r\n\r\n```javascript\r\nconst { data: rpcData, error: rpcErr } = await supabase.rpc(\r\n      \"update_auth_email\",\r\n      {\r\n        auth_id: authId,\r\n        new_email: updatedData.email,\r\n      }\r\n    );\r\n```\r\n\r\n... and it worked! Thanks a ton to both of you for pointing me in the right direction.",
                    "author": {
                        "login": "dayvista"
                    },
                    "createdAt": "2021-02-11T18:44:25Z",
                    "url": "https://github.com/supabase/supabase-js/issues/127#issuecomment-777706876"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4MDcwODc1NTU=",
            "number": 128,
            "title": "Return values for supabase.rpc",
            "body": "The docs say the return values of `supabase.rpc` are `{ data, error }`. But I am getting the return values as `{ body, status, statusCode, statusText }`\r\n\r\n```js\r\n// this works\r\nconst { body, status, statusCode, statusText } = await supabase.rpc('funcName', params); \r\n\r\n// this doesn't\r\nconst { data, error } = await supabase.rpc('funcName', params); \r\n```\r\n\r\nShould we update the docs? Or we can consider changing the return values to data and error to keep it consistent with the other supabase-js functions.",
            "author": {
                "login": "inian"
            },
            "state": "CLOSED",
            "createdAt": "2021-02-12T09:39:46Z",
            "closedAt": "2021-02-13T02:54:53Z",
            "url": "https://github.com/supabase/supabase-js/issues/128",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc3ODExMzMzNw==",
                    "body": "I'll update the return values for consistency",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-02-12T10:30:36Z",
                    "url": "https://github.com/supabase/supabase-js/issues/128#issuecomment-778113337"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc3ODExNDI3NQ==",
                    "body": "This should be a major release then right? ",
                    "author": {
                        "login": "inian"
                    },
                    "createdAt": "2021-02-12T10:32:36Z",
                    "url": "https://github.com/supabase/supabase-js/issues/128#issuecomment-778114275"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc3ODE0Nzg4Mw==",
                    "body": "Just a patch release - we won't remove `body`, we will just assign it to `data` too. But we will need to make sure the change is coming from `postgrest-js`, then bubbling up through supabase-js.",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-02-12T11:45:59Z",
                    "url": "https://github.com/supabase/supabase-js/issues/128#issuecomment-778147883"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc3ODU1MDAwNg==",
                    "body": "Hey @inian, can I check what version of `supabase-js` you're using? Looks like this is already implemented:\r\n\r\nhttps://github.com/supabase/postgrest-js/blob/eacc4f789551058bdf50bfe9aaabc4b435cd7d99/test/__snapshots__/index.test.ts.snap#L2637",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-02-13T02:42:58Z",
                    "url": "https://github.com/supabase/supabase-js/issues/128#issuecomment-778550006"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc3ODU1MTMyNg==",
                    "body": "Ohh, I was using it in `monitoring` and looks like it is still on supabase-js v0.35.10. My bad..closing the issue!",
                    "author": {
                        "login": "inian"
                    },
                    "createdAt": "2021-02-13T02:54:53Z",
                    "url": "https://github.com/supabase/supabase-js/issues/128#issuecomment-778551326"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4MDgwMTgyOTI=",
            "number": 129,
            "title": "Auth error: undefined is not an object (evaluating 'this.localStorage.setItem')",
            "body": "I'm using the latest version of expo with react native. When I run the `supabase.auth.signup` function, it creates the user in the database, but does not return a user object. The error shows an issue with local storage.\r\n\r\n\r\n\r\n\tcreateUser = async (email, password) => {\r\n\t\tconst { user, session, error } = await supabase.auth.signUp({\r\n\t\t\temail: email,\r\n\t\t\tpassword: password,\r\n\t\t})\r\n\t\t.then(function (response) { \r\n\t\t\tconsole.log(response)\r\n\t\t\treturn response\r\n\t\t})\r\n\t}\r\n\r\n\r\n\r\n```\r\n\r\n[Unhandled promise rejection: TypeError: undefined is not an object (evaluating 'this.localStorage.removeItem')]\r\n- node_modules/@supabase/supabase-js/dist/main/SupabaseClient.js:107:47 in __awaiter$argument_3\r\n- node_modules/regenerator-runtime/runtime.js:63:36 in tryCatch\r\n- node_modules/regenerator-runtime/runtime.js:293:29 in invoke\r\n* http://127.0.0.1:19000/node_modules/expo/AppEntry.bundle?platform=ios&dev=true&hot=false&minify=false:283503:72 in <unknown>\r\n- node_modules/react-native/node_modules/promise/setimmediate/core.js:45:6 in tryCallTwo\r\n- node_modules/react-native/node_modules/promise/setimmediate/core.js:200:22 in doResolve\r\n- node_modules/react-native/node_modules/promise/setimmediate/core.js:66:11 in Promise\r\n* http://127.0.0.1:19000/node_modules/expo/AppEntry.bundle?platform=ios&dev=true&hot=false&minify=false:283482:35 in <unknown>\r\n- node_modules/whatwg-url-without-unicode/lib/URLSearchParams.js:57:7 in iface.is\r\n- node_modules/regenerator-runtime/runtime.js:63:36 in tryCatch\r\n- node_modules/regenerator-runtime/runtime.js:293:29 in invoke\r\n* http://127.0.0.1:19000/node_modules/expo/AppEntry.bundle?platform=ios&dev=true&hot=false&minify=false:283503:72 in <unknown>\r\n- node_modules/react-native/node_modules/promise/setimmediate/core.js:45:6 in tryCallTwo\r\n- node_modules/react-native/node_modules/promise/setimmediate/core.js:200:22 in doResolve\r\n- node_modules/react-native/node_modules/promise/setimmediate/core.js:66:11 in Promise\r\n* http://127.0.0.1:19000/node_modules/expo/AppEntry.bundle?platform=ios&dev=true&hot=false&minify=false:283482:35 in <unknown>\r\n* screens/UserCardScreen.js:312:19 in render\r\n- node_modules/regenerator-runtime/runtime.js:63:36 in tryCatch\r\n- node_modules/regenerator-runtime/runtime.js:293:29 in invoke\r\n- node_modules/regenerator-runtime/runtime.js:63:36 in tryCatch\r\n- node_modules/regenerator-runtime/runtime.js:154:27 in invoke\r\n- node_modules/regenerator-runtime/runtime.js:189:16 in PromiseImpl$argument_0\r\n- node_modules/react-native/node_modules/promise/setimmediate/core.js:45:6 in tryCallTwo\r\n- node_modules/react-native/node_modules/promise/setimmediate/core.js:200:22 in doResolve\r\n- node_modules/react-native/node_modules/promise/setimmediate/core.js:66:11 in Promise\r\n- node_modules/regenerator-runtime/runtime.js:188:15 in callInvokeWithMethodAndArg\r\n- node_modules/regenerator-runtime/runtime.js:211:38 in enqueue\r\n- node_modules/regenerator-runtime/runtime.js:238:8 in exports.async\r\n* screens/UserCardScreen.js:308:69 in render\r\n* http://127.0.0.1:19000/node_modules/expo/AppEntry.bundle?platform=ios&dev=true&hot=false&minify=false:275518:81 in _callee2$\r\n- node_modules/regenerator-runtime/runtime.js:63:36 in tryCatch\r\n- node_modules/regenerator-runtime/runtime.js:293:29 in invoke\r\n- node_modules/regenerator-runtime/runtime.js:63:36 in tryCatch\r\n- node_modules/regenerator-runtime/runtime.js:154:27 in invoke\r\n- node_modules/regenerator-runtime/runtime.js:189:16 in PromiseImpl$argument_0\r\n- node_modules/react-native/node_modules/promise/setimmediate/core.js:45:6 in tryCallTwo\r\n- node_modules/react-native/node_modules/promise/setimmediate/core.js:200:22 in doResolve\r\n- node_modules/react-native/node_modules/promise/setimmediate/core.js:66:11 in Promise\r\n- node_modules/regenerator-runtime/runtime.js:188:15 in callInvokeWithMethodAndArg\r\n- node_modules/regenerator-runtime/runtime.js:211:38 in enqueue\r\n- node_modules/regenerator-runtime/runtime.js:238:8 in exports.async\r\n* screens/UserCardScreen.js:104:15 in initialRequest\r\n- node_modules/react-native/Libraries/Pressability/Pressability.js:691:17 in _performTransitionSideEffects\r\n- node_modules/react-native/Libraries/Pressability/Pressability.js:628:6 in _receiveSignal\r\n- node_modules/react-native/Libraries/Pressability/Pressability.js:524:8 in responderEventHandlers.onResponderRelease\r\n- node_modules/react-native/Libraries/Renderer/implementations/ReactNativeRenderer-dev.js:265:4 in invokeGuardedCallbackImpl\r\n- node_modules/react-native/Libraries/Renderer/implementations/ReactNativeRenderer-dev.js:476:2 in invokeGuardedCallback\r\n- node_modules/react-native/Libraries/Renderer/implementations/ReactNativeRenderer-dev.js:500:2 in invokeGuardedCallbackAndCatchFirstError\r\n- node_modules/react-native/Libraries/Renderer/implementations/ReactNativeRenderer-dev.js:597:41 in executeDispatch\r\n- node_modules/react-native/Libraries/Renderer/implementations/ReactNativeRenderer-dev.js:621:19 in executeDispatchesInOrder\r\n- node_modules/react-native/Libraries/Renderer/implementations/ReactNativeRenderer-dev.js:2521:28 in executeDispatchesAndRelease\r\n* [native code]:null in forEach\r\n- node_modules/react-native/Libraries/Renderer/implementations/ReactNativeRenderer-dev.js:836:4 in forEachAccumulated\r\n- node_modules/react-native/Libraries/Renderer/implementations/ReactNativeRenderer-dev.js:2546:20 in runEventsInBatch\r\n- node_modules/react-native/Libraries/Renderer/implementations/ReactNativeRenderer-dev.js:2702:18 in runExtractedPluginEventsInBatch\r\n- node_modules/react-native/Libraries/Renderer/implementations/ReactNativeRenderer-dev.js:2639:35 in batchedUpdates$argument_0\r\n- node_modules/react-native/Libraries/Renderer/implementations/ReactNativeRenderer-dev.js:17712:13 in batchedUpdates$1\r\n- node_modules/react-native/Libraries/Renderer/implementations/ReactNativeRenderer-dev.js:2492:29 in batchedUpdates\r\n- node_modules/react-native/Libraries/Renderer/implementations/ReactNativeRenderer-dev.js:2638:16 in _receiveRootNodeIDEvent\r\n- node_modules/react-native/Libraries/Renderer/implementations/ReactNativeRenderer-dev.js:2767:27 in receiveTouches\r\n- node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js:416:4 in __callFunction\r\n- node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js:109:6 in __guard$argument_0\r\n- node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js:364:10 in __guard\r\n- node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js:108:4 in callFunctionReturnFlushedQueue\r\n* [native code]:null in callFunctionReturnFlushedQueue\r\n\r\n\r\n```\r\n\r\n\r\nThis is what the console returns when I try to log the object\r\n\r\n```\r\nObject {\r\n  \"data\": null,\r\n  \"error\": [TypeError: undefined is not an object (evaluating 'this.localStorage.setItem')],\r\n  \"session\": null,\r\n  \"user\": null,\r\n}\r\n\r\n\r\nundefined is not an object (evaluating 'this.localStorage.setItem')\r\n- node_modules/@supabase/supabase-js/dist/main/SupabaseClient.js:107:31 in _closeSubscription\r\n- node_modules/whatwg-url-without-unicode/lib/URLSearchParams-impl.js:11:0 in <global>\r\n- node_modules/whatwg-url-without-unicode/lib/URLSearchParams-impl.js:76:4 in URLSearchParamsImpl#getAll\r\n- node_modules/whatwg-url-without-unicode/lib/URLSearchParams.js:81:56 in iface.convert\r\n- node_modules/regenerator-runtime/runtime.js:63:36 in tryCatch\r\n- node_modules/regenerator-runtime/runtime.js:293:29 in invoke\r\n* http://127.0.0.1:19000/node_modules/expo/AppEntry.bundle?platform=ios&dev=true&hot=false&minify=false:283485:29 in fulfilled\r\n- node_modules/react-native/node_modules/promise/setimmediate/core.js:37:13 in tryCallOne\r\n- node_modules/react-native/node_modules/promise/setimmediate/core.js:123:24 in setImmediate$argument_0\r\n- node_modules/react-native/Libraries/Core/Timers/JSTimers.js:130:14 in _callTimer\r\n- node_modules/react-native/Libraries/Core/Timers/JSTimers.js:181:14 in _callImmediatesPass\r\n- node_modules/react-native/Libraries/Core/Timers/JSTimers.js:441:30 in callImmediates\r\n- node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js:387:6 in __callImmediates\r\n- node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js:135:6 in __guard$argument_0\r\n- node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js:364:10 in __guard\r\n- node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js:134:4 in flushedQueue\r\n* [native code]:null in flushedQueue\r\n* [native code]:null in invokeCallbackAndReturnFlushedQueue\r\n```",
            "author": {
                "login": "Brotakuu"
            },
            "state": "CLOSED",
            "createdAt": "2021-02-14T18:34:25Z",
            "closedAt": "2021-02-15T00:36:54Z",
            "url": "https://github.com/supabase/supabase-js/issues/129",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc3ODg3Mjc3OA==",
                    "body": "Hey @Brotakuu, I suspect it's because you need to provide your own \"local storage\" for expo. We have an example here:\r\n\r\nhttps://github.com/supabase/supabase/tree/master/examples/expo-todo-list\r\n\r\nAnd you can see that we install `@react-native-async-storage/async-storage`:\r\n\r\nhttps://github.com/supabase/supabase/blob/b7e7a1cf475acf20cda3c2721def049ee1c827ec/examples/expo-todo-list/package.json#L11\r\n\r\nAnd then add it to the supabase constructor here:\r\n\r\nhttps://github.com/supabase/supabase/blob/b7e7a1cf475acf20cda3c2721def049ee1c827ec/examples/expo-todo-list/lib/initSupabase.ts#L6\r\n\r\nI'll close this one, but if you're still seeing the problem after trying these steps feel free to reopen",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-02-15T00:36:54Z",
                    "url": "https://github.com/supabase/supabase-js/issues/129#issuecomment-778872778"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4MDgzODA2OTY=",
            "number": 130,
            "title": "auth.session() and auth.user() return null in SPA app when called right after createClient",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\n`database.auth.session()` and `database.auth.user()` are both `null` when called right after `const database = createClient(SUPABASE_URL, SUPABASE_ANON_KEY)` in a SPA app.\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\nJust try the code\r\n\r\n## Expected behavior\r\n\r\nI expect `database.auth.session()` and `database.auth.user()` to not return `null` if a user is connected. I need to check that in my router to change the route if needed, yet can't without doing some custom code because of the `null` issue. The storage being synchronous, the returns shouldn't be `null`.\r\n\r\n## System information\r\n\r\n- OS: Mac OS\r\n- Browser (if applies) [e.g. chrome, safari]\r\n- Version of supabase-js: latest\r\n- Version of Node.js: latest\r\n",
            "author": {
                "login": "gawlk"
            },
            "state": "CLOSED",
            "createdAt": "2021-02-15T09:56:14Z",
            "closedAt": "2021-02-15T10:28:31Z",
            "url": "https://github.com/supabase/supabase-js/issues/130",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc3OTEyNDM3Mw==",
                    "body": "Hey @gawlk - I believe you're running into this one: https://github.com/supabase/gotrue-js/issues/36\r\n\r\nI'm working on it this week, just trying to figure out the best way to handle it for expo apps .\r\n\r\nIf you think it's unrelated feel free to re-open \ud83d\udc4d ",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-02-15T10:28:31Z",
                    "url": "https://github.com/supabase/supabase-js/issues/130#issuecomment-779124373"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg3NjA3MDM2NQ==",
                    "body": "I'm having this exact same issue trying to redirect to/away from my login page. @gawlk, what did you end up doing?",
                    "author": {
                        "login": "silasabbott"
                    },
                    "createdAt": "2021-07-08T02:26:22Z",
                    "url": "https://github.com/supabase/supabase-js/issues/130#issuecomment-876070365"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4MTMwMTE4OTI=",
            "number": 132,
            "title": "Call rpc void function returns json parsing error",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\n> My `store_sentry_event` function used to be defined like this:\r\n> ```\r\n> create or replace function public.store_sentry_event(json_content jsonb)\r\n>   returns void security definer\r\n>   language sql\r\n> as $$\r\n>   insert into private.sentry_event (received, content)\r\n>   values(transaction_timestamp(), json_content);\r\n> $$;\r\n> ```\r\n> \r\n> But I noticed that my code that calls that function directly via `SupbaseClient.rpc()` started failing with error:\r\n> ```\r\n> Uncaught (in promise) SyntaxError: JSON.parse: unexpected end of data at line 1 column 1 of the JSON data\r\n> ```\r\n\r\nhttps://github.com/supabase/supabase/issues/762\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Create a void function\r\n2. Call void function from supabase client\r\n3. See Json pasing error\r\n",
            "author": {
                "login": "phamhieu"
            },
            "state": "CLOSED",
            "createdAt": "2021-02-22T01:17:13Z",
            "closedAt": "2021-02-24T00:54:06Z",
            "url": "https://github.com/supabase/supabase-js/issues/132",
            "comments": []
        },
        {
            "id": "MDU6SXNzdWU4NDI1MDYxNjQ=",
            "number": 141,
            "title": "Storage Auth",
            "body": "# Chore\r\n\r\n## Describe the chore\r\n\r\nNot sure we are passing in the JWT headers to the storage API? like this https://github.com/supabase/supabase-js/blob/8749488d92305e4a522edb439a18291e80d836d6/src/SupabaseClient.ts#L161\r\n\r\n## Additional context\r\n\r\nIf we do this, should we also set the `owner` of the file? This would make RLS policies easier\r\n",
            "author": {
                "login": "kiwicopple"
            },
            "state": "CLOSED",
            "createdAt": "2021-03-27T13:37:58Z",
            "closedAt": "2021-03-30T05:38:50Z",
            "url": "https://github.com/supabase/supabase-js/issues/141",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgwODg2OTcyMA==",
                    "body": "Looks like the API accepts the `owner`: https://github.com/supabase/storage-api/blob/79283f89c7f6c200f4317983c5e7111b79d9c171/src/schemas/object.ts#L9\r\n\r\nSo if the user is logged in, perhaps we can send the UUID here: https://github.com/supabase/supabase-js/blob/8749488d92305e4a522edb439a18291e80d836d6/src/lib/storage/StorageApi.ts#L109\r\n\r\nAlso, I see that the StorageClient gets the Auth headers [here](https://github.com/supabase/supabase-js/blob/8749488d92305e4a522edb439a18291e80d836d6/src/SupabaseClient.ts#L168) but what happens if a user isn't logged in, and then they log in. The headers for Storage aren't updated right?",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-03-28T09:16:49Z",
                    "url": "https://github.com/supabase/supabase-js/issues/141#issuecomment-808869720"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgwOTA0NjY0OQ==",
                    "body": "Instead of using `storage` variable, I convert it into getter method. Whenever user gets storage client, it will have the latest auth headers.",
                    "author": {
                        "login": "phamhieu"
                    },
                    "createdAt": "2021-03-29T03:51:21Z",
                    "url": "https://github.com/supabase/supabase-js/issues/141#issuecomment-809046649"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4NDU2NTI1MDM=",
            "number": 143,
            "title": "storage.from().list() has limit: 0 by default",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nstorage.from().list() without prefix argument returns empty result. According to types and docs it is optional but it is required in the api. If I use empty string it works as intended.\r\n\r\nEDIT: After further inspection I found out that it is not caused by path being empty, but search options contains limit: 0 by default which causes the empty array.\r\n\r\nhttps://github.com/supabase/supabase-js/blob/1b82937184f331b9a92c7245d4ed9b22b7beaeec/src/lib/storage/StorageFileApi.ts#L6\r\n\r\n## To Reproduce\r\n\r\n1. Create a bucket with some files.\r\n2. Call: `supabase.storage.from(\"gallery\").list()`\r\n3. Supabase returns empty result\r\n4. Call: `supabase.storage.from(\"gallery\").list(\"\", { limit: 10 )`\r\n5. Supabase returns list of all files\r\n\r\n## Expected behavior\r\n\r\nIf the list function is called without prefix, it should use \"\" instead.\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Version of supabase-js: 1.7.6\r\n- Version of Node.js: 14.12.0\r\n",
            "author": {
                "login": "AlfonzAlfonz"
            },
            "state": "CLOSED",
            "createdAt": "2021-03-31T02:04:23Z",
            "closedAt": "2021-04-06T04:24:21Z",
            "url": "https://github.com/supabase/supabase-js/issues/143",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxMzgxMTM0MA==",
                    "body": "Hi @AlfonzAlfonz, thanks for the report! This was fixed in https://github.com/supabase/supabase-js/pull/144. Please upgrade your supabase-js version to pull in the latest changes. ",
                    "author": {
                        "login": "inian"
                    },
                    "createdAt": "2021-04-06T04:24:21Z",
                    "url": "https://github.com/supabase/supabase-js/issues/143#issuecomment-813811340"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4NDkzMTU1MjU=",
            "number": 146,
            "title": "Authentication not working properly in a nuxt SPA app.",
            "body": "# Bug report\r\n\r\nAuthentication not working properly in a vue/nuxt SPA app.\r\n\r\n## Describe the bug\r\n\r\nWhenever I call `auth.signIn()` it refreshes my page, and any code after is ignored. It does load the session into localstorage, but doesn't let me handle the response from the call.\r\nSo I can't check for `user` or `errors` after calling `auth.signIn()`. The only thing I can do is put a function in `mounted` to check if `this.$supabase.auth.user()` exists after page refresh, and then I can `router.push` to a welcome page if so. But that obviously isn't desired behavior.\r\n\r\n## To Reproduce\r\n\r\nHere's the code for my sign in page.\r\n```\r\nexport default {\r\n  data: function () {\r\n    return {\r\n      //v-model to form inputs\r\n      form: {\r\n        email: '',\r\n        password: ''\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    // called on form submit\r\n    async onSubmit () {\r\n      try {\r\n        const { error, session, user } = await this.$supabase.auth.signIn({\r\n          email: this.form.email,\r\n          password: this.form.password,\r\n        })\r\n        //none of the following code is called due to page refresh\r\n        if (error) {\r\n          console.error('Error thrown:', error.message)\r\n        }\r\n        if (user) {\r\n          console.log(user)\r\n        }\r\n      } catch (error) {\r\n        console.error('Error thrown:', error.message)\r\n      }\r\n    }\r\n  },\r\n  mounted: function () {\r\n    //check if supabase session exists\r\n    const user = this.$supabase.auth.user()\r\n    if (user) {\r\n      //save user data to vuex\r\n       this.$store.commit('LOG_IN', user)\r\n       //redirect to main page\r\n       this.$router.push('/')\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## Expected behavior\r\n\r\nI expect `auth.signIn()` to not cause page refresh so that I can properly handle the response and possible errors.\r\n\r\n## Screenshots\r\n\r\n## System information\r\n\r\n- OS: WSL 2\r\n- Browser (if applies): Chrome/Edge\r\n- Version of supabase-js: 1.7.7\r\n- Version of Node.js: 14.15.4\r\n- Nuxt: 2.14.12\r\n\r\n## Additional context\r\n\r\n",
            "author": {
                "login": "jadedigital"
            },
            "state": "CLOSED",
            "createdAt": "2021-04-02T16:18:09Z",
            "closedAt": "2021-04-03T00:38:09Z",
            "url": "https://github.com/supabase/supabase-js/issues/146",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxMjc2NjA4Mw==",
                    "body": "I'm an idiot. Thanks for not letting me know.\r\n\r\nThis isn't related to supabase, I was submitting the form. Forgot to add `.prevent` to the form submit button. I had `@submit=\"onSubmit()\"`, should have been `@submit.prevent=\"onSubmit()\"` \r\n\r\nClosing.",
                    "author": {
                        "login": "jadedigital"
                    },
                    "createdAt": "2021-04-03T00:38:09Z",
                    "url": "https://github.com/supabase/supabase-js/issues/146#issuecomment-812766083"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4NTA1OTA1MzQ=",
            "number": 147,
            "title": "RPC fails when using an extension feature inside Postgres stored function",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen attempting to call a Postgres stored function which utilizes an extension function via `.rpc()`, the response fails and returns 404\r\n\r\n## To Reproduce\r\n\r\nI have created a stored function called `search_stations` inside Postgres. It accepts 2 parameters - `search_value TEXT` and `result_limit INTEGER`. It returns a `TABLE`, and all returned fields and types are correctly defined.\r\n\r\nThis function uses the `SIMILARITY` function, as well as the distance (`<->`) operator, both from the `pg_trgm` extension. This extension shows as enabled in the dashboard.\r\n\r\nI have verified that results return correctly when running the following query from within pgAdmin as well as the Supabase dashboard:\r\n```SQL\r\nSELECT * FROM search_stations('Leeds', 10)\r\n```\r\n\r\nHowever, when I do the following inside my codebase using supabase-js:\r\n```typescript\r\nawait SupabaseClient.rpc(\"search_stations\", {\r\n    search_value: \"Leeds\",\r\n    result_limit: 10\r\n});\r\n```\r\n\r\nThe following error occurs:\r\n```JSON\r\n{\r\n  \"error\": {\r\n    \"hint\": \"No function matches the given name and argument types. You might need to add explicit type casts.\",\r\n    \"details\": null,\r\n    \"code\": \"42883\",\r\n    \"message\": \"function similarity(text, text) does not exist\"\r\n  },\r\n  \"data\": null,\r\n  \"count\": null,\r\n  \"status\": 404,\r\n  \"statusText\": \"Not Found\",\r\n  \"body\": null\r\n}\r\n```\r\n\r\nI am able to correctly call other stored functions in my database, but none of them utilize features from any extensions.\r\n\r\n## Expected behavior\r\n\r\nThe function should not throw an error and should instead return the results of the function.\r\n\r\n## Screenshots\r\n\r\nN/A\r\n\r\n## System information\r\n\r\n- OS: Windows 10 X64\r\n- Browser (if applies): N/A - request running via Node (14.14.0)\r\n- Version of supabase-js: 1.7.7\r\n- Version of Node.js: 14.14.0\r\n\r\n## Additional context\r\n\r\nI am able to correctly call other stored functions in my database and results are correctly returned, but none of those other functions utilize features from a extensions.\r\n\r\nI have tried explicitly setting `extensions.similarity` for all the calls to similarity inside my function, but this returns the following when run via `rpc()`:\r\n\r\n```JSON\r\n{\r\n  \"error\": {\r\n    \"hint\": null,\r\n    \"details\": null,\r\n    \"code\": \"42501\",\r\n    \"message\": \"permission denied for schema extensions\"\r\n  },\r\n  \"data\": null,\r\n  \"count\": null,\r\n  \"status\": 403,\r\n  \"statusText\": \"Forbidden\",\r\n  \"body\": null\r\n}\r\n```\r\n",
            "author": {
                "login": "ChronSyn"
            },
            "state": "CLOSED",
            "createdAt": "2021-04-05T19:08:44Z",
            "closedAt": "2021-04-05T21:41:14Z",
            "url": "https://github.com/supabase/supabase-js/issues/147",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxMzYwMjMzNg==",
                    "body": "Resolved - The `pg_trgm` extension is installed to the `extensions` schema by default. Removing it and reinstalling to `pg_catalog` schema resolved the issue:\r\n\r\n```SQL\r\nDROP EXTENSION pg_trgm;\r\n\r\nCREATE EXTENSION pg_trgm SCHEMA pg_catalog;\r\n```\r\n\r\nCould anyone clarify if this is safe to do, or if the original issue is a bug that could be fixed inside the library?",
                    "author": {
                        "login": "ChronSyn"
                    },
                    "createdAt": "2021-04-05T19:32:56Z",
                    "url": "https://github.com/supabase/supabase-js/issues/147#issuecomment-813602336"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxMzYzNTMzNQ==",
                    "body": "@ChronSyn Check this issue: https://github.com/supabase/postgrest-js/issues/168\r\n\r\nAlso: https://github.com/supabase/supabase/discussions/1048#discussioncomment-564420",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-04-05T20:37:25Z",
                    "url": "https://github.com/supabase/supabase-js/issues/147#issuecomment-813635335"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxMzYzODU4MQ==",
                    "body": "> Could anyone clarify if this is safe to do\r\n\r\nInstalling into pg_catalog is usually discouraged, since it pollutes an internal postgres namespace. Maybe you can just use `extensions.similarity` inside your function for now and grant the permissions as mentioned [here](https://github.com/supabase/supabase/discussions/1048#discussioncomment-564458).",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-04-05T20:44:19Z",
                    "url": "https://github.com/supabase/supabase-js/issues/147#issuecomment-813638581"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxMzY1NTI0Mg==",
                    "body": "> > Could anyone clarify if this is safe to do\r\n> \r\n> Installing into pg_catalog is usually discouraged, since it pollutes an internal postgres namespace. Maybe you can just use `extensions.similarity` inside your function for now and grant the permissions as mentioned [here](https://github.com/supabase/supabase/discussions/1048#discussioncomment-564458).\r\n\r\nI disabled the extension, and then re-enabled it via the dashboard. I've dropped my function, updated it to use the `extensions.similarity` call (from `similarity`), and then executed the query to add the function again. I then granted usage to anon and authenticated using the details in the link. I can see in pgAdmin that grantee's `anon` and `authenticated` have the `usage` privilege (`U`), both with a grantor of `postgres`. I have also checked the search path for the API, and it is defined as `public, extensions`.\r\n\r\nHowever, even after all that, running the same RPC call results in  403 (`permission denied for schema extensions`).\r\n\r\nThe link also mentions it won't happen for new projects - Would I need to spin up a completely new project in order for this to take effect?\r\n\r\nIf I grant usage to `service_role` (`grant usage on schema extensions to service_role;`), I am able to execute the function via `rpc()`. Are there any potential downsides or security concerns with doing this?",
                    "author": {
                        "login": "ChronSyn"
                    },
                    "createdAt": "2021-04-05T21:16:27Z",
                    "url": "https://github.com/supabase/supabase-js/issues/147#issuecomment-813655242"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxMzY1Nzk3NQ==",
                    "body": "> However, even after all that, running the same RPC call results in 403 (permission denied for schema extensions).\r\n\r\nHm, maybe you're missing `GRANT USAGE ON SCHEMA extensions TO service_role`? (noted [here](https://github.com/supabase/postgrest-js/issues/168#issuecomment-801192844))\r\n\r\n> Are there any potential downsides or security concerns with doing this?\r\n\r\nNo, granting usage to extensions is something we're going to do for all projects on a later fix. You only need to make sure your `public` schema tables/views/functions are secured according to your application logic.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-04-05T21:21:39Z",
                    "url": "https://github.com/supabase/supabase-js/issues/147#issuecomment-813657975"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxMzY1ODQ4MA==",
                    "body": "> > However, even after all that, running the same RPC call results in 403 (permission denied for schema extensions).\r\n> \r\n> Hm, maybe you're missing `GRANT USAGE ON SCHEMA extensions TO service_role`? (noted [here](https://github.com/supabase/postgrest-js/issues/168#issuecomment-801192844))\r\n\r\nYep - turns out that was the issue. Is that the user that RPC calls are routed through, and should I be concerned about it causing any potential security or performance issues?",
                    "author": {
                        "login": "ChronSyn"
                    },
                    "createdAt": "2021-04-05T21:22:39Z",
                    "url": "https://github.com/supabase/supabase-js/issues/147#issuecomment-813658480"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4NTA2ODk1NzY=",
            "number": 148,
            "title": "createSignedURL returning two properties, broken URL generated",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nThe storage `createSignedURL` function is returning a result of `{ signedUrl, signedURL }`. The `signedUrl` should be the one with the full URL to download the file. But on the end of this URL, it has `undefined`. The `signedURL` contains the rest of the URL that should be appended to the domain and path in `signedUrl`.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. call `createSignedURL`.\r\n2. Inspect the returned value.\r\n\r\n## Expected behavior\r\n\r\nOnly one `signedUrl` property in the returned object, with the full URL properly present.\r\n\r\n## Screenshots\r\n\r\nThe returned value looks like this:\r\n\r\n```\r\n{\r\n  \"data\": {\r\n    \"signedURL\": \"/object/sign/test/test.png?token=blahblahblah\",\r\n    \"signedUrl\": \"https://example.supabase.co/storage/v1undefined\",\r\n    \"error\": null\r\n  }\r\n}\r\n```",
            "author": {
                "login": "ProjectMoon"
            },
            "state": "CLOSED",
            "createdAt": "2021-04-05T21:20:12Z",
            "closedAt": "2021-04-06T04:15:34Z",
            "url": "https://github.com/supabase/supabase-js/issues/148",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxMzgwOTczNA==",
                    "body": "Thanks for the report @ProjectMoon! I have fixed this in supabase-js v1.8.0 \r\nThe return value only has signedURL with the fully qualified URL. ",
                    "author": {
                        "login": "inian"
                    },
                    "createdAt": "2021-04-06T04:18:21Z",
                    "url": "https://github.com/supabase/supabase-js/issues/148#issuecomment-813809734"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyMDM0MTAyNw==",
                    "body": "@inian Hi! the thing is return value should have `signedUrl` not `signedURL` according to it's type. Typescript is pointing to it as an error in my project. \r\n``` TS2551: Property 'signedURL' does not exist on type '{ signedUrl: string; }'. Did you mean 'signedUrl'?```",
                    "author": {
                        "login": "Ascarbek"
                    },
                    "createdAt": "2021-04-15T11:11:01Z",
                    "url": "https://github.com/supabase/supabase-js/issues/148#issuecomment-820341027"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyMDM0MjU1Nw==",
                    "body": "Hi @Ascarbek, I have pushed a fix for this just today. Can you update to the latest version of `supabase-js`?",
                    "author": {
                        "login": "inian"
                    },
                    "createdAt": "2021-04-15T11:13:53Z",
                    "url": "https://github.com/supabase/supabase-js/issues/148#issuecomment-820342557"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyMDM1MDQ2NQ==",
                    "body": "@inian I've upgraded to 1.11.4 but it still returns `signedURL`\r\nI mean the HTTP request to storage is returning `signedURL` I don't think it's `supabase-js` problem",
                    "author": {
                        "login": "Ascarbek"
                    },
                    "createdAt": "2021-04-15T11:28:08Z",
                    "url": "https://github.com/supabase/supabase-js/issues/148#issuecomment-820350465"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyMDM1MjI0Ng==",
                    "body": "That's the expected behaviour - Server returns signedURL and supabase-js also returns signedURL. There should be no signedUrl anywhere now. ",
                    "author": {
                        "login": "inian"
                    },
                    "createdAt": "2021-04-15T11:31:32Z",
                    "url": "https://github.com/supabase/supabase-js/issues/148#issuecomment-820352246"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyMDM1NDAxOA==",
                    "body": "@inian I got it! Now I don't have Typescript error. Thank you!",
                    "author": {
                        "login": "Ascarbek"
                    },
                    "createdAt": "2021-04-15T11:34:44Z",
                    "url": "https://github.com/supabase/supabase-js/issues/148#issuecomment-820354018"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4NTQ5NTYyMjE=",
            "number": 151,
            "title": "Tree shaking",
            "body": "# Feature request\r\n\r\nTree-shaking is currently not possible with the supabase-js library because `SupabaseClient` is implemented using classes. Neither Webpack or Rollup supports tree-shaking class methods.\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nSupabase bundle size is quite small compared to others (firebase, amplify), but it will only increase as more features are added. Projects that do not use all the features that Supabase provides will regardless pay the cost. Firebase has realized this with their new [Modular Javascript SDK](https://modularfirebase.web.app/get-started/why-change/).\r\n\r\n## Describe the solution you'd like\r\n\r\nInstead of initializing a single Supabase client, here's a modular API proposal:\r\n\r\n```js\r\n// initSupabase.js\r\nconst supabaseClient = createClient(supabaseUrl, supabaseKey);\r\n// Does not automatically instantiate RealtimeClient, PostgrestClient, etc.\r\n// Features can be opted in as such:\r\nexport const db = getPostgrest(supabaseClient);\r\nexport const realtime = getRealtime(supabaseClient);\r\nexport const auth = getAuth(supabaseClient);\r\nexport const storage = getStorage(supabaseClient);\r\n```\r\n\r\n```js\r\n// some-random-component.js\r\nimport { db, realtime } from './initSupabase';\r\n\r\nconst { data, error } = await db\r\n  .from('cities')\r\n  .select()\r\n\r\nconst mySubscription = realtime\r\n  .from('*')\r\n  .on('*', payload => {\r\n    console.log('Change received!', payload)\r\n  })\r\n  .subscribe()\r\n```\r\n\r\nWhile this won't eliminate every piece of unused code, it's a start to enabling opt-in for specific features.\r\n\r\n## Caveats\r\n\r\n- Will break the current stable API, but can be remedied w/ codemods.\r\n- Not sure if `SupabaseAuthClient` can be separated as all other modules rely on that\r\n\r\nIf this is something you guys think is worth pursuing, I'd be happy to start working on a PR!",
            "author": {
                "login": "lawrencecchen"
            },
            "state": "OPEN",
            "createdAt": "2021-04-10T01:52:45Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/151",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs41-1B7",
                    "body": "For the meantime, is there a supabase package available without realtime.js, as it increase bundle size significantly?",
                    "author": {
                        "login": "maxcodefaster"
                    },
                    "createdAt": "2021-08-25T16:05:35Z",
                    "url": "https://github.com/supabase/supabase-js/issues/151#issuecomment-905662587"
                },
                {
                    "id": "IC_kwDOD79Crs41_AgU",
                    "body": "@maxcodefaster you can use the client library for each components independently, but you need all for supabase-js.\r\n\r\nWhat's common.js? There's no significant bloat in realtime-js as far as I'm aware.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-08-25T16:56:42Z",
                    "url": "https://github.com/supabase/supabase-js/issues/151#issuecomment-905709588"
                },
                {
                    "id": "IC_kwDOD79Crs41_UEf",
                    "body": "nvm. i got an error on angular cli stating that realtime-js relies on common.js and thus increases bundle size. i forked supabase-js and remove realtime-js references, if someone is interested:\r\n\r\nhttps://www.npmjs.com/package/supabase-js-without-realtime-js",
                    "author": {
                        "login": "maxcodefaster"
                    },
                    "createdAt": "2021-08-25T18:53:47Z",
                    "url": "https://github.com/supabase/supabase-js/issues/151#issuecomment-905789727"
                },
                {
                    "id": "IC_kwDOD79Crs4_9qU5",
                    "body": "> ... i forked supabase-js and remove realtime-js references, if someone is interested:\r\n> \r\n> https://www.npmjs.com/package/supabase-js-without-realtime-js\r\n\r\n@maxcodefaster , is your fork still up-to-date? `supabase-js` is currently the largest dependency of my app and I currently only use auth. Thanks!",
                    "author": {
                        "login": "micahjon"
                    },
                    "createdAt": "2022-03-19T23:19:09Z",
                    "url": "https://github.com/supabase/supabase-js/issues/151#issuecomment-1073128761"
                },
                {
                    "id": "IC_kwDOD79Crs5GJrZi",
                    "body": "+1 on this. Also fixes the issue of \"realtime\" being imported in Next.js' Edge runtime.",
                    "author": {
                        "login": "sannajammeh"
                    },
                    "createdAt": "2022-07-07T01:31:01Z",
                    "url": "https://github.com/supabase/supabase-js/issues/151#issuecomment-1176942178"
                },
                {
                    "id": "IC_kwDOD79Crs5IvQtx",
                    "body": "I am wondering, is the new supabase v2 RC solving tree shaking?\r\nI am seeing that the dist is actually a tiny bit larger than in v1.\r\n\r\n### v2 dist\r\n![Bildschirmfoto 2022-08-19 um 09 27 17](https://user-images.githubusercontent.com/32813692/185566932-17e353bc-8029-4abc-b2fa-9b58b056824f.jpg)\r\n\r\n### v1 dist\r\n![Bildschirmfoto 2022-08-19 um 09 27 26](https://user-images.githubusercontent.com/32813692/185566955-db3e08f1-3f23-4965-8afd-713ced028359.jpg)\r\n\r\nI am seeing the ability to define certain settings for `createClient`\r\n```ts\r\nconst options = {\r\n  db: {\r\n    schema: 'public',\r\n  },\r\n  auth: {\r\n    autoRefreshToken: true,\r\n    persistSession: true,\r\n    detectSessionInUrl: true,\r\n  },\r\n  global: {\r\n    headers: { 'x-my-custom-header': 'my-app-name' },\r\n  },\r\n}\r\nconst supabase = createClient(\r\n  'https://xyzcompany.supabase.co',\r\n  'public-anon-key',\r\n  options\r\n)\r\n```\r\n\r\nI am using only the database and storage function of supabase. Wouldn't it be great to allow something like:\r\n\r\n```ts\r\nconst options = {\r\n  db: true,\r\n  auth: false,\r\n  realtime: false,\r\n}\r\nconst supabase = createClient(\r\n  'https://xyzcompany.supabase.co',\r\n  'public-anon-key',\r\n  options\r\n)\r\n```\r\n\r\nor like https://github.com/storyblok/storyblok-js#initialization does it\r\n```ts\r\nimport { databaseFeature, storageFeature } from '@supabase/supabase-js/features'\r\nconst options = {\r\n  useOnlyFeatures: [databaseFeature, storageFeature]\r\n}\r\nconst supabase = createClient(\r\n  'https://xyzcompany.supabase.co',\r\n  'public-anon-key',\r\n  options\r\n)\r\n```\r\n\r\n",
                    "author": {
                        "login": "madebyfabian"
                    },
                    "createdAt": "2022-08-19T07:33:42Z",
                    "url": "https://github.com/supabase/supabase-js/issues/151#issuecomment-1220348785"
                },
                {
                    "id": "IC_kwDOD79Crs5I7Puz",
                    "body": "We weren't considering tree-shaking in v2, but might in v3. That said there seems to still be some low hanging fruits here - realtime-js seems to have doubled in size \ud83e\udd14",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-08-23T03:34:59Z",
                    "url": "https://github.com/supabase/supabase-js/issues/151#issuecomment-1223490483"
                },
                {
                    "id": "IC_kwDOD79Crs5MvLet",
                    "body": ">We weren't considering tree-shaking in v2\r\n\r\n@soedirgo May I ask why? Supabase-js is a whopper. I'd much rather download the library on _my_ server instead of making every single user download it in the browser.",
                    "author": {
                        "login": "binyamin"
                    },
                    "createdAt": "2022-10-21T21:05:44Z",
                    "url": "https://github.com/supabase/supabase-js/issues/151#issuecomment-1287436205"
                },
                {
                    "id": "IC_kwDOD79Crs5M5BNC",
                    "body": "There are more pressing issues right now, esp. wrt functionality - once the client libs are stable enough we'll look into how to refactor them to support tree-shaking.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-10-25T05:41:59Z",
                    "url": "https://github.com/supabase/supabase-js/issues/151#issuecomment-1290015554"
                },
                {
                    "id": "IC_kwDOD79Crs5VWk6k",
                    "body": "+1, I'm using the supabase client solely for auth for a nextjs app. Would be nice to isolate the bits I'm not using :)\r\n \r\n<img width=\"464\" alt=\"Screen Shot 2023-02-15 at 5 24 48 PM\" src=\"https://user-images.githubusercontent.com/11382084/219145922-92a23e65-0ebb-4df0-ba26-ee2a4046dcd4.png\">\r\n\r\n",
                    "author": {
                        "login": "Andrewjeska"
                    },
                    "createdAt": "2023-02-15T20:24:25Z",
                    "url": "https://github.com/supabase/supabase-js/issues/151#issuecomment-1431981732"
                },
                {
                    "id": "IC_kwDOD79Crs5Ydoic",
                    "body": "@soedirgo am I right to say that the bundle size is huge since of the npm websocket package(16k) which cause the entire size to be 26kb currently.\r\n\r\nSince all browsers already support websocket, that should be easy win and fix and provide a browser build right? I would be happy to make a PR if you would consider it!",
                    "author": {
                        "login": "abhishiv"
                    },
                    "createdAt": "2023-03-26T17:20:29Z",
                    "url": "https://github.com/supabase/supabase-js/issues/151#issuecomment-1484163228"
                },
                {
                    "id": "IC_kwDOD79Crs5Ye9fH",
                    "body": "Hmm, the websocket package isn't that big actually ([1.1KB](https://bundlephobia.com/package/websocket)), but yeah that'd help trim it down. Though a bigger win would be from omitting `cross-fetch` ([2.8KB](https://bundlephobia.com/package/cross-fetch@3.1.5)) on environments that don't need it.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-03-27T05:16:39Z",
                    "url": "https://github.com/supabase/supabase-js/issues/151#issuecomment-1484511175"
                },
                {
                    "id": "IC_kwDOD79Crs5Ym6Td",
                    "body": "> Hmm, the websocket package isn't that big actually ([1.1KB](https://bundlephobia.com/package/websocket)), but yeah that'd help trim it down. Though a bigger win would be from omitting `cross-fetch` ([2.8KB](https://bundlephobia.com/package/cross-fetch@3.1.5)) on environments that don't need it.\r\n\r\nAgreed. Most frameworks already polyfill, its supported in all major browsers and even Node JS at this point. Most React libraries already target ES6 only and tell users to polyfill. The best solution would be adding some docs about polyfilling and omitting it altogether. There is no reason for a library to provide its own polyfill imho.",
                    "author": {
                        "login": "sannajammeh"
                    },
                    "createdAt": "2023-03-28T10:20:30Z",
                    "url": "https://github.com/supabase/supabase-js/issues/151#issuecomment-1486595293"
                },
                {
                    "id": "IC_kwDOD79Crs5d4Yzx",
                    "body": "Even better if you could install each module separately.\r\n\r\nI'm trying to bundle a docker image, but `realtime-js` depends on `bufferutils` and `utf-8-validate`, both of which _must_ be built from source during install. I don't need `realtime-js`, and I really don't want to install python, make, etc, just to tree-shake it all away later. I have to generate _many_ permutations of my container per deploy, so the build-time really adds up (in dev time and CI/CD cost).\r\n\r\nThis doesn't necessarily mean everyone needs to install multiple packages. I'm sure a lot of people want just the one. But it wouldn't surprise me if others are hitting this docker issue.",
                    "author": {
                        "login": "mikestopcontinues"
                    },
                    "createdAt": "2023-06-03T16:46:57Z",
                    "url": "https://github.com/supabase/supabase-js/issues/151#issuecomment-1575062769"
                },
                {
                    "id": "IC_kwDOD79Crs5d4pBc",
                    "body": "Hey @mikestopcontinues, if all you use is the REST API, maybe using https://github.com/hugomrdias/postgrest-url with fetch would work for your use case!\r\n\r\nJust mentioning it since not sure what's the timeline for v3.",
                    "author": {
                        "login": "abhishiv"
                    },
                    "createdAt": "2023-06-03T18:58:15Z",
                    "url": "https://github.com/supabase/supabase-js/issues/151#issuecomment-1575129180"
                },
                {
                    "id": "IC_kwDOD79Crs5d5wOT",
                    "body": "Thanks @abhishiv, I ended up just creating a fork in the meantime.\r\n\r\nBTW, @soedirgo, `websocket` isn't big, but it does cause the issue I described above. The package hard-requires `bufferutil` and `utf-8-validate`, while `ws` has better handling around those packages. It's also a better-maintained package overall, and created by the same guy who made `bufferutil` and `utf-8-validate`. \r\n\r\nAs it stands, `websocket` prevents `supabase-js` from easily being installed in slim/alpine `arm64` docker images without jumping through hoops. It would make tree-shaking a perfectly viable solution, since it would circumvent needing to build binaries. Any chance of switching?",
                    "author": {
                        "login": "mikestopcontinues"
                    },
                    "createdAt": "2023-06-04T06:26:06Z",
                    "url": "https://github.com/supabase/supabase-js/issues/151#issuecomment-1575420819"
                },
                {
                    "id": "IC_kwDOD79Crs5kYLfv",
                    "body": "Currently Supabase takes about 300ms to be required in a AWS lambda function\r\n\r\nBeing able to only require the part of Supabase could significantly decrease cold starts for many projects:\r\n\r\n![Screenshot 2023-08-18 at 17 05 02](https://github.com/supabase/supabase-js/assets/31321188/dadab937-8ba0-49b5-9e48-7c5ed873f430)\r\n\r\n\r\n[require profile here](https://ucarecdn.com/a21718eb-b5bf-489b-80bf-2c899970c9da/)",
                    "author": {
                        "login": "remorses"
                    },
                    "createdAt": "2023-08-18T15:10:07Z",
                    "url": "https://github.com/supabase/supabase-js/issues/151#issuecomment-1684060143"
                },
                {
                    "id": "IC_kwDOD79Crs5kmqbw",
                    "body": "Thanks all! Some updates on reducing the bundle size:\r\n\r\n- we're in the process of replacing `cross-fetch` with [just `node-fetch`](https://github.com/supabase/postgrest-js/pull/462), which should shave around 3kB\r\n- we're planning to remove `node-fetch` altogether in v3\r\n- we're planning to replace `websocket` with `ws`, but we need to PoC this first - PRs welcome!\r\n\r\nThere's no timeline for tackling treeshaking at the moment, but we're open to proposals on how this could be done - ideally we don't have to sacrifice DX for this.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-08-22T09:51:00Z",
                    "url": "https://github.com/supabase/supabase-js/issues/151#issuecomment-1687856880"
                },
                {
                    "id": "IC_kwDOD79Crs5km43I",
                    "body": "For fetch you can use native-fetch to use the Nodejs 18 or browser native implementation when possible: https://github.com/achingbrain/native-fetch",
                    "author": {
                        "login": "remorses"
                    },
                    "createdAt": "2023-08-22T10:23:06Z",
                    "url": "https://github.com/supabase/supabase-js/issues/151#issuecomment-1687915976"
                },
                {
                    "id": "IC_kwDOD79Crs5krRrn",
                    "body": "@soedirgo \r\n> ideally we don't have to sacrifice DX for this.\r\n\r\nDX is nice, but apps are for _users_, not developers. Bundle size affects the _user_, so that should take a higher priority. DX is an extra. The deliverables are the important part.\r\n\r\n",
                    "author": {
                        "login": "binyamin"
                    },
                    "createdAt": "2023-08-22T23:50:02Z",
                    "url": "https://github.com/supabase/supabase-js/issues/151#issuecomment-1689066215"
                },
                {
                    "id": "IC_kwDOD79Crs5kw5MU",
                    "body": "Here's a nice website for checking how large each part of `supabase-js` is when it's bundled in an application\r\n\r\nJust click `Build` and then expand the Analysis collapsible:\r\nhttps://bundlejs.com/?q=%40supabase%2Fsupabase-js&treeshake=%5B%7BcreateClient%7D%5D&config=%7B%22analysis%22%3A%22sunburst%22%7D\r\n\r\nThese are the current stats:\r\n```\r\nname       gzip/size   %\r\n\r\ngotrue     23kb/107kb  39%\r\nrealtime   14kb/ 55kb  20%\r\npostgrest  10kb/ 41kb  15%\r\nstorage     7kb/ 33kb  12%\r\nsupabase    5kb/ 14kb  5%\r\nfunctions   2kb/  6kb  2%\r\n\r\ncross-fetch 4kb/ 15kb  5%\r\n```\r\n",
                    "author": {
                        "login": "BeeeQueue"
                    },
                    "createdAt": "2023-08-23T19:43:33Z",
                    "url": "https://github.com/supabase/supabase-js/issues/151#issuecomment-1690538772"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4NTc2NDMyMzE=",
            "number": 153,
            "title": "Invalid source map",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\n`sources` refers to a file that's not in the distribution\r\n\r\n```\r\n{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/index.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,cAAc,MAAM,kBAAkB,CAAA;AAG7C,cAAc,qBAAqB,CAAA;AACnC,cAAc,uBAAuB,CAAA;AAErC;;GAEG;AACH,MAAM,YAAY,GAAG,CACnB,WAAmB,EACnB,WAAmB,EACnB,OAA+B,EAC/B,EAAE;IACF,OAAO,IAAI,cAAc,CAAC,WAAW,EAAE,WAAW,EAAE,OAAO,CAAC,CAAA;AAC9D,CAAC,CAAA;AAED,OAAO,EACL,YAAY,EACZ,cAAc,GAKf,CAAA\"}\r\n```\r\n\r\n## To Reproduce\r\n\r\n```\r\nnpm install --save @supabase/supabase-js\r\n cat node_modules/@supabase/supabase-js/dist/module/index.js.map \r\n```\r\n\r\n## Expected behavior\r\n\r\nI'm not a source map expert, so I'm not quite sure the best way to fix this. I think you'd either want to distribute the source in the npm package or inline it to the sourcemap\r\n\r\n## Additional context\r\n\r\nI don't use Supabase, but work on SvelteKit and users are reporting issues that seem to be caused by trying to load this file that doesn't exist. https://github.com/sveltejs/kit/issues/673#issuecomment-807203786",
            "author": {
                "login": "benmccann"
            },
            "state": "CLOSED",
            "createdAt": "2021-04-14T08:12:31Z",
            "closedAt": "2021-04-14T13:15:25Z",
            "url": "https://github.com/supabase/supabase-js/issues/153",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxOTQ1ODY1NA==",
                    "body": "hey @benmccann thanks for the report! we'll take a look",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2021-04-14T11:51:44Z",
                    "url": "https://github.com/supabase/supabase-js/issues/153#issuecomment-819458654"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxOTQ2ODEwMA==",
                    "body": "Strange, it's just coming from the tsconfig\r\n\r\nhttps://github.com/supabase/supabase-js/blob/a0a48b8aa10ea5fa05951047c9103a9965a152c3/tsconfig.json#L10\r\n\r\nsourcemap option: https://www.typescriptlang.org/tsconfig#sourceMap\r\n\r\nSeems like the path to the file is wrong?\r\n<img width=\"510\" alt=\"image\" src=\"https://user-images.githubusercontent.com/10214025/114707775-30bacd00-9d5d-11eb-8581-29f202909802.png\">\r\n",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-04-14T12:08:11Z",
                    "url": "https://github.com/supabase/supabase-js/issues/153#issuecomment-819468100"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxOTQ3ODg2MQ==",
                    "body": "It looks like I can fix this by setting `mapRoot` option in `tsconfig` to `\"mapRoot\": \"./\",`\r\n\r\nThis produced the file: \r\n\r\n```\r\n{\"version\":3,\"file\":\"index.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"index.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,cAAc,MAAM,kBAAkB,CAAA;AAC7C,OAAO,EAAE,qBAAqB,EAAE,uBAAuB,EAAE,MAAM,aAAa,CAAA;AAC5E,OAAO,EAAE,IAAI,IAAI,QAAQ,EAAE,OAAO,IAAI,WAAW,EAAE,MAAM,qBAAqB,CAAA;AAC9E,cAAc,qBAAqB,CAAA;AACnC,cAAc,uBAAuB,CAAA;AAErC;;GAEG;AACH,QAAA,MAAM,YAAY,gBACH,MAAM,eACN,MAAM,gEAIpB,CAAA;AAED,OAAO,EACL,YAAY,EACZ,cAAc,EACd,qBAAqB,EACrB,uBAAuB,EACvB,QAAQ,EACR,WAAW,GACZ,CAAA\"}\r\n```\r\n\r\nJust need someone to test this output works with SvelteKit (i'll ask a member of our community)\r\n\r\nedit: didn't work \r\n\r\n```\r\nError: ENOENT: no such file or directory, open '/home/ixxie/repos/coflow-app/node_modules/@supabase/supabase-js/dist/module/index.ts'\r\n```\r\n\r\nIt seems we really do need to ship all of the `src` folder to npm too so that the maps in the `dist` folder can resolve properly\r\n\r\n<img width=\"217\" alt=\"image\" src=\"https://user-images.githubusercontent.com/10214025/114712351-9493c480-9d62-11eb-8407-e5c46a6bfaf6.png\">\r\n",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-04-14T12:27:20Z",
                    "url": "https://github.com/supabase/supabase-js/issues/153#issuecomment-819478861"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxOTQ5Mjk2NQ==",
                    "body": ":tada: This issue has been resolved in version 1.11.1 :tada:\n\nThe release is available on:\n- [npm package (@latest dist-tag)](https://www.npmjs.com/package/@supabase/supabase-js/v/1.11.1)\n- [GitHub release](https://github.com/supabase/supabase-js/releases/tag/v1.11.1)\n\nYour **[semantic-release](https://github.com/semantic-release/semantic-release)** bot :package::rocket:",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-04-14T12:51:01Z",
                    "url": "https://github.com/supabase/supabase-js/issues/153#issuecomment-819492965"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxOTUwNDczOQ==",
                    "body": ":tada: This issue has been resolved in version 1.11.2 :tada:\n\nThe release is available on:\n- [npm package (@latest dist-tag)](https://www.npmjs.com/package/@supabase/supabase-js/v/1.11.2)\n- [GitHub release](https://github.com/supabase/supabase-js/releases/tag/v1.11.2)\n\nYour **[semantic-release](https://github.com/semantic-release/semantic-release)** bot :package::rocket:",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-04-14T13:08:55Z",
                    "url": "https://github.com/supabase/supabase-js/issues/153#issuecomment-819504739"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxOTUwOTQ2Mw==",
                    "body": "OK this is now solved (i hear there's a problem with `global` declaration inside the `websocket` library, but we should start a new issue for that)\r\n\r\n",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-04-14T13:15:25Z",
                    "url": "https://github.com/supabase/supabase-js/issues/153#issuecomment-819509463"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4NTc2NzYzMDM=",
            "number": 154,
            "title": "\"XMLHttpRequest is not defined\" on sveltekit endpoints when deployed on Vercel",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nUsing the client for auth or for querying the database in a sveltekit endpoint throw an error :\r\n```\r\n{\r\n  data: null,\r\n  error: ReferenceError: XMLHttpRequest is not defined\r\n      at file:///var/task/server/app.mjs:2522:21\r\n      at new Promise (<anonymous>)\r\n      at fetch2 (file:///var/task/server/app.mjs:2517:16)\r\n      at file:///var/task/server/app.mjs:2646:7\r\n      at new Promise (<anonymous>)\r\n      at file:///var/task/server/app.mjs:2645:12\r\n      at Generator.next (<anonymous>)\r\n      at file:///var/task/server/app.mjs:2619:67\r\n      at new Promise (<anonymous>)\r\n      at __awaiter$8 (file:///var/task/server/app.mjs:2601:10)\r\n}\r\n```\r\n\r\n## To Reproduce\r\n\r\nI made a repository exposing the issue : https://github.com/Pixselve/supabase-sveltekit-endpoints\r\nClick on a button to fetch the endpoint and observe the cloud functions logs on Vercel.\r\n\r\n## Expected behavior\r\n\r\nRequests should not fail and should give the appropriate data.\r\n\r\n## System information\r\n\r\n- OS: Vercel Node.js Runtime\r\n- Version of supabase-js: 1.10.0\r\n- Version of Node.js: 14",
            "author": {
                "login": "Pixselve"
            },
            "state": "CLOSED",
            "createdAt": "2021-04-12T12:21:23Z",
            "closedAt": "2021-11-08T11:39:00Z",
            "url": "https://github.com/supabase/supabase-js/issues/154",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxOTM1MDYwMg==",
                    "body": "Thanks for reporting this one @Pixselve - i'll transfer it to the JS library repo",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-04-14T08:50:52Z",
                    "url": "https://github.com/supabase/supabase-js/issues/154#issuecomment-819350602"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyMTkyOTY0Ng==",
                    "body": "Related? vitejs/vite/pull/2996\r\n",
                    "author": {
                        "login": "stupidawesome"
                    },
                    "createdAt": "2021-04-18T04:18:55Z",
                    "url": "https://github.com/supabase/supabase-js/issues/154#issuecomment-821929646"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyMTkzMDQ0NA==",
                    "body": "Could be - we already had to do a bunch of work to make Vite work:\r\n\r\nhttps://github.com/supabase/supabase-js/issues/89\r\nhttps://github.com/supabase/supabase-js/issues/155\r\n\r\nIs this still causing problems on the latest supabase-js?",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-04-18T04:28:30Z",
                    "url": "https://github.com/supabase/supabase-js/issues/154#issuecomment-821930444"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyMTkzMTY5MA==",
                    "body": "I've been trying to get this working over the weekend, my package.json is:\r\n\r\n```json\r\n{\r\n\t\"devDependencies\": {\r\n\t\t\"@commitlint/cli\": \"^12.1.1\",\r\n\t\t\"@commitlint/config-conventional\": \"^12.1.1\",\r\n\t\t\"@sveltejs/adapter-node\": \"next\",\r\n\t\t\"@sveltejs/adapter-vercel\": \"^1.0.0-next.10\",\r\n\t\t\"@sveltejs/kit\": \"next\",\r\n\t\t\"autoprefixer\": \"^10.2.5\",\r\n\t\t\"cssnano\": \"^5.0.0\",\r\n\t\t\"husky\": \"^6.0.0\",\r\n\t\t\"openapi-typescript\": \"^3.2.3\",\r\n\t\t\"postcss\": \"^8.2.10\",\r\n\t\t\"postcss-load-config\": \"^3.0.1\",\r\n\t\t\"prettier\": \"~2.2.1\",\r\n\t\t\"prettier-plugin-svelte\": \"^2.2.0\",\r\n\t\t\"pretty-quick\": \"^3.1.0\",\r\n\t\t\"svelte\": \"^3.29.0\",\r\n\t\t\"svelte-preprocess\": \"^4.7.0\",\r\n\t\t\"tailwindcss\": \"^2.1.1\",\r\n\t\t\"tslib\": \"^2.0.0\",\r\n\t\t\"typescript\": \"^4.0.0\",\r\n\t\t\"vite\": \"^2.1.0\"\r\n\t},\r\n\t\"type\": \"module\",\r\n\t\"dependencies\": {\r\n\t\t\"@supabase/supabase-js\": \"^1.11.6\"\r\n\t},\r\n}\r\n```\r\n\r\nWith the following svelte.config.cjs\r\n\r\n```js\r\nmodule.exports = {\r\n\tpreprocess: [\r\n\t\tsveltePreprocess({\r\n\t\t\tdefaults: {\r\n\t\t\t\tstyle: \"postcss\",\r\n\t\t\t},\r\n\t\t\tpostcss: true,\r\n\t\t}),\r\n\t],\r\n\tkit: {\r\n\t\tadapter: vercel(),\r\n\t\ttarget: \"#svelte\",\r\n\t\tvite: {\r\n\t\t\tssr: {\r\n\t\t\t\tnoExternal: process.env.NODE_ENV === 'production' ? Object.keys(pkg.dependencies || {}) : []\r\n\t\t\t},\r\n\t\t},\r\n\t},\r\n};\r\n```\r\n\r\nDeploying this configuration to vercel serverless produces the \"XMLHTTPRequest is not defined\" error in production. In dev mode it works fine, but if you build and run `yarn start` you can see the error.\r\n\r\nEdit: updated config to correctly reproduce error.\r\n\r\nIn the generated code you can clearly see the browserPonyfill being inlined instead of node-fetch.\r\n\r\nFrom `server/app.mjs`\r\n![image](https://user-images.githubusercontent.com/31086926/115134993-665eff00-a058-11eb-81bd-8b6416477d74.png)\r\n![image](https://user-images.githubusercontent.com/31086926/115135030-a7571380-a058-11eb-8e96-d1c9bb64b1d5.png)\r\n",
                    "author": {
                        "login": "stupidawesome"
                    },
                    "createdAt": "2021-04-18T04:43:59Z",
                    "url": "https://github.com/supabase/supabase-js/issues/154#issuecomment-821931690"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyMTkzNjA4Mg==",
                    "body": "I note that the PR mentioned above has already been merged. I tried building Vite locally and it doesn't appear to make a difference.",
                    "author": {
                        "login": "stupidawesome"
                    },
                    "createdAt": "2021-04-18T05:25:05Z",
                    "url": "https://github.com/supabase/supabase-js/issues/154#issuecomment-821936082"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyMTk0MTAzMQ==",
                    "body": "Strongly suspect this is https://github.com/lquixada/cross-fetch/issues/78 \"Cross-fetch is not usable in service workers\" in disguise.",
                    "author": {
                        "login": "i-infra"
                    },
                    "createdAt": "2021-04-18T06:14:50Z",
                    "url": "https://github.com/supabase/supabase-js/issues/154#issuecomment-821941031"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyMTk0NDg5Mw==",
                    "body": "In that case, you could try this: https://github.com/supabase/supabase/tree/master/examples/with-cloudflare-workers",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-04-18T06:58:45Z",
                    "url": "https://github.com/supabase/supabase-js/issues/154#issuecomment-821944893"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyMTk1NTUxOA==",
                    "body": "```javascript\r\nasync function supabaseInsert (table, arg) {\r\n return fetch(`${supabaseUrl}/rest/v1/${table}`, {\r\n  headers: {\r\n    Apikey: supabaseKey,\r\n    Authorization: `Bearer ${supabaseKey}`,\r\n    \"Content-Type\": \"application/json\",\r\n    Prefer: \"return=representation\"\r\n  },\r\n  method: \"POST\",\r\n body: JSON.stringify(arg)\r\n})\r\n}\r\n\r\nasync function supabaseFrom (table, filter) {\r\nreturn fetch(`${supabaseUrl}/rest/v1/${table}?${filter}`, {\r\n  headers: {\r\n    Apikey: supabaseKey,\r\n    Authorization: `Bearer ${supabaseKey}`,\r\n  }\r\n})\r\n}\r\n```\r\n\r\n got it done after an hour or two of npm misadventures.\r\n\r\nIn any case, appreciate the prompt response @kiwicopple ! Supabase is working marvelously and took exactly one evening to actually get working. The exploration also introduced me to [postgrest](https://postgrest.org/en/stable/api.html#horizontal-filtering-rows), which seems a phenomenal building block for supabase's product! Cheers!",
                    "author": {
                        "login": "i-infra"
                    },
                    "createdAt": "2021-04-18T08:37:38Z",
                    "url": "https://github.com/supabase/supabase-js/issues/154#issuecomment-821955518"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyMTk2NjgzNQ==",
                    "body": "I think I've gotten to the bottom of this.\r\n\r\n1. Serverless deployments require bundling of node_modules. That's why you need `noExternal` to include all node dependencies otherwise you get errors during deployment. This causes dev mode to break, so only add node deps to `noExternal` when process.env.NODE_ENV = \"production.\r\n\r\n2. Vite creates two bundles, a server bundle \"functions/node/render/server/app.mjs\" and a client bundle \"static/_app/*\". The problem is that it only reads dependencies once:\r\n\r\nhttps://github.com/vitejs/vite/blob/344d77e9735bc907b9383ad729afb0a8daa2af5f/packages/vite/src/node/plugins/resolve.ts#L466\r\n\r\nFirst off, `cross-fetch` always resolves to the browser entry point. The way the entry point is resolved does not take into account whether the bundler is in SSR mode or not. \r\n\r\n3. But even if it did resolve correctly, Vite only does one pass over each dependency and then caches it. You can't have the same package resolve to a different entry point for SSR unless you remove `resolvedImports['.']` or flush it between each phase.\r\n\r\nSo my hacky workaround at the moment is to force disable the browser entry point during SSR module generation, and to disable module caching.\r\n\r\n![image](https://user-images.githubusercontent.com/31086926/115141701-1f393400-a081-11eb-81cb-940af06a598d.png)\r\n\r\nThis will need to be fixed by Vite.",
                    "author": {
                        "login": "stupidawesome"
                    },
                    "createdAt": "2021-04-18T10:03:41Z",
                    "url": "https://github.com/supabase/supabase-js/issues/154#issuecomment-821966835"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyNTk4NjQ1OA==",
                    "body": "Hi all, I think this issue can be fixed all the way at the core dependency, even deeper than `cross-fetch`, but might require more input and attention to actually push it through. It could fix not just this problem, but a lot of other tangential issues as well.\r\n\r\nhttps://github.com/github/fetch/pull/956",
                    "author": {
                        "login": "jcs224"
                    },
                    "createdAt": "2021-04-23T23:10:01Z",
                    "url": "https://github.com/supabase/supabase-js/issues/154#issuecomment-825986458"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgzNzYxNjIwMg==",
                    "body": "Hey @jcs224 - it looks like the linked issue was resolved. Does it also solve this issue?",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-05-11T01:39:44Z",
                    "url": "https://github.com/supabase/supabase-js/issues/154#issuecomment-837616202"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgzODE2MjI4OA==",
                    "body": "Just tried using the same code in the repository when I started the issue (I only updated svelte kit) and it now works perfectly. Thanks to you all!",
                    "author": {
                        "login": "Pixselve"
                    },
                    "createdAt": "2021-05-11T09:36:45Z",
                    "url": "https://github.com/supabase/supabase-js/issues/154#issuecomment-838162288"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg0MTc2MTIyNg==",
                    "body": "@Pixselve interesting it worked for you.. `cross-fetch` hasn't yet updated the dependency needed with the underlying changes. :thinking: Maybe Vite made some adjustment that made it work?\r\n\r\n@kiwicopple I think the change is going to have to propagate through `cross-fetch` before it will do us any good. Maybe I'll bump this again on the `cross-fetch` side. ",
                    "author": {
                        "login": "jcs224"
                    },
                    "createdAt": "2021-05-16T03:42:47Z",
                    "url": "https://github.com/supabase/supabase-js/issues/154#issuecomment-841761226"
                },
                {
                    "id": "IC_kwDOD79Crs4173QS",
                    "body": "It looks like FaunaDB solved this. Essentially, they added an extra config argument that allows users to opt-out of cross-fetch by passing in a custom fetch function.\r\n\r\nIssue: https://github.com/fauna/faunadb-js/issues/207\r\nPR: https://github.com/fauna/faunadb-js/pull/214\r\n\r\nSo a potential solution for this is:\r\n\r\n```ts\r\nimport { createClient } from '@supabase/supabase-js'\r\n\r\nexport const supabase = createClient(\r\n    import.meta.env.VITE_SUPABASE_URL,\r\n    import.meta.env.VITE_SUPABASE_KEY,\r\n    {\r\n        fetch: import.meta.env.USE_NATIVE_FETCH ? fetch : undefined,\r\n    }\r\n)\r\n```\r\n\r\nIf no fetch is provided, cross-fetch is used. @kiwicopple, would this be straightforward to implement?",
                    "author": {
                        "login": "Nick-Mazuk"
                    },
                    "createdAt": "2021-08-24T18:43:39Z",
                    "url": "https://github.com/supabase/supabase-js/issues/154#issuecomment-904885266"
                },
                {
                    "id": "IC_kwDOD79Crs42-K16",
                    "body": "Hi there, I believe this is why I'm getting this error with svelte kit and supabase:\r\n\r\n![Screen Shot 2021-09-18 at 14 05 29](https://user-images.githubusercontent.com/10283686/133888215-fff37f42-2502-4745-a97d-dc2a49d3fb3d.png)\r\n\r\n`__layout.svelte`\r\n```svelte\r\n<script lang=\"ts\">\r\n\timport { user } from '../store/sessionStore';\r\n\timport { supabase } from '$lib/supabaseClient';\r\n\timport { browser } from '$app/env';\r\n\r\n\tuser.set(supabase.auth.user());\r\n\r\n\tif (browser) {\r\n\t\tsupabase.auth.onAuthStateChange((event, session) => {\r\n\t\t\tconsole.log('updating with', session);\r\n\t\t\tuser.set(session!.user);\r\n\t\t});\r\n\t}\r\n</script>\r\n\r\n\r\n<slot />\r\n```\r\n\r\nHope to get a fix soon. Thank you all for your hard work.",
                    "author": {
                        "login": "Fedeorlandau"
                    },
                    "createdAt": "2021-09-18T12:08:08Z",
                    "url": "https://github.com/supabase/supabase-js/issues/154#issuecomment-922267002"
                },
                {
                    "id": "IC_kwDOD79Crs45Xg4X",
                    "body": "I've opened several PRs that allow specifying a custom `fetch` implementation as an option - ideally I think `cross-fetch` should support environments like Cloudflare Workers given its use in the ecosystem, but a custom `fetch` option enables a workaround today, gives flexibility for future environments (e.g. ones that don't yet exist or are more esoteric), and allows you to provide a mocked `fetch` for testing or otherwise customize `fetch` based on your specific needs.\r\n\r\n```js\r\nimport { createClient } from '@supabase/supabase-js'\r\n\r\nconst supabase = createClient('url', 'key', { fetch: fetch })\r\n```\r\n\r\nThe main `@supabase/supabase-js` library wraps other client libraries, so each needs a PR to enable the option.\r\n\r\nWrapped Clients\r\n\r\n- https://github.com/supabase/postgrest-js/pull/222\r\n- https://github.com/supabase/gotrue-js/pull/168\r\n- https://github.com/supabase/storage-js/pull/24\r\n\r\n`supabase-js` (depends on the other three PRs)\r\n\r\n- https://github.com/supabase/supabase-js/pull/297",
                    "author": {
                        "login": "jacobwgillespie"
                    },
                    "createdAt": "2021-11-06T15:10:11Z",
                    "url": "https://github.com/supabase/supabase-js/issues/154#issuecomment-962465303"
                },
                {
                    "id": "IC_kwDOD79Crs45Xswj",
                    "body": "FYI this also happens when supabase-js is used within NextJS 12 middleware. Since the PRs above aren't merged yet, I am not sure there's a solution other than using the REST API directly over the SDK.",
                    "author": {
                        "login": "TomasHubelbauer"
                    },
                    "createdAt": "2021-11-06T21:44:02Z",
                    "url": "https://github.com/supabase/supabase-js/issues/154#issuecomment-962513955"
                },
                {
                    "id": "IC_kwDOD79Crs45ZzpG",
                    "body": "Thanks to a very impressive series of PRs from @jacobwgillespie , this now has a workaround\r\n\r\nhttps://github.com/supabase/supabase-js/releases/tag/v1.27.0\r\n\r\nafter upgrading to v1.27.0 you can use a custom `fetch` implementation\r\n\r\n```\r\nimport { createClient } from '@supabase/supabase-js'\r\n\r\n// Provide a custom `fetch` implementation as an option\r\nconst supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key', { fetch: fetch })\r\n```\r\n\r\nJacob - if you send your details (and tshirt size) to swag@supabase.io we will send you a nice package \ud83d\ude4f ",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-11-08T11:38:12Z",
                    "url": "https://github.com/supabase/supabase-js/issues/154#issuecomment-963066438"
                },
                {
                    "id": "IC_kwDOD79Crs45blF7",
                    "body": "Hello @kiwicopple it's not working for me, i do it createClient('..','..',{fetch:fetch})\r\nbut it still doesn't work, Cloudflare workers shows Invalid invocation",
                    "author": {
                        "login": "PH4NTOMiki"
                    },
                    "createdAt": "2021-11-08T20:10:07Z",
                    "url": "https://github.com/supabase/supabase-js/issues/154#issuecomment-963531131"
                },
                {
                    "id": "IC_kwDOD79Crs45cPAz",
                    "body": "@PH4NTOMiki that's probably unclear documentation on my part, I believe if you directly pass the native `fetch` function as the custom `fetch`, JavaScript will treat this as an \"illegal invocation\" as it tries to execute a native method in the context of the Supabase options argument rather than in the global context it was attached to.\r\n\r\nYou can pass a custom function or bind the `fetch` function to work around that issue. For Cloudflare Workers specifically, there is no `global` or `window` object like you'd have in other runtimes, but you do have `self`, so:\r\n\r\n```js\r\nconst supabase = createClient('...', '...', {fetch: fetch.bind(self)})\r\n```\r\n\r\nReally the example I added to the README should have probably been `{ fetch: customFetch }` to avoid confusion, I can look at opening a few more PRs. \ud83d\ude42 ",
                    "author": {
                        "login": "jacobwgillespie"
                    },
                    "createdAt": "2021-11-09T00:34:57Z",
                    "url": "https://github.com/supabase/supabase-js/issues/154#issuecomment-963702835"
                },
                {
                    "id": "IC_kwDOD79Crs46Mv-2",
                    "body": "> Hello @kiwicopple it's not working for me, i do it createClient('..','..',{fetch:fetch}) but it still doesn't work, Cloudflare workers shows Invalid invocation\r\n\r\nI'm getting a similar issue \u2014 adding `const supabase = createClient('...', '...', {fetch: fetch.bind(self)})` still results in the XMLHTTPrequest error when deployed on Cloudflare pages.\r\n\r\n@jacobwgillespie @kiwicopple can you provide a code example of what that customFetch function should be and how it should be included in an endpoint?\r\n\r\nIn my case, here is the original call I'm making\r\n\r\n```javascript\r\n    async function submitForm(e) {\r\n        var formData = new FormData(e.target);\r\n\r\n        formData.append('loaded_address', loaded_address);\r\n        formData.append('address', address);\r\n\r\n        const response = await fetch(`./submitform`, {\r\n      method: 'post',\r\n      body: formData\r\n    })\r\n        response.ok ? ( form_submit = \"success\" ) : (form_submit = \"error\" )\r\n\r\n    }\r\n```\r\n\r\nAnd here is the SvelteKit endpoint it hits, which makes the Supabase request and produces the `FetchError: XMLHttpRequest is not defined` error:\r\n\r\n    \r\n```javascript\r\n    // import supabase from \"$lib/db\"\r\nimport { variables } from '$lib/variables';\r\n\r\nimport { createClient } from '@supabase/supabase-js'\r\n\r\nconst supabase = createClient( import.meta.env.VITE_SUPABASE_URL,\r\n    import.meta.env.VITE_SUPABASE_ANON_KEY, { fetch: fetch })\r\n\r\nexport async function post(request) {\r\n\r\nconst {data, error} = await supabase\r\n.from('support_responses')\r\n.insert({support_info: request.body.get('support_info'), introduction: request.body.get('introduction'), contact: request.body.get('contact'), loaded_location: request.body.get('loaded_address'), searched_location: request.body.get('address')})\r\n\r\nif (error) {\r\nreturn {\r\n    status: 500,\r\n    body: error\r\n  }\r\n}\r\nelse {\r\n\r\nreturn {\r\n    status: 200,\r\n    body: {\r\n      data\r\n    }\r\n  }\r\n}\r\n\r\n}\r\n```",
                    "author": {
                        "login": "sbutler-gh"
                    },
                    "createdAt": "2021-11-23T11:25:09Z",
                    "url": "https://github.com/supabase/supabase-js/issues/154#issuecomment-976420790"
                },
                {
                    "id": "IC_kwDOD79Crs46OKyo",
                    "body": "@sbutler-gh I believe you want this when creating the client in Cloudflare Workers:\r\n\r\n```typescript\r\nconst supabase = createClient( import.meta.env.VITE_SUPABASE_URL,\r\n    import.meta.env.VITE_SUPABASE_ANON_KEY, { fetch: fetch.bind(self) })\r\n```\r\n\r\nNote the `fetch: fetch.bind(self)`. It would probably also work with `fetch: (...args) => fetch(...args)`.",
                    "author": {
                        "login": "jacobwgillespie"
                    },
                    "createdAt": "2021-11-23T16:19:08Z",
                    "url": "https://github.com/supabase/supabase-js/issues/154#issuecomment-976792744"
                },
                {
                    "id": "IC_kwDOD79Crs46OTHN",
                    "body": "> @sbutler-gh I believe you want this when creating the client in Cloudflare Workers:\r\n> \r\n> ```ts\r\n> const supabase = createClient( import.meta.env.VITE_SUPABASE_URL,\r\n>     import.meta.env.VITE_SUPABASE_ANON_KEY, { fetch: fetch.bind(self) })\r\n> ```\r\n> \r\n> Note the `fetch: fetch.bind(self)`. It would probably also work with `fetch: (...args) => fetch(...args)`.\r\n\r\nHuge thanks for the help on this @jacobwgillespie .  When I try `fetch: fetch.bind(self)`, I get the following error locally and when building for production:\r\n\r\n> Error when evaluating SSR module /Users/sam/just-start/src/routes/submitform.js:\r\n> ReferenceError: self is not defined\r\n>     at /Users/sam/just-start/src/routes/submitform.js:7:65\r\n>     at async instantiateModule (/Users/sam/just-start/node_modules/vite/dist/node/chunks/dep-f5e099f1.js:66443:9)\r\n> self is not defined\r\n> ReferenceError: self is not defined\r\n>     at /Users/sam/just-start/src/routes/submitform.js:7:65\r\n>     at async instantiateModule (/Users/sam/just-start/node_modules/vite/dist/node/chunks/dep-f5e099f1.js:66443:9)\r\n\r\n    \r\nWhen I try `fetch: (...args) => fetch(...args)`, it works in development and when building locally, but results in the same `XMLHTTPrequest` error when deployed on CF.  Any other thoughts?",
                    "author": {
                        "login": "sbutler-gh"
                    },
                    "createdAt": "2021-11-23T16:39:40Z",
                    "url": "https://github.com/supabase/supabase-js/issues/154#issuecomment-976826829"
                },
                {
                    "id": "IC_kwDOD79Crs46OWbD",
                    "body": "@sbutler-gh I think your repo isn't actually using the up-to-date version of `@supabase/supabase-js`, see here:\r\n\r\nhttps://github.com/sbutler-gh/just-start/blob/c32ecef9d35bfbcb67f187f6725b66986a288b0a/package-lock.json#L325-L326\r\n\r\nIt appears it's using version 1.24.0, and the ability to pass in a custom fetch implementation was added in 1.27.0 (and 1.28.1 is the latest version).",
                    "author": {
                        "login": "jacobwgillespie"
                    },
                    "createdAt": "2021-11-23T16:49:23Z",
                    "url": "https://github.com/supabase/supabase-js/issues/154#issuecomment-976840387"
                },
                {
                    "id": "IC_kwDOD79Crs46Obav",
                    "body": "> @sbutler-gh I think your repo isn't actually using the up-to-date version of `@supabase/supabase-js`, see here:\r\n> \r\n> [sbutler-gh/just-start@`c32ecef`/package-lock.json#L325-L326](https://github.com/sbutler-gh/just-start/blob/c32ecef9d35bfbcb67f187f6725b66986a288b0a/package-lock.json#L325-L326)\r\n> \r\n> It appears it's using version 1.24.0, and the ability to pass in a custom fetch implementation was added in 1.27.0 (and 1.28.1 is the latest version).\r\n\r\nAfter running `npm update` to update packages and re-deploying, it now works as expected in production on Cloudflare Pages!  (using `fetch: (...args) => fetch(...args)`, didn't try the other syntaxes yet.). Thank you SO MUCH @jacobwgillespie !  I can't thank you enough!",
                    "author": {
                        "login": "sbutler-gh"
                    },
                    "createdAt": "2021-11-23T17:05:38Z",
                    "url": "https://github.com/supabase/supabase-js/issues/154#issuecomment-976860847"
                },
                {
                    "id": "IC_kwDOD79Crs4792az",
                    "body": "For Next users wondering if this (v1.27+) allows Supabase client use in the middleware API - yes:\r\n\r\n```typescript\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport { NextRequest, NextResponse } from 'next/server';\r\n\r\nexport async function middleware(request: NextRequest) {\r\n  const supabase = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL!, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!, { fetch });\r\n  \u2026\r\n```\r\n\r\nThis works great and there is not even need to rebind `fetch` using `fetch.bind(self)` or `(...args) => fetch(...args)`!",
                    "author": {
                        "login": "TomasHubelbauer"
                    },
                    "createdAt": "2022-01-05T20:54:17Z",
                    "url": "https://github.com/supabase/supabase-js/issues/154#issuecomment-1006069427"
                },
                {
                    "id": "IC_kwDOD79Crs5MueMb",
                    "body": "Is there probably a regression in the 2.0 branch? I have trouble getting the server side code to work. Tried the new {global: {fetch: ...}} config option. But that doesn't seem to work. Even using Node 18 didn't help.\r\n\r\nIt's a vite/sveltekit project.\r\n\r\n```bash\r\nrequire is not defined\r\nReferenceError: require is not defined\r\n    at [...]/node_modules/.pnpm/cross-fetch@3.1.5/node_modules/cross-fetch/dist/node-ponyfill.js:1:32\r\n    at instantiateModule (file:///[...]/node_modules/.pnpm/vite@3.1.8/node_modules/vite/dist/node/chunks/dep-4da11a5e.js:53445:15)\r\n```",
                    "author": {
                        "login": "Crenshinibon"
                    },
                    "createdAt": "2022-10-21T17:32:06Z",
                    "url": "https://github.com/supabase/supabase-js/issues/154#issuecomment-1287250715"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4NTc5ODI1MDg=",
            "number": 155,
            "title": "Isomorphism breaks due to Websockets when using SSR",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen importing `createClient` into a SvelteKit project, the following error is raised:\r\n\r\n```\r\n5:49:56 PM [vite] Error when evaluating SSR module /node_modules/websocket/lib/browser.js?v=f34fcf64:\r\nError: Could not determine global this\r\n    at /node_modules/websocket/lib/browser.js?v=f34fcf64:7:28\r\n    at instantiateModule (/home/ixxie/repos/minex/node_modules/vite/dist/node/chunks/dep-66eb515d.js:69030:166)\r\n```\r\n\r\nIt seems to come [from this block of code in the Websockets package](https://github.com/theturtle32/WebSocket-Node/blob/39bf9037707f9cd60ce04ae6fd2203c97480c2fe/lib/browser.js#L2-L8).\r\n\r\n## To Reproduce\r\n\r\n```\r\nnpm init svelte@next\r\nnpm install\r\nnpm install --save-prod @supabase/supabase-js\r\nsed -i \"s/<script>/<script>\\n\\timport { createClient } from '@supabase\\/supabase-js';/\" ./src/routes/index.svelte\r\nnpm run dev\r\n```\r\n\r\n## Expected behavior\r\n\r\nImport should work without error\r\n\r\n## Screenshots\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n## System information\r\n\r\n- Version of supabase-js: 1.11.2\r\n- Version of Node.js: 14.15.4\r\n\r\n## Additional context\r\n\r\nThis was discovered after resolving https://github.com/supabase/supabase-js/issues/153, after which @kiwicopple recommended I create a new issue.",
            "author": {
                "login": "ixxie"
            },
            "state": "CLOSED",
            "createdAt": "2021-04-14T14:56:24Z",
            "closedAt": "2021-04-15T06:49:40Z",
            "url": "https://github.com/supabase/supabase-js/issues/155",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxOTcwMTI2Mg==",
                    "body": "I've now tried a similar minimal example using `es5-ext/global` directly and it seems the root of the issue is there. It seems this package is abandoned (not github activity for a year) and perhaps an alternative should be suggested to the `websocket` maintainers but I am not sure what it would be...",
                    "author": {
                        "login": "ixxie"
                    },
                    "createdAt": "2021-04-14T17:44:52Z",
                    "url": "https://github.com/supabase/supabase-js/issues/155#issuecomment-819701262"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxOTgwMjA1MQ==",
                    "body": "Perhaps https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis could be used if it's available",
                    "author": {
                        "login": "benmccann"
                    },
                    "createdAt": "2021-04-14T20:13:32Z",
                    "url": "https://github.com/supabase/supabase-js/issues/155#issuecomment-819802051"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxOTgyNzE3OQ==",
                    "body": "@benmccann this is what I suggested and this was already released into `websockets@1.0.34` by its maintainer (see https://github.com/theturtle32/WebSocket-Node/issues/415).",
                    "author": {
                        "login": "ixxie"
                    },
                    "createdAt": "2021-04-14T20:57:50Z",
                    "url": "https://github.com/supabase/supabase-js/issues/155#issuecomment-819827179"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxOTkzNjYwNw==",
                    "body": "We originally used globalThis in gotrue and had to polyfill it: https://github.com/supabase/gotrue-js/issues/38\r\n\r\nI find this a bit odd though, because our supabase-js client is isomorphic. We already use it in a node environment and it works fine \ud83e\udd14 \r\n\r\n\r\n",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-04-15T00:35:20Z",
                    "url": "https://github.com/supabase/supabase-js/issues/155#issuecomment-819936607"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyMDAwOTU2Nw==",
                    "body": "Anyway, this issue seems fixed by websocket@1.0.34, so at most we'd need to upgrade `package.json` and then can close this",
                    "author": {
                        "login": "benmccann"
                    },
                    "createdAt": "2021-04-15T02:23:32Z",
                    "url": "https://github.com/supabase/supabase-js/issues/155#issuecomment-820009567"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyMDAzMTc5Mw==",
                    "body": "I'm not sure if it's related to the `globalThis` issue, but once the `globalThis` issue is fixed I encounter another issue that seems to be a Vite bug: https://github.com/vitejs/vite/issues/2995",
                    "author": {
                        "login": "benmccann"
                    },
                    "createdAt": "2021-04-15T03:33:30Z",
                    "url": "https://github.com/supabase/supabase-js/issues/155#issuecomment-820031793"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyMDE0MzkwMw==",
                    "body": "OK I bumped to the latest. I'll leave this open if anyone can confirm the fix?",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-04-15T06:11:32Z",
                    "url": "https://github.com/supabase/supabase-js/issues/155#issuecomment-820143903"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyMDE0NDI0OA==",
                    "body": ":tada: This issue has been resolved in version 1.11.3 :tada:\n\nThe release is available on:\n- [npm package (@latest dist-tag)](https://www.npmjs.com/package/@supabase/supabase-js/v/1.11.3)\n- [GitHub release](https://github.com/supabase/supabase-js/releases/tag/v1.11.3)\n\nYour **[semantic-release](https://github.com/semantic-release/semantic-release)** bot :package::rocket:",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-04-15T06:12:15Z",
                    "url": "https://github.com/supabase/supabase-js/issues/155#issuecomment-820144248"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyMDQ4MDkwOQ==",
                    "body": "Thanks! There's multiple issues left running Supabase with SvelteKit, but they're pretty clearly issues with Vite so we'll work on those in that repo. Thanks for all your help!",
                    "author": {
                        "login": "benmccann"
                    },
                    "createdAt": "2021-04-15T14:39:04Z",
                    "url": "https://github.com/supabase/supabase-js/issues/155#issuecomment-820480909"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4NTk1NDA2ODc=",
            "number": 160,
            "title": "upload to storage from backend (node)",
            "body": "# Feature request\r\nIt's not currently possible to upload a file to supabase.storage using only NodeJS. \r\n\r\n## Is your feature request related to a problem? Please describe.\r\nMy backend does processing of user media files. It downloads them from supabase.storage and after processing should be able to upload back.\r\n\r\n## Describe the solution you'd like\r\nI would like to have an overload of `upload` function that accepts path to a file or a stream.\r\n\r\n## Describe alternatives you've considered\r\nI looked through docs and couldn't find any.",
            "author": {
                "login": "Ascarbek"
            },
            "state": "CLOSED",
            "createdAt": "2021-04-16T07:21:31Z",
            "closedAt": "2021-08-11T17:48:07Z",
            "url": "https://github.com/supabase/supabase-js/issues/160",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs41d4dC",
                    "body": "This should be supported now with https://github.com/supabase/storage-js/pull/17, but feel free to reopen if it doesn't work for you.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-08-11T17:48:07Z",
                    "url": "https://github.com/supabase/supabase-js/issues/160#issuecomment-897025858"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4NjA3ODQ3OTg=",
            "number": 161,
            "title": "Deno / Deno Deploy compatibility",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nI tried importing a Skypack and jspm version of the supabase-js client library, without success. I can create issues for the problems if you want, but since no one has brought up Deno yet I thought I'd start with a feature request.\r\n\r\nAlso, it would be really cool to be able to use Supabase with the new Deno Deploy service, just announced a couple of weeks ago.\r\n\r\nhttps://deno.com/deploy\r\n\r\n## Describe the solution you'd like\r\n\r\nCompatibility and instructions on how to use Deno / Deno Deploy with Supabase.\r\n\r\n## Describe alternatives you've considered\r\n\r\nUsing Node, of course :p but Deno is really nice to use and seems ambitious and forward thinking, similar to Supabase.\r\n\r\n## Additional context\r\n\r\nAdd any other context or screenshots about the feature request here.\r\n",
            "author": {
                "login": "jcs224"
            },
            "state": "CLOSED",
            "createdAt": "2021-04-18T22:54:17Z",
            "closedAt": "2022-08-23T03:47:52Z",
            "url": "https://github.com/supabase/supabase-js/issues/161",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyMjExMzczNw==",
                    "body": "> it would be really cool to be able to use Supabase with the new Deno Deploy service\r\n\r\nNice one, thanks @jcs224. Did you attempt this one already? Where there any issues/errors?",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-04-19T01:47:43Z",
                    "url": "https://github.com/supabase/supabase-js/issues/161#issuecomment-822113737"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyMjExOTE3NA==",
                    "body": "@kiwicopple I didn't try it with Deno Deploy yet, just the regular Deno CLI. I will try it with Deno Deploy, I'm sure the issues will be similar. Deno Deploy only has a subset of the Deno CLI since it's meant to run in an idempotent serverless environment (at least that's my understanding).\r\n\r\nThe first show-stopper has to to with `XMLHttpRequest`, which isn't present in Deno, and seems like this would be addressed if #154 is fixed.\r\n\r\nOnce I tried a workaround to ignore the XMLHttpRequest keyword, I got an error from GoTrue saying that `getItem is not defined`, probably referring to `localStorage` which Deno also doesn't support. It looks like it's on [Deno's roadmap](https://github.com/denoland/deno/issues/1657), but it's not implemented yet.",
                    "author": {
                        "login": "jcs224"
                    },
                    "createdAt": "2021-04-19T02:07:17Z",
                    "url": "https://github.com/supabase/supabase-js/issues/161#issuecomment-822119174"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyMjEyMTk3OQ==",
                    "body": "As I look into it more, I might try just using the `postgrest-js` library instead of the whole Supabase client. The current `supabase-js` implementation seems more focused on the browser environment than the server one, understandably. Although Deno has quite a bit of browser-compatible APIs, it's not all quite there (and may never be?)",
                    "author": {
                        "login": "jcs224"
                    },
                    "createdAt": "2021-04-19T02:18:15Z",
                    "url": "https://github.com/supabase/supabase-js/issues/161#issuecomment-822121979"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyMjEyNzQxMw==",
                    "body": "Agreed \ud83d\udc4d . This will still be compatible with Supabase projects too (you can just append `/rest/v1` to the URL). Thanks for looking into this @jcs224 ",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-04-19T02:38:30Z",
                    "url": "https://github.com/supabase/supabase-js/issues/161#issuecomment-822127413"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyMjE0MTUzMA==",
                    "body": "So, just tried this with `postgrest-js` and ran into the same `XMLHttpRequest` issue as before, because of the `cross-fetch` dependency. Maybe I'll fork that dependency and see if I can finagle it into submission.",
                    "author": {
                        "login": "jcs224"
                    },
                    "createdAt": "2021-04-19T03:30:35Z",
                    "url": "https://github.com/supabase/supabase-js/issues/161#issuecomment-822141530"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyMjE0MjMyOA==",
                    "body": "If you manage to solve it in cross-fetch, you'd also solve the problem for Cloudflare workers and Vite, so that would be a huge contribution",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-04-19T03:33:26Z",
                    "url": "https://github.com/supabase/supabase-js/issues/161#issuecomment-822142328"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyMjMwNzMyMQ==",
                    "body": "A little bit of a shot in the dark (hard to test with Deno as Skypack and jspm aren't cooperating with my test packages), but I sent a PR to `cross-fetch`'s dependency, `whatwg-fetch`, to see what happens.",
                    "author": {
                        "login": "jcs224"
                    },
                    "createdAt": "2021-04-19T09:09:10Z",
                    "url": "https://github.com/supabase/supabase-js/issues/161#issuecomment-822307321"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyNzM5Mjg1MQ==",
                    "body": "> A little bit of a shot in the dark (hard to test with Deno as Skypack and jspm aren't cooperating with my test packages), but I sent a PR to `cross-fetch`'s dependency, `whatwg-fetch`, to see what happens.\r\n\r\nHello =) Any news on PR? I'd really like to use supabase-js client in deno environment, but because of lack of XMLHttpRequest, it is not possible =(",
                    "author": {
                        "login": "abnemo"
                    },
                    "createdAt": "2021-04-27T07:46:25Z",
                    "url": "https://github.com/supabase/supabase-js/issues/161#issuecomment-827392851"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyOTkyODU4Nw==",
                    "body": "@abnemo this is an upstream dependency that will likely need to be updated. You should add a comment or give an emoji on this issue, maybe it will help get the ball rolling: https://github.com/github/fetch/pull/956",
                    "author": {
                        "login": "jcs224"
                    },
                    "createdAt": "2021-04-30T08:19:29Z",
                    "url": "https://github.com/supabase/supabase-js/issues/161#issuecomment-829928587"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgzMDY0OTE1NQ==",
                    "body": "I would love to see a dedicated supabase package on Deno land.",
                    "author": {
                        "login": "salemalem"
                    },
                    "createdAt": "2021-05-01T15:22:03Z",
                    "url": "https://github.com/supabase/supabase-js/issues/161#issuecomment-830649155"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg1MTkzMDQ5NA==",
                    "body": "Tried to run `supabase-js` today via `cdn.skypack.dev` and still got `XMLHttpRequest ` error at `cross-fetch`",
                    "author": {
                        "login": "mirus-ua"
                    },
                    "createdAt": "2021-06-01T08:21:02Z",
                    "url": "https://github.com/supabase/supabase-js/issues/161#issuecomment-851930494"
                },
                {
                    "id": "IC_kwDOD79Crs400Ztx",
                    "body": "Well, someone ported all the Supabase JS libraries to Deno!\r\n\r\n- https://deno.land/x/gotrue\r\n- https://deno.land/x/postgrest\r\n- https://deno.land/x/realtime\r\n- https://deno.land/x/storagee\r\n- https://deno.land/x/supabase (main one that combines all ones above)\r\n\r\nI tried just running Skypack, esm.sh, and jspm versions of Supabase, still not working. But, maybe stuff from these ports can be merged in with Supabase proper somehow? @link-discord?",
                    "author": {
                        "login": "jcs224"
                    },
                    "createdAt": "2021-07-25T06:02:58Z",
                    "url": "https://github.com/supabase/supabase-js/issues/161#issuecomment-886152049"
                },
                {
                    "id": "IC_kwDOD79Crs400Zu_",
                    "body": "@salemalem :point_up: ",
                    "author": {
                        "login": "jcs224"
                    },
                    "createdAt": "2021-07-25T06:03:54Z",
                    "url": "https://github.com/supabase/supabase-js/issues/161#issuecomment-886152127"
                },
                {
                    "id": "IC_kwDOD79Crs400aT9",
                    "body": "yeah I was crazy enough to go ahead and port everything.\nwasn't really that hard cuz the supabase packages itself only ever use 1 dependency",
                    "author": {
                        "login": "link-discord"
                    },
                    "createdAt": "2021-07-25T06:32:55Z",
                    "url": "https://github.com/supabase/supabase-js/issues/161#issuecomment-886154493"
                },
                {
                    "id": "IC_kwDOD79Crs42O8jG",
                    "body": "What also helped porting is the fact they added websocket support to deno while I was porting the realtime lib",
                    "author": {
                        "login": "link-discord"
                    },
                    "createdAt": "2021-09-01T05:01:25Z",
                    "url": "https://github.com/supabase/supabase-js/issues/161#issuecomment-909887686"
                },
                {
                    "id": "IC_kwDOD79Crs42O8ue",
                    "body": "Also none of the ports use external dependencies only native things built in deno just so you know",
                    "author": {
                        "login": "link-discord"
                    },
                    "createdAt": "2021-09-01T05:02:28Z",
                    "url": "https://github.com/supabase/supabase-js/issues/161#issuecomment-909888414"
                },
                {
                    "id": "IC_kwDOD79Crs43__xt",
                    "body": "The following works with esm.sh:\r\n\r\n```typescript\r\nimport \"https://deno.land/x/xhr@0.1.2/mod.ts\";\r\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js\";\r\n\r\nconst supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key');\r\nconsole.log(supabase.supabaseUrl); // https://xyzcompany.subabase.co\r\n ```\r\n",
                    "author": {
                        "login": "littledivy"
                    },
                    "createdAt": "2021-10-10T17:45:50Z",
                    "url": "https://github.com/supabase/supabase-js/issues/161#issuecomment-939523181"
                },
                {
                    "id": "IC_kwDOD79Crs44dZND",
                    "body": "While the Deno runtime does support `LocalStorage`, and the `supabase-js` package works there, the code will not run on the Deno Deploy service.\r\n\r\n[Deno Deploy doesn't support `LocalStorage`](https://github.com/denoland/deploy_feedback/issues/110), even though the Deno runtime does. The linked proposal indicates that`LocalStorage` won't ever be implemented, since it's synchronous.\r\n\r\nThat means the Deno port of supabase-js (https://deno.land/x/supabase@1.2.0/) doesn't work on Deno Deploy.\r\n\r\nAnyone tried the Deno port of PostgREST (https://deno.land/x/postgrest) with Deno Deploy specifically?",
                    "author": {
                        "login": "andrew-pyle"
                    },
                    "createdAt": "2021-10-20T01:24:26Z",
                    "url": "https://github.com/supabase/supabase-js/issues/161#issuecomment-947229507"
                },
                {
                    "id": "IC_kwDOD79Crs44daRK",
                    "body": "@andrew-pyle \r\nso we won't see Supabase + Deno combination? What's at least Supabase analog in Deno?",
                    "author": {
                        "login": "salemalem"
                    },
                    "createdAt": "2021-10-20T01:36:41Z",
                    "url": "https://github.com/supabase/supabase-js/issues/161#issuecomment-947233866"
                },
                {
                    "id": "IC_kwDOD79Crs44ddNl",
                    "body": "@salemalem My observations above are specifically about the Deno Deploy service.\r\n\r\nThe Deno port of supabase-js works fine with Deno on the command line.",
                    "author": {
                        "login": "andrew-pyle"
                    },
                    "createdAt": "2021-10-20T01:57:40Z",
                    "url": "https://github.com/supabase/supabase-js/issues/161#issuecomment-947245925"
                },
                {
                    "id": "IC_kwDOD79Crs44d_jm",
                    "body": "> @salemalem My observations above are specifically about the Deno Deploy service.\r\n> \r\n> The Deno port of supabase-js works fine with Deno on the command line.\r\n\r\nOh so it will work perfectly if I will host it on Digital Ocean, right?",
                    "author": {
                        "login": "salemalem"
                    },
                    "createdAt": "2021-10-20T07:04:17Z",
                    "url": "https://github.com/supabase/supabase-js/issues/161#issuecomment-947386598"
                },
                {
                    "id": "IC_kwDOD79Crs44gJF0",
                    "body": "Give it a try and let us know what happens. It should work as far as I can tell.",
                    "author": {
                        "login": "andrew-pyle"
                    },
                    "createdAt": "2021-10-20T18:58:17Z",
                    "url": "https://github.com/supabase/supabase-js/issues/161#issuecomment-947949940"
                },
                {
                    "id": "IC_kwDOD79Crs44h1Y2",
                    "body": "I haven't updated the ports in a while but I will probably update them soon again",
                    "author": {
                        "login": "link-discord"
                    },
                    "createdAt": "2021-10-21T08:46:26Z",
                    "url": "https://github.com/supabase/supabase-js/issues/161#issuecomment-948393526"
                },
                {
                    "id": "IC_kwDOD79Crs45bqWb",
                    "body": "I just updated all the deno ports to match the current code of the supabase js libs",
                    "author": {
                        "login": "link-discord"
                    },
                    "createdAt": "2021-11-08T20:37:16Z",
                    "url": "https://github.com/supabase/supabase-js/issues/161#issuecomment-963552667"
                },
                {
                    "id": "IC_kwDOD79Crs5I7Rki",
                    "body": "The official recommendation is to use supabase-js via esm.sh (it wasn't working at the time this issue was created, but should work now).\r\n\r\nThe situation with LocalStorage on Deno is unfortunate (there's a similar issue on Node) - you might need to use the service_role key which bypasses RLS (make sure to harden your Function!) instead of signing in with Auth.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-08-23T03:47:52Z",
                    "url": "https://github.com/supabase/supabase-js/issues/161#issuecomment-1223498018"
                },
                {
                    "id": "IC_kwDOD79Crs5YT4mF",
                    "body": "esm.sh v112 will inject `XHR` polyfill for `cross-fetch` automatically now",
                    "author": {
                        "login": "ije"
                    },
                    "createdAt": "2023-03-23T17:34:37Z",
                    "url": "https://github.com/supabase/supabase-js/issues/161#issuecomment-1481607557"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4NjU2MTc3MzY=",
            "number": 164,
            "title": "Error build Angular 11 + Vercel",
            "body": "Deploy in Vercel appears this error      \r\n\r\n21:16:32.252 | ERROR in node_modules/@supabase/supabase-js/dist/main/SupabaseClient.d.ts:38:9 - error TS1086: An accessor cannot be declared in an ambient context.\r\n**21:16:32.252 | 38     get storage(): SupabaseStorageClient;**\r\n\r\n\r\n",
            "author": {
                "login": "ezequiel88"
            },
            "state": "CLOSED",
            "createdAt": "2021-04-23T00:22:48Z",
            "closedAt": "2021-04-24T20:04:26Z",
            "url": "https://github.com/supabase/supabase-js/issues/164",
            "comments": []
        },
        {
            "id": "MDU6SXNzdWU4NzE3ODE1NjM=",
            "number": 165,
            "title": "Duplicates based on capitalization in Auth.",
            "body": "# Bug report\r\n\r\nIf users type in the same email but with a capital letter on signup, it'll create a second account under that same email.\r\n\r\n## Expected behavior\r\n\r\nShould be able to detect capital letters and sign users into the same account or block a registration if the email is taken.\r\n\r\n## Screenshots\r\n\r\n![Screen Shot 2021-04-29 at 9 30 29 PM](https://user-images.githubusercontent.com/32254790/116637788-dad84e80-a932-11eb-8bff-f6bf3ce8eceb.png)\r\n\r\n![Screen Shot 2021-04-29 at 9 31 29 PM](https://user-images.githubusercontent.com/32254790/116637794-ddd33f00-a932-11eb-91a8-7a397e8d1564.png)\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser: Chrome\r\n- Version of Node.js: 14.16\r\n- Framework: NextJS\r\n",
            "author": {
                "login": "lenoth"
            },
            "state": "CLOSED",
            "createdAt": "2021-04-30T01:37:41Z",
            "closedAt": "2021-04-30T01:39:30Z",
            "url": "https://github.com/supabase/supabase-js/issues/165",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyOTczNzU3Nw==",
                    "body": "Duplicate duplicate issue https://github.com/supabase/gotrue/issues/89. Closing in favor of the earlier one. ",
                    "author": {
                        "login": "inian"
                    },
                    "createdAt": "2021-04-30T01:39:30Z",
                    "url": "https://github.com/supabase/supabase-js/issues/165#issuecomment-829737577"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyOTczNzc3NQ==",
                    "body": "Just saw that! Thank you.",
                    "author": {
                        "login": "lenoth"
                    },
                    "createdAt": "2021-04-30T01:40:17Z",
                    "url": "https://github.com/supabase/supabase-js/issues/165#issuecomment-829737775"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4NzQ3MjUyNzI=",
            "number": 166,
            "title": "Headers provided to Supabase client are not used in requests",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nHeaders passed to the supabase client upon creation are not sent as part of requests made by the client.\r\n\r\n## To Reproduce\r\n\r\n**Note:** This reproduction example assumes that you are querying a storage bucket that has policies applied so that only authenticated users may read from the bucket, and that the request is being made outside of a browser environment e.g. from a Next.js API route.\r\n\r\n1. Initialize a supabase client, passing in custom headers for the client, e.g.\r\n\r\n```js\r\nimport { createClient } from '@supabase/supabase-js'\r\n\r\nconst supabase = createClient(url, anonKey, {\r\n  headers: {\r\n    apiKey: anonKey,\r\n    Authorization: `Bearer ${jwt}`\r\n  }\r\n})\r\n```\r\n\r\n2. Make a request using that client, e.g.\r\n\r\n```js\r\nconst result = await supabase.storage.from('avatars').download(avatarURL)\r\n```\r\n\r\n3. Observe that the request does not return the expected result, as the request made by the client does not use the `Authorization` header that was provided on creation\r\n\r\n## Expected behavior\r\n\r\nSupabase client uses the headers provided in the call to `createClient` when making requests.\r\n\r\nIn the example above this would set the `Authorization` header on the request to the Storage API, allowing the server to make a request to the restricted content on behalf of the user.\r\n\r\n## Screenshots\r\n\r\nN/A\r\n\r\n## System information\r\n\r\n- OS: N/A\r\n- Browser: N/A\r\n- Version of supabase-js: 1.11.9\r\n- Version of Node.js: 14.16.1\r\n\r\n## Additional context\r\n\r\nThis issue was created off the back of [this comment](https://github.com/supabase/supabase/discussions/1094#discussioncomment-688755), and is discussed further in that thread.\r\n",
            "author": {
                "login": "brattonross"
            },
            "state": "CLOSED",
            "createdAt": "2021-05-03T16:35:10Z",
            "closedAt": "2021-11-26T09:02:56Z",
            "url": "https://github.com/supabase/supabase-js/issues/166",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgzMjI2NzE0Mw==",
                    "body": "Hello,\r\n\r\nThe **data** has been sending to the correct method `_initSupabaseAuthClient` but inside this method, as we can [see here](https://github.com/supabase/supabase-js/blob/906a076c8942fe86765f0b9430be5b0ad076036a/src/SupabaseClient.ts#L138), we aren't using the param `{ headers: apiKey: 'xx', Authorization: 'xx' }`. ",
                    "author": {
                        "login": "ftonato"
                    },
                    "createdAt": "2021-05-04T21:42:35Z",
                    "url": "https://github.com/supabase/supabase-js/issues/166#issuecomment-832267143"
                },
                {
                    "id": "IC_kwDOD79Crs42Pnkr",
                    "body": "@brattonross I'm looking at writing a PR to add in header handling for the clients, so we can pass in custom headers. I'm unclear about the example you give - passing auth headers to the storage client.\r\n\r\nI note that the storage client is initialised here:\r\nhttps://github.com/supabase/supabase-js/blob/master/src/SupabaseClient.ts#L74-L76\r\n```\r\n  get storage() {\r\n    return new SupabaseStorageClient(this.storageUrl, this._getAuthHeaders())\r\n  }\r\n```\r\n\r\nWhich pulls the headers from `_getAuthHeaders()`, setting both the `apikey` and the `Authorization` headers. Was that not the case when you created this issue? and if it was the case, what's your use case for providing custom `apikey`/`Authorization` headers? Cheers!\r\n\r\n(https://github.com/supabase/supabase-js/pull/218 added custom headers to the auth client - my PR will add them to the other clients as well)",
                    "author": {
                        "login": "dabarrell"
                    },
                    "createdAt": "2021-09-01T08:32:25Z",
                    "url": "https://github.com/supabase/supabase-js/issues/166#issuecomment-910063915"
                },
                {
                    "id": "IC_kwDOD79Crs42bDZ9",
                    "body": "Hey @dabarrell, I was mainly interested in being able to pass my user's access token through to the server-side so that I could fetch data that was behind row-level security.\r\n\r\nIt has been a little while since I raised the issue, but I believe at the time I was writing a Next.js application and using Supabase as my backend. In particular I was working on a feature to allow users to create a \"profile\", where they could enter some basic information and upload an avatar (hence the use of the storage client).\r\n\r\nI decided to use a server-side API call to fetch the user's avatar, because this would allow me to simplify the markup and just render an `<img>` tag with the `src` attribute set to the API route. Plus I could then make adjustments to the image on the server-side before sending the response if I ever wanted.\r\n\r\nFrom memory, the issue was that `_getAuthHeaders` was only reading the session (`this.auth.session()`) to get the access token, so when this code was executed on the server-side the session would not be available, and requests would therefore always be unauthenticated.\r\n\r\nIt looks like this code may have changed since, and [this comment](https://github.com/supabase/supabase/discussions/1094#discussioncomment-714633) seems to suggest that there is a way to achieve authenticated server-side requests, but I guess initializing the Supabase client with custom headers still does not work as expected in the issue description.\r\n\r\nI hope this was useful for you, thanks",
                    "author": {
                        "login": "brattonross"
                    },
                    "createdAt": "2021-09-05T00:35:47Z",
                    "url": "https://github.com/supabase/supabase-js/issues/166#issuecomment-913061501"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4NzYyMjIxOTk=",
            "number": 167,
            "title": "error TypeError: Cannot read property 'getItem' of undefined",
            "body": "# Bug report\r\nerror TypeError: Cannot read property 'getItem' of undefined\r\n\r\n## Description\r\nWhen I run Deno JS it gives me this error:\r\nerror TypeError: Cannot read property 'getItem' of undefined\r\nat y.getItem (https://unpkg.com/@supabase/supabase-js@1.11.9/dist/umd/supabase.js:1:3822)\r\n    at n._recoverSession (https://unpkg.com/@supabase/supabase-js@1.11.9/dist/umd/supabase.js:1:13862)\r\n    at new w (https://unpkg.com/@supabase/supabase-js@1.11.9/dist/umd/supabase.js:1:9242)\r\n    at new n (https://unpkg.com/@supabase/supabase-js@1.11.9/dist/umd/supabase.js:1:53270)\r\n    at t.default._initSupabaseAuthClient (https://unpkg.com/@supabase/supabase-js@1.11.9/dist/umd/supabase.js:1:51187)\r\n    at new t.default (https://unpkg.com/@supabase/supabase-js@1.11.9/dist/umd/supabase.js:1:50233)\r\n    at Object.t.createClient (https://unpkg.com/@supabase/supabase-js@1.11.9/dist/umd/supabase.js:1:53083)\r\n    at file:///C:/Users/server.js:8:30 # replaced my file name\r\n    at <anonymous> (<anonymous>)\r\nTypeError: Cannot read property 'getItem' of undefined\r\n    at y.getItem (https://unpkg.com/@supabase/supabase-js@1.11.9/dist/umd/supabase.js:1:3822)\r\n    at n.<anonymous> (https://unpkg.com/@supabase/supabase-js@1.11.9/dist/umd/supabase.js:1:14223)\r\n    at Generator.next (<anonymous>)\r\n    at https://unpkg.com/@supabase/supabase-js@1.11.9/dist/umd/supabase.js:1:8543\r\n    at new Promise (<anonymous>)\r\n    at b (https://unpkg.com/@supabase/supabase-js@1.11.9/dist/umd/supabase.js:1:8288)\r\n    at n._recoverAndRefresh (https://unpkg.com/@supabase/supabase-js@1.11.9/dist/umd/supabase.js:1:14147)\r\n    at new w (https://unpkg.com/@supabase/supabase-js@1.11.9/dist/umd/supabase.js:1:9265)\r\n    at new n (https://unpkg.com/@supabase/supabase-js@1.11.9/dist/umd/supabase.js:1:53270)\r\n    at t.default._initSupabaseAuthClient (https://unpkg.com/@supabase/supabase-js@1.11.9/dist/umd/supabase.js:1:51187)\r\nError getting session from URL.\r\n\r\n## To Reproduce\r\n\r\n1. Install Deno JS\r\n2. import \"https://unpkg.com/@supabase/supabase-js\";\r\n3. const SERVICE_KEY = 'your-key';\r\nconst SUPABASE_URL = \"https://xyz.supabase.co\"\r\n4. deno run --allow-net server.js\r\n5. See error\r\n\r\nEven though it shows an error, everything works well anyway. Is this a warning message then?\r\n\r\n## Expected behavior\r\n\r\nEverything should have worked without errors.\r\n\r\n## Screenshots\r\n\r\n![image](https://user-images.githubusercontent.com/42411937/117116452-3598fc80-adb0-11eb-8c22-31f83cb5913b.png)\r\n![image](https://user-images.githubusercontent.com/42411937/117116676-755fe400-adb0-11eb-84a9-1c55346307f7.png)\r\n\r\n\r\n## System information\r\n\r\n- OS: Windows 10\r\n- Browser: Brave\r\n- Version of supabase-js: 1.11.9\r\n- Version of Deno JS: 1.5.3\r\n\r\n",
            "author": {
                "login": "salemalem"
            },
            "state": "CLOSED",
            "createdAt": "2021-05-05T08:51:16Z",
            "closedAt": "2021-05-05T11:14:02Z",
            "url": "https://github.com/supabase/supabase-js/issues/167",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgzMjU1NTIwNQ==",
                    "body": "insert function doesn't work on Deno JS",
                    "author": {
                        "login": "salemalem"
                    },
                    "createdAt": "2021-05-05T09:41:31Z",
                    "url": "https://github.com/supabase/supabase-js/issues/167#issuecomment-832555205"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgzMjYwNjY2MA==",
                    "body": "Yeah this one is a Deno issue - we're tracking it here! \r\n\r\nhttps://github.com/supabase/supabase-js/issues/161\r\n\r\nWill close in favour of the earlier issue",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-05-05T11:14:02Z",
                    "url": "https://github.com/supabase/supabase-js/issues/167#issuecomment-832606660"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4ODE1NDU1NDk=",
            "number": 168,
            "title": "\ud83d\ude4f Export PostgrestResponse and PostgrestError types",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nWould like to access the [`PostgrestResponse`](https://github.com/supabase/postgrest-js/blob/master/src/lib/types.ts#L38) and [`PostgrestError`](https://github.com/supabase/postgrest-js/blob/master/src/lib/types.ts#L8) types to allow for verbose typing within end application. \r\n\r\nThe `await supabase.from(TABLE).select()` (and similar) commands return a destructured [`PostgrestResponse`](https://github.com/supabase/postgrest-js/blob/master/src/lib/types.ts#L38)  object.\r\n\r\nThere is no way to access this typing that I can see, either directly or indirectly _(ie via the terminal [`@supabase/postgrest-js`](https://github.com/supabase/postgrest-js/blob/master/src/index.ts#L4) package index)_ which disallows the possibility of verbose typing, which is required by [`@typescript-eslint/typedef`](https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/typedef.md)\r\n\r\n### Related error\r\n```text\r\nTS2694: Namespace '\"/frontend/node_modules/.pnpm/@supabase+supabase-js@1.11.10/node_modules/@supabase/supabase-js/dist/main/index\"' has no exported member 'PostgrestResponse'.\r\n```\r\n\r\n## Describe the solution you'd like\r\n\r\n(Re)export the `PostgrestResponse` type from https://github.com/supabase/supabase-js/blob/master/src/index.ts\r\n\r\nGiven the `@supabase/postgrest-js` package [is tightly coupled](https://github.com/supabase/supabase-js/blob/master/package.json#L40) with `@supabase/supabase-js`, it seems architecturally ok to export from the main package to avoid developers having to import `@supabase/postgrest-js` directly _(which is likely to end up out of sync with the underlying versioning, and in any case is not currently possible anyway)_).\r\n\r\n\r\n## Describe alternatives you've considered\r\n\r\nCurrently, I am creating a local copy of the type, although naturally, this is not desirable long term for obvious reasons.\r\n\r\n\r\n## Suggested implementation\r\n\r\n1. https://github.com/supabase/postgrest-js/blob/master/src/index.ts\r\n\r\n```typescript\r\nimport PostgrestClient from './PostgrestClient'\r\nimport PostgrestFilterBuilder from './lib/PostgrestFilterBuilder'\r\nimport PostgrestQueryBuilder from './lib/PostgrestQueryBuilder'\r\nimport { PostgrestBuilder, PostgrestResponse, PostgrestError } from './lib/types'\r\n\r\nexport { PostgrestClient, PostgrestFilterBuilder, PostgrestQueryBuilder, PostgrestBuilder, PostgrestResponse, PostgrestError }\r\n```\r\n\r\n2. https://github.com/supabase/supabase-js/blob/master/src/index.ts\r\n\r\n```typescript\r\n\r\nimport SupabaseClient from './SupabaseClient'\r\nimport { SupabaseClientOptions, SupabaseRealtimePayload } from './lib/types'\r\nimport { PostgrestResponse, PostgrestError } from '@subabase/postgrest-js'\r\nimport { User as AuthUser, Session as AuthSession } from '@supabase/gotrue-js'\r\nexport * from '@supabase/gotrue-js'\r\nexport * from '@supabase/realtime-js'\r\n\r\n/**\r\n * Creates a new Supabase Client.\r\n */\r\nconst createClient = (\r\n  supabaseUrl: string,\r\n  supabaseKey: string,\r\n  options?: SupabaseClientOptions\r\n) => {\r\n  return new SupabaseClient(supabaseUrl, supabaseKey, options)\r\n}\r\n\r\nexport {\r\n  createClient,\r\n  SupabaseClient,\r\n  SupabaseClientOptions,\r\n  SupabaseRealtimePayload,\r\n  AuthUser,\r\n  AuthSession,\r\n  PostgrestResponse, \r\n  PostgrestError\r\n}\r\n```\r\n \r\n",
            "author": {
                "login": "prescience-data"
            },
            "state": "CLOSED",
            "createdAt": "2021-05-09T00:55:58Z",
            "closedAt": "2021-06-28T02:45:38Z",
            "url": "https://github.com/supabase/supabase-js/issues/168",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgzNjM0MTMwOA==",
                    "body": "Sounds good @prescience-data - looks like you've already scoped out the solution. Would you like to submit it as a PR? we'll merge it in \ud83d\udc4d ",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-05-10T08:10:32Z",
                    "url": "https://github.com/supabase/supabase-js/issues/168#issuecomment-836341308"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg2OTI5NzQxNg==",
                    "body": ":tada: This issue has been resolved in version 1.16.0 :tada:\n\nThe release is available on:\n- [npm package (@latest dist-tag)](https://www.npmjs.com/package/@supabase/supabase-js/v/1.16.0)\n- [GitHub release](https://github.com/supabase/supabase-js/releases/tag/v1.16.0)\n\nYour **[semantic-release](https://github.com/semantic-release/semantic-release)** bot :package::rocket:",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-06-28T02:47:03Z",
                    "url": "https://github.com/supabase/supabase-js/issues/168#issuecomment-869297416"
                },
                {
                    "id": "IC_kwDOD79Crs45Qfdw",
                    "body": "can we export all the other internal types too? I have a use case in my app, where i need the type `PostgrestFilterBuilder` because i build it in stages.  Can(Should) we just export the internal types?\r\n\r\nThanks",
                    "author": {
                        "login": "alator21"
                    },
                    "createdAt": "2021-11-04T10:21:52Z",
                    "url": "https://github.com/supabase/supabase-js/issues/168#issuecomment-960624496"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4ODU1ODQ5ODM=",
            "number": 170,
            "title": "supabase-js 2.0",
            "body": "## What?\r\n\r\nWe're using this task to plan any breaking changes that we might want to add to supabase-js as part of our `2.0` release:\r\n\r\n## (Possible) Features\r\n\r\n- Update Type Implementation (import definitions at the constructor level): https://github.com/supabase/supabase-js/pull/125\r\n- Better treeshaking: https://github.com/supabase/supabase-js/issues/151\r\n- storage 2.0: https://github.com/supabase/storage-js/issues/6\r\n- standard error responses: https://github.com/supabase/gotrue-js/issues/405\r\n- `undefined` instead of `null` for bottom type: https://github.com/supabase/supabase-js/issues/244\r\n- `return: minimal` by default\r\n- Nested columns: https://github.com/supabase/supabase/discussions/535#discussioncomment-1806516\r\n- Default to `nullsFirst: true`: https://github.com/supabase/postgrest-js/issues/239\r\n\r\n## Timeline\r\n\r\n- No fixed timeline",
            "author": {
                "login": "kiwicopple"
            },
            "state": "OPEN",
            "createdAt": "2021-05-11T01:34:56Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/170",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgzNzYxODM5MQ==",
                    "body": "https://github.com/supabase/storage-js/issues/6",
                    "author": {
                        "login": "inian"
                    },
                    "createdAt": "2021-05-11T01:41:52Z",
                    "url": "https://github.com/supabase/supabase-js/issues/170#issuecomment-837618391"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgzNzg2Mzc5Ng==",
                    "body": "Re: the tree-shaking in supabase/supabase-js#151, we'll be modularizing each Supabase components right? (i.e. `rest`, `auth`, etc.) Combining them into one class felt hacky to me, esp. for those with overlapping function names (e.g. `from()` can accept `'*'` in realtime-js but not postgrest-js).\r\n\r\nThis also makes it easier to implement in other languages with less flexible OO features, esp. once we tackle iOS/Android.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-05-11T05:44:15Z",
                    "url": "https://github.com/supabase/supabase-js/issues/170#issuecomment-837863796"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgzODUyNTYxNA==",
                    "body": "One more item: standardizing error response format https://github.com/supabase/supabase/issues/12739 https://github.com/supabase/gotrue-js/issues/405",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-05-11T13:59:56Z",
                    "url": "https://github.com/supabase/supabase-js/issues/170#issuecomment-838525614"
                },
                {
                    "id": "IC_kwDOD79Crs4630GF",
                    "body": "must have in v2 for better TypeScript type definitions for queries, kudos to @bnjmnt4n :\r\n[supabase-client (alternative TypeScript-based)](https://github.com/bnjmnt4n/supabase-client)",
                    "author": {
                        "login": "didavid61202"
                    },
                    "createdAt": "2021-12-07T09:01:07Z",
                    "url": "https://github.com/supabase/supabase-js/issues/170#issuecomment-987709829"
                },
                {
                    "id": "IC_kwDOD79Crs5D0d3t",
                    "body": "Better integration (and examples) with react-native and expo's auth methods \r\nhttps://docs.expo.dev/versions/latest/sdk/auth-session/\r\n",
                    "author": {
                        "login": "rodbs"
                    },
                    "createdAt": "2022-05-25T20:40:57Z",
                    "url": "https://github.com/supabase/supabase-js/issues/170#issuecomment-1137827309"
                },
                {
                    "id": "IC_kwDOD79Crs5JlsU9",
                    "body": "> Better integration (and examples) with react-native and expo's auth methods\r\n\r\nHey! Sorry if this is not the right place to reach out - I am currently integrating Superbase (V2) with latest Expo and I am running into few gotchas. I would like to have a chat and help you improve the DX for that platform, potentially with some examples. What would be the most convenient way to chat? If Discord, you can find me at `grabbou#4925`.",
                    "author": {
                        "login": "grabbou"
                    },
                    "createdAt": "2022-09-01T18:08:45Z",
                    "url": "https://github.com/supabase/supabase-js/issues/170#issuecomment-1234617661"
                },
                {
                    "id": "IC_kwDOD79Crs5KvAwj",
                    "body": "I believe this should be a showStopper for v2\r\nUsing Custom JWT's is an important feature, I'd say, and right now it's not supported\r\nhttps://github.com/supabase/supabase-js/issues/553",
                    "author": {
                        "login": "jmedellinc"
                    },
                    "createdAt": "2022-09-21T15:00:48Z",
                    "url": "https://github.com/supabase/supabase-js/issues/170#issuecomment-1253837859"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4OTQ3MzgyNDU=",
            "number": 171,
            "title": "SvelteKit builds locally, but when deploying to Netlify with netlify-adapter, the build fails with error: `@supabase/supabase-js' does not provide an export named 'createClient'`",
            "body": "**Describe the bug**\r\n\r\nWhen deploying a SvelteKit app to Netlify, using the `netlify-adapter`, the build fails with the error:\r\n\r\n`@supabase/supabase-js' does not provide an export named 'createClient'`\r\n\r\nHowever, when I run `npm run build` locally, the repository builds without any errors.\r\n\r\nThrough some troubleshooting and discussions, it was mentioned that this may be a problem with the supabase-js module, so  just wanted to share here as well in case that is the issue.\r\n\r\n**Logs**\r\n\r\n```\r\n7:54:00 PM: Build ready to start\r\n7:54:02 PM: build-image version: 0582042f4fc261adc7bd8333f34884959c577302\r\n7:54:02 PM: build-image tag: v3.7.6\r\n7:54:02 PM: buildbot version: 03c6f9d243f25556225c9548fcb276f97b8bf623\r\n7:54:02 PM: Fetching cached dependencies\r\n7:54:02 PM: Failed to fetch cache, continuing with build\r\n7:54:02 PM: Starting to prepare the repo for build\r\n7:54:03 PM: No cached dependencies found. Cloning fresh repo\r\n7:54:03 PM: git clone https://github.com/sbutler-gh/repository\r\n7:54:04 PM: Preparing Git Reference refs/heads/dev\r\n7:54:04 PM: Parsing package.json dependencies\r\n7:54:06 PM: Different publish path detected, going to use the one specified in the Netlify configuration file: 'build' versus 'public' in the Netlify UI\r\n7:54:06 PM: Different functions path detected, going to use the one specified in the Netlify configuration file: 'functions' versus '' in the Netlify UI\r\n7:54:06 PM: Starting build script\r\n7:54:06 PM: Installing dependencies\r\n7:54:06 PM: Python version set to 2.7\r\n7:54:07 PM: v12.18.0 is already installed.\r\n7:54:08 PM: Now using node v12.18.0 (npm v6.14.4)\r\n7:54:08 PM: Started restoring cached build plugins\r\n7:54:08 PM: Finished restoring cached build plugins\r\n7:54:08 PM: Attempting ruby version 2.7.1, read from environment\r\n7:54:10 PM: Using ruby version 2.7.1\r\n7:54:10 PM: Using PHP version 5.6\r\n7:54:10 PM: Started restoring cached node modules\r\n7:54:10 PM: Finished restoring cached node modules\r\n7:54:10 PM: Installing NPM modules using NPM version 6.14.4\r\n7:54:22 PM: npm WARN read-shrinkwrap This version of npm is compatible with lockfileVersion@1, but package-lock.json was generated for lockfileVersion@2. I'll try to do my best with it!\r\n7:54:22 PM: > bufferutil@4.0.3 install /opt/build/repo/node_modules/bufferutil\r\n7:54:22 PM: > node-gyp-build\r\n7:54:23 PM: > utf-8-validate@5.0.5 install /opt/build/repo/node_modules/utf-8-validate\r\n7:54:23 PM: > node-gyp-build\r\n7:54:23 PM: > esbuild@0.11.23 postinstall /opt/build/repo/node_modules/esbuild\r\n7:54:23 PM: > node install.js\r\n7:54:24 PM: > svelte-preprocess@4.7.3 postinstall /opt/build/repo/node_modules/svelte-preprocess\r\n7:54:24 PM: > echo \"[svelte-preprocess] Don't forget to install the preprocessors packages that will be used: node-sass/sass, stylus, less, postcss & postcss-load-config, coffeescript, pug, etc...\"\r\n7:54:24 PM: [svelte-preprocess] Don't forget to install the preprocessors packages that will be used: node-sass/sass, stylus, less, postcss & postcss-load-config, coffeescript, pug, etc...\r\nnpm WARN ~TODO~@0.0.1 No repository field.\r\n7:54:24 PM: npm WARN ~TODO~@0.0.1 No license field.\r\n7:54:24 PM: npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.3.2 (node_modules/fsevents):\r\n7:54:24 PM: npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {\"os\":\"darwin\",\"arch\":\"any\"} (current: {\"os\":\"linux\",\"arch\":\"x64\"})\r\n7:54:24 PM: added 498 packages from 343 contributors and audited 500 packages in 13.439s\r\n7:54:25 PM: 50 packages are looking for funding\r\n7:54:25 PM:   run `npm fund` for details\r\n7:54:25 PM: found 0 vulnerabilities\r\n7:54:25 PM: NPM modules installed\r\n7:54:25 PM: Started restoring cached go cache\r\n7:54:25 PM: Finished restoring cached go cache\r\n7:54:25 PM: go version go1.14.4 linux/amd64\r\n7:54:25 PM: go version go1.14.4 linux/amd64\r\n7:54:25 PM: Installing missing commands\r\n7:54:25 PM: Verify run directory\r\n7:54:27 PM: \u200b\r\n7:54:27 PM: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n7:54:27 PM:   Netlify Build                                                 \r\n7:54:27 PM: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n7:54:27 PM: \u200b\r\n7:54:27 PM: \u276f Version\r\n7:54:27 PM:   @netlify/build 11.17.2\r\n7:54:27 PM: \u200b\r\n7:54:27 PM: \u276f Flags\r\n7:54:27 PM:   deployId: 60a3ff38a2786e0007d20109\r\n7:54:27 PM: \u200b\r\n7:54:27 PM: \u276f Current directory\r\n7:54:27 PM:   /opt/build/repo\r\n7:54:27 PM: \u200b\r\n7:54:27 PM: \u276f Config file\r\n7:54:27 PM:   /opt/build/repo/netlify.toml\r\n7:54:27 PM: \u200b\r\n7:54:27 PM: \u276f Context\r\n7:54:27 PM:   production\r\n7:54:27 PM: \u200b\r\n7:54:27 PM: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n7:54:27 PM:   1. build.command from netlify.toml                            \r\n7:54:27 PM: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n7:54:27 PM: \u200b\r\n7:54:27 PM: $ npm run build\r\n7:54:27 PM: > ~TODO~@0.0.1 build /opt/build/repo\r\n7:54:27 PM: > svelte-kit build\r\n7:54:27 PM: (node:1389) ExperimentalWarning: The ESM module loader is experimental.\r\n7:54:27 PM: vite v2.3.3 building for production...\r\n7:54:28 PM: transforming...\r\n7:54:42 PM: \u2713 96 modules transformed.\r\n7:54:43 PM: rendering chunks...\r\n7:54:59 PM: .svelte-kit/output/client/_app/manifest.json                               1.64kb\r\n7:54:59 PM: .svelte-kit/output/client/_app/pages/index.svelte-cada8c67.js              0.14kb / brotli: 0.10kb\r\n7:54:59 PM: .svelte-kit/output/client/_app/pages/__error.svelte-f4fa4b22.js            0.14kb / brotli: 0.10kb\r\n7:54:59 PM: .svelte-kit/output/client/_app/chunks/singletons-bb9012b7.js               0.05kb / brotli: 0.05kb\r\n7:54:59 PM: .svelte-kit/output/client/_app/pages/[slug].svelte-ec1023d5.js             0.14kb / brotli: 0.10kb\r\n7:54:59 PM: .svelte-kit/output/client/_app/assets/start-0826e215.css                   0.18kb / brotli: 0.11kb\r\n7:54:59 PM: .svelte-kit/output/client/_app/assets/vendor-119c9bb3.css                  7.66kb / brotli: 1.55kb\r\n7:54:59 PM: .svelte-kit/output/client/_app/start-1a95caf6.js                           17.58kb / brotli: 5.58kb\r\n7:54:59 PM: .svelte-kit/output/client/_app/pages/__layout.svelte-9141578b.js           49.85kb / brotli: 12.14kb\r\n7:54:59 PM: .svelte-kit/output/client/_app/assets/pages/__layout.svelte-85885be8.css   86.98kb / brotli: 12.04kb\r\n7:54:59 PM: .svelte-kit/output/client/_app/chunks/vendor-b335e5ae.js                   843.03kb / brotli: skipped (large chunk)\r\n7:54:59 PM: \r\n7:54:59 PM: (!) Some chunks are larger than 500kb after minification. Consider:\r\n7:54:59 PM: - Using dynamic import() to code-split the application\r\n7:54:59 PM: - Use build.rollupOptions.output.manualChunks to improve chunking: https://rollupjs.org/guide/en/#outputmanualchunks\r\n7:54:59 PM: - Adjust chunk size limit for this warning via build.chunkSizeWarningLimit.\r\n7:54:59 PM: vite v2.3.3 building SSR bundle for production...\r\n7:54:59 PM: transforming...\r\n7:55:05 PM: \u2713 41 modules transformed.\r\n7:55:05 PM: rendering chunks...\r\n7:55:05 PM: .svelte-kit/output/server/app.js   286.21kb\r\n7:55:05 PM: Run npm run preview to preview your production build locally.\r\n7:55:05 PM: \r\n7:55:05 PM: > Using @sveltejs/adapter-netlify\r\n**7:55:05 PM: > The requested module '@supabase/supabase-js' does not provide an export named 'createClient'\r\n7:55:05 PM: file:///opt/build/repo/.svelte-kit/output/server/app.js:5\r\n7:55:05 PM: import {createClient} from \"@supabase/supabase-js\";\r\n7:55:05 PM:         ^^^^^^^^^^^^\r\n7:55:05 PM: SyntaxError: The requested module '@supabase/supabase-js' does not provide an export named 'createClient'\r\n7:55:05 PM:     at ModuleJob._instantiate (internal/modules/esm/module_job.js:92:21)\r\n7:55:05 PM:     at async ModuleJob.run (internal/modules/esm/module_job.js:107:20)\r\n7:55:05 PM:     at async Loader.import (internal/modules/esm/loader.js:179:24)\r\n7:55:05 PM:     at async prerender (file:///opt/build/repo/node_modules/@sveltejs/kit/dist/chunks/index5.js:79:14)\r\n7:55:05 PM:     at async Object.prerender (file:///opt/build/repo/node_modules/@sveltejs/kit/dist/chunks/index5.js:296:5)\r\n7:55:05 PM:     at async adapt (file:///opt/build/repo/node_modules/@sveltejs/adapter-netlify/index.js:33:4)\r\n7:55:05 PM:     at async adapt (file:///opt/build/repo/node_modules/@sveltejs/kit/dist/chunks/index5.js:322:2)\r\n7:55:05 PM:     at async file:///opt/build/repo/node_modules/@sveltejs/kit/dist/cli.js:616:5**\r\n7:55:05 PM: npm ERR! code ELIFECYCLE\r\n7:55:05 PM: npm ERR! errno 1\r\n7:55:05 PM: npm ERR! ~TODO~@0.0.1 build: `svelte-kit build`\r\n7:55:05 PM: npm ERR! Exit status 1\r\n7:55:05 PM: npm ERR!\r\n7:55:05 PM: npm ERR! Failed at the ~TODO~@0.0.1 build script.\r\n7:55:05 PM: npm ERR! This is probably not a problem with npm. There is likely additional logging output above.\r\n7:55:05 PM: npm ERR! A complete log of this run can be found in:\r\n7:55:05 PM: npm ERR!     /opt/buildhome/.npm/_logs/2021-05-18T17_55_05_631Z-debug.log\r\n7:55:05 PM: \u200b\r\n7:55:05 PM: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n7:55:05 PM:   \"build.command\" failed                                        \r\n7:55:05 PM: \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n7:55:05 PM: \u200b\r\n7:55:05 PM:   Error message\r\n7:55:05 PM:   Command failed with exit code 1: npm run build\r\n7:55:05 PM: \u200b\r\n7:55:05 PM:   Error location\r\n7:55:05 PM:   In build.command from netlify.toml:\r\n7:55:05 PM:   npm run build\r\n7:55:05 PM: \u200b\r\n7:55:05 PM:   Resolved config\r\n7:55:05 PM:   build:\r\n7:55:05 PM:     command: npm run build\r\n7:55:05 PM:     commandOrigin: config\r\n7:55:05 PM:     publish: /opt/build/repo/build\r\n7:55:05 PM:   functionsDirectory: /opt/build/repo/functions\r\n7:55:06 PM: Caching artifacts\r\n7:55:06 PM: Started saving node modules\r\n7:55:06 PM: Finished saving node modules\r\n7:55:06 PM: Started saving build plugins\r\n7:55:06 PM: Finished saving build plugins\r\n7:55:06 PM: Started saving pip cache\r\n7:55:06 PM: Finished saving pip cache\r\n7:55:06 PM: Started saving emacs cask dependencies\r\n7:55:06 PM: Finished saving emacs cask dependencies\r\n7:55:06 PM: Started saving maven dependencies\r\n7:55:06 PM: Finished saving maven dependencies\r\n7:55:06 PM: Started saving boot dependencies\r\n7:55:06 PM: Finished saving boot dependencies\r\n7:55:06 PM: Started saving rust rustup cache\r\n7:55:06 PM: Finished saving rust rustup cache\r\n7:55:06 PM: Started saving go dependencies\r\n7:55:06 PM: Finished saving go dependencies\r\n7:55:08 PM: Build failed due to a user error: Build script returned non-zero exit code: 2\r\n7:55:08 PM: Creating deploy upload records\r\n7:55:08 PM: Failing build: Failed to build site\r\n7:55:08 PM: Failed during stage 'building site': Build script returned non-zero exit code: 2\r\n7:55:08 PM: Finished processing build request in 1m6.448211496s\r\n```\r\n\r\n**To Reproduce**\r\n\r\nMy steps were something like this:\r\n\r\n* Create new SvelteKit app\r\n* Install supabase as devDependency using the svelte-add package\r\n* Install the netlify-adapter and configure netlify.toml\r\n* Set-up Netlify deployment from the GitHub repository\r\n\r\n**Expected behavior**\r\n\r\nSince the repository is building locally without any issues running `npm run build`, I expect it to build successfully on Netlify as well\r\n\r\n**Severity**\r\n\r\nBlocking deployment to Netlify.\r\n\r\n**Additional context**\r\n\r\nI tried the following troubleshoots, without any success:\r\n\r\n* Updating all packages\r\n* Switching supabase from devDependencies to dependencies and vice versa\r\n* Adding  `vite: { optimizeDeps: { include: [\"@supabase/supabase-js\"] }` to svelte.config.js",
            "author": {
                "login": "sbutler-gh"
            },
            "state": "CLOSED",
            "createdAt": "2021-05-18T20:10:48Z",
            "closedAt": "2021-05-19T05:26:49Z",
            "url": "https://github.com/supabase/supabase-js/issues/171",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg0MzYxNzUyMw==",
                    "body": "you can see from your logs that netlify uses node v12.18.0. your computer likely uses node 14+. specify your node version in netlify https://docs.netlify.com/configure-builds/manage-dependencies/#node-js-and-javascript",
                    "author": {
                        "login": "swyxio"
                    },
                    "createdAt": "2021-05-18T22:49:23Z",
                    "url": "https://github.com/supabase/supabase-js/issues/171#issuecomment-843617523"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg0Mzc1NjgzNA==",
                    "body": "Thanks for the help @sw-yx.\r\n\r\n@sbutler-gh I'll close this for now as it looks like it's a version issue. But if that doesn't solve it feel free to comment again and I'll reopen for investigation",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-05-19T05:26:49Z",
                    "url": "https://github.com/supabase/supabase-js/issues/171#issuecomment-843756834"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg0NDQxMjAzMA==",
                    "body": "I should also note that this problem will likely go away soon as Netlify is in the process of bumping its default Node version https://github.com/netlify/build-image/pull/555\r\n",
                    "author": {
                        "login": "swyxio"
                    },
                    "createdAt": "2021-05-19T19:39:30Z",
                    "url": "https://github.com/supabase/supabase-js/issues/171#issuecomment-844412030"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4OTc4NTA3NjE=",
            "number": 177,
            "title": "React Native (Expo) cannot fetch results in production",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen testing the from().select() function in debug mode in an ejected Expo app the data is returned successfully, however, once you switch to the release variant, nothing is returned. The app does not crash meaning no major errors are being thrown. Apart from this I have no way of debugging the issue as the release variant scarcely logs anything. \r\n\r\n## To Reproduce\r\n\r\n```\r\nconst { data, error } = await supabase\r\n      .from('table')\r\n      .select('*')\r\n      .eq('column', variableToMatch);\r\n```\r\n\r\n## Expected behavior\r\n\r\nThe expected behaviour is that the call will return the requested data from the Supabase table or an error suggesting that something went wrong.\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Version of supabase-js: v1.11.12\r\n- Version of Node.js: v14.16.0\r\n- Version of Async Storage: v1.15.4\r\n- Version of Expo: v41.0.0\r\n- Version of React Native: v0.63.4\r\n\r\n## Additional context\r\n\r\nI have been getting these logs: `Error getting session from URL.`, `nw_socket_handle_socket_event [C5:1] Socket SO_ERROR [61: Connection refused]`, `nw_connection_get_connected_socket [C5] Client called nw_connection_get_connected_socket on unconnected nw_connection`, `TCP Conn 0x2806304d0 Failed : error 0:61 [61]`, `SocketRocket: In debug mode. Allowing connection to any root cert` but I am uncertain whether the last four pertain to Supabase. Happens on both Android and iOS.\r\n",
            "author": {
                "login": "He1nr1chK"
            },
            "state": "CLOSED",
            "createdAt": "2021-05-21T09:11:08Z",
            "closedAt": "2021-05-24T15:01:32Z",
            "url": "https://github.com/supabase/supabase-js/issues/177",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg0NjQzOTk1MA==",
                    "body": "I have the same problem, but also in development environment. \r\n\r\nWhen i initialize without parameters:\r\n`const supabase = createClient(\"https://xyzcompany.supabase.co\", \"public-anon-key\")`\r\n\r\nI get the following error:\r\n> [TypeError: undefined is not an object (evaluating 'this.localStorage.getItem')]\r\n> Error getting session from URL.\r\n> Error: not implemented\r\n\r\nIf i use localStorage: AsyncStorage (from '@react-native-async-storage/async-storage'), i will get following error:\r\n> Error getting session from URL.\r\n> Error: not implemented\r\n\r\nPlease, can you provide a solution for that error?\r\n\r\nSystem Information:\r\n- OS: macOS\r\n- Version of supabase-js: v1.11.14\r\n- Version of Node.js: v16.1.0\r\n- Version of Async Storage: v1.15.4\r\n- Version of React Native: v0.64.1\r\n\r\nThanks in advance.",
                    "author": {
                        "login": "megacherry"
                    },
                    "createdAt": "2021-05-22T17:31:07Z",
                    "url": "https://github.com/supabase/supabase-js/issues/177#issuecomment-846439950"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg0NjQ0MjYwOA==",
                    "body": "Hi @megacherry, yours in not the same issue but can be solved by following these instructions found in this [tweet](https://github.com/supabase/supabase/issues/353#issuecomment-741519612). ",
                    "author": {
                        "login": "He1nr1chK"
                    },
                    "createdAt": "2021-05-22T17:53:58Z",
                    "url": "https://github.com/supabase/supabase-js/issues/177#issuecomment-846442608"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg0NjQ1MTY1Ng==",
                    "body": "@He1nr1chK: thank you!",
                    "author": {
                        "login": "megacherry"
                    },
                    "createdAt": "2021-05-22T19:13:53Z",
                    "url": "https://github.com/supabase/supabase-js/issues/177#issuecomment-846451656"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg0NzEwMTQ3Nw==",
                    "body": "Moved to different repo, see [#1693](https://github.com/supabase/supabase/issues/1693#issue-899338604)",
                    "author": {
                        "login": "He1nr1chK"
                    },
                    "createdAt": "2021-05-24T15:01:32Z",
                    "url": "https://github.com/supabase/supabase-js/issues/177#issuecomment-847101477"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5MDAzMjkwMTI=",
            "number": 179,
            "title": "Incorrect Type for callback parameter in .on callback on SupabaseRealtimeClient",
            "body": "# Bug report\r\ncallback function of .on() should have `callback: (payload: SupabaseRealtimePayload<T>) => void` type instead of just function.\r\n\r\n## Describe the bug\r\nIf you channel the realtime event with .on() then first callback function's parameter gets the type of `SupabaseRealtimePayload` but for second .on() it has type `any`.\r\n\r\nHere is a clear and concise description of what the bug is.\r\nlet's take this code for example:\r\n```js\r\nconst unsubscriber = supabase\r\n          .from(tableName)\r\n          .on(\"UPDATE\", (updatedChat) => {\r\n            console.log(\"Updated chat\", updatedChat.new);\r\n          })\r\n          .on(\"INSERT\", (insertedChat) => {\r\n            console.log(\"Inserted chat\", insertedChat.new);\r\n          })\r\n          .subscribe();\r\n```\r\nIn this example if you check the type of \"updatedChat\" then it is SupabaseRealtimePayload but if you check type of \"insertedChat\" then it is `any`.\r\n\r\n## To Reproduce\r\n\r\nJust channel the .on() for one table for two or more events. Screenshots will clear what I am telling better and will give you idea what I am trying to say and how to reproduce it.\r\n\r\n## Expected behavior\r\n\r\nAll the callback parameters of .on() should have SupabaseRealtimePayload type.\r\n\r\n## Screenshots\r\n\r\n![ok_one](https://user-images.githubusercontent.com/63447220/119447912-389f6100-bd4e-11eb-9a04-c5a8f605198b.png)\r\n![problematic_one](https://user-images.githubusercontent.com/63447220/119447924-3a692480-bd4e-11eb-80af-4d03529764d3.png)\r\n\r\n\r\n## System information\r\n\r\n- OS: Windows 7(32bit)\r\n- Version of supabase-js: ^1.11.14\r\n\r\nThis is irrelevant so I omitted some info.\r\n\r\n## Additional context- Solution\r\n\r\nI am not pro in TypeScript so I am not 100% confident about this but I am 99% confident.\r\n\r\nchanging the file: src/lib/SupabaseRealtimeClient.ts\r\nline no: [35 click to jump to this file.](https://github.com/supabase/supabase-js/blob/329edd0757431478c48a2190796ba97ca73de939/src/lib/SupabaseRealtimeClient.ts#L35)\r\n\r\nchanges: \r\n```diff\r\n- on(event: SupabaseEventTypes, callback: Function) {\r\n+ on(event: SupabaseEventTypes, callback: (payload: SupabaseRealtimePayload<any>) => void) {\r\n```\r\n\r\nLet me know if this is right solution or not so I can create PR according to it. I didn't wanted to just start a PR without consenting to anyone.\r\n\r\nThank you in advance for such great platform.",
            "author": {
                "login": "PhoenixCreation"
            },
            "state": "CLOSED",
            "createdAt": "2021-05-25T06:21:06Z",
            "closedAt": "2021-05-25T07:02:25Z",
            "url": "https://github.com/supabase/supabase-js/issues/179",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg0NzU4OTk4MA==",
                    "body": "I created PR anyway. merge it if you think this solves the issue. #180 ",
                    "author": {
                        "login": "PhoenixCreation"
                    },
                    "createdAt": "2021-05-25T06:44:43Z",
                    "url": "https://github.com/supabase/supabase-js/issues/179#issuecomment-847589980"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg0NzYwMjU4OA==",
                    "body": "Fixed with merge of #180 ",
                    "author": {
                        "login": "PhoenixCreation"
                    },
                    "createdAt": "2021-05-25T07:02:25Z",
                    "url": "https://github.com/supabase/supabase-js/issues/179#issuecomment-847602588"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5MDU5NzgyMzY=",
            "number": 188,
            "title": "Magic link on react native/expo does not work?",
            "body": "Not sure if i've traced this to the exact code https://github.com/supabase/gotrue-js/blob/9ad7b524e76c9111b19b6ea27ee12108e63ac34a/src/lib/helpers.ts#L16\r\n\r\nbut reading the access token param this way in react native wont work. \r\nI'm using https://docs.expo.io/guides/linking/ to create a link to open my app with the appropriate query params, but  ```auth.session()``` ```auth.onAuthStateChange``` are not triggered.\r\n\r\neg of deep linking to app\r\n```\r\n<a href=\"exp://127.0.0.1:19000?access_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJhdXRoZW50aWNhdGVkIiwiZXhwIjoxNjIyMjMxMzYxLCJzdWIiOiJhZmU0NzM1NC1kZGMzLTRhMzEtOGRjZC00OGYzODI5MDc2NDgiLCJlbWFpbCI6IkZhcnphZHFhc2ltQGdtYWlsLmNvbSIsImFwcF9tZXRhZGF0YSI6eyJwcm92aWRlciI6ImVtYWlsIn0sInVzZXJfbWV0YWRhdGEiOnt9LCJyb2xlIjoiYXV0aGVudGljYXRlZCJ9.rtjawSSJuOqWAC0JQl-xOnZVsDDvwEsSvmYP0juk82I&expires_in=3600&refresh_token=xLJz4EcpYryEnBAUG61JGA&token_type=bearer&type=magiclink\"/><h1>LOGIN</h1></a>```",
            "author": {
                "login": "farzd"
            },
            "state": "CLOSED",
            "createdAt": "2021-05-28T20:01:37Z",
            "closedAt": "2021-06-01T20:04:47Z",
            "url": "https://github.com/supabase/supabase-js/issues/188",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg1MjQxMDgxNQ==",
                    "body": "this is now facilitated by this https://github.com/supabase/gotrue-js/pull/93",
                    "author": {
                        "login": "farzd"
                    },
                    "createdAt": "2021-06-01T20:04:47Z",
                    "url": "https://github.com/supabase/supabase-js/issues/188#issuecomment-852410815"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5MDY2NjI1MTI=",
            "number": 189,
            "title": "Support csv return type",
            "body": "Do we want to support CSV return type? Postgrest already [supports it](https://postgrest.org/en/v7.0.0/api.html#response-format). \r\n\r\nMain motivation is that some JSON responses can get quite large if the column name is large and since the column name is repeated once for each row in the database, it leads to a lot of wasted bytes. CSV format is much better here since the column names appear only once in the response. \r\n\r\n",
            "author": {
                "login": "inian"
            },
            "state": "CLOSED",
            "createdAt": "2021-05-30T07:20:27Z",
            "closedAt": "2021-05-31T03:46:51Z",
            "url": "https://github.com/supabase/supabase-js/issues/189",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg1MDk1NzcwMw==",
                    "body": "I feel like besides just returning CSV, automatically parsing it (or maybe optionally) would be the most important thing - which is pretty slow on large amount of data, but also kinda needed for the feature to make much sense over just using other means to call Postgrest.",
                    "author": {
                        "login": "andreivreja"
                    },
                    "createdAt": "2021-05-30T07:46:10Z",
                    "url": "https://github.com/supabase/supabase-js/issues/189#issuecomment-850957703"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg1MTAxMDk3Nw==",
                    "body": "Someone just opened an issues at https://github.com/supabase/postgrest-js/issues/186\r\n\r\nI guess `postgrest-js` would be more appropriate?",
                    "author": {
                        "login": "andreivreja"
                    },
                    "createdAt": "2021-05-30T14:41:47Z",
                    "url": "https://github.com/supabase/supabase-js/issues/189#issuecomment-851010977"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg1MTE0ODUwNg==",
                    "body": "Yeah lets track this in `postgrest-js`. ",
                    "author": {
                        "login": "inian"
                    },
                    "createdAt": "2021-05-31T03:46:51Z",
                    "url": "https://github.com/supabase/supabase-js/issues/189#issuecomment-851148506"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5MTI1NDI4NzI=",
            "number": 196,
            "title": "Bulk insert doesn't return all rows inserted",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen performing a bulk insert of >1000 rows, the `data` returned only includes the first 1000 rows (not all of the rows inserted).\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Perform a bulk insert of >1000 rows.\r\n2. Notice how `data.length` is only 1000.\r\n\r\nHere's an example:\r\n\r\n```javascript\r\nconst rows = [...]; // More than 1000 rows to be inserted.\r\nconst { data, error } = await supabase.from('users').insert(rows);\r\nconsole.log(data.length); // Only 1000 maximum.\r\nconsole.log(rows.length); // Greater than 1000.\r\nif (data.length !== rows.length) throw new Error('They\\'re different!');\r\n```\r\n\r\n## Expected behavior\r\n\r\nBulk inserting >1000 rows should return a `data` property that includes all of the rows created.\r\n\r\n## System information\r\n\r\n- OS: Ubuntu 20.04\r\n- Version of supabase-js: 1.13.1\r\n- Version of Node.js: 12.18.3\r\n\r\n## Additional context\r\n\r\nRelated to supabase/postgrest-js#290; I'm bulk inserting >1000 user rows at a time and need to save the mapping between the original Firebase-assigned `uid` and the automatically generated `bigint` PostgreSQL primary key (that's used in my `public.users` table).",
            "author": {
                "login": "nicholaschiang"
            },
            "state": "CLOSED",
            "createdAt": "2021-06-06T01:25:51Z",
            "closedAt": "2021-06-06T02:47:32Z",
            "url": "https://github.com/supabase/supabase-js/issues/196",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg1NTMyMDg5OQ==",
                    "body": "Current workaround is just to assume that the the row index is the automatically generated `bigint` PostgreSQL id.",
                    "author": {
                        "login": "nicholaschiang"
                    },
                    "createdAt": "2021-06-06T01:28:27Z",
                    "url": "https://github.com/supabase/supabase-js/issues/196#issuecomment-855320899"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg1NTMyNTM2OA==",
                    "body": "> Notice how data.length is only 1000.\r\n\r\nThis one should be related to the `Max Rows` parameter in your project `/settings/api`(click cog -> then API), it's 1000 by default.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-06-06T02:15:33Z",
                    "url": "https://github.com/supabase/supabase-js/issues/196#issuecomment-855325368"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg1NTMyNzg5NA==",
                    "body": "That did it, thanks @steve-chavez!",
                    "author": {
                        "login": "nicholaschiang"
                    },
                    "createdAt": "2021-06-06T02:47:32Z",
                    "url": "https://github.com/supabase/supabase-js/issues/196#issuecomment-855327894"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5MTcyNzUzMzE=",
            "number": 200,
            "title": "issue in cross-fetch while using cloudflare-workers and sveltekit ",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\nI am trying to use cloudflare-workers, sveltekit and supabase. My local sveltkit build works without any issue. However, when I do `wrangler dev` or `wrangler publish`, I get following error after the build is successful. Looks like its throwing error while running on cloudflare environment. \r\n\r\n```\r\nUncaught\r\nReferenceError: require is not defined\r\n    at node_modules/.pnpm/node-fetch@2.6.1/node_modules/node-fetch/lib/index.js (worker.js:59:18)\r\n    at __require (worker.js:9:44)\r\n    at node_modules/.pnpm/cross-fetch@3.0.6/node_modules/cross-fetch/dist/node-ponyfill.js (worker.js:1099:21)\r\n    at __require (worker.js:9:44)\r\n    at node_modules/.pnpm/@supabase+gotrue-js@1.16.2/node_modules/@supabase/gotrue-js/dist/main/lib/fetch.js (worker.js:1152:41)\r\n    at __require (worker.js:9:44)\r\n    at node_modules/.pnpm/@supabase+gotrue-js@1.16.2/node_modules/@supabase/gotrue-js/dist/main/GoTrueApi.js (worker.js:1442:19)\r\n    at __require (worker.js:9:44)\r\n    at node_modules/.pnpm/@supabase+gotrue-js@1.16.2/node_modules/@supabase/gotrue-js/dist/main/index.js (worker.js:2149:39)\r\n    at __require (worker.js:9:44)\r\nUncaught (in response)\r\n```\r\n\r\nThis could be related to #161. \r\n\r\nI tried by applying [cloudflare-worker-example](https://github.com/supabase/supabase/tree/master/examples/with-cloudflare-workers) patch. That does not seem to work on this.\r\n\r\nAny workaround will be highly appreciated as we are sort of hitting a wall with this this.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. pnpm init svelte@next my-app\r\n2. pnpx svelte-add joshnuss/svelte-supabase\r\n3. wrangler init --site workers-site\r\n4. configure wrangler.toml as follows\r\n```\r\n[site]\r\nbucket = \"./build\"\r\nentry-point = \"workers-site\"\r\n\r\n[build]\r\ncommand = \"pnpm install && pnpm run build\"\r\n\r\n[build.upload]\r\nformat = \"service-worker\"\r\n```\r\n5. configure sveltekit to use @sveltejs/adapter-cloudflare-workers\r\n6. wrangler build\r\n7. wrangler dev throws above error\r\n\r\n## Expected behavior\r\n\r\nwrangler dev/publish to work\r\n\r\n## Screenshots\r\n\r\n\r\n## System information\r\n\r\n- OS: maxOS\r\n- Version of supabase-js: 1.8.0\r\n- Version of Node.js: 16.3\r\n\r\n## Additional context\r\n\r\n\r\n",
            "author": {
                "login": "bhvngt"
            },
            "state": "CLOSED",
            "createdAt": "2021-06-10T12:13:38Z",
            "closedAt": "2021-07-25T17:44:35Z",
            "url": "https://github.com/supabase/supabase-js/issues/200",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs400uCS",
                    "body": "Since this issue is with Cloudflare-adapter that is part of sveltejs kit. I am closing this issue. Mirror details can be found [here](https://github.com/sveltejs/kit/issues/1674).",
                    "author": {
                        "login": "bhvngt"
                    },
                    "createdAt": "2021-07-25T17:43:11Z",
                    "url": "https://github.com/supabase/supabase-js/issues/200#issuecomment-886235282"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5MTk1MzYxMjQ=",
            "number": 203,
            "title": "[Typescript error] match filter only accepts string values",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\nIncorrect types for `match` filter. It should accept any types of values\r\nhttps://supabase.io/docs/reference/javascript/match\r\n\r\n## To Reproduce\r\n\r\nAdd this code to a typescript file and it'll generate error at line 4 saying\r\n`Type 'number' is not assignable to type 'string'`\r\n\r\n```js\r\nconst { data, error } = await supabase\r\n  .from('cities')\r\n  .select('name, country_id')\r\n  .match({name: 'Beijing', country_id: 156})\r\n\r\n```\r\n\r\nI should change the values to string inorder to get rid of the errors\r\n\r\n```js\r\nconst { data, error } = await supabase\r\n  .from('cities')\r\n  .select('name, country_id')\r\n  .match({name: 'Beijing', country_id: '156'})  <----------\r\n\r\n```\r\n\r\n## Expected behavior\r\n\r\nIt shouldn't throw any type error when passing  types other than string\r\n\r\n## Screenshots\r\n![Screen Shot 2021-06-12 at 17 15 10](https://user-images.githubusercontent.com/29520305/121774339-c928ce80-cba1-11eb-9ab0-f446b31cf7e3.png)\r\n\r\nAlso, I'm importing types form `'@supabase/postgrest-js'`.  `@supabase/supabase-js` doesn't have any exported types.\r\n\r\n```js\r\nimport { PostgrestFilterBuilder } from '@supabase/postgrest-js';\r\n```\r\n\r\n## System information\r\n\r\n-  \"typescript\": \"^4.3.2\"\r\n- \"@supabase/supabase-js\": \"^1.14.0\",\r\n",
            "author": {
                "login": "rawatnaresh"
            },
            "state": "CLOSED",
            "createdAt": "2021-06-12T11:44:15Z",
            "closedAt": "2021-06-13T05:42:03Z",
            "url": "https://github.com/supabase/supabase-js/issues/203",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg2MDA3MzEyOQ==",
                    "body": "Hey @rawatnaresh, this will be fixed in https://github.com/supabase/postgrest-js/pull/192.\r\n\r\n> Also, I'm importing types form '@supabase/postgrest-js'. @supabase/supabase-js doesn't have any exported types.\r\n\r\nJust curious, do you have a use case for the types in postgrest-js to be exported? We're working on the next major version so would like to know what people use the types for.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-06-12T16:02:38Z",
                    "url": "https://github.com/supabase/supabase-js/issues/203#issuecomment-860073129"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg2MDA4MTU5MA==",
                    "body": "@soedirgo \r\n> Just curious, do you have a use case for the types in postgrest-js to be exported? We're working on the next major version so would like to know what people use the types for.\r\n\r\nif you want to use `supabase` queries all over your codebase then you don't really need `postgrest-js` types because the results are already typed.\r\n\r\n```js\r\nconst { data, error } = await supabase\r\n    .from<CompanyType>('companies')\r\n    .select();\r\n```\r\nHere `data` is of type `CompanyType`\r\n\r\nBut In my case, I wanted to export the result returned by `supabase` queries. For eg:\r\n\r\n```js\r\nconst getCompany = async (): Promise<PostgrestFilterBuilder<CompanyType>> => {\r\n  return supabase.from<CompanyType>('companies').select();\r\n};\r\n\r\n```\r\n\r\nand use `getCompany` function whenever I need to query `companies`\r\n\r\n```js\r\nconst {data, error} = await getCompany();\r\n```\r\nand for this result to be typed I need to specify the return types of the function. and to do that I  need `PostgrestFilterBuilder` type as well.\r\n\r\n",
                    "author": {
                        "login": "rawatnaresh"
                    },
                    "createdAt": "2021-06-12T17:10:00Z",
                    "url": "https://github.com/supabase/supabase-js/issues/203#issuecomment-860081590"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg2MDE1NzA2Nw==",
                    "body": ":tada: This issue has been resolved in version 1.15.0 :tada:\n\nThe release is available on:\n- [npm package (@latest dist-tag)](https://www.npmjs.com/package/@supabase/supabase-js/v/1.15.0)\n- [GitHub release](https://github.com/supabase/supabase-js/releases/tag/v1.15.0)\n\nYour **[semantic-release](https://github.com/semantic-release/semantic-release)** bot :package::rocket:",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-06-13T05:43:19Z",
                    "url": "https://github.com/supabase/supabase-js/issues/203#issuecomment-860157067"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5MjI3MTQ0Njg=",
            "number": 206,
            "title": "TypeError when using `csv()` on supabase-js",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nI'm trying to return my data as csv as described [in the docs](https://supabase.io/docs/reference/javascript/select#return-data-as-csv). But doing so results in a TypeError. I verified I'm on the latest version of the supabase-js package, and even removed and completely re-installed my `node_modules` folder. \r\n\r\n```\r\nTypeError: _utils_initSupabase__WEBPACK_IMPORTED_MODULE_0__.supabase.from(...).csv is not a function\r\n```\r\n\r\n## Expected behavior\r\n\r\nTo have my date returned as csv. \r\n\r\n## Screenshots\r\n\r\n<img width=\"989\" alt=\"Image showing a TS warning when using .csv() saying: 'Property `csv` does not exist on type `SupabaseQueryBuilder<any>`'\" src=\"https://user-images.githubusercontent.com/9018689/122219395-af440000-ceaf-11eb-8187-6db8380ee3ea.png\">\r\n\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Version of supabase-js: @supabase/supabase-js@1.15.1\r\n\r\n",
            "author": {
                "login": "mgm1313"
            },
            "state": "CLOSED",
            "createdAt": "2021-06-16T12:34:03Z",
            "closedAt": "2021-06-28T02:45:38Z",
            "url": "https://github.com/supabase/supabase-js/issues/206",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg2MjQ0NTc5Ng==",
                    "body": "Thanks for the report @mgm1313! Seems like the docs is incorrect, the call should be `await supabase.from('Table').select().csv()`. But that reveals a bug in `.csv()` which will be fixed in https://github.com/supabase/postgrest-js/pull/193. Will update here when the fix lands in supabase-js.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-06-16T14:49:13Z",
                    "url": "https://github.com/supabase/supabase-js/issues/206#issuecomment-862445796"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg2OTI5NzQzMA==",
                    "body": ":tada: This issue has been resolved in version 1.16.0 :tada:\n\nThe release is available on:\n- [npm package (@latest dist-tag)](https://www.npmjs.com/package/@supabase/supabase-js/v/1.16.0)\n- [GitHub release](https://github.com/supabase/supabase-js/releases/tag/v1.16.0)\n\nYour **[semantic-release](https://github.com/semantic-release/semantic-release)** bot :package::rocket:",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-06-28T02:47:06Z",
                    "url": "https://github.com/supabase/supabase-js/issues/206#issuecomment-869297430"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5Mjg0MDA5MTc=",
            "number": 208,
            "title": "\"Stay signed in\" option for auth",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nI'm constantly needing to log back into my app, even though I've set the expiration date to be a week long and have `autoRefreshToken` set to true. It seems like I need to re-enter my credentials even if the token is not actually expired (i.e. I need to re-enter my credentials even though a week has not passed since the last time I did it). This happens both on localhost and on my production website. The expiration date also doesn't matter, I've set it to be either the minimum or the maximum and the same behavior occurs.\r\n\r\nIf `autoRefreshToken` is true, I would expect the token to be automatically refreshed without needing to enter my credentials again. In other words, if I've logged in once, I should stay logged in unless I've explicitly logged out or cleared my cookies/cache.\r\n\r\nBasically what I'm looking for is something that works equivalently to a \"Stay signed in\" checkbox that's present on most websites, which is AFAIK not possible with Supabase at the moment. You don't need to log in to GitHub/Twitter/YouTube every day you open the website, which is unfortunately pretty much the experience I have with Supabase Auth right now.\r\n\r\n## Describe the solution you'd like\r\n\r\nIf I've logged in once, I should stay logged in unless I've explicitly logged out or cleared my cookies/cache. This means no 401 errors, and no prompting to log in.\r\n\r\nIdeally, the auto-refreshing of the token would actually function completely offline. So if the app is a PWA and you've already signed in online once, then you should still be authenticated if you visit the app again when you're offline.\r\n\r\nThis \"stay signed in\" option could be a separate opt-in parameter. But most likely, if `autoRefreshToken` is true, then most people would expect that this is the behavior that happens (that's certainly my assumption).\r\n\r\n## Describe alternatives you've considered\r\n\r\nNo way to do this in Supabase AFAIK.\r\n\r\n## Additional context\r\n\r\nPotentially fixing https://github.com/supabase/gotrue-js/issues/403 might fix this issue as well.\r\n",
            "author": {
                "login": "churichard"
            },
            "state": "CLOSED",
            "createdAt": "2021-06-23T15:44:11Z",
            "closedAt": "2021-09-09T21:35:13Z",
            "url": "https://github.com/supabase/supabase-js/issues/208",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs40nrhH",
                    "body": "I moved to using client side auth and everything works as I would expect. So for anyone looking at this issue who's using Next.js, instead of following [the Next.js + Supabase example](https://github.com/vercel/next.js/tree/canary/examples/with-supabase-auth-realtime-db), I would recommend handling everything client side instead (i.e. do not use `getServerSideProps`).",
                    "author": {
                        "login": "churichard"
                    },
                    "createdAt": "2021-07-19T19:55:56Z",
                    "url": "https://github.com/supabase/supabase-js/issues/208#issuecomment-882817095"
                },
                {
                    "id": "IC_kwDOD79Crs42a90X",
                    "body": "I'm reopening this because I'm still getting logged out even when using client side auth. It would be really, really great if I could stay logged in.\r\n\r\nFor context, the refresh token is being persisted locally. When the user tries to navigate to the app, I'm calling the `signIn` method on Supabase Auth with the refresh token. Ideally, this would give a valid user and session and call the `onAuthStateChange` callback. But this is not happening; the user sometimes still needs to re-enter their credentials.\r\n\r\nIf I could, I would actually change this issue to be a bug, because I'm pretty sure this is not the behavior most people expect to have when `autoRefreshToken` is true.",
                    "author": {
                        "login": "churichard"
                    },
                    "createdAt": "2021-09-04T20:47:40Z",
                    "url": "https://github.com/supabase/supabase-js/issues/208#issuecomment-913038615"
                },
                {
                    "id": "IC_kwDOD79Crs42n_qs",
                    "body": "Closing in favor of https://github.com/supabase/supabase-js/issues/254. Please see that issue for updated details.",
                    "author": {
                        "login": "churichard"
                    },
                    "createdAt": "2021-09-09T21:35:13Z",
                    "url": "https://github.com/supabase/supabase-js/issues/208#issuecomment-916454060"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5NDMxODM0ODQ=",
            "number": 215,
            "title": "column name can't contain special characters",
            "body": "# Bug report\r\ncolumn name can't contain special characters\r\n\r\n## Describe the bug\r\nSupabase allows creating column with special characters, but js client doesn't let us insert value for corresponding column.\r\n\r\n## To Reproduce\r\n1. Go to 'Table editor'\r\n2. Click on 'new column'\r\n3. Fill the name \"A+ve\"\r\n4. Insert value for this column using Supabase js client\r\n```\r\nconst { data, error } = await supabase.from(\"blood-availability\").insert([\r\n    {\r\n      \"A+ve\": 120,\r\n    },\r\n  ]);\r\n  console.log(\"error\", error)\r\n```\r\n5. Error `column \"A\" of relation \"XXX\" does not exist`\r\n\r\n## Expected behavior\r\nvalue should be inserted\r\n\r\nA clear and concise description of what you expected to happen.\r\n\r\n## Screenshots\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\n<img width=\"567\" alt=\"image\" src=\"https://user-images.githubusercontent.com/3167278/125440640-3359d050-97e2-4d70-9c43-30b6f3d27210.png\">\r\n\r\n<img width=\"593\" alt=\"image\" src=\"https://user-images.githubusercontent.com/3167278/125440475-93f49eff-9ea0-4501-927f-145719eebe69.png\">\r\n\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Version of supabase-js: 1.18.1",
            "author": {
                "login": "xerosanyam"
            },
            "state": "CLOSED",
            "createdAt": "2021-07-13T11:01:31Z",
            "closedAt": "2021-07-14T12:43:04Z",
            "url": "https://github.com/supabase/supabase-js/issues/215",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg3OTY4OTkwMA==",
                    "body": "I guess we might need to restrict the creation of columns with special characters here. It's much cleaner in Postgres, as anything like \"A+ve\" needs to be wrapped in quotes for Postgres to parse it.\r\n\r\n@xerosanyam - you might be able to get this working by adding encoded double quotes (`%22`)\r\n\r\nhttps://postgrest.org/en/stable/api.html?highlight=special%20characters#reserved-characters\r\n\r\nAdditional Tip: avoid capital letters. Ideally everything is written in `snake_case`",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-07-14T08:11:35Z",
                    "url": "https://github.com/supabase/supabase-js/issues/215#issuecomment-879689900"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg3OTg1ODE3OQ==",
                    "body": "refactored to `snake_case`",
                    "author": {
                        "login": "xerosanyam"
                    },
                    "createdAt": "2021-07-14T12:43:01Z",
                    "url": "https://github.com/supabase/supabase-js/issues/215#issuecomment-879858179"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5NTcxMjkwOTI=",
            "number": 221,
            "title": "package.json has incorrect version",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nThe package.json file has the version listed as \"1.0.0\" even though the current version is 1.22.0.\r\n\r\nThis breaks various dependency management systems, including things like https://www.webjars.org/ \r\n\r\n## To Reproduce\r\n\r\nView the versionn number in the package.json file.\r\n\r\n## Expected behavior\r\n\r\npackage.json version should match the release version. Hopefully set by the CI release system.\r\n\r\nIncorrect version is set for the supabase-js/package.json - but that package does rely on the version numbers for the sub-packages (e.g. \"@supabase/gotrue-js\": \"^1.17.0\", etc). Probably should adopt the same version number system as the other packages.\r\n",
            "author": {
                "login": "wiverson"
            },
            "state": "CLOSED",
            "createdAt": "2021-07-31T00:09:40Z",
            "closedAt": "2021-08-11T15:49:13Z",
            "url": "https://github.com/supabase/supabase-js/issues/221",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs41VXCC",
                    "body": "@soedirgo do you know if this is doable with the actions/automation? It won't break Conventional Commits right?",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-08-08T12:40:06Z",
                    "url": "https://github.com/supabase/supabase-js/issues/221#issuecomment-894791810"
                },
                {
                    "id": "IC_kwDOD79Crs41cRhu",
                    "body": "Hey @wiverson, the version number in the repo here is just a placeholder, it gets replaced by the CI before deploying to npm (npm would complain otherwise). If you want to depend on the version in the package.json file, you should use the tarballs from npm instead (it looks like webjars provide that option, but I haven't used it).",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-08-11T08:08:34Z",
                    "url": "https://github.com/supabase/supabase-js/issues/221#issuecomment-896604270"
                },
                {
                    "id": "IC_kwDOD79Crs41djnB",
                    "body": "Got it working in WebJars, will confirm that it works in Maven.\r\n\r\nhttps://search.maven.org/artifact/org.webjars.npm/supabase__supabase-js/1.21.0/jar\r\n\r\n```xml\r\n<dependency>\r\n  <groupId>org.webjars.npm</groupId>\r\n  <artifactId>supabase__supabase-js</artifactId>\r\n  <version>1.21.0</version>\r\n</dependency>\r\n```",
                    "author": {
                        "login": "wiverson"
                    },
                    "createdAt": "2021-08-11T15:48:08Z",
                    "url": "https://github.com/supabase/supabase-js/issues/221#issuecomment-896940481"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5NjAzMDMzMzE=",
            "number": 224,
            "title": "Make email verification optional during email/password signups",
            "body": "# Feature request\r\n\r\nMake email verification an optional factor, it shouldn't be just one of the two where you get it or not.\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nCurrently, for some reason email/password auth requires the user to have verified their email address for a session to be created. This is extremely frustrating, because in most cases you would add additional user data excluding just the email and password of the user and because I don't do any inserts on the client and only at a server-level I have to send the user's token to the backend, but because the session is null I don't have a token to send.\r\n\r\nFor some reason when you disable email confirmation on the dashboard, the user is automatically verified despite the docs talking about email verification like this:\r\n\r\n\"If \"Email Confirmations\" is turned off, both a user and a session will be returned\", aka it does not say anything about the email being automatically verified.\r\n\r\nRedirecting the user to a page where they can add in the additional user data is not ideal due to various UX concerns.\r\n\r\n## Describe the solution you'd like\r\n\r\nIf email verification is optional, the email shouldn't be automatically verified. It should just be unverified, and a session should be created.\r\n\r\nIn fact I would expect disabling email verification to not just automatically consider it verified, I would expect it to be unverified so I can use `generateLink()` to send a verification email.\r\n\r\n## Describe alternatives you've considered\r\n\r\nTried turning off email verification, but it just automatically verifies the email.\r\n\r\n## Additional context\r\n\r\nN/A\r\n\r\n",
            "author": {
                "login": "otterlistic"
            },
            "state": "CLOSED",
            "createdAt": "2021-08-04T11:36:25Z",
            "closedAt": "2021-08-04T11:37:36Z",
            "url": "https://github.com/supabase/supabase-js/issues/224",
            "comments": []
        },
        {
            "id": "MDU6SXNzdWU5NzExOTcxNjQ=",
            "number": 236,
            "title": "count for rpc is not passed to postgrest-js",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nIn [`postgrest.js`](https://github.com/supabase/postgrest-js/blob/master/src/lib/PostgrestRpcBuilder.ts#L18), the `rpc` function allows for a parameter that accepts an object with `count`. It looks like the object with `count` [does not get passed](https://github.com/supabase/supabase-js/blob/master/src/SupabaseClient.ts#L99-L102) to `postgrest.js` from `supabase.js` as this is the current function definition:\r\n\r\n```typescript\r\n  rpc<T = any>(fn: string, params?: object) {\r\n    const rest = this._initPostgRESTClient()\r\n    return rest.rpc<T>(fn, params)\r\n  }\r\n```\r\n\r\nCurrently, the [following example](https://supabase.io/docs/reference/javascript/rpc#with-count-option) mentioned in the documentation would not work. (This specific example would currently not work in `postgrest.js` either due to [a related bug](https://github.com/supabase/postgrest-js/issues/208).).\r\n\r\n```javascript\r\nconst { data, error, count } = await supabase\r\n  .rpc('hello_world', { count: 'exact' })\r\n```\r\n\r\n\r\n## To Reproduce\r\n\r\nRunning something like `.rpc('hello_world', { count: 'exact' })` should fail since there would be no matching stored procedure.\r\n\r\nRunning something like `.rpc('hello', { name: 'world' }, { count: 'exact' })` should return a result where `count` is null since `{ count: 'exact' }` is not passed to `postgrest-js`.\r\n\r\n## Expected behavior\r\n\r\nWhen I run something like `.rpc('hello', { name: 'world' }, { count: 'exact' })`, I expect to receive a `count` with an integer value in the result.\r\n\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser: Safari\r\n- Version of supabase-js: 1.21.0\r\n- Version of Node.js: v16.4.2",
            "author": {
                "login": "e0"
            },
            "state": "CLOSED",
            "createdAt": "2021-08-15T18:33:24Z",
            "closedAt": "2021-08-16T15:49:58Z",
            "url": "https://github.com/supabase/supabase-js/issues/236",
            "comments": []
        },
        {
            "id": "MDU6SXNzdWU5NzU1OTQ1NzE=",
            "number": 241,
            "title": "Require used instead of import, breaks client builds",
            "body": "https://github.com/supabase/supabase-js/blob/93b51af3c90beed8641e93994b6eaf44860fe77c/src/lib/constants.ts#L2\r\n\r\nThis commit introduced a require that pretty much breaks most of the client builds.",
            "author": {
                "login": "andreivreja"
            },
            "state": "CLOSED",
            "createdAt": "2021-08-20T13:06:38Z",
            "closedAt": "2021-08-20T17:19:03Z",
            "url": "https://github.com/supabase/supabase-js/issues/241",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs410ERx",
                    "body": ":tada: This issue has been resolved in version 1.22.2 :tada:\n\nThe release is available on:\n- [GitHub release](https://github.com/supabase/supabase-js/releases/tag/v1.22.2)\n- [npm package (@latest dist-tag)](https://www.npmjs.com/package/@supabase/supabase-js/v/1.22.2)\n\nYour **[semantic-release](https://github.com/semantic-release/semantic-release)** bot :package::rocket:",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-08-20T17:20:27Z",
                    "url": "https://github.com/supabase/supabase-js/issues/241#issuecomment-902841457"
                },
                {
                    "id": "IC_kwDOD79Crs415ctj",
                    "body": "hey @andreivreja do you have more info on the issue?  ",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2021-08-24T01:43:03Z",
                    "url": "https://github.com/supabase/supabase-js/issues/241#issuecomment-904252259"
                },
                {
                    "id": "IC_kwDOD79Crs415eA_",
                    "body": "> hey @andreivreja do you have more info on the issue?\r\n\r\nWell, it's basically just the commit I mentioned in the OP. soedirgo already pushed a fix for that.",
                    "author": {
                        "login": "andreivreja"
                    },
                    "createdAt": "2021-08-24T01:53:56Z",
                    "url": "https://github.com/supabase/supabase-js/issues/241#issuecomment-904257599"
                },
                {
                    "id": "IC_kwDOD79Crs415itj",
                    "body": "just trying to figure out how it broke so we can avoid it in the future, since all builds and tests were passing in our CI/release pipeline",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2021-08-24T02:42:08Z",
                    "url": "https://github.com/supabase/supabase-js/issues/241#issuecomment-904276835"
                },
                {
                    "id": "IC_kwDOD79Crs415jEo",
                    "body": "Gotcha. Took a look over your action/test, seems like it\u2019s a test on node-12. Building is all fine, the issue is when you actually run the build in the browser. My bad on the wording, it\u2019s not the build process that fails.",
                    "author": {
                        "login": "andreivreja"
                    },
                    "createdAt": "2021-08-24T02:46:15Z",
                    "url": "https://github.com/supabase/supabase-js/issues/241#issuecomment-904278312"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5Nzc3NTg2NjA=",
            "number": 244,
            "title": "[Feature Request] - Option for nulls as undefined",
            "body": "# Feature request - Option for nulls as undefined\r\n\r\nCurrently, all empty values returned by the API are set as `null`. \r\n\r\nThe difference between `null` and `undefined` for many (obviously not all) TypeScript devs is meaningless, leading many to drop the `null` type completely. _(In current projects I go as far as enforcing the Microsoft [`no-new-null`](https://github.com/microsoft/rushstack/blob/master/stack/eslint-plugin/src/no-new-null.ts) eslint rule for example.)_\r\n\r\nThis isn't meant to trigger any debate over if that is \"right or wrong\", just that undeniably (and for whatever reasons) some developers have this particular preference for type simplification.\r\n\r\n## Describe the solution you'd like\r\n\r\na) A configuration option in the `SupbaseClient` that coerces all `nulls` to `undefined`. \r\n~~b) A server-side option to send `null` values as `undefined` pre-flight.~~ (edit: https://github.com/supabase/supabase-js/issues/244#issuecomment-905116552)\r\n\r\n## Describe alternatives you've considered\r\n\r\nPresently I need to run each record through a recursive function to convert each `null` value and adjust the type shape accordingly.\r\n\r\n## Additional context\r\n\r\nA specific case where this is especially problematic:\r\n\r\n```typescript\r\nimport { z } from \"zod\"\r\n\r\nexport const FooSchema = z.object({\r\n  id: z.number().optional(),\r\n  title: z.string(),\r\n  color: z.string().optional().default(\"red\")\r\n})\r\n\r\nconst { data, error } = await supabase.from(`foos`).select(`id, title, color`).single()\r\nif (data) { \r\n  const foo = FooSchema.parse(foo)\r\n}\r\n```\r\n\r\n```error\r\nZodError.ts:134 Uncaught (in promise) ZodError: [\r\n  {\r\n    \"code\": \"invalid_type\",\r\n    \"expected\": \"string\",\r\n    \"received\": \"null\",\r\n    \"path\": [\r\n      \"color\"\r\n    ],\r\n    \"message\": \"Expected string, received null\"\r\n  }\r\n]\r\n```\r\n\r\nNormally this would convert an empty value for `\"color\"` to `\"red\"`, however due to the fact that `null !== undefined` it fails. ",
            "author": {
                "login": "prescience-data"
            },
            "state": "OPEN",
            "createdAt": "2021-08-24T06:37:59Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/244",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs41558J",
                    "body": "+1, I realized after the fact that e.g. the [TypeScript coding guidelines](https://github.com/Microsoft/TypeScript/wiki/Coding-guidelines#null-and-undefined) (caveat: read the title) uses only `undefined` as the bottom type and forbids `null`. There isn't much point in having [2 bottom types](https://www.youtube.com/watch?v=PSGEjv3Tqo0&t=561s) and I *think* we also use `undefined` in a few places.\r\n\r\nRather than making it a configuration though, I'd prefer to apply this for [supabase-js v2](https://github.com/supabase/supabase-js/issues/170) instead. What do you think?",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-08-24T06:53:18Z",
                    "url": "https://github.com/supabase/supabase-js/issues/244#issuecomment-904371977"
                },
                {
                    "id": "IC_kwDOD79Crs418vuI",
                    "body": "That sounds awesome. \ud83d\ude0d\r\nAfter thinking and reading about this a bit more, I retract my \"option b (server-side)\" as I could see this mode may easily break other non-TypeScript languages. \r\nTo \"steel-man\" the other side, there _is_ an argument to be made when dealing with database data that [a Prisma team member has made here](https://github.com/prisma/prisma-client-js/issues/572), however, I think so long as the transformation only applies to the JS library I personally think the benefits (_[sindresorhus](https://github.com/sindresorhus/meta/discussions/7), [Crockford](https://www.youtube.com/watch?v=PSGEjv3Tqo0&feature=youtu.be&t=9m21s))_ of simplification outweigh the cons.\r\n\r\n_(ps: I always love reading that warning on the TS guidelines page, they must be so sick of this debate by now \ud83e\udd23)_",
                    "author": {
                        "login": "prescience-data"
                    },
                    "createdAt": "2021-08-25T02:18:21Z",
                    "url": "https://github.com/supabase/supabase-js/issues/244#issuecomment-905116552"
                },
                {
                    "id": "IC_kwDOD79Crs5HIgqM",
                    "body": "One thing to note regarding JSON is that `undefined` does not exist, whereas `null` is a value.\r\n\r\nFor instance, `JSON.parse('undefined')` throws an error, but `JSON.parse(null)` returns `null`.\r\n\r\nWhen stringifying a JavaScript object into JSON, all key/value-pairs with the value of `undefined` will be **skipped**, whereas pairs with the value of `null` will be included.\r\n\r\nHere's an example: `JSON.stringify({ empty: null, hide: undefined })` returns `'{\"empty\":null}'`.\r\nThis is very handy when you want to send back as little data as possible to the client, by removing all fields \"without value\".\r\n\r\n`null` is considered a \"value\", as it represents \"nothing\", \"empty\" or \"void\", but `undefined` means it doesn't exist at all.\r\n\r\nSo, when retrieving data via Supabase (or Postgrest), we may get a whole lot of fields being `null`, when we may want them to be excluded altogether, depending on the use case.\r\n\r\nWe could of course use some recursive function to do this manually, but it would be nice if it would be baked in to the library via an options parameter.\r\n\r\nSo, it's not just a question about TypeScript or schema validations, because it returns a completely different dataset in JSON depending on whether it's `null` or `undefined`!",
                    "author": {
                        "login": "danielpox"
                    },
                    "createdAt": "2022-07-24T23:13:36Z",
                    "url": "https://github.com/supabase/supabase-js/issues/244#issuecomment-1193413260"
                },
                {
                    "id": "IC_kwDOD79Crs5HI93K",
                    "body": "@danielpox thanks for the input! Yes, in https://github.com/supabase/postgrest-js/pull/278 we decided to adopt the Prisma team's stance on this. We do use `undefined` instead of `null` for function args etc., but not for Postgres values.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-07-25T03:47:26Z",
                    "url": "https://github.com/supabase/supabase-js/issues/244#issuecomment-1193532874"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5OTI2NTMxMDE=",
            "number": 254,
            "title": "Local Storage getting cleared randomly, causing user to log out",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nSometimes, the local storage entry for Supabase Auth (`supabase.auth.token`) gets cleared, causing the user to be logged out of the application. Local storage keys unrelated to Supabase are unchanged and remain persisted, leading me to believe that this is a Supabase issue.\r\n\r\n## To Reproduce\r\n\r\nI'm not entirely sure how to reproduce this. It happens consistently for me, but I don't know the cause. Usually, after logging in and waiting for a few days, the local storage entry gets cleared automatically.\r\n\r\nYou can try the following:\r\n\r\n1. Implement client-side Supabase Auth\r\n2. Log into the application\r\n3. Wait some period of time (usually 1-2 days)\r\n4. Observe that you are logged out and the local storage entry has been cleared\r\n\r\nFor details on how I am implementing Supabase Auth, take a look at my [public repository](https://github.com/churichard/notabase/blob/main/utils/useAuth.tsx).\r\n\r\n## Expected behavior\r\n\r\n`supabase.auth.token` should never be cleared unless the user explicitly logs out or clears their cache.\r\n\r\n## System information\r\n\r\nThis happens on multiple OS's and browsers.\r\n\r\n- OS: Windows, Android, iOS\r\n- Browser (if applies): Chrome, Safari\r\n- Version of supabase-js: 1.22.5\r\n\r\n## Additional context\r\nMy JWT expiry is `604800`, but I've also used `60` before with the same behavior happening. It seems to be unaffected by the JWT expiry value.\r\n\r\nThis happens both on `localhost` and in production.\r\n\r\nI'm not sure about the implementation details of Supabase Auth, but what could be happening is that the `refreshToken` that I am passing into the `signIn` method is expired, so the user gets automatically logged out and the local storage entry is cleared. What should happen is that the token is automatically refreshed, the user stays signed in, and the local storage entry is preserved/updated.\r\n\r\n**Edit: I've noticed this happening sometimes after I deploy.** Is there something that changes after each deployment that invalidates the session? I'm using Vercel.",
            "author": {
                "login": "churichard"
            },
            "state": "CLOSED",
            "createdAt": "2021-09-09T21:34:10Z",
            "closedAt": "2022-05-09T02:47:25Z",
            "url": "https://github.com/supabase/supabase-js/issues/254",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs42zC9o",
                    "body": "Check for any log messages in your browser's console. Waiting a few days and expecting the session to still be persisted is a vulnerability. \r\n\r\nEventually, the access token will expire. If the refresh token cannot obtain a new access token then the session is automatically deleted.",
                    "author": {
                        "login": "adam-beck"
                    },
                    "createdAt": "2021-09-14T17:13:38Z",
                    "url": "https://github.com/supabase/supabase-js/issues/254#issuecomment-919351144"
                },
                {
                    "id": "IC_kwDOD79Crs42zMCk",
                    "body": "No messages are logged in the console.\r\n\r\nIt's fine and good that the access token expires, but a new access token should be retrieved when this happens. The user should not be logged out. If you look at popular websites like Google, YouTube, even GitHub, you're pretty much always logged in, and I expect the same to happen for my website. It's a big problem for me because many of my users are on mobile devices where it's a hassle to keep logging in every day.\r\n\r\nFor what's it worth, Firebase Auth does not have this problem. You are always logged in unless you explicitly log out.\r\n\r\nIt's also fine if Supabase Auth chooses not to make this the default behavior (although I definitely think it should be), but there should be _some_ way to keep the user signed in.",
                    "author": {
                        "login": "churichard"
                    },
                    "createdAt": "2021-09-14T18:00:55Z",
                    "url": "https://github.com/supabase/supabase-js/issues/254#issuecomment-919388324"
                },
                {
                    "id": "IC_kwDOD79Crs420PkR",
                    "body": "So after doing some more digging it doesn't look like there is anything explicitly deleting the session. I don't know a good way to reproduce this either. I did something stupid and provided you an assumption: that eventually the refresh token would stop working. That, however, doesn't seem to be the case. Every 3600 seconds (i.e. 1 hour) the refresh token is used to obtain a new access token. This is perpetual until the user signs out.\r\n\r\nIs there anything in the `auth.audit_log_entries` table that would point to the cause?\r\nGoing through your code, do you need the following lines:\r\n\r\n```tsx\r\n  // Initialize the user based on the stored session\r\n  const initUser = useCallback(async () => {\r\n    const session = supabase.auth.session();\r\n    await supabase.auth.signIn({\r\n      refreshToken: session?.refresh_token,\r\n    });\r\n    setIsLoaded(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    initUser();\r\n  }, [initUser]);\r\n```\r\n\r\nhttps://github.com/churichard/notabase/blob/main/utils/useAuth.tsx#L35-L46\r\n\r\nI'm wondering if the `refresh_token` is somehow used twice which would cause an issue. If you have a `supabase.auth.session()`, what is the purpose of signing in? Wouldn't you already be signed in?",
                    "author": {
                        "login": "adam-beck"
                    },
                    "createdAt": "2021-09-15T03:14:40Z",
                    "url": "https://github.com/supabase/supabase-js/issues/254#issuecomment-919664913"
                },
                {
                    "id": "IC_kwDOD79Crs422chQ",
                    "body": "The docs are rather lacking for auth, so I'm not exactly sure how to restore a user's session; it would be *great* to have an example of that. In my code, I kind of just did what seemed reasonable to me, and it works fine except for this one issue.\r\n\r\nMy reasoning is that even though a session is stored in local storage, it will eventually expire. Does Supabase automatically restore expired sessions somehow (like on the next network request, or does it coincide with the every 3600 seconds for the refresh token)? I recall getting 401 errors when making requests sometimes before I switched to my current implementation, but maybe that's been fixed now.\r\n\r\nIn my audit log, it seems like every time I refresh or use the app, there is a `token_refreshed` and `token_revoked` action happening. I tried removing `supabase.auth.signIn` and those two actions don't happen anymore when I refresh the app.",
                    "author": {
                        "login": "churichard"
                    },
                    "createdAt": "2021-09-15T17:53:51Z",
                    "url": "https://github.com/supabase/supabase-js/issues/254#issuecomment-920242256"
                },
                {
                    "id": "IC_kwDOD79Crs422sl9",
                    "body": "So, the docs could probably use some TLC regarding auth but if you look into the [gotrue-js library](https://github.com/supabase/gotrue-js/blob/master/src/GoTrueClient.ts#L90) (which handles client-side auth for supabase), you'll find that it restores the session automatically when initializing supabase (assuming the refresh token exists in LocalStorage).\r\n\r\n```js\r\n/**\r\n   * Recovers the session from LocalStorage and refreshes\r\n   * Note: this method is async to accommodate for AsyncStorage e.g. in React native.\r\n   */\r\n  private async _recoverAndRefresh() {\r\n    try {\r\n      const json = isBrowser() && (await this.localStorage.getItem(STORAGE_KEY))\r\n      if (!json) {\r\n        return null\r\n      }\r\n\r\n      const data = JSON.parse(json)\r\n      const { currentSession, expiresAt } = data\r\n      const timeNow = Math.round(Date.now() / 1000)\r\n\r\n      if (expiresAt < timeNow) {\r\n        if (this.autoRefreshToken && currentSession.refresh_token) {\r\n          const { error } = await this._callRefreshToken(currentSession.refresh_token)\r\n          if (error) {\r\n            console.log(error.message)\r\n            await this._removeSession()\r\n          }\r\n        } else {\r\n          this._removeSession()\r\n        }\r\n      } else if (!currentSession || !currentSession.user) {\r\n        console.log('Current session is missing data.')\r\n        this._removeSession()\r\n      } else {\r\n        // should be handled on _recoverSession method already\r\n        // But we still need the code here to accommodate for AsyncStorage e.g. in React native\r\n        this._saveSession(currentSession)\r\n        this._notifyAllSubscribers('SIGNED_IN')\r\n      }\r\n    } catch (err) {\r\n      console.error(err)\r\n      return null\r\n    }\r\n  }\r\n```\r\n\r\nMy advice: try to remove the explicit call to `signIn` on initialization and see if the problem is resolved. ",
                    "author": {
                        "login": "adam-beck"
                    },
                    "createdAt": "2021-09-15T19:16:26Z",
                    "url": "https://github.com/supabase/supabase-js/issues/254#issuecomment-920308093"
                },
                {
                    "id": "IC_kwDOD79Crs422uJE",
                    "body": "Got it, I'll try it out \ud83d\udc4d\r\n\r\nI'll give it a few days or so to see if I still run into the same issue.",
                    "author": {
                        "login": "churichard"
                    },
                    "createdAt": "2021-09-15T19:26:22Z",
                    "url": "https://github.com/supabase/supabase-js/issues/254#issuecomment-920314436"
                },
                {
                    "id": "IC_kwDOD79Crs43mMVw",
                    "body": "After trying this method out for a few weeks, I'm still getting logged out randomly. But now, I have the additional problem of sometimes having 401 errors when sending requests \ud83d\ude05\r\n\r\nI think the 401 errors _might_ be resolved by https://github.com/supabase/gotrue-js/issues/403, but getting logged out randomly is probably a separate issue.",
                    "author": {
                        "login": "churichard"
                    },
                    "createdAt": "2021-10-02T14:11:55Z",
                    "url": "https://github.com/supabase/supabase-js/issues/254#issuecomment-932758896"
                },
                {
                    "id": "IC_kwDOD79Crs47lOnd",
                    "body": "> After trying this method out for a few weeks, I'm still getting logged out randomly. But now, I have the additional problem of sometimes having 401 errors when sending requests \ud83d\ude05\r\n> \r\n> I think the 401 errors _might_ be resolved by supabase/gotrue-js#403, but getting logged out randomly is probably a separate issue.\r\n\r\nI am in the same boat...",
                    "author": {
                        "login": "dimoFeeld"
                    },
                    "createdAt": "2021-12-22T14:24:42Z",
                    "url": "https://github.com/supabase/supabase-js/issues/254#issuecomment-999614941"
                },
                {
                    "id": "IC_kwDOD79Crs48Qf1J",
                    "body": "Why it takes too long to solve this issue :( ?",
                    "author": {
                        "login": "davut"
                    },
                    "createdAt": "2022-01-12T11:44:59Z",
                    "url": "https://github.com/supabase/supabase-js/issues/254#issuecomment-1010957641"
                },
                {
                    "id": "IC_kwDOD79Crs48awGw",
                    "body": "Might not be related but I noticed that `supabase.auth.session()` may return `null` when first called, even if there is a user token in storage. When I saw `null`, I assumed the user was logged out, but in fact, supabase was refreshing the token behind the scenes. see this, which contain more context and a solution. https://github.com/supabase/gotrue-js/issues/23",
                    "author": {
                        "login": "markwcollins"
                    },
                    "createdAt": "2022-01-15T08:50:47Z",
                    "url": "https://github.com/supabase/supabase-js/issues/254#issuecomment-1013645744"
                },
                {
                    "id": "IC_kwDOD79Crs49joRA",
                    "body": "I'm having the same problem where I get logged out randomly. It mostly happens when refreshing the page after some amount of time.\r\nI tried putting a low JWT expiry time (30 seconds) and a console.log() inside the onAuthStateChanged(). If I keep the app running, it's all fine and the token is refreshed. What logs me out is when I try reloading the page near the 30 seconds mark (let's say at 28 seconds I start reloading the page). Then, the user gets logged out and I get an error in the console saying the token is invalid.",
                    "author": {
                        "login": "TeddyLourson"
                    },
                    "createdAt": "2022-02-08T15:42:34Z",
                    "url": "https://github.com/supabase/supabase-js/issues/254#issuecomment-1032750144"
                },
                {
                    "id": "IC_kwDOD79Crs4-cQWs",
                    "body": "+1 same issue as @Teio07 ",
                    "author": {
                        "login": "ydennisy"
                    },
                    "createdAt": "2022-02-22T09:29:40Z",
                    "url": "https://github.com/supabase/supabase-js/issues/254#issuecomment-1047594412"
                },
                {
                    "id": "IC_kwDOD79Crs4-hv7X",
                    "body": "Maybe [this](supabase/cli#185) is related?",
                    "author": {
                        "login": "naripok"
                    },
                    "createdAt": "2022-02-23T17:34:46Z",
                    "url": "https://github.com/supabase/supabase-js/issues/254#issuecomment-1049034455"
                },
                {
                    "id": "IC_kwDOD79Crs4-h7qr",
                    "body": "It was just a mistake on my side, after I fixed it, I haven't been logged out for a while.",
                    "author": {
                        "login": "TeddyLourson"
                    },
                    "createdAt": "2022-02-23T18:27:21Z",
                    "url": "https://github.com/supabase/supabase-js/issues/254#issuecomment-1049082539"
                },
                {
                    "id": "IC_kwDOD79Crs4-h82i",
                    "body": "> It was just a mistake on my side, after I fixed it, I haven't been logged out for a while.\r\n\r\nWould you mind sharing the gist of it, @Teio07?\r\nMaybe it will help me fix it on my side :laughing: ",
                    "author": {
                        "login": "naripok"
                    },
                    "createdAt": "2022-02-23T18:32:56Z",
                    "url": "https://github.com/supabase/supabase-js/issues/254#issuecomment-1049087394"
                },
                {
                    "id": "IC_kwDOD79Crs4-iEvR",
                    "body": "I don't know if it will help you because it was pretty specific to my implementation, but here is how I solved it.\r\nI am listening to the `person` table which is a table that I created and linked to the `users` table generated by Supabase (it's just holding more details about the user.) I created a layer of abstraction to listen for changes and return an `Observable` that returns `Either` a `Failure` or an instance of the retrieved/updated `Person`. The error I had was when I tried to unsubscribe from the stream when refreshing the page. I had a warning saying that the stream was already closed or something. All I had to do was to remove the call from the return method of the useEffect hook for it to work.\r\n\r\n```typescript\r\n  useEffect(() => {\r\n    let handleSessionSubscription: Subscription | null;\r\n    const maybeSession = supabase.auth.session();\r\n    handleSessionSubscription = handleSession(maybeSession);\r\n    const { data: subscription } = supabase.auth.onAuthStateChange(\r\n      (_event, session) => {\r\n        handleSessionSubscription = handleSession(session);\r\n      }\r\n    );\r\n    return () => {\r\n      // Here be dragons \ud83d\udc09\r\n      // \ud83d\udc47 This was giving me an error, I removed it\r\n      handleSessionSubscription?.unsubscribe();\r\n      subscription?.unsubscribe();\r\n    };\r\n  }, []);\r\n```\r\nMy handleSession method :\r\n```typescript\r\n  const handleSession = (session: Session | null) => {\r\n    if (null === session || null === session.user) {\r\n      setAuthStateUnauthenticated();\r\n      return null;\r\n    }\r\n    const user = session.user;\r\n    const id = new UniqueId(user.id, 'fromUniqueString');\r\n    return personRepository.watchPerson(id).subscribe((failureOrPerson) => {\r\n      failureOrPerson.fold(toastFailure, (personSuccess) => {\r\n        const person = personSuccess.data;\r\n        setAuthStateAuthenticated({ person: person });\r\n      });\r\n    });\r\n  };\r\n```",
                    "author": {
                        "login": "TeddyLourson"
                    },
                    "createdAt": "2022-02-23T19:09:19Z",
                    "url": "https://github.com/supabase/supabase-js/issues/254#issuecomment-1049119697"
                },
                {
                    "id": "IC_kwDOD79Crs5BBhMV",
                    "body": "Has there been any update on this?  I thought the tokens were supposed to be refreshed automatically but I've never seen that to be the case in the logs.\r\n\r\n```\r\n2022-04-06 23:03:15Z | token_revoked | d8a90912-0757-445d-be17-437735100ca0 | foo@example.com\r\n2022-04-06 23:03:15Z | token_refreshed | d8a90912-0757-445d-be17-437735100ca0 | foo@example.com\r\n```\r\n\r\nEvery time a token is attempted to be refreshed it seems like it is just immediately revoked. \r\n",
                    "author": {
                        "login": "billscheidel"
                    },
                    "createdAt": "2022-04-06T23:23:10Z",
                    "url": "https://github.com/supabase/supabase-js/issues/254#issuecomment-1090917141"
                },
                {
                    "id": "IC_kwDOD79Crs5Cx1xm",
                    "body": "Facing the same issue as @billscheidel mentioned. @thorwebdev do you know if there is a fix for this when using auth-helpers? Or @garyaustin1 do you any potential solutions for this?",
                    "author": {
                        "login": "saiabishek1"
                    },
                    "createdAt": "2022-05-08T06:50:05Z",
                    "url": "https://github.com/supabase/supabase-js/issues/254#issuecomment-1120361574"
                },
                {
                    "id": "IC_kwDOD79Crs5CyoiP",
                    "body": "@saiabishek1 v1.22.14 of gotrue-js should resolve this: https://github.com/supabase/gotrue-js/pull/278",
                    "author": {
                        "login": "thorwebdev"
                    },
                    "createdAt": "2022-05-09T02:26:47Z",
                    "url": "https://github.com/supabase/supabase-js/issues/254#issuecomment-1120569487"
                },
                {
                    "id": "IC_kwDOD79Crs5MAMaw",
                    "body": "This is still a problem with React Native as of writing (October 11th 2022)",
                    "author": {
                        "login": "alexreyes"
                    },
                    "createdAt": "2022-10-11T18:40:17Z",
                    "url": "https://github.com/supabase/supabase-js/issues/254#issuecomment-1275119280"
                },
                {
                    "id": "IC_kwDOD79Crs5Widz8",
                    "body": "Still a problem in Nuxt/Supabase as well",
                    "author": {
                        "login": "jetlej"
                    },
                    "createdAt": "2023-03-02T13:35:22Z",
                    "url": "https://github.com/supabase/supabase-js/issues/254#issuecomment-1451875580"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5OTYwNzE0MDQ=",
            "number": 261,
            "title": "When SUPABASE_URL has a trailing slash, authentication with the Auth component does not work",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen SUPABASE_URL has a trailing slash, authentication with the Auth component leads to a page that is not found\r\n\r\n## To Reproduce\r\n\r\nInitialize a client with a URL with a trailing slash, e.g. \"'https://xxxxxxxxxxxx.supabase.co/'\r\n\r\nYou are brought to 'https://xxxxxxxxxxx.supabase.co//rest/v1....' when trying to log in with Github, Google, etc.\r\n## Expected behavior\r\n\r\nYou should be brought to 'https://xxxxxxxxxxx.supabase.co/rest/v1....'.\r\n\r\nShould just be able to take the trailing slash out from a URL if applicable. I can do a fix if it is indeed having this behavior for others. It might not be (I'm using GitPod currently). I'd be happy to look at it\r\n",
            "author": {
                "login": "rodjoseph"
            },
            "state": "CLOSED",
            "createdAt": "2021-08-19T19:34:04Z",
            "closedAt": "2021-09-28T14:19:13Z",
            "url": "https://github.com/supabase/supabase-js/issues/261",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs42ycI5",
                    "body": "this looks like a supabase-js issue. moving it to that repo",
                    "author": {
                        "login": "MildTomato"
                    },
                    "createdAt": "2021-09-14T14:13:08Z",
                    "url": "https://github.com/supabase/supabase-js/issues/261#issuecomment-919192121"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs472luO",
            "number": 273,
            "title": "IgnoreDuplicates not working as intended",
            "body": "# Bug report\r\n\r\n**On making a call  with ignoreDuplicates no header is added to the request:**\r\n\r\n```\r\n let { data, error, status } = await supabase\r\n      .from('emails_d')\r\n      .upsert(emails, { ignoreDuplicates: true });\r\n```\r\n\r\nPackage .json:\r\n`\"@supabase/supabase-js\": \"^1.22.6\",`\r\n\r\nIt looks like it was added but it's not functional\r\n[](https://github.com/supabase/postgrest-js/pull/195)\r\n\r\n",
            "author": {
                "login": "CR1AT0RS"
            },
            "state": "CLOSED",
            "createdAt": "2021-09-22T11:11:19Z",
            "closedAt": "2021-09-23T02:29:30Z",
            "url": "https://github.com/supabase/supabase-js/issues/273",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs43KXNX",
                    "body": "I upgraded the version and I am starting to see the header going through.\r\n\r\n",
                    "author": {
                        "login": "CR1AT0RS"
                    },
                    "createdAt": "2021-09-23T02:29:22Z",
                    "url": "https://github.com/supabase/supabase-js/issues/273#issuecomment-925463383"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs48qH9B",
            "number": 283,
            "title": "request to https://....supabase.c\u2026&limit=31 failed, reason: certificate has expired",
            "body": "# Bug report\r\ncertificate has expired\r\n## Describe the bug\r\nI create a desktop app with ElectronJs but recently just got an error certificate has expired and cannot load the data\r\nA clear and concise description of what the bug is.\r\n\r\n## Screenshots\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n## System information\r\n\r\n- OS:macOS\r\n- Browser \"electron\": \"12.0.6\",\r\n- Version of supabase-js: \"@supabase/supabase-js\": \"^1.23.0\",\r\n- Version of Node.js: v14.17.2\r\n\r\n```\r\ncode: \"CERT_HAS_EXPIRED\"\r\nerrno: \"CERT_HAS_EXPIRED\"\r\nmessage: \"request to https://..supabase.co/rest/v1/orders?select=*&order=id.desc.nullslast&offset=0&limit=31 failed, reason: certificate has expired\"\r\ntype: \"system\"\r\nstack: \"FetchError: request to https://....supabase.co/rest/v1/orders?select=*&order=id.desc.nullslast&offset=0&limit=31 failed, reason: certificate has expired\r\nat ClientRequest.<anonymous> (/node_modules/cross-fetch/node_modules/node-fetch/lib/index.js:1461:11)\r\nat ClientRequest.emit (events.js:315:20)\r\nat TLSSocket.socketErrorListener (_http_client.js:469:9)\r\nat TLSSocket.emit (events.js:315:20)\r\nat emitErrorNT (internal/streams/destroy.js:106:8)\r\nat emitErrorCloseNT (internal/streams/destroy.js:74:3)\r\nat processTicksAndRejections (internal/process/task_queues.js:80:21)\"\r\n__proto__: Error\r\n```\r\n",
            "author": {
                "login": "putheng"
            },
            "state": "CLOSED",
            "createdAt": "2021-10-06T07:27:15Z",
            "closedAt": "2021-12-13T15:42:10Z",
            "url": "https://github.com/supabase/supabase-js/issues/283",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs43xQ_b",
                    "body": "Bumping your electron version will likely fix this. Likely to do with Let\u2019s Encrypt root certificate expiring: see https://github.com/electron/electron/issues/31212.",
                    "author": {
                        "login": "bnjmnt4n"
                    },
                    "createdAt": "2021-10-06T07:36:37Z",
                    "url": "https://github.com/supabase/supabase-js/issues/283#issuecomment-935661531"
                },
                {
                    "id": "IC_kwDOD79Crs47KfUL",
                    "body": "Closing due to inactivity.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-12-13T15:42:10Z",
                    "url": "https://github.com/supabase/supabase-js/issues/283#issuecomment-992605451"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs48yOuV",
            "number": 284,
            "title": "App embedded in iframe, can't read localStorage (`_initSupabaseAuthClient`)",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhenever my app is embedded and is executed on a browser that blocks 3rd party cookies (Chrome incognito mode), it crashes\r\n\r\n```\r\nDOMException: Failed to read the 'localStorage' property from 'Window': Access is denied for this document.\r\n    at new constructor (https://bot.typebot.io/_next/static/chunks/232-9f427f032e260c4f70bf.js:1:20791)\r\n    at new S (https://bot.typebot.io/_next/static/chunks/232-9f427f032e260c4f70bf.js:1:29809)\r\n    at we._initSupabaseAuthClient (https://bot.typebot.io/_next/static/chunks/232-9f427f032e260c4f70bf.js:1:60282)\r\n    at new we (https://bot.typebot.io/_next/static/chunks/232-9f427f032e260c4f70bf.js:1:59220)\r\n    at Oe (https://bot.typebot.io/_next/static/chunks/232-9f427f032e260c4f70bf.js:1:61094)\r\n    at Object.5947 (https://bot.typebot.io/_next/static/chunks/947-a52178cb2719aea458b0.js:1:4590)\r\n    at n (https://bot.typebot.io/_next/static/chunks/webpack-e461b879a7fb8d69f062.js:1:149)\r\n    at Module.7128 (https://bot.typebot.io/_next/static/chunks/pages/%5B...chatbotId%5D-fa008afff595c45cbca3.js:1:149)\r\n    at n (https://bot.typebot.io/_next/static/chunks/webpack-e461b879a7fb8d69f062.js:1:149)\r\n    at https://bot.typebot.io/_next/static/chunks/pages/%5B...chatbotId%5D-fa008afff595c45cbca3.js:1:410\r\n    at https://bot.typebot.io/_next/static/chunks/main-3c04b02f8772d9f13a78.js:1:18402\r\n```\r\n\r\nI'm not sure where it throws exactly (I'm not authenticating, I just read the database). But the stacktrace indicates this function: `_initSupabaseAuthClient`\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Open Chrome in Incognito mode and enable \"Block third party cookies\"\r\n2. Run the app that uses Supabase in an iframe\r\n3. See error",
            "author": {
                "login": "baptisteArno"
            },
            "state": "CLOSED",
            "createdAt": "2021-10-07T09:07:21Z",
            "closedAt": "2021-10-19T07:52:36Z",
            "url": "https://github.com/supabase/supabase-js/issues/284",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs44aSDm",
                    "body": "I submitted an issue in the gotrue repo: https://github.com/supabase/gotrue-js/issues/148",
                    "author": {
                        "login": "baptisteArno"
                    },
                    "createdAt": "2021-10-19T06:46:18Z",
                    "url": "https://github.com/supabase/supabase-js/issues/284#issuecomment-946413798"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs485O6l",
            "number": 286,
            "title": "Storage functions not working",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen I try to use from.update(), from.upload() with upsert = true, from.remove() it just doesn't work.\r\n\r\nfrom.update() returns resource not found when I try to update an image.\r\n\r\nfrom.upload() upsert true returns new row violates row-level security policy (USING expression) for table \"objects\"\r\n\r\nand from.remove() return an empty array.\r\n\r\nSo, basically I was trying to create the functionality of updating a profile picture, I tried to simulate the from.update() function by deleting the image and uploading it again, but it's just not possible.\r\n\r\nA clear and concise description of what the bug is.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\nUpload an image with from.upload() upsert false (works)\r\nUpdate that image with from.update() doesn't work\r\nDelete that image with from.remove() doesn't work\r\n\r\n## Expected behavior\r\n\r\nImage being update or deleted as per the function used.\r\n\r\nAdd any other context about the problem here.\r\nUsing the official npm package.\r\n",
            "author": {
                "login": "lukaskretzschmer"
            },
            "state": "CLOSED",
            "createdAt": "2021-10-09T07:42:38Z",
            "closedAt": "2021-10-10T20:22:28Z",
            "url": "https://github.com/supabase/supabase-js/issues/286",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs44AFjq",
                    "body": "Wrong policies.",
                    "author": {
                        "login": "lukaskretzschmer"
                    },
                    "createdAt": "2021-10-10T20:22:28Z",
                    "url": "https://github.com/supabase/supabase-js/issues/286#issuecomment-939546858"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs48-AXO",
            "number": 288,
            "title": "I'm having 404 on update with nextjs",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen doing a `supabase.from('profiles').update({username}).eq('id', user.id)`, I'm getting a 404.\r\n\r\n![image](https://user-images.githubusercontent.com/29467803/136821402-bc792b3b-03aa-4500-9146-96e6805d4841.png)\r\n\r\nHowever, if I make a `select` call, it works fine.\r\n\r\n![image](https://user-images.githubusercontent.com/29467803/136821564-b00f7e22-daf2-4e13-9d6e-23d6adbe8247.png)\r\n\r\n## Expected behavior\r\n\r\nI'm expecting the `update` to work here.\r\n\r\n## System information\r\n\r\nI'm using NextJS\r\n\r\nThanks for your help\r\n",
            "author": {
                "login": "KevTale"
            },
            "state": "CLOSED",
            "createdAt": "2021-10-11T16:07:02Z",
            "closedAt": "2021-10-11T22:10:54Z",
            "url": "https://github.com/supabase/supabase-js/issues/288",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs44Dn5O",
                    "body": "My bad, I did not set the `update` policy properly.\r\nBut I think the confusion is understandable, I went to Authentication -> Policies -> New Policy -> Selected the \"Enable insert for authenticated users only\" template (renamed it to update instead of insert) -> Clicked on \"Update\" instead of preselected \"Insert\" -> Create the Policy.\r\n\r\nThe thing is, doing so adds the `auth.role() = 'authenticated` to `WITH CHECK expression` when it should add it to `USING expression` if I'm not mistaken.",
                    "author": {
                        "login": "KevTale"
                    },
                    "createdAt": "2021-10-11T22:02:43Z",
                    "url": "https://github.com/supabase/supabase-js/issues/288#issuecomment-940473934"
                },
                {
                    "id": "IC_kwDOD79Crs44Dp-K",
                    "body": "Right, IIRC you need both `USING` and `WITH CHECK` - `USING` to \"see\" the rows, `WITH CHECK` to check updated rows. Sorry for the confusion!",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-10-11T22:10:54Z",
                    "url": "https://github.com/supabase/supabase-js/issues/288#issuecomment-940482442"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs49R6rn",
            "number": 289,
            "title": "Filter IN throws parse error",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nUsing `supabase-js` to filter values based on an array of values throws a parse error.\r\n`{\"details\": \"unexpected \\\"2\\\" expecting \\\"(\\\"\", \"message\": \"\\\"failed to parse filter (in.123,234 (line 1, column 4)\"}`\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n```js\r\nsupabase\r\n\t.from('table_name')\r\n\t.select('*')\r\n\t.filter('column', 'in', [123,234]);\r\n```\r\n\r\n## Expected behavior\r\n\r\nTo send the filter query to the database.\r\n",
            "author": {
                "login": "sseppola"
            },
            "state": "CLOSED",
            "createdAt": "2021-10-16T17:44:15Z",
            "closedAt": "2021-10-16T19:42:30Z",
            "url": "https://github.com/supabase/supabase-js/issues/289",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs44Ux37",
                    "body": "Hey @sseppola, `.filter()` expects you to use the raw [PostgREST syntax](https://postgrest.org/en/v8.0/api.html#horizontal-filtering-rows). Can you see if `.in()` works for you?",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-10-16T18:07:32Z",
                    "url": "https://github.com/supabase/supabase-js/issues/289#issuecomment-944971259"
                },
                {
                    "id": "IC_kwDOD79Crs44Uzm-",
                    "body": "Cheers for the prompt reply!\r\n\r\nYou are correct! I'll admit I had not read the docs before working with this. That said, I don't think the docs would've helped anyway, they're not clear about this coupling: https://supabase.io/docs/reference/javascript/filter\r\n\r\nI think it would be worth covering the edge cases where this \"understanding\" would be a problem in the docs, all examples just demonstrate it like: `filter('col', 'eq', value)` which gives the wrong impression.",
                    "author": {
                        "login": "sseppola"
                    },
                    "createdAt": "2021-10-16T18:35:44Z",
                    "url": "https://github.com/supabase/supabase-js/issues/289#issuecomment-944978366"
                },
                {
                    "id": "IC_kwDOD79Crs44U3lj",
                    "body": "You're right, this should be clarified in the docs. I'm opening https://github.com/supabase/supabase/pull/3566 to address this. Thanks for the feedback!",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-10-16T19:42:30Z",
                    "url": "https://github.com/supabase/supabase-js/issues/289#issuecomment-944994659"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs49zBMn",
            "number": 292,
            "title": "Supabase without user auth?",
            "body": "We wanted to use Supabase for a project but it appears that everything is geared toward user-level auth?\r\n\r\nOur project would be using react-admin under a system that already has its own auth.\r\n\r\nIs this enough without involving users?\r\n```\r\nimport { createClient } from '@supabase/supabase-js'\r\n// Create a single supabase client for interacting with your database \r\nconst supabase = createClient(\"https://xyzcompany.supabase.co\", \"public-anon-key\")\r\n```\r\n\r\nUnfortunately https://github.com/marmelab/ra-supabase Is pretty light on detail. \r\n\r\nI\u2019ll update this ticket when we solve, just wanted to point out that this wasn\u2019t clear from reading docs.\r\n\r\n",
            "author": {
                "login": "braco"
            },
            "state": "CLOSED",
            "createdAt": "2021-10-26T22:09:26Z",
            "closedAt": "2022-08-23T06:42:41Z",
            "url": "https://github.com/supabase/supabase-js/issues/292",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs46SiZv",
                    "body": "Any updates?",
                    "author": {
                        "login": "elhe26"
                    },
                    "createdAt": "2021-11-24T14:36:34Z",
                    "url": "https://github.com/supabase/supabase-js/issues/292#issuecomment-977938031"
                },
                {
                    "id": "IC_kwDOD79Crs46dm1L",
                    "body": "@braco if you need to bypass user-level auth you can make calls to supabase with the secret key: https://app.supabase.io/project/{projectId}/settings/api.\r\n\r\nNote: don't use the secret key on the frontend - you have to make your frontend call your backend which can use supabase secret key.\r\n\r\nYou can also use the anon key and disable RLS on the table if you want to allow open access to your table (not recommended).",
                    "author": {
                        "login": "abacaj"
                    },
                    "createdAt": "2021-11-28T04:49:14Z",
                    "url": "https://github.com/supabase/supabase-js/issues/292#issuecomment-980839755"
                },
                {
                    "id": "IC_kwDOD79Crs5I7vtC",
                    "body": "@abacaj's answer still applies - you need to use the `service_role` key to opt out of Auth, which bypasses RLS.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-08-23T06:42:41Z",
                    "url": "https://github.com/supabase/supabase-js/issues/292#issuecomment-1223621442"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs49-t_c",
            "number": 294,
            "title": "Error 400 when updating a row: body.prefixes should NOT have fewer than 1 items",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\n1. I update a row with:\r\n\r\n```  \r\nasync function updateData(values) {\r\n      try {\r\n        const updates = {\r\n          title: values.title,\r\n          description: values.description,\r\n        };\r\n\r\n        const { data, error } = await supabase\r\n          .from(\"database\")\r\n          .update(updates)\r\n          .single()\r\n          .eq(\"id\", sessionId);\r\n\r\n        if (error) {\r\n          throw error;\r\n        }\r\n        if (data) {\r\n          console.log(\"Updated data\", data);\r\n        }\r\n      } catch (error) {\r\n        alert(error.message);\r\n      }\r\n    }\r\n```\r\n\r\n2. The data gets updated\r\n3. On the return I get error 400 `body.prefixes should NOT have fewer than 1 items`\r\n4. Row is successfully updates despite the error\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\nTry to update a row\r\n\r\n## Expected behavior\r\n\r\nUpdate the row without a 400 error\r\n\r\n## Screenshots\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n## System information\r\n\r\n- OS: MacOS\r\n- Browse: Safari\r\n- Version of supabase-js: 1.24.0\r\n- Version of Node.js: v17.0.1\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "dimoFeeld"
            },
            "state": "CLOSED",
            "createdAt": "2021-10-29T19:04:52Z",
            "closedAt": "2021-10-31T10:01:01Z",
            "url": "https://github.com/supabase/supabase-js/issues/294",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs449beN",
                    "body": "Can you try using `.maybeSingle()` instead of `.single()`? `.single()` expects exactly one row.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-10-31T02:52:56Z",
                    "url": "https://github.com/supabase/supabase-js/issues/294#issuecomment-955627405"
                },
                {
                    "id": "IC_kwDOD79Crs449l79",
                    "body": "With or without .single() it threw the same error. The problem was that I was having a bad `if statement` and I was trying to update without having anything new to update. ",
                    "author": {
                        "login": "dimoFeeld"
                    },
                    "createdAt": "2021-10-31T10:01:01Z",
                    "url": "https://github.com/supabase/supabase-js/issues/294#issuecomment-955670269"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs4-CAuo",
            "number": 295,
            "title": "Expo app breaks",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nExpo apps that use `supabase/supabase-js` completely break after updating to SDK43.\r\n\r\n## To Reproduce\r\n\r\n1. Go to https://github.com/10000multiplier/exposupabasebug\r\n2. `git clone https://github.com/10000multiplier/exposupabasebug.git`\r\n3. `npm i`\r\n4. `expo start`\r\n\r\n## Expected behavior\r\n\r\nSupabase-js behaves flawlessly on expo apps as it did on SDK42.\r\n\r\n## More info\r\n\r\nThe fatal error that appears after running `expo start`:\r\n\r\n```\r\nInvariant Violation: \"main\" has not been registered. This can happen if:\r\n* Metro (the local dev server) is run from the wrong folder. Check if Metro is running, stop it and restart it in the current project.\r\n* A module failed to load due to an error and `AppRegistry.registerComponent` wasn't called.\r\n```\r\n## System information\r\n\r\n- OS: Windows\r\n- Version of supabase-js: ^1.25.2\r\n- Version of Node.js: 16.13.0\r\n",
            "author": {
                "login": "vbylen"
            },
            "state": "CLOSED",
            "createdAt": "2021-11-01T03:17:15Z",
            "closedAt": "2022-09-28T07:54:16Z",
            "url": "https://github.com/supabase/supabase-js/issues/295",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs44-dhO",
                    "body": "@kiwicopple\r\n\r\nplease help \ud83d\ude05 ",
                    "author": {
                        "login": "vbylen"
                    },
                    "createdAt": "2021-11-01T03:28:42Z",
                    "url": "https://github.com/supabase/supabase-js/issues/295#issuecomment-955897934"
                },
                {
                    "id": "IC_kwDOD79Crs44-j76",
                    "body": "Of relevance, when running this example, this error shows up as well:\r\n\r\n```\r\nTypeError: undefined is not an object (evaluating 'window.location.href')\r\nat node_modules\\react-native\\Libraries\\LogBox\\LogBox.js:149:8 in registerError\r\nat node_modules\\react-native\\Libraries\\LogBox\\LogBox.js:60:8 in errorImpl\r\nat node_modules\\react-native\\Libraries\\LogBox\\LogBox.js:34:4 in console.error\r\nat node_modules\\expo\\build\\environment\\react-native-logs.fx.js:27:4 in error\r\nat node_modules\\react-native\\Libraries\\Core\\ExceptionsManager.js:104:6 in reportException\r\nat node_modules\\react-native\\Libraries\\Core\\ExceptionsManager.js:172:19 in handleException\r\nat node_modules\\react-native\\Libraries\\Core\\setUpErrorHandling.js:24:6 in handleError\r\nat node_modules\\@react-native\\polyfills\\error-guard.js:49:36 in ErrorUtils.reportFatalError\r\nat node_modules\\metro-runtime\\src\\polyfills\\require.js:204:6 in guardedLoadModule\r\nat http://192.168.1.10:19000/node_modules%5Cexpo%5CAppEntry.bundle?platform=android&dev=true&hot=false&minify=false:168062:3 in global code\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/12896049/139621771-99501ca4-8988-4e5c-81e2-3c2d7eec0206.png)\r\n\r\nI've just tested in one of my in-development projects, and can confirm that the same issue exists. The error shown on screen seems to point towards the `getParameterByName` function in `gotrue-js`: https://github.com/supabase/gotrue-js/blob/master/src/lib/helpers.ts#L16\r\n\r\n![image](https://user-images.githubusercontent.com/12896049/139624243-83540bb0-c452-4100-8f53-d835b560f2ec.png)\r\n\r\nEdit - 04:50 UK time: Checked for issues in the main expo repo and haven't found any reports related to href not being defined. Realistically, `window` doesn't exist in React Native, but it doesn't explain why this issue didn't exist until recently. This issue doesn't happen when running on Web, and only happens when running the native app.",
                    "author": {
                        "login": "ChronSyn"
                    },
                    "createdAt": "2021-11-01T04:39:16Z",
                    "url": "https://github.com/supabase/supabase-js/issues/295#issuecomment-955924218"
                },
                {
                    "id": "IC_kwDOD79Crs44-q5-",
                    "body": "As an update, it appears that adding `detectSessionInUrl: false` into the options of `createClient` resolves this issue. This certainly seems to be a new change compared to last time I tried it in a native context, and I'm not sure if this affects other functionality of using Supabase in Expo.\r\n\r\nExample:\r\n\r\n```js\r\nexport const supabaseClient = createClient(\r\n  my.supabase.url,\r\n  my_supabase_key,\r\n  {\r\n    localStorage: AsyncStorage as any,\r\n    autoRefreshToken: true,\r\n    persistSession: true,\r\n    detectSessionInUrl: false,\r\n  }\r\n);\r\n```",
                    "author": {
                        "login": "ChronSyn"
                    },
                    "createdAt": "2021-11-01T05:52:12Z",
                    "url": "https://github.com/supabase/supabase-js/issues/295#issuecomment-955952766"
                },
                {
                    "id": "IC_kwDOD79Crs44_4BY",
                    "body": "@10000multiplier to be honest not sure how the app is working without index file and you're not using the polyfill anywhere?",
                    "author": {
                        "login": "Hannes1"
                    },
                    "createdAt": "2021-11-01T14:12:11Z",
                    "url": "https://github.com/supabase/supabase-js/issues/295#issuecomment-956268632"
                },
                {
                    "id": "IC_kwDOD79Crs45AFFI",
                    "body": "@hannes1 \r\n\r\nAdded the polyfill on top of `App.tsx` and still gives the same error.\r\n\r\nHow would you add an index file?",
                    "author": {
                        "login": "vbylen"
                    },
                    "createdAt": "2021-11-01T15:16:13Z",
                    "url": "https://github.com/supabase/supabase-js/issues/295#issuecomment-956322120"
                },
                {
                    "id": "IC_kwDOD79Crs45Ajri",
                    "body": "@ChronSyn setting `detectSessionInUrl` to `false` seems to work indeed. Thank you sir for your glorious tip.",
                    "author": {
                        "login": "vbylen"
                    },
                    "createdAt": "2021-11-01T17:49:03Z",
                    "url": "https://github.com/supabase/supabase-js/issues/295#issuecomment-956447458"
                },
                {
                    "id": "IC_kwDOD79Crs45QM_b",
                    "body": "after setting `detectSessionInUrl` to `false` will `supabase.auth.onAuthStateChange()` work??\r\nbecause after setting `detectSessionInUrl` to false for me it is not returning any thing for me...",
                    "author": {
                        "login": "HassanIyan"
                    },
                    "createdAt": "2021-11-04T08:29:32Z",
                    "url": "https://github.com/supabase/supabase-js/issues/295#issuecomment-960548827"
                },
                {
                    "id": "IC_kwDOD79Crs45ulJ5",
                    "body": "@HassanIyan I am having the same issue",
                    "author": {
                        "login": "davitykale"
                    },
                    "createdAt": "2021-11-15T03:51:26Z",
                    "url": "https://github.com/supabase/supabase-js/issues/295#issuecomment-968512121"
                },
                {
                    "id": "IC_kwDOD79Crs5FVW9r",
                    "body": "hi, setting ` detectSessionInUrl: false` does not cause any difference, any potential workarounds?",
                    "author": {
                        "login": "etherealsunshine"
                    },
                    "createdAt": "2022-06-22T15:04:23Z",
                    "url": "https://github.com/supabase/supabase-js/issues/295#issuecomment-1163226987"
                },
                {
                    "id": "IC_kwDOD79Crs5LIhhJ",
                    "body": "Afaict this specific issue should be fixed in https://github.com/supabase/gotrue-js/pull/153.\r\n\r\nIf folks are still having this issue, please create another issue as it might be caused by something else.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-28T07:54:16Z",
                    "url": "https://github.com/supabase/supabase-js/issues/295#issuecomment-1260525641"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs4-QQ_a",
            "number": 296,
            "title": "auth.signUp() doesn't error for existing accounts - security vulnerability",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\n`supabase.auth.signUp()` is not erroring for existing accounts. Right now, you can submit an existing email with _any_ incorrect password, and supabase will return you the account metadata (without a jwt).\r\n\r\n## To Reproduce\r\n\r\nGo to this [example app](https://auth-vanilla-js.vercel.app/)\r\nSign-up with an email and a password\r\nLog out\r\nTry to sign up again with the same email using any password you want. Try `asdfasdfasdf` if you want!\r\nYou will get an alert saying you logged in, but you won't get a working access token. Just the email you submitted.\r\nYou can also view the request in the Network tab of the Dev Tools and see metadata about the account, like when it was created and what provider it uses.\r\n\r\n## Expected behavior\r\n\r\nAttempting to sign up with an existing email should throw an error.\r\n\r\n## System information\r\n\r\n- Version of supabase-js: [1.2.1]\r\n- Version of Node.js: [14.17.4]\r\n",
            "author": {
                "login": "CalebLovell"
            },
            "state": "OPEN",
            "createdAt": "2021-11-04T08:01:20Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/296",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs45XO7d",
                    "body": "hey @CalebLovell this is actually a fix for a previous security issue. \r\n\r\nPreviously the interface was leaking information by allowing an attacker to see whether a given email had an account or not. Now the endpoint returns a \"success\" response regardless of whether an account exists already or not.\r\n\r\nThe metadata you see in the response is actually faux info - the user ID is random and the datetimes are set to the time that the request was made.\r\n\r\nnote: this is only the case for supabase instances where AUTOCONFIRM is disabled (as per the default)\r\nfor accounts who have enabled AUTOCONFIRM (where accounts don't require email confirmation) the behavior is the same as before (error on duplicate accounts)\r\n\r\nhope this helps!",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2021-11-06T04:17:36Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-962391773"
                },
                {
                    "id": "IC_kwDOD79Crs45XPLu",
                    "body": "Ahh, very interesting. Would be great to maybe add that to the docs somewhere, because I suspect I won't be the only one confused by it. Firebase returns an error in this situation so that is what I was expecting, but I like the faux info return as an even better solution! Thanks for the response and enjoy your weekend.",
                    "author": {
                        "login": "CalebLovell"
                    },
                    "createdAt": "2021-11-06T04:30:08Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-962392814"
                },
                {
                    "id": "IC_kwDOD79Crs45n9eI",
                    "body": "This 'security fix' seems like 'security through obscurity' .  IMHO it doesn't make sense for supabase to be opinionated about how a signup process should be handled by developers.  There are many use cases where a back-end service may need to know if a user already exists and having to store an additional user profile table just to be able to figure this out seems to be an unnecessary extra step.  Perhaps the 'service key' responses can be accurate while the 'app key' responds with a generic 'invalid credentials'? ",
                    "author": {
                        "login": "naegelin"
                    },
                    "createdAt": "2021-11-12T02:47:49Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-966776712"
                },
                {
                    "id": "IC_kwDOD79Crs45osLa",
                    "body": "In the case where a user forgets they are already signed up with their email address, most websites will show some variation of \u201cthere\u2019s already an account for this email address\u201d.\r\n\r\nIf a user tries to sign up with an email that already has an account associated with it, how can I tell so I can let the user know?",
                    "author": {
                        "login": "brunobely"
                    },
                    "createdAt": "2021-11-12T09:52:23Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-966968026"
                },
                {
                    "id": "IC_kwDOD79Crs45o7Kj",
                    "body": "I also agree that **security through obscurity** is not a good way to fix this as most services online do tell you if a user already exists, what they do have however is a rate limit on how many logins you can try within a certain time period to prevent brute force attacks. This fix should probably be reverted as the behaviour is unexpected and it seems to be confusing users more than anything.",
                    "author": {
                        "login": "silentworks"
                    },
                    "createdAt": "2021-11-12T11:27:42Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-967029411"
                },
                {
                    "id": "IC_kwDOD79Crs45tuS_",
                    "body": "@awalias so if the user is trying to create an account, when they already have one, is there a way to let me know?",
                    "author": {
                        "login": "serranoarevalo"
                    },
                    "createdAt": "2021-11-14T13:04:52Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-968287423"
                },
                {
                    "id": "IC_kwDOD79Crs452KEs",
                    "body": "> I also agree that **security through obscurity** is not a good way to fix this as most services online do tell you if a user already exists, what they do have however is a rate limit on how many logins you can try within a certain time period to prevent brute force attacks. This fix should probably be reverted as the behaviour is unexpected and it seems to be confusing users more than anything.\r\n\r\nCorrect. Rate limited logins would be the correct process for this, but it's also difficult to defend against some forms of attack unless they are targeting one specific account, in which case locking that account from logging in for a duration or until an account owner performs some verification process.\r\n\r\nIf an attacker is aiming to test as many accounts as possible, then the options are either cookies (easily defeated) or IP blocking (also easily defeated). There's some hybrid options out there such as behaviour analysis, but they have their own set of limitations and potential for false positives.\r\n\r\nRate-limiting registration isn't feasible to introduce as an attacker could easily bombard the system with fake registrations and block legitimate users from registering. For ecommerce sites, this would potentially make it a haven for scalpers. At the same time, it becomes difficult for developers when they're unsure if an account exists during registration.\r\n\r\nWhat most online services have is a generic truthy response during the account recovery process. For example, instead of saying \"An email was sent to the account we found\", they'll instead say \"If an account with this email exists, we have sent an email to it\". I believe rate limiting per account already exists for this in Supabase.\r\n\r\nIt's a difficult problem to solve because there's potential for hackers to use the sign up process to ascertain if an account exists (as opposed to testing login), but developers want to know if an account exists when a user is registering.",
                    "author": {
                        "login": "ChronSyn"
                    },
                    "createdAt": "2021-11-16T17:27:45Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-970498348"
                },
                {
                    "id": "IC_kwDOD79Crs452NVT",
                    "body": "Every security control can be defeated. Supabase shouldn't be responsible for solving every edge case of security for app developers and many companies have regulatory guidance on how to implement authentication flows.  There should be a straight forward api available for server to server calls so that developers can decide what the proper pattern would be for themselves based on their own needs. The current Supabase position is to create an associated \"user profile\" table inside supabase in order to recreate missing functionality (such as basic checks to see if a user exists). The more of these types of work arounds a developer needs to create, the less compelling supabase becomes over say a vanilla postgres + hasura instance. I would also argue that for B2B applications where access is not available to the general public many of the concerns around account harvesting, fake registration etc are much less of an issue.",
                    "author": {
                        "login": "naegelin"
                    },
                    "createdAt": "2021-11-16T17:43:17Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-970511699"
                },
                {
                    "id": "IC_kwDOD79Crs46KrSc",
                    "body": "> @awalias so if the user is trying to create an account, when they already have one, is there a way to let me know?\r\n\r\nBuilding off of this, I think the crux of this issue and what we want to know is **what should an average auth flow look like, implementation-wise, when built with Supabase**? The _only_ guide available in the official documentation uses magic links \"for simplicity\" but doesn't really touch on how to handle any error or edge-case scenarios, which is extremely important in production.\r\n\r\nI'd just like to know how to do it properly, whichever the security measures taken are.",
                    "author": {
                        "login": "brunobely"
                    },
                    "createdAt": "2021-11-22T20:08:28Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-975877276"
                },
                {
                    "id": "IC_kwDOD79Crs46L6R8",
                    "body": "Hey everyone thanks for your comments!\r\n\r\nTo be clear this is _not_ an example of security through obscurity, the red herring here might be the presence of faux info or the fact that we haven't done a good job of documenting this behavior. As long as we don't leak any info about whether a user account exists or not on any public endpoint, then the information is secure (at least as far as this specific issue is concerned).\r\n\r\nThe correct solution here is to take this one step further: If a user tries to sign up who already has an existing account, we still return a \"check your inbox for confirmation email\" message, but we instead send them an account recovery email (which is actually just a magic link) then the developer can decide whether to direct them to a password reset page or just allow them to go about their session as normal.\r\n\r\nThis solves for:\r\n- UX concerns (a user who has forgotten that they have an account and is expecting a confirmation email, will receive an account recovery email - note: the developer can edit the template in supabase dashboard)\r\n- DX concerns (there should be no extra call required to detect account existence and trigger account recovery)\r\n- Security (the presence of an account is never revealed on any public endpoint)\r\n\r\nAn important reason for why we decided to be \"secure by default\" on issues like this, is partly because of the number of users adopting our auth service. I could fairly easily take your email address, make a sign-up request to every known supabase endpoint on the internet, building up a map of all the various services that you are/are-not subscribed to. Which is quite a large privacy concern.\r\n\r\nI propose that we do several things:\r\n- Document the response behavior clearly [in the docs](https://github.com/supabase/supabase/tree/master/web)\r\n- Update our [auth examples](https://github.com/supabase/supabase/tree/master/examples) to exhibit the up to date auth flow\r\n- Update gotrue to [send a recovery email on repeat sign up attempt ](https://github.com/supabase/gotrue/issues/286)\r\n\r\nAs always any help on these ones would be hugely appreciated. And thanks again for the active discussion and helping improve the product \ud83d\ude4f.",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2021-11-23T06:37:05Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-976200828"
                },
                {
                    "id": "IC_kwDOD79Crs46L68d",
                    "body": "@naegelin I also agree with your idea that the admin endpoints should return truthful responses, if you are creating an account from the backend. We recently added [`auth.api.createUser`](https://github.com/supabase/gotrue-js/blob/0ae593b353c56487aaf0ea4084d5a3de89b37515/src/GoTrueApi.ts#L43) I'm not sure what the behavior of this method is for existing accounts. \r\n\r\nedit: it looks like this already works as expected - again the issue here is lack of documentation\r\n```javascript\r\n{\r\n  data: null,\r\n  error: {\r\n    message: 'Email address already registered by another user',\r\n    status: 422\r\n  }\r\n}\r\n```\r\n",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2021-11-23T06:44:07Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-976203549"
                },
                {
                    "id": "IC_kwDOD79Crs4-TX82",
                    "body": "@awalias Is it still true that the `signUp` function will not throw an error if the user was already registered? I ask because I get currently the error 'User already registered' if I register with an already existing email address.\r\n\r\nMy config says:\r\nenable_signup = true\r\ndouble_confirm_changes = true\r\nenable_confirmations = true",
                    "author": {
                        "login": "akkie"
                    },
                    "createdAt": "2022-02-18T22:16:41Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-1045266230"
                },
                {
                    "id": "IC_kwDOD79Crs5Iz0qg",
                    "body": "@awalias - There still seems to be a mismatch here that I'm trying to work through. My account is set-up to require email confirmations.\r\n\r\n- If I try to `signUp` a user using the email address for an existing user that has **_not_** been confirmed, it returns the obfuscated user, and an additional \"Confirm Your Signup\" email is sent to the email address\r\n- If I try to `signUp` a user using the email address for an existing user that has already been confirmed, it returns the obfuscated user, but **_no email is sent to the user_**\r\n\r\nBased on what you mentioned above, it would seem that a confirmation/recovery email should be sent in both case and in the UI, one can simply direct the user to check their email. That said, I'm not sure how to handle the case where a user already signed up using that email without them getting confused on the what the password is. In the case of a confirmed user getting an account recovery email, their mental model would be the password they just entered, which would be wrong if it's different than the one actually associated with the account.\r\n",
                    "author": {
                        "login": "kevinmlong"
                    },
                    "createdAt": "2022-08-21T13:18:38Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-1221544608"
                },
                {
                    "id": "IC_kwDOD79Crs5NT-0X",
                    "body": "We are hitting the exact same issue. Registered users with verified email addresses can forget they already signed up, they go through the sign up process, we show the message to check their emails, but no email arrives.\r\n\r\nAny solutions?",
                    "author": {
                        "login": "irreal"
                    },
                    "createdAt": "2022-10-31T13:23:58Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-1297083671"
                },
                {
                    "id": "IC_kwDOD79Crs5Opnfn",
                    "body": "Is there any update to this? We need a clear solution for letting users know if they've already signed up, like how @awalias mentioned. I can see many users getting stuck and waiting for a sign up email that will never come.",
                    "author": {
                        "login": "malewis5"
                    },
                    "createdAt": "2022-11-18T04:36:07Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-1319532519"
                },
                {
                    "id": "IC_kwDOD79Crs5OqRXf",
                    "body": "hey! Was just discussing this issue with @hf in depth - his opinion is that since it's still possible for people to determine the existence of accounts with side-channel attacks (e.g. time how long it takes to get a response, if an email is sent it will take longer etc.) that by default we should return an error similar to how firebase does it. e.g. \"This email already exists\".\r\n\r\nThen the idea is to make this functionality optional to people who require more privacy controls. There is some draft documentation on the issue here: https://github.com/supabase/supabase/blob/f8682bbb095d728ee19a581170a5d972a39543e4/apps/reference/docs/guides/auth/auth-security.mdx#user-information\r\n\r\nIn the meantime I will check if we can revert the default behavior to always give an error for existing accounts",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2022-11-18T08:42:30Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-1319704031"
                },
                {
                    "id": "IC_kwDOD79Crs5PBRl4",
                    "body": "Adding a bit more color to this issue. \r\nThe message `Check your email for the confirmation link.` pops up if a signUp email exists in the `users` table, but is added from a different provider, e.g. GitHub. This is kind of misleading (from one side), but also secure from another side. \r\n\r\nI believe this behavior should be documented to avoid others losing a couple of hours trying to debug it. ",
                    "author": {
                        "login": "renardeinside"
                    },
                    "createdAt": "2022-11-23T22:35:44Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-1325734264"
                },
                {
                    "id": "IC_kwDOD79Crs5PKZEX",
                    "body": "> Is there any update to this? We need a clear solution for letting users know if they've already signed up, like how @awalias mentioned. I can see many users getting stuck and waiting for a sign up email that will never come.\r\n\r\nexactly this issue!",
                    "author": {
                        "login": "farhanhaider1"
                    },
                    "createdAt": "2022-11-26T22:29:23Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-1328124183"
                },
                {
                    "id": "IC_kwDOD79Crs5RNGqr",
                    "body": "@awalias Any updates on this issue? The UX is very poor without a way of letting them know that they already have an account. And if I have to pre-vet the user, then that's a poor DX.\r\n\r\nFrom https://github.com/supabase/supabase/blob/f8682bbb095d728ee19a581170a5d972a39543e4/apps/reference/docs/guides/auth/auth-security.mdx#user-information\r\n\r\n\"information about whether an account exists in the system can leak even if the application returns an ambigouous message such as \"If you have an account an email has been sent.\" This is because the final part of the request handling will need to send out an email message or SMS using a third-party system. This makes requests naturally last longer when an account exists.\"\r\n\r\nI don't understand this- couldn't this email or SMS process happen asynchronously so that you can return the response immediately in all cases?\r\n\r\nAlternatively, your proposed fix of sending it whether there is an account or not means it will always take the same (long) time.",
                    "author": {
                        "login": "user72356"
                    },
                    "createdAt": "2022-12-22T04:11:58Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-1362389675"
                },
                {
                    "id": "IC_kwDOD79Crs5RPkIS",
                    "body": "> @awalias Any updates on this issue? The UX is very poor without a way of letting them know that they already have an account. And if I have to pre-vet the user, then that's a poor DX.\r\n\r\nHey no updates on this yet. I understand the pain the community and customers are feeling with this, but we do require some more time to figure out how to properly approach this. We can't keep flipping between \"more secure\" and \"less secure\" messages.\r\n \r\n> From https://github.com/supabase/supabase/blob/f8682bbb095d728ee19a581170a5d972a39543e4/apps/reference/docs/guides/auth/auth-security.mdx#user-information\r\n> \r\n> \"information about whether an account exists in the system can leak even if the application returns an ambigouous message such as \"If you have an account an email has been sent.\" This is because the final part of the request handling will need to send out an email message or SMS using a third-party system. This makes requests naturally last longer when an account exists.\"\r\n> \r\n> I don't understand this- couldn't this email or SMS process happen asynchronously so that you can return the response immediately in all cases?\r\n\r\nAdding the \"send message\" instruction to the asynchronous queue is a branch that can fairly easily be detected too. (This is because a non-existing user will never reach that branch making slight timing differences apparent with not-so-sophisticated statistical methods.) \r\n\r\nMasking this sort of stuff is never really going to work well and consistently, and there will always be some edge case that can't be masked for maintainability, performance or cost reasons. This is why our thinking is moving in the direction of having a message that explains what the user's doing wrong instead of trying to mask it. \r\n\r\nBut as I mentioned, we need a bit more time to figure out how to support both types of use cases. Expect some progress for this in the next couple of months.\r\n\r\n> Alternatively, your proposed fix of sending it whether there is an account or not means it will always take the same (long) time.\r\n\r\nThis is true, but as explained above it's practically impossible to mask this.",
                    "author": {
                        "login": "hf"
                    },
                    "createdAt": "2022-12-22T16:25:04Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-1363034642"
                },
                {
                    "id": "IC_kwDOD79Crs5RP2sw",
                    "body": "Adding some docs here to make it more apparent: https://github.com/supabase/gotrue-js/pull/567",
                    "author": {
                        "login": "hf"
                    },
                    "createdAt": "2022-12-22T17:07:49Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-1363110704"
                },
                {
                    "id": "IC_kwDOD79Crs5RP4CL",
                    "body": "Some alternatives to consider while we work out a good solution, which could reduce user friction.\r\n\r\n1. Consider adding a \"remember me\" feature. If a user has logged out, to prevent them from being confused on the same browser store some information in local storage that you can use to give them a \"welcome back\" screen indicating the correct sign-in method they can use.\r\n2. If masking is less important for your application you can create an edge function which you can use to indicate to your users what type of account they have and what may be going on. You can use the information in the `auth.users` and `auth.identities` tables to derive some conclusions in those cases.",
                    "author": {
                        "login": "hf"
                    },
                    "createdAt": "2022-12-22T17:13:01Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-1363116171"
                },
                {
                    "id": "IC_kwDOD79Crs5RT3Bg",
                    "body": "@hf thank you for taking the time to answer. I trust that you will find the best solution. I figured I would share my opinion/preference, while taking the \"attacker\" angle into account. \r\n\r\nIdeally, if the e-mail address is already registered, there are 2 cases: \r\n\r\n1. The user has already confirmed their email address. We show the \"Check your email for the\r\n   confirmation link.\" message for security purpose (so an attacker can't tell that there is\r\n   an account under this email address), but we actually send the user an e-mail to tell him\r\n   that he's already got an account.\r\n\r\n2. The user has not yet confirmed their email address. We show the generic check your email\r\n   message again and we send the user the confirmation email again.\r\n\r\nPresently, if a user is already registered, we show the check your email message but the user\r\nreceives no email whatsoever.",
                    "author": {
                        "login": "user72356"
                    },
                    "createdAt": "2022-12-23T18:11:00Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-1364160608"
                },
                {
                    "id": "IC_kwDOD79Crs5Rz36r",
                    "body": "You can use this method until Supabase solves this problem\r\n```\r\n        const {error, data} = await supabase.auth.signUp({email, password})\r\n        if(data?.user?.identities?.length === 0){\r\n              alert(\"This user already exists\")\r\n         }\r\n```",
                    "author": {
                        "login": "salemshah"
                    },
                    "createdAt": "2023-01-05T18:03:23Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-1372552875"
                },
                {
                    "id": "IC_kwDOD79Crs5SYrMm",
                    "body": "@salemshah\r\nThanks for the temp solution. Is there any way to also grab the provider using this method? It seems as if it doesn't correctly return the provider for the existing user.\r\n\r\nThe reason I would like to grab the provider is if the user tries to sign up with an email address that has already been previously used with e.g. Google Provider/OAuth. Ideally, I'd like to tell the user to use the Google login link or even redirect them directly.",
                    "author": {
                        "login": "arshamg"
                    },
                    "createdAt": "2023-01-13T18:01:18Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-1382200102"
                },
                {
                    "id": "IC_kwDOD79Crs5URZUL",
                    "body": "> You can use this method until Supabase solves this problem\r\n> \r\n> ```\r\n>         const {error, data} = await supabase.auth.signUp({email, password})\r\n>         if(data?.user?.identities?.length === 0){\r\n>               alert(\"This user already exists\")\r\n>          }\r\n> ```\r\n\r\nThis method only works for accounts which have been registered with OAuth. Accounts that have been registered with password and email still returns identity for invalid users. (At least on Flutter)",
                    "author": {
                        "login": "ruan-brius"
                    },
                    "createdAt": "2023-02-02T14:38:20Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-1413846283"
                },
                {
                    "id": "IC_kwDOD79Crs5URgjm",
                    "body": "> > You can use this method until Supabase solves this problem\r\n> > ```\r\n> >         const {error, data} = await supabase.auth.signUp({email, password})\r\n> >         if(data?.user?.identities?.length === 0){\r\n> >               alert(\"This user already exists\")\r\n> >          }\r\n> > ```\r\n> \r\n> This method only works for accounts which have been registered with OAuth. Accounts that have been registered with password and email still returns identity for invalid users. (At least on Flutter)\r\n\r\nMust be something with the Flutter version of the lib, or something else wrong on your end. Works great for me in JS (email/password auth). I'm guessing we're relying on an undocumented, implementation detail for it to work that way, but what can ya do... ",
                    "author": {
                        "login": "user72356"
                    },
                    "createdAt": "2023-02-02T14:57:04Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-1413875942"
                },
                {
                    "id": "IC_kwDOD79Crs5URiVS",
                    "body": "> > > You can use this method until Supabase solves this problem\r\n> > > ```\r\n> > >         const {error, data} = await supabase.auth.signUp({email, password})\r\n> > >         if(data?.user?.identities?.length === 0){\r\n> > >               alert(\"This user already exists\")\r\n> > >          }\r\n> > > ```\r\n> > \r\n> > \r\n> > This method only works for accounts which have been registered with OAuth. Accounts that have been registered with password and email still returns identity for invalid users. (At least on Flutter)\r\n> \r\n> Must be something with the Flutter version of the lib, or something else wrong on your end. Works great for me in JS (email/password auth). I'm guessing we're relying on an undocumented, implementation detail for it to work that way, but what can ya do...\r\n\r\nYeah. Disabling email verification solved my problem, anyways.",
                    "author": {
                        "login": "ruan-brius"
                    },
                    "createdAt": "2023-02-02T15:01:02Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-1413883218"
                },
                {
                    "id": "IC_kwDOD79Crs5XF6Aw",
                    "body": "It makes sense to maintain privacy, but it doesn't make sense not to email existing users.\r\n\r\nLet's assume that my user registered with Github.\r\n\r\nIf he loses access to github or wants to create a password, he will be waiting for the email forever and will think that not receiving it is an error.\r\n\r\nThis is very confusing. User should be able to confirm their new form of authentication via email",
                    "author": {
                        "login": "anarkrypto"
                    },
                    "createdAt": "2023-03-09T02:17:04Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-1461166128"
                },
                {
                    "id": "IC_kwDOD79Crs5X6OYc",
                    "body": "Complete protection against user enumeration seems hard to achieve with email-based logins. This is why I consider username-based logins to be an easy and practical solution to this problem. It'd be much simpler to ask users to choose a username/login that doesn't identify them, than to ask them to create an anonymous email/phone number and come back and use this \"anonymous\" email.\r\n\r\nUsers would still need to provide their emails/SMS upon registration(to support OTP, magic links, etc...) but it'd only ask for the username upon signing in. Yes, this means that supabase would still need to have some mechanism to prevent leakage of the existence of an email if the system is to have a functionality like \"Forget username? send it to email...\" but I imagine that protection against such a leakage would be easy to implement by always responding in a constant time.\r\n\r\nI noticed that someone asked for this feature https://github.com/supabase/gotrue/issues/903 a while ago but it was closed. I think the supabase team should reconsider this feature. \r\n\r\nPrivacy is a superhigh priority and should always be approached with an opt-out model rather than an opt-in model.",
                    "author": {
                        "login": "hugonteifeh"
                    },
                    "createdAt": "2023-03-18T15:39:00Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-1474881052"
                },
                {
                    "id": "IC_kwDOD79Crs5azUMn",
                    "body": "I have just discovered this behavior today and found this issue, really surprised and agree that `This 'security fix' seems like 'security through obscurity'. `",
                    "author": {
                        "login": "kvetoslavnovak"
                    },
                    "createdAt": "2023-04-26T13:13:43Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-1523401511"
                },
                {
                    "id": "IC_kwDOD79Crs5d_pM0",
                    "body": "I've just opened this issue https://github.com/supabase/gotrue-js/issues/769, which is related to the discussion going on here.",
                    "author": {
                        "login": "blueturningred"
                    },
                    "createdAt": "2023-06-05T14:59:57Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-1576964916"
                },
                {
                    "id": "IC_kwDOD79Crs5ephVB",
                    "body": "it would be really helpful if you can let developers decide how to handle this instead of forcing a solution. it's always a balance between security and convenience and nothing is absolutely secure. each service has different needs and developers can choose what works the best for their use cases",
                    "author": {
                        "login": "devhandler"
                    },
                    "createdAt": "2023-06-12T19:23:49Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-1587942721"
                },
                {
                    "id": "IC_kwDOD79Crs5epkLG",
                    "body": "In case this helps anyone, we don't verify emails in our dev/staging environment but we do verify emails in production. Due to this, we have a `signUp` function that looks like:\r\n\r\n\r\n```\r\nexport const signUp = async (email: string, password: string) => {\r\n  const { data, error } = await supabase.auth.signUp({\r\n    email,\r\n    password,\r\n  });\r\n\r\n  // in staging, we don't verify primary emails\r\n  // Supabase returns a nice error\r\n  if (error?.message === \"User already registered\")\r\n    return { data, error: \"Please sign in with your existing account\" };\r\n\r\n  if (error) {\r\n    logger(error.message, \"error\");\r\n    throw new Error(error.message);\r\n  }\r\n\r\n  // in production, we verify primary emails\r\n  // supabase returns a user object with no identities if the user exists\r\n  if (data?.user?.identities?.length === 0) {\r\n    return { data, error: \"Please sign in with your existing account\" };\r\n  }\r\n\r\n  return { data, error };\r\n};\r\n```",
                    "author": {
                        "login": "arshamg"
                    },
                    "createdAt": "2023-06-12T19:32:53Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-1587954374"
                },
                {
                    "id": "IC_kwDOD79Crs5jvwAd",
                    "body": "How is this hack:\r\n\r\n```typescript\r\nconst {error, data} = await supabase.auth.signUp({email, password})\r\nif(data?.user?.identities?.length === 0){\r\n    alert(\"This user already exists\")\r\n}\r\n```\r\n\r\nstill the acceptable solution? A hacker could also read this thread and exploit the hack to see if the user exists. This means that the \"security\" argument is not valid.\r\n\r\nIt's almost over half a year and this issue seems stale. \r\n\r\n@awalias @hf ???\r\n\r\nHonestly, this thread destroyed my confidence in Supabase and probably that of others too.",
                    "author": {
                        "login": "wmonecke"
                    },
                    "createdAt": "2023-08-10T15:34:07Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-1673461789"
                },
                {
                    "id": "IC_kwDOD79Crs5j_z-d",
                    "body": "@awalias @kiwicopple hope supabase leave the freedom to developers to decide how to handle existing accounts instead of dictating a solution that is really not helpful for a lot of use cases",
                    "author": {
                        "login": "devhandler"
                    },
                    "createdAt": "2023-08-14T16:35:09Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-1677672349"
                },
                {
                    "id": "IC_kwDOD79Crs5ogcOR",
                    "body": "Hey guys, here's an interesting finding \u2192 it appears that if you're running `signUp` from the server side / from a serverless function (using the _service key_), the returned error actually contains the message \"User already registered\" as opposed to running is anonymously - case in which, yes, a fake user is returned. So a reliable alternative would be to just create a custom Edge function and have that invoked. Then the function can handle the scenario however you want (send an email, forward the error etc.).",
                    "author": {
                        "login": "Saranoja"
                    },
                    "createdAt": "2023-10-09T16:40:32Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-1753334673"
                },
                {
                    "id": "IC_kwDOD79Crs5ojY-z",
                    "body": "@Saranoja thank you!!  That's super helpful to know.",
                    "author": {
                        "login": "nmerchant"
                    },
                    "createdAt": "2023-10-10T00:21:24Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-1754107827"
                },
                {
                    "id": "IC_kwDOD79Crs5p1WGZ",
                    "body": "Just a quick thought here. I think that introducing functionality similar to Firebase's blocking functions (like 'beforeCreate' and 'beforeSignIn') would be incredibly useful if not already possible today. This feature would allow developers to easily customize responses to suit their specific needs. This would be a win-win situation for everyone.",
                    "author": {
                        "login": "hugonteifeh"
                    },
                    "createdAt": "2023-10-23T16:40:25Z",
                    "url": "https://github.com/supabase/supabase-js/issues/296#issuecomment-1775591833"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs4-oPXD",
            "number": 300,
            "title": "Bypassing Row Level Security Not working",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nHi, so stated in the documents I can use the service_role key to bypass row level security (in my server)\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Initialise with the service key\r\n```\r\nconst supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, {\r\n  localStorage: AsyncStorage as any,\r\n  persistSession: true,\r\n  autoRefreshToken: true\r\n});\r\n```\r\n2. Normal supabse call to RLS protected table:\r\n```\r\n    const { user,error } = await supabase\r\n      .from('profiles')\r\n      .update({\r\n        first_name: 'Testing',\r\n        last_name: 'Bypass'\r\n      })\r\n      .eq('user_id', '0fcd924a-d90b-48a2-af43-f7e7df4ca2a8');\r\n```\r\n\r\n## Expected behavior\r\n\r\nThe users first and last name should be changed by the server even with the policies set as (uid() = user_id)\r\n\r\n\r\n## System information\r\n\r\n- Version of supabase-js: 1.25.2\r\n- Version of Node.js:12\r\n\r\n",
            "author": {
                "login": "Hannes1"
            },
            "state": "CLOSED",
            "createdAt": "2021-11-11T08:56:23Z",
            "closedAt": "2022-09-28T07:40:41Z",
            "url": "https://github.com/supabase/supabase-js/issues/300",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5C6nju",
                    "body": "I ran into something that looks similar to this - not sure if you're still having the issue, but for future users or others looking into this, I found the problem occurred when I had two clients with different keys, or was logged in (as a user) whilst trying to use the service key, e.g.\r\n\r\n```\r\nconst supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, ...)\r\nconst adminClient = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, ...)\r\n\r\n// try to use adminClient, fail to circumvent RLS\r\n// If you sign out, the same code (with adminClient, not supabase here) works\r\n```\r\n\r\nNot sure if that should be a bug or not, but I managed to get what I wanted to do (seeding the db, mostly) working when I signed out first.",
                    "author": {
                        "login": "chrisb2244"
                    },
                    "createdAt": "2022-05-10T17:15:28Z",
                    "url": "https://github.com/supabase/supabase-js/issues/300#issuecomment-1122662638"
                },
                {
                    "id": "IC_kwDOD79Crs5LIeJr",
                    "body": "This is working correctly now afaict - for folks having the issue [above](https://github.com/supabase/supabase-js/issues/300#issuecomment-1122662638), you can set the [`storageKey`](https://supabase.com/docs/reference/javascript/next/initializing#parameters) option so the anon client signing in/out doesn't affect the admin client's creds.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-28T07:40:41Z",
                    "url": "https://github.com/supabase/supabase-js/issues/300#issuecomment-1260511851"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs4-xoZ4",
            "number": 301,
            "title": "Supabase signup request get cancelled",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen I tried to signup using `supabase` auth API, the request goes to `my_id.supabase.co/auth/v1/signup`, it gets canceled. \r\n\r\n## To Reproduce\r\n\r\nWhen I try this, it happens\r\n\r\n```\r\nsupabase.auth\r\n        .signUp({\r\n          email: this.email,\r\n          password: this.password,\r\n        })\r\n```\r\n\r\n## Expected behavior\r\n\r\nIt should return either success or failure mesage.\r\n\r\n## Screenshots\r\n\r\n![image](https://user-images.githubusercontent.com/1433380/141721827-38083c18-ba91-4da1-9cb9-1af47e2c954e.png)\r\n\r\n",
            "author": {
                "login": "fizerkhan"
            },
            "state": "CLOSED",
            "createdAt": "2021-11-15T04:20:03Z",
            "closedAt": "2021-11-15T04:22:14Z",
            "url": "https://github.com/supabase/supabase-js/issues/301",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs45uobw",
                    "body": "Sorry, it is not a bug with supabase, I did not stop default from submitting. ",
                    "author": {
                        "login": "fizerkhan"
                    },
                    "createdAt": "2021-11-15T04:23:19Z",
                    "url": "https://github.com/supabase/supabase-js/issues/301#issuecomment-968525552"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs4_NTsq",
            "number": 306,
            "title": "UnhandledPromiseRejectionWarning: FetchError on v1.28.1",
            "body": "# Bug report\r\nError to login using auth on 1.28.1 but not on 1.28.0\r\n\r\n## Describe the bug\r\nI get the following error after upgrade and trying to login:\r\nUnhandledPromiseRejectionWarning: FetchError: invalid json response body at https://stuff.supabase.co/auth/v1/token?grant_type=password reason: Unexpected token < in JSON at position 0.\r\n\r\n## Expected behavior\r\nNot got this error message, which doesn't allow a user to login.\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser: Firefox, Chrome, Safari\r\n- Version of supabase-js: 1.28.1\r\n- Version of Node.js: 14.17.0",
            "author": {
                "login": "HeritagePalms"
            },
            "state": "CLOSED",
            "createdAt": "2021-11-22T18:09:39Z",
            "closedAt": "2021-11-24T18:39:53Z",
            "url": "https://github.com/supabase/supabase-js/issues/306",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs46L1px",
                    "body": "Hey @HeritagePalms, I wasn't able to reproduce this. What I tried:\r\n```js\r\nconst { SupabaseClient } = require(\"@supabase/supabase-js\")\r\nconst supabase = new SupabaseClient(\r\n    \"https://<...>.supabase.co\",\r\n    \"<...>\",\r\n)\r\nsupabase.auth.signIn({ email: \"<...>\", password: \"<...>\" }).then(console.log)\r\n```\r\n\r\nCan you provide more info about your environment (e.g. Node.js/browser/service workers/Cloudflare Workers) and some repro code?",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-11-23T05:41:00Z",
                    "url": "https://github.com/supabase/supabase-js/issues/306#issuecomment-976181873"
                },
                {
                    "id": "IC_kwDOD79Crs46ObY9",
                    "body": "Thanks @soedirgo , Here is my basic setup.\r\n\r\n```js\r\nimport supabase from '$lib/SupaBase/db';\r\n\r\nexport async function post(request) {\r\n  let email = request.body.get('username')\r\n  let password = request.body.get('password')\r\n\r\n  const {error} = await supabase.auth.signIn({email, password})\r\n\r\n  if (error) {\r\n    return {\r\n      status: error.status,\r\n      body: error.message\r\n    }\r\n  }\r\n  return {stuff...}\r\n}\r\n```\r\n\r\nI'm using Node 14.17.0\r\nI tried this on Firefox, Safari & Chrome\r\nI'm doing this locally. The code isn't public so I don't have a repo available.",
                    "author": {
                        "login": "HeritagePalms"
                    },
                    "createdAt": "2021-11-23T17:05:33Z",
                    "url": "https://github.com/supabase/supabase-js/issues/306#issuecomment-976860733"
                },
                {
                    "id": "IC_kwDOD79Crs46TR73",
                    "body": "I decided to update to 1.28.1 again after updating PostCSS & SvelteKit and my error went away...\u00af\\_(\u30c4)_/\u00af\r\n\r\nI don't know how they are correlated though so all I can share is that I did the following, in case it helps someone.\r\nPostCSS: 8.3.11 -> 8.4.0\r\nSvelteKit: 1-next.198 -> 1-next.199",
                    "author": {
                        "login": "HeritagePalms"
                    },
                    "createdAt": "2021-11-24T18:39:53Z",
                    "url": "https://github.com/supabase/supabase-js/issues/306#issuecomment-978132727"
                },
                {
                    "id": "IC_kwDOD79Crs47HyKD",
                    "body": "Hi! I just had the same issue using \"@supabase/supabase-js\": \"^1.28.1\" with Next.js \r\nI had to update it to fix the error. \r\nThe thing to worry about: while the error first appeared locally, all my production builds started to throw a server-side error. Once updated locally, production builds started to respond to the requests \ud83e\udd37\ud83c\udffb \r\nWhile updating the client, I also restarted the supabase server. I'm not sure which one of those is responsible for the fix. ",
                    "author": {
                        "login": "noskovvkirill"
                    },
                    "createdAt": "2021-12-12T13:12:38Z",
                    "url": "https://github.com/supabase/supabase-js/issues/306#issuecomment-991896195"
                },
                {
                    "id": "IC_kwDOD79Crs47IfCX",
                    "body": "Sorry for not communicating here - v1.28.1 contains a fix for fetch when using auth: https://github.com/supabase/supabase-js/pull/305",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-12-13T03:36:13Z",
                    "url": "https://github.com/supabase/supabase-js/issues/306#issuecomment-992080023"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs4_SZHZ",
            "number": 307,
            "title": "Upload file to bucked not working for me",
            "body": "# Upload file to bucked not working for me\r\n\r\n## Use Upload method\r\n```js\r\nconst supabase = createClient(...);\r\n\r\nsupabase.storage\r\n       .from(\"bucked_name\")\r\n       .upload(\"folder1/folder2/folder3/${file.fileName}\", file.content, {\r\n               cacheControl: 3600,\r\n               upsert: false,\r\n               contentType: file.contentType,\r\n      });\r\n```\r\n## Error\r\n\r\nKey is not present in table \"buckets\".\r\ninsert or update on table \"objects\" violates foreign key constraint \"objects_bucketId_fkey\"\r\n\r\n## Expected behavior\r\n\r\nFile uploaded\r\n\r\n## Screenshots\r\n\r\n![image](https://user-images.githubusercontent.com/47249154/143140892-a1a0b1dc-74cb-430a-82d2-12724d8f4c37.png)\r\n\r\n## System information\r\n\r\n- OS: Ubuntu 21.04\r\n- Version of supabase-js: 128.1\r\n- Version of Node.js: 14.18.1",
            "author": {
                "login": "alvilio"
            },
            "state": "CLOSED",
            "createdAt": "2021-11-23T22:47:09Z",
            "closedAt": "2021-11-23T23:04:00Z",
            "url": "https://github.com/supabase/supabase-js/issues/307",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs4_UMbu",
            "number": 308,
            "title": "Make `supabase-js` a monorepo",
            "body": "# Chore\r\n\r\n## Describe the chore\r\n\r\nCurrently, there are various repos for the various JS clients: `gotrue-js`, `postgrest-js`, `realtime-js`, `storage-js`, and `supabase-js` which wraps them all. This makes it harder to track issues across the various separate repositories. Issues which are fixed in one of the constituent repositories also require an explicit version bump in the `supabase-js` repository, which adds another layer of indirection for new users.\r\n\r\nGiven that most Supabase users tend to just use the main `supabase-js` client which is also highlighted in the docs, I'd propose converting `supabase-js` into a monorepo which contains all the separate clients. Additionally, this might also ease the transition into using a more tree-shaking friendly approach as planned for 2.0 releases (#170).",
            "author": {
                "login": "bnjmnt4n"
            },
            "state": "OPEN",
            "createdAt": "2021-11-24T10:35:49Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/308",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5LIab7",
                    "body": "Super late reply: I suppose one blocker is this makes versioning and publishing difficult - we use semantic versioning + conventional commits + semantic-release for most repos.\r\n\r\n> Issues which are fixed in one of the constituent repositories also require an explicit version bump in the supabase-js repository\r\n\r\nThis is actually not needed - e.g. for a bug fix in postgrest-js `npm update @supabase/postgrest-js` should be enough. (We do bump the version in supabase-js anyway, though it's kinda redundant.)\r\n\r\nOther concerns are valid - difficulty to track issues, tree-shaking. The latter probably needs to wait until there's a proposal on how to go about it - I'm personally not familiar with tree-shaking and how monorepos benefit from it.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-28T07:25:56Z",
                    "url": "https://github.com/supabase/supabase-js/issues/308#issuecomment-1260496635"
                },
                {
                    "id": "IC_kwDOD79Crs5Lbbqw",
                    "body": "@soedirgo , just thought you might want to know that `nx workspaces` (monorepo tool) provides way to publish npm libraries",
                    "author": {
                        "login": "JoelLau"
                    },
                    "createdAt": "2022-10-03T13:56:27Z",
                    "url": "https://github.com/supabase/supabase-js/issues/308#issuecomment-1265482416"
                },
                {
                    "id": "IC_kwDOD79Crs5MjyFW",
                    "body": "+1 on converting to a monorepo.\r\n\r\nMany months ago I was against monorepos in general. I didn't see any improves in workflow and versioning was scaring to me.\r\n\r\nBut I started a project myself with `lerna` and later changed opinion.\r\n\r\nIn my little experience I can tell that monorepos are powerful and versioning is wonderful. Not all projects are eligible to be developed in a monorepo but this project it is.\r\n\r\nReasons:\r\nIn JS ecosystem is difficult to update indirect dependencies, we all know. So in supabase-js all other repos are direct dependencies and so indirect dependencies in all projects using supabase-js. But supabase-js dependencies are specified with a range and so not always updated correctly. And tracking issues and updates are difficult as mentioned above.\r\nVersioning might be overwhelmed and unnecessary sometimes but helps a lot with updating indirect dependencies.\r\nOverall I think monorepo could be considered.\r\n",
                    "author": {
                        "login": "ruggi99"
                    },
                    "createdAt": "2022-10-19T19:02:40Z",
                    "url": "https://github.com/supabase/supabase-js/issues/308#issuecomment-1284448598"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs4_VMfb",
            "number": 309,
            "title": "4ad34ab5c845b5a338976530a6e6f1b64781332b",
            "body": "https://github.com/tonsky/rum/blob/66d352acdedb5acc5bb860a7fc30411eac67c30c/src/daiquiri/compiler.clj",
            "author": {
                "login": "swapnilrajegithubcom"
            },
            "state": "CLOSED",
            "createdAt": "2021-11-24T14:50:27Z",
            "closedAt": "2021-11-24T15:23:19Z",
            "url": "https://github.com/supabase/supabase-js/issues/309",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs46Sle0",
                    "body": "4ad34ab5c845b5a338976530a6e6f1b64781332b",
                    "author": {
                        "login": "swapnilrajegithubcom"
                    },
                    "createdAt": "2021-11-24T14:50:42Z",
                    "url": "https://github.com/supabase/supabase-js/issues/309#issuecomment-977950644"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs4_dlei",
            "number": 312,
            "title": "CORS error from HTTPS website",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nEverything in my application works fine when running locally, but once I host the application using HTTPS, I cannot send Authentication requests to Supabase.\r\n\r\n```\r\nAccess to XMLHttpRequest at 'https://DOMAIN.supabase.co//auth/v1/token?grant_type=password' from origin 'https://control.DOMAIN' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource.\r\n```\r\n\r\nIs there any parameter I need to add to the SupabaseJs instance to make this possible?\r\n\r\n## To Reproduce\r\n\r\n1. Creat Supabase online application\r\n2. Enable authentication\r\n3. Implement authentication inside of your application\r\n4. Host application using HTTPS\r\n\r\n## Expected behavior\r\n\r\nRequests should work on HTTPS websites and not return a CORS error.\r\n\r\n## System information\r\n\r\n- OS: [PopOS, Windows 11]\r\n- Browser [Brave, Chrome]\r\n- Version of supabase-js: [1.22.5]\r\n- Version of Node.js: [e.g. 16.10.0]\r\n\r\n",
            "author": {
                "login": "TannerGabriel"
            },
            "state": "CLOSED",
            "createdAt": "2021-11-26T17:44:02Z",
            "closedAt": "2022-01-03T15:57:33Z",
            "url": "https://github.com/supabase/supabase-js/issues/312",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs472q3K",
                    "body": "Hi, this looks like an issue specific to your project. Please create an issue at https://app.supabase.io/support/new if you are still experiencing the issue",
                    "author": {
                        "login": "inian"
                    },
                    "createdAt": "2022-01-03T15:57:33Z",
                    "url": "https://github.com/supabase/supabase-js/issues/312#issuecomment-1004187082"
                },
                {
                    "id": "IC_kwDOD79Crs5FiTDQ",
                    "body": "I had the same issue, check your environment variables, and compare them on local and server. In my case, I had put an extra letter in the VPS .env file, when I copied the key. So, when I was going to authenticate I got the cors error. It may be useful for someone",
                    "author": {
                        "login": "TomasDmArg"
                    },
                    "createdAt": "2022-06-26T19:09:11Z",
                    "url": "https://github.com/supabase/supabase-js/issues/312#issuecomment-1166618832"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs4_d-hN",
            "number": 313,
            "title": "[Bug] \u2014 createUser method and email confirmations",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nUsing the [`auth.api.createUser`](https://github.com/supabase/gotrue-js/blob/master/src/GoTrueApi.ts#L43) when email confirmations are disabled does not automatically confirm emails.\r\n\r\nFor instance, if you disable email confirmations and create a users via [`auth.api.createUser`](https://github.com/supabase/gotrue-js/blob/master/src/GoTrueApi.ts#L43), the `auth.users` table will show the `email_confirmed_at` column as null and the supabase ui will show `Waiting for verification..`:\r\n\r\n![image](https://user-images.githubusercontent.com/19699368/143657633-99ca7c59-b45c-424d-906d-1415ef5f24ea.png)\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Disable email confirmations\r\n2. Create a user via [`auth.api.createUser`](https://github.com/supabase/gotrue-js/blob/master/src/GoTrueApi.ts#L43)\r\n3. View the `auth.users` table\r\n4. Take a look at the `email_confirmed_at` column which will be `null`\r\n5. Take a look at the supabase ui that shows users and you'll see the `Last Sign In` column show `Waiting for verification..`\r\n\r\n## Expected behavior\r\n\r\nThe expected behavior when creating a user while having email confirmations disabled is that the `email_confirmed_at` column on the `auth.users` table will be set to the time the user signed up and the supabase ui that shows users will have `Last Sign In` set to the time the user signed up.\r\n\r\nThis is how the behavior is when creating a user via [`auth.signUp`](https://github.com/supabase/gotrue-js/blob/master/src/GoTrueClient.ts#L123)\r\n\r\n![image](https://user-images.githubusercontent.com/19699368/143657814-2dd7f852-ce45-4739-9681-7d8a979288fc.png)\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Version of supabase-js: [1.28.2]\r\n- Version of Node.js: [14.18.0]\r\n\r\n## Additional context\r\n\r\nI also noticed that if you have email confirmations enabled and a user is created via  [`auth.api.createUser`](https://github.com/supabase/gotrue-js/blob/master/src/GoTrueApi.ts#L43), no email confirmation is sent.\r\n",
            "author": {
                "login": "kiyadotdev"
            },
            "state": "CLOSED",
            "createdAt": "2021-11-26T22:04:23Z",
            "closedAt": "2022-01-13T01:56:03Z",
            "url": "https://github.com/supabase/supabase-js/issues/313",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs46e3od",
                    "body": "So i did a bit of investigating and here's what I was able to come up with. When using the [`auth.api.createUser`](https://github.com/supabase/gotrue-js/blob/master/src/GoTrueApi.ts#L43), it calls the [`gotrue`](https://github.com/supabase/gotrue) api, specifically the `admin/users` POST endpoint. \r\n\r\nThis in turn calls the [`adminUserCreate`(https://github.com/supabase/gotrue/blob/master/api/admin.go#L176) method which does a number of things. What's important in regards to this issue is that it:\r\n\r\n- grabs the params [here](https://github.com/supabase/gotrue/blob/master/api/admin.go#L182)\r\n- grabs the config [here](https://github.com/supabase/gotrue/blob/master/api/admin.go#L178)\r\n\r\nNow after the new user is written to the table, there are a number of checks. One of which is:\r\n\r\n```go\r\nif params.EmailConfirm {\r\n\tif terr := user.Confirm(tx); terr != nil {\r\n\t\treturn terr\r\n\t}\r\n}\r\n```\r\n\r\nI beleive this is where the issue exists. `params.EmailConfirm` will always be null. When we grab the params mentioned above, what's happening is that we decode the request body. But the request body only allows `UserAttributes` defined as such:\r\n\r\n```ts\r\nexport interface UserAttributes {\r\n  /**\r\n   * The user's email.\r\n   */\r\n  email?: string\r\n  /**\r\n   * The user's password.\r\n   */\r\n  password?: string\r\n  /**\r\n   * An email change token.\r\n   */\r\n  email_change_token?: string\r\n\r\n  /**\r\n   * A custom data object. Can be any JSON.\r\n   */\r\n  data?: object\r\n}\r\n```\r\n\r\nOne solution is to add a check against the config we grab if AutoConfirm is enabled. This is reflective of the behavior of the [`auth.signUp`](https://github.com/supabase/gotrue-js/blob/master/src/GoTrueClient.ts#L123) API which ultimately calls the `signup` POST endpoint on the gotrue server.\r\n\r\nAfter a user is created with the `signup` endpoint, there are checks against the config on to whether or not the user should be confirmed. This can be seen [here](https://github.com/supabase/gotrue/blob/master/api/signup.go#L114):\r\n\r\n```go\r\nif params.Provider == \"email\" && !user.IsConfirmed() {\r\n\tif config.Mailer.Autoconfirm {\r\n\t\tif terr = models.NewAuditLogEntry(tx, instanceID, user, models.UserSignedUpAction, nil); terr != nil {\r\n\t\t\treturn terr\r\n\t\t}\r\n\t\tif terr = triggerEventHooks(ctx, tx, SignupEvent, user, instanceID, config); terr != nil {\r\n\t\t\treturn terr\r\n\t\t}\r\n\t\tif terr = user.Confirm(tx); terr != nil {\r\n\t\t\treturn internalServerError(\"Database error updating user\").WithInternalError(terr)\r\n\t\t}\r\n        ....\r\n}\r\n```\r\n\r\nIf this appears to be the right path, I'm happy to stab at creating a PR!",
                    "author": {
                        "login": "kiyadotdev"
                    },
                    "createdAt": "2021-11-28T23:11:07Z",
                    "url": "https://github.com/supabase/supabase-js/issues/313#issuecomment-981170717"
                },
                {
                    "id": "IC_kwDOD79Crs47sxgX",
                    "body": "Want to also say that this is an issue for me too and I think a PR to fix this would be a great idea!",
                    "author": {
                        "login": "ngoctranfire"
                    },
                    "createdAt": "2021-12-27T14:23:48Z",
                    "url": "https://github.com/supabase/supabase-js/issues/313#issuecomment-1001592855"
                },
                {
                    "id": "IC_kwDOD79Crs47_2xQ",
                    "body": "Hello, it seems to be  fixed ;) : https://github.com/supabase/supabase/issues/4268",
                    "author": {
                        "login": "rphlmr"
                    },
                    "createdAt": "2022-01-06T13:31:57Z",
                    "url": "https://github.com/supabase/supabase-js/issues/313#issuecomment-1006595152"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs4_2OBl",
            "number": 319,
            "title": "auth.user() return User data, auth.user().[propertyName] return error from null",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\n`auth.user()` return `User` data, `auth.user().[propertyName]` return error from null\r\n```js\r\n// return User data successfully\r\nsupabase.auth.user()\r\n\r\n// return error, null\r\nsupabase.auth.user().id\r\n```\r\n\r\n## To Reproduce\r\n\r\n```js\r\nimport { createClient } from \"@supabase/supabase-js\";\r\n\r\nconst supabaseUrl = 'url';\r\nconst supabaseKey = 'key';\r\nconst supabase = createClient(supabaseUrl, supabaseKey);\r\n\r\nconst user = supabase.auth.user()\r\n```\r\n```js\r\n// show User data\r\nconsole.log(user)\r\n```\r\n```js\r\n// 500\r\n// Cannot read property 'id' of null\r\n// TypeError: Cannot read property 'id' of null\r\nconsole.log(user.id)\r\n```\r\n## Expected behavior\r\n\r\nCalling property on `User` value from `auth.user()` should not introduced error.\r\n\r\n## System information\r\n\r\n- OS: Linux, Fedora 35\r\n- Browser: Firefox 94.0\r\n- Version of supabase-js: 1.28.5\r\n- Version of Node.js: 16.8.0\r\n",
            "author": {
                "login": "paraduxos"
            },
            "state": "CLOSED",
            "createdAt": "2021-12-04T10:29:24Z",
            "closedAt": "2021-12-04T10:55:44Z",
            "url": "https://github.com/supabase/supabase-js/issues/319",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs46xUOH",
                    "body": "It actually return `null` in terminal for both cases.\r\nOnly in browser that different.\r\n\r\n[Related issue](https://github.com/supabase/gotrue-js/issues/23)\r\n______________________________________\r\nEdit: I found the workaround from [https://github.com/supabase/gotrue-js/issues/23#issuecomment-743032138](https://github.com/supabase/gotrue-js/issues/23#issuecomment-743032138)",
                    "author": {
                        "login": "paraduxos"
                    },
                    "createdAt": "2021-12-04T10:38:43Z",
                    "url": "https://github.com/supabase/supabase-js/issues/319#issuecomment-986006407"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5Ahz4I",
            "number": 330,
            "title": "Chore: update Github description to supabase.com",
            "body": "# Chore\r\n\r\n## Describe the chore\r\n\r\nupdate Github description  from [supabase.io](https://supabase.com) to [supabase.com](https://supabase.com)\r\n\r\n<img width=\"1392\" alt=\"Screen Shot 2021-12-16 at 3 11 24 PM\" src=\"https://user-images.githubusercontent.com/70828596/146442478-c8f9b34b-34b9-4479-83e4-e97054131d3e.png\">",
            "author": {
                "login": "Isaiah-Hamilton"
            },
            "state": "CLOSED",
            "createdAt": "2021-12-16T20:13:06Z",
            "closedAt": "2022-08-12T03:59:16Z",
            "url": "https://github.com/supabase/supabase-js/issues/330",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs5Anf3o",
            "number": 331,
            "title": "docs: update reset password example",
            "body": "# Improve documentation\r\n\r\n## Link \r\n\r\n[Reset Password | Auth\r\n](https://supabase.com/docs/reference/javascript/reset-password-email)\r\n\r\n## Describe the problem\r\n\r\nThe example snippet to reset the password should be a promise, else it's giving an error.\r\n\r\n## Describe the improvement\r\n\r\nThe code should be updated like this:\r\n`const { data, error } = await supabase.auth.api.resetPasswordForEmail('user@email.com');`\r\n\r\n## Additional context\r\n\r\nHere's the error I'm getting if I follow the example snippet\r\n\r\n![Screenshot (323)](https://user-images.githubusercontent.com/77309809/146676177-f5183c0c-6135-4afa-a2b4-9cac5c8885c4.png)\r\n\r\n",
            "author": {
                "login": "anuraglol"
            },
            "state": "CLOSED",
            "createdAt": "2021-12-19T13:17:47Z",
            "closedAt": "2022-03-24T15:07:42Z",
            "url": "https://github.com/supabase/supabase-js/issues/331",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs5A5eMB",
            "number": 335,
            "title": "realtime only emitting DELETE events (but not INSERT or UPDATE)",
            "body": "# Bug report\r\nrealtime only emitting `DELETE` events (no `INSERT` or `UPDATE`)\r\n\r\n## Describe the bug\r\nWhen I perform an `INSERT` or `UPDATE` to a table with realtime + RLS enabled, I do not receive any realtime event: \r\n\r\n```typescript\r\nsupabase\r\n    .from('*')\r\n    .on('*', (payload) => {\r\n      console.log(`${payload.eventType} received: `, payload);\r\n    })\r\n    .subscribe();\r\n```\r\n\r\n`DELETE` events are correctly received.\r\n\r\nThe user has appropriate RLS permissions, because all data correctly loads on the client via supabase cllient `REST` calls. \r\n\r\n## To Reproduce\r\nUnfortunately not able to share an example because it would be difficult to decouple the issue I'm seeing from domain-specific app code. However, here is my configuration:\r\n\r\n**1. replication enabled:**\r\n<img width=\"1408\" alt=\"Screen Capture 2021-12-26 at 11 47 45@2x\" src=\"https://user-images.githubusercontent.com/1609336/147414858-a97311d8-7e69-452d-a461-ad8b390b3421.png\">\r\n\r\n**2. replication enabled on tables:**\r\n![Screen Capture 2021-12-26 at 11 48 29@2x](https://user-images.githubusercontent.com/1609336/147414908-ce5c8a82-bbca-47f6-8bcb-9f9c1ceb47a7.png)\r\n\r\n**3. Subscription configuration:**\r\n```typescript\r\nsupabase\r\n    .from('*')\r\n    .on('*', (payload) => {\r\n      console.log(`${payload.eventType} received: `, payload);\r\n    })\r\n    .subscribe();\r\n```\r\n\r\n## Expected behavior\r\nWhen I perform an `INSERT` or `UPDATE` on entities (such as `board_lists` table or `board_cards` table), I expect to see the following logged:\r\n\r\n```\r\nINSERT received: {payload data}\r\n```\r\n\r\nHowever, I **do not** see any realtime event **except** for `DELETE` operations, which are behaving as expected.\r\n\r\nI am able to correctly perform `INSERT`, `UPDATE` and `READ` events on the client via the Supabase client/REST API, so I know that the RLS policies are not preventing the user from performing these operations.\r\n\r\n## System / versions\r\n* MacOS latest\r\n* Node @ v17.2.0\r\n* Yarn @ 1.22.17\r\n* @supabase/supabase-js@1.29.0\r\n* @supabase/realtime-js@^1.3.3\r\n* @supabase/gotrue-js@^1.21.7\r\n* @supabase/postgrest-js@^0.35.0",
            "author": {
                "login": "tconroy"
            },
            "state": "CLOSED",
            "createdAt": "2021-12-26T16:54:30Z",
            "closedAt": "2021-12-26T18:11:41Z",
            "url": "https://github.com/supabase/supabase-js/issues/335",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs47rXVx",
                    "body": "Realized this is probably more appropriate for the supabase/realtime repo. Closing in favor of [this issue](https://github.com/supabase/realtime/issues/213).",
                    "author": {
                        "login": "tconroy"
                    },
                    "createdAt": "2021-12-26T18:11:40Z",
                    "url": "https://github.com/supabase/supabase-js/issues/335#issuecomment-1001223537"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5A97gr",
            "number": 337,
            "title": "Handle network error in client",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nWhen testing what error is received from calling the supabase client whilst the network is disabled, the error was not caught by supabase.  Instead I have to wrap all calls to supabase inside async try / catch.\r\n\r\n## Describe the solution you'd like\r\n\r\nHTMLHttpRequest \"Network request failed\" errors should be handled by the client and passed back in to response.error property by default.\r\n\r\n## Describe alternatives you've considered\r\n\r\nNone yet.\r\n",
            "author": {
                "login": "AJamesPhillips"
            },
            "state": "CLOSED",
            "createdAt": "2021-09-24T12:20:27Z",
            "closedAt": "2022-08-23T03:41:04Z",
            "url": "https://github.com/supabase/supabase-js/issues/337",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5I7Qm6",
                    "body": "This should now be handled (i.e. network errors should be returned instead of thrown), but please reopen if it still happens on some callsites \ud83d\ude4f",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-08-23T03:41:04Z",
                    "url": "https://github.com/supabase/supabase-js/issues/337#issuecomment-1223494074"
                },
                {
                    "id": "IC_kwDOD79Crs5c58mi",
                    "body": "Supabase.instance.client.from(<DbName>).select().eq(<something>);\r\n\r\nwith the network switched off throws XMLHttpRequest error. What is the recommended way to manage this and retry the call to Supabase?",
                    "author": {
                        "login": "sunilguptasg"
                    },
                    "createdAt": "2023-05-23T07:30:06Z",
                    "url": "https://github.com/supabase/supabase-js/issues/337#issuecomment-1558694306"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5BCt7v",
            "number": 338,
            "title": "Getting \"supabaseKey is required\" error when the key is literally there",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nThis was already discussed here https://github.com/supabase/supabase/discussions/3919 but since there is no solution after more than a month I decided to report it here and hope that this will get a better solution than commiting my key to github \ud83d\ude05 \r\n\r\nTL;DR createClient only works when the key is passed as a string, not from the .env.local file\r\n\r\nThis works:\r\n```ts\r\nconst url = \"https://supabaseurlhere.supabase.co\";\r\nconst supabase = createClient(url, \"supabasekeyhere\");\r\n```\r\n\r\nThis doesn't work:\r\n```env\r\nSUPABASE_KEY=supabasekeyhere\r\n```\r\n```ts\r\nconst url = \"https://supabaseurlhere.supabase.co\";\r\nconst supabase = createClient(url, process.env.SUPABASE_KEY!);\r\n```\r\n\r\n## To Reproduce\r\n\r\n1. Create .env.local file and add the Supabase key\r\n```env\r\nSUPABASE_KEY=supabasekeyhere\r\n```\r\n2. Console.log the env variable just to check that it's working\r\n```ts\r\nconsole.log(process.env.SUPABASE_KEY);\r\n```\r\n3. Try to create the client using the env variable\r\n```ts\r\nconst url = \"https://supabaseurlhere.supabase.co\";\r\nconst supabase = createClient(url, process.env.SUPABASE_KEY!);\r\n```\r\n4. See the error\r\n\r\n## Expected behavior\r\n\r\nThe client should be created using the key which IS in the env file. **I tried logging it to the console and it is available from the \"process.env.SUPABASE_KEY\"**\r\n\r\n## Screenshots\r\n\r\n![image](https://user-images.githubusercontent.com/53520774/147775711-2baac33e-13e3-4d5b-bf80-0ca8f749f1b1.png)\r\n\r\n## System information\r\n\r\n- OS: Windows 11\r\n- Browser: Brave\r\n- Version of supabase-js: 1.29.1\r\n- Version of Node.js: 17.2.0\r\n- Version of React: 17.0.2\r\n- Version of Next.js: 12.0.7\r\n- Version of TypeScript: 4.5.4",
            "author": {
                "login": "hynekfisera"
            },
            "state": "CLOSED",
            "createdAt": "2021-12-30T17:45:00Z",
            "closedAt": "2021-12-30T18:01:36Z",
            "url": "https://github.com/supabase/supabase-js/issues/338",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs47yorX",
                    "body": "@kangmingtay just responded to the initial discussion with a solution so this can be closed, thank you! https://github.com/supabase/supabase/discussions/3919\r\n\r\n> If i'm not mistaken, since this is a nextjs app, your env var has to be prefixed with NEXT_PUBLIC so it shd look like NEXT_PUBLIC_SERVICE_KEY. Hope this helps!",
                    "author": {
                        "login": "hynekfisera"
                    },
                    "createdAt": "2021-12-30T18:01:36Z",
                    "url": "https://github.com/supabase/supabase-js/issues/338#issuecomment-1003129559"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5BNNlR",
            "number": 339,
            "title": "User gets deleted/returns undefined on page refresh",
            "body": "# Bug report\r\nUser gets deleted on page refresh\r\n## Describe the bug\r\nWhen i first load the nextjs app the user loads properly but when i refresh it the user object is returned as undefined from the session.\r\n\r\n## To Reproduce\r\n```\r\nuseEffect(() => {\r\n    setSession(supabase.auth.session() as any);\r\n   console.log(session,\"sesh\");\r\n    supabase.auth.onAuthStateChange((_event, session) => {\r\n      setSession(session as any);\r\n      console.log(session,\"sesh in\");\r\n      setUser(session?.user != null ? session?.user : {});\r\n      setUserID(\r\n        session?.user != null ? session?.user?.user_metadata?.provider_id : \"\"\r\n      );\r\n      \r\n    });\r\n  }, []);\r\n  ``` \r\n I've used discord third party auth so youll have to use that, put this in your nextjs app and youll see that on first load the session is console logged but on second it gives undefined\r\n\r\n\r\n## Expected behavior\r\nShould load user from db on evry refresh not just first\r\n\r\n## System information\r\n\r\n- OS: [Windows]\r\n- Browser (if applies) [firefox]\r\n- Version of supabase-js: [^1.28.0]\r\n- Version of Node.js: [14.17.1]\r\n",
            "author": {
                "login": "anoushk1234"
            },
            "state": "CLOSED",
            "createdAt": "2022-01-05T04:59:29Z",
            "closedAt": "2022-02-08T11:33:08Z",
            "url": "https://github.com/supabase/supabase-js/issues/339",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs48AP2B",
                    "body": "Hi @anoushk1234 and thanks for reporting.\r\n\r\nJust to clarify, when you say \"delete\", the actual user record in `auth.users` table is not physically deleted, but rather the user is no longer available in the session?\r\n\r\nAlso, I assume this example code to reproduce, but could you explain a little bit about the intent here:\r\n\r\n```js\r\nuseEffect(() => {\r\n    setSession(supabase.auth.session() as any);\r\n   console.log(session,\"sesh\");\r\n    supabase.auth.onAuthStateChange((_event, session) => {\r\n      setSession(session as any);\r\n      console.log(session,\"sesh in\");\r\n      setUser(session?.user != null ? session?.user : {});\r\n      setUserID(\r\n        session?.user != null ? session?.user?.user_metadata?.provider_id : \"\"\r\n      );\r\n      \r\n    });\r\n  }, []);\r\n```\r\n\r\n1. useEffect -> on page load...\r\n2. set the session to the current session (?)\r\n3. which the triggers the auth state change - but, no not the first load because the event isn't registered to be listened to\r\n4. so now reload and  ..\r\n5.  set the session to the current session\r\n6. which now triggers the supabase.auth.onAuthStateChange\r\n7. and you set the session to the changed session?\r\n8. and then set the current user on the session to that session's user?\r\n\r\nIs this example code or is this code trying to do something specific -- like always refresh the session on page load and that is failing?\r\n\r\nJust trying to understand the context a little more before I try to reproduce.\r\n\r\nThanks!\r\n",
                    "author": {
                        "login": "dthyresson"
                    },
                    "createdAt": "2022-01-06T15:51:09Z",
                    "url": "https://github.com/supabase/supabase-js/issues/339#issuecomment-1006697857"
                },
                {
                    "id": "IC_kwDOD79Crs48AQq6",
                    "body": "Also, the `setSession()` is meant to take the refresh token:\r\n\r\nhttps://github.com/supabase/gotrue-js/blob/d7b334a4283027c65814aa81715ffead262f0bfa/src/GoTrueClient.ts#L358\r\n\r\nMaybe because what is being passed isn't being checked as a string or a valid refresh token, this fails here:\r\n\r\nhttps://github.com/supabase/gotrue-js/blob/d7b334a4283027c65814aa81715ffead262f0bfa/src/GoTrueClient.ts#L366\r\n\r\n```ts\r\n  async setSession(\r\n    refresh_token: string\r\n  ): Promise<{ session: Session | null; error: ApiError | null }> {\r\n    try {\r\n      if (!refresh_token) {\r\n        throw new Error('No current session.')\r\n      }\r\n      const { data, error } = await this.api.refreshAccessToken(refresh_token)\r\n      if (error) {\r\n        return { session: null, error: error }\r\n      }\r\n```\r\n\r\nAnd thus the session is null and thus use is null, but the error is swallowed because the code in the use effect didn't handle the error returned?\r\n\r\nIf so, then it does seem that either the GoTrue client or server should perhaps better check for a valid looking refresh token?",
                    "author": {
                        "login": "dthyresson"
                    },
                    "createdAt": "2022-01-06T15:55:43Z",
                    "url": "https://github.com/supabase/supabase-js/issues/339#issuecomment-1006701242"
                },
                {
                    "id": "IC_kwDOD79Crs48CAsK",
                    "body": "Hey @dthyresson this code is to load the current user object from the session, I actually have my own users table but I also need to load the logged in User to get the discord data like username,uid,avatar etc\r\n\r\nI first used ```supabase.auth.user()``` in the useffect so the first time it loads the users is stored but it wasnt happening async since the useffect was running before the user was being stored in the cookie so first time it wud not load user and on refresh it wud load the user so then i tried ```supabase.auth.onAuthStateChange((_event, session)``` after going thru the docs which half solved my problem as on first load it wud work but after reloading it wud give user as undefined\r\n\r\nThe main objective here is to just get the logged in user object and make that persist on every load until the user chooses to sign out, hope that answers your question",
                    "author": {
                        "login": "anoushk1234"
                    },
                    "createdAt": "2022-01-07T05:55:44Z",
                    "url": "https://github.com/supabase/supabase-js/issues/339#issuecomment-1007160074"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5BVur1",
            "number": 340,
            "title": "Cross error when update Data ",
            "body": "Cross error when update Data \r\n\r\nwhen we want to update data in supabase then we facing cross error \r\n\r\n![image](https://user-images.githubusercontent.com/93132632/148534899-d1ce8907-79b8-4552-a70c-52b5b4c25bac.png)\r\n\r\n",
            "author": {
                "login": "nitinr010"
            },
            "state": "CLOSED",
            "createdAt": "2022-01-07T11:04:00Z",
            "closedAt": "2022-09-28T08:07:15Z",
            "url": "https://github.com/supabase/supabase-js/issues/340",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5HwfJf",
                    "body": "Can you please share a code snippet ? Or are you updating it from the Supabase dashboard ? ",
                    "author": {
                        "login": "monicakh"
                    },
                    "createdAt": "2022-08-03T12:35:56Z",
                    "url": "https://github.com/supabase/supabase-js/issues/340#issuecomment-1203892831"
                },
                {
                    "id": "IC_kwDOD79Crs5LIk-2",
                    "body": "Closing this for staleness.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-28T08:07:15Z",
                    "url": "https://github.com/supabase/supabase-js/issues/340#issuecomment-1260539830"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5BXu8I",
            "number": 341,
            "title": "Miniflare Header problem",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen I ran the project with miniflare, I encountered an `FetchError: Header name must be a valid HTTP token [\"x-client-\u0131nfo\"]` error. \r\n\r\nMiniflare version: 2.0.0\r\n\r\nMaybe related: https://github.com/remix-run/remix/pull/1184#issuecomment-999142095\r\n\r\n## To Reproduce\r\n\r\n1. Create a cloudflare workers project\r\n2. Install supabase-js\r\n3. Call supabase function\r\n4. miniflare -w --live-reload\r\n5. See error\r\n\r\n## System information\r\n\r\n- OS: macOs\r\n- Version of supabase-js: 1.29.1\r\n- Version of Node.js: v16.13.1",
            "author": {
                "login": "mehmetcansahin"
            },
            "state": "CLOSED",
            "createdAt": "2022-01-07T22:52:26Z",
            "closedAt": "2022-09-28T08:36:00Z",
            "url": "https://github.com/supabase/supabase-js/issues/341",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs4-WlFV",
                    "body": "Still nothing about this? \ud83d\ude22",
                    "author": {
                        "login": "and3rsonsousa"
                    },
                    "createdAt": "2022-02-19T21:27:28Z",
                    "url": "https://github.com/supabase/supabase-js/issues/341#issuecomment-1046106453"
                },
                {
                    "id": "IC_kwDOD79Crs5LItO2",
                    "body": "Sorry for the super late reply!\r\n\r\nThis does seem like an upstream bug, I can't reproduce it on a recent version of Miniflare (2.9.0). Please comment if the issue persists.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-28T08:36:00Z",
                    "url": "https://github.com/supabase/supabase-js/issues/341#issuecomment-1260573622"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5CJYTi",
            "number": 345,
            "title": "import crossFetch -> import { fetch as crossFetch }",
            "body": "# Feature request\r\nEvery import to crossFetch be changed to { fetch as crossFetch}\r\n\r\nI am using sveltekit with typescript and im getting an error saying this.fetch (crossFetch by default) is not a function,\r\ngoing into all of the @supabase/*-js and changing \r\n```js\r\nimport crossFetch from 'cross-fetch'\r\n```\r\nto \r\n```js\r\nimport { fetch as crossFetch } from 'cross-fetch';\r\n```\r\nimmediately fixed my problem\r\n\r\n![screenshot of the aformentioned error inside chrome devtools](https://user-images.githubusercontent.com/76607214/150420306-412ede4e-0645-4493-92b9-75ad5c3af5c0.png)\r\n",
            "author": {
                "login": "chadulous"
            },
            "state": "CLOSED",
            "createdAt": "2022-01-20T20:52:23Z",
            "closedAt": "2022-01-20T21:11:15Z",
            "url": "https://github.com/supabase/supabase-js/issues/345",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs48rGEn",
                    "body": "nevermind, that wasnt the solution.... now im crying beacuse it works and i dont know why\r\n",
                    "author": {
                        "login": "chadulous"
                    },
                    "createdAt": "2022-01-20T21:09:26Z",
                    "url": "https://github.com/supabase/supabase-js/issues/345#issuecomment-1017930023"
                },
                {
                    "id": "IC_kwDOD79Crs48rHzr",
                    "body": "now the database is just returning undefined -_-\r\n",
                    "author": {
                        "login": "chadulous"
                    },
                    "createdAt": "2022-01-20T21:19:37Z",
                    "url": "https://github.com/supabase/supabase-js/issues/345#issuecomment-1017937131"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5CnLDj",
            "number": 354,
            "title": "Twitter OAuth not work at all.",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\nAll set up with twitter developers platform (tested other twitter API endpoint, work.) set up with supabase to sign in with twitter. \r\nOn ``` auth.signIn() ``` return ``` message : \"no Route matched with those values\" ```\r\n\r\n\r\n## To Reproduce\r\n1. Sign Up on twitter developer platform\r\n2. On app settings enable Oauth2.0 & OAuth 1.0\r\n3. On supabase platform follow the guide to set up external sign in with twitter\r\n4. On code  ```const client =  supabase.createClient() ``` (For testing I've try with ' super user ' credential from my supabase account)\r\n5. then ... ``` client.auth.SignIn({provider: \"twitter\"}).then(console.log(client.auth.session())) ```\r\n6. On HTML file connect the function to a button or a link\r\n7. Try and you will be redirect to a json response with ``` message : \"no Route matched with those values\" ```\r\n\r\n## Expected behavior\r\nOpen a page to Sign In with twitter.\r\n\r\n## System information\r\n- OS:  linux, ubuntu\r\n- Browser: chrome, brave, firefox\r\n- Version of supabase-js: ^1.29.4\r\n- Version of Node.js: 16.13.0\r\n\r\n",
            "author": {
                "login": "lrnzlo"
            },
            "state": "CLOSED",
            "createdAt": "2022-01-28T15:58:39Z",
            "closedAt": "2022-01-29T13:53:19Z",
            "url": "https://github.com/supabase/supabase-js/issues/354",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs49EIJb",
                    "body": "Just to create a little bit of context this is the snippet from the actual code\r\n```ts\r\nimport { createClient } from \"@supabase/supabase-js\"\r\n// Json File with URL and Secret Key for SUPABASE\r\nimport data from './user.json'\r\n\r\nconst client = createClient(data.URL, data.SEC_KEY)\r\n// This is bind to a button when it's clicked return: _message : \"no Route matched with those values\"_\r\nasync sign() {\r\n    await client.auth.signIn({\r\n        provider: \"twitter\"\r\n    }).then(() => console.log(client.auth.session()))\r\n}\r\n\r\n```",
                    "author": {
                        "login": "lrnzlo"
                    },
                    "createdAt": "2022-01-28T18:22:26Z",
                    "url": "https://github.com/supabase/supabase-js/issues/354#issuecomment-1024492123"
                },
                {
                    "id": "IC_kwDOD79Crs49FlwA",
                    "body": "I have track down the request flow on browser when call  ``` client.auth.signIn() ```\r\n\r\n1. ``` GET https://supabase_app_url.supabase.co/auth/v1/authorize?provider=twitter```\r\n         1.1 This request return a 302(Found)\r\n         1.2 For what I have understand this is a request to cloudflare \r\n\r\n2.  ```GET https://supabase_app_url.supabase.co/ ```\r\n         2.1 This, obviously, return a 404(Not Found)            \r\n         2.2 {message: No Routes matched with those value}",
                    "author": {
                        "login": "lrnzlo"
                    },
                    "createdAt": "2022-01-29T09:29:24Z",
                    "url": "https://github.com/supabase/supabase-js/issues/354#issuecomment-1024875520"
                },
                {
                    "id": "IC_kwDOD79Crs49FvpG",
                    "body": "# FIXED\r\nIt seems that the problem is with Twitter API Oauth and not with supabase Authorization API directly.\r\nIt's not possible tu use ```http://localhost``` as website URL on Twitter API Oauth.\r\n\r\nTo use it on local dev enviroment use a tunnel provider like [ngrok](https://ngrok.com/)\r\n\r\n## How to replicate?\r\n1. Launch your application with something like Live Server, or vite.\r\n    1.1 This sould return something like ``` Serving at http://localhost:3000 ```\r\n2. Create an account and download (ngrok)[https://ngrok.com/]\r\n    2.2 Follow the instruction\r\n    2.3 Open a tunnel to your localhost with ```path-to-ngrok/ngrok http 3000 ``` or the port that serve your app\r\n3. Create a (supabase)[https://app.supabase.io] account, and follow the (instructions)[https://supabase.com/docs/guides/auth/auth-twitter] to enable ```Twitter Authorization```\r\n4. Setup (Oauth authorization)[https://developer.twitter.com/en/portal/projects/xxx/apps/xxx/auth-settings] on your app in Twitter Developer\r\n    4.1 Use ``` https://xxx.supabase.co/auth/v1/callback ``` as Callback URI / Redirect URL\r\n    4.2 USe ``` https://xxxx-xx-xxx-xxx-xxx.ngrok.io/ ``` as  Website URL\r\n5. Test your application at ``` https://xxxx-xx-xxx-xxx-xxx.ngrok.io/ ``` \r\n\r\n## Important notice\r\nIf you close your ngrok session. You need to re-start your ```Local Server``` and ```Ngrok Server``` re-do point 4.2, 5 and re-set supabase Website URL on [authorization settings tab](https://app.supabase.io/project/xxx/auth/settings)",
                    "author": {
                        "login": "lrnzlo"
                    },
                    "createdAt": "2022-01-29T13:53:19Z",
                    "url": "https://github.com/supabase/supabase-js/issues/354#issuecomment-1024916038"
                },
                {
                    "id": "IC_kwDOD79Crs49GxqM",
                    "body": "May I ask which keys did you use from Twitter to put in your Supabase settings? `Consumer Keys` or `OAuth 2.0 Client ID and Client Secret`?\r\n\r\nBecause I seem to only have that issue using the latter, with the former it works well even on localhost. Did you notice the same behavior?",
                    "author": {
                        "login": "Timonzimm"
                    },
                    "createdAt": "2022-01-30T17:06:36Z",
                    "url": "https://github.com/supabase/supabase-js/issues/354#issuecomment-1025186444"
                },
                {
                    "id": "IC_kwDOD79Crs49MZ1p",
                    "body": "@Timonzimm Consumer Key works fine for me, let me know if you solve! \r\nAnd no, I've not notice the same behavior because I was not able to use it on http://localhost:xx at all",
                    "author": {
                        "login": "lrnzlo"
                    },
                    "createdAt": "2022-02-01T09:59:04Z",
                    "url": "https://github.com/supabase/supabase-js/issues/354#issuecomment-1026661737"
                },
                {
                    "id": "IC_kwDOD79Crs49M1V_",
                    "body": "Consumer keys work for me but not with OAuth keys, did you try with the latter? Did you manage to get it to work?",
                    "author": {
                        "login": "Timonzimm"
                    },
                    "createdAt": "2022-02-01T12:08:00Z",
                    "url": "https://github.com/supabase/supabase-js/issues/354#issuecomment-1026774399"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5C5tnW",
            "number": 358,
            "title": "NULL session after successfully third-party user authenticaton",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\nAngular v13.x and Supabase.js client v1.29.4: only with the social authentication (Facebook, Google, and others), when the redirect has finished, the auth.session() method always returns NULL even if the local storage key of the current session is stored. \r\n\r\nOnly a full refresh of the page retrieves the current (and valid) session.\r\n\r\n## To Reproduce\r\nCreate a base Angular v13.x application and install the (current) latest version of the Supabase-js library.\r\n\r\n## Expected behavior\r\nThe auth.session() returns the current session object without forcing a full refresh of the web app.\r\n\r\n## System information\r\n\r\n- OS: macOS 12.2\r\n- Browser: all browsers (Chrome, Edge, Firefox, Safari)\r\n- Version of supabase-js: 1.29.4\r\n- Version of Node.js: v14 and v17",
            "author": null,
            "state": "CLOSED",
            "createdAt": "2022-02-02T21:53:34Z",
            "closedAt": "2022-02-13T07:56:13Z",
            "url": "https://github.com/supabase/supabase-js/issues/358",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs49Tzyp",
                    "body": "```  \r\nngOnInit(): void {\r\n   console.log(window.localStorage.getItem('supabase.auth.token'));\r\n   console.log(this.supabase.instance.auth.session());\r\n}\r\n```\r\nBoth values are null (after the redirect); after a refresh, the value is filled.\r\nIt works only if I wrap everything into setTimeout with an acceptable value.\r\n\r\n```\r\nsetTimeout(() => {\r\n   console.log(window.localStorage.getItem('supabase.auth.token'));\r\n   console.log(this.supabase.instance.auth.session());\r\n}, 250);\r\n```\r\n\r\nHow much time supa take to write the value in localStorage? \ud83d\ude1e",
                    "author": null,
                    "createdAt": "2022-02-03T04:55:33Z",
                    "url": "https://github.com/supabase/supabase-js/issues/358#issuecomment-1028603049"
                },
                {
                    "id": "IC_kwDOD79Crs493SLz",
                    "body": "I solved using the **onAuthStateChange** event - this works even with Third Party Auth.\r\n",
                    "author": null,
                    "createdAt": "2022-02-13T07:56:13Z",
                    "url": "https://github.com/supabase/supabase-js/issues/358#issuecomment-1037902579"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5EOWxj",
            "number": 379,
            "title": "Supabase realtime not working!",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\n**The realtime feature of supabase is not working.**\r\n\r\nI am able to insert, delete etc. But just the \"realtime\" feature is not working for me.\r\n\r\n## What I've done\r\n- enabled replication for all tables\r\n- disabled rls for all tables\r\n- tried with sveltekit and react\r\n- tried 3 different browsers (chrome, brave, firefox)\r\n\r\nSupabase is responding with `403 Forbidden` response, and I don't know why. Also, there don't seem to be any error message in the response to debug or to know what exactly is causing the issue.\r\n\r\nIs there a way in `@supabase/supabase-js` to get the error object on subscription?\r\n\r\nI have tried `try catch` but the error is not going to `catch` block.\r\n\r\nAlso, I've tried `.onError()`, which is indeed running the callback function, but it doesn't have access to error object.\r\n\r\nThe callback on `.subscribe()` is running *sometimes*, but simultaneously, the error is also running. But most of the time, only the error is occurring.\r\n\r\n## To Reproduce\r\n\r\nJust copy this code, and try it yourself.\r\n\r\n```javascript\r\nconst supabase = createClient(\r\n    'SUPABASE URL HERE',\r\n    'SUPABASE ANON KEY HERE'\r\n);\r\n\r\nsupabase\r\n    .from('*')\r\n    .on('*', (payload) => {\r\n        console.log('payload', payload);\r\n    })\r\n    .subscribe();\r\n```\r\n\r\nI've tried for all tables (`from('*')`) as well as individual tables (`from('messages')`).\r\nI've tried for all events (`on('*')`) as well as specific events (`on('INSERT')`)\r\n\r\n## Expected behavior\r\n\r\nThe realtime subscription should work as expected, whenever `INSERT`, `UPDATE` or `DELETE` events happen in any table, it should run the callback and log the output to screen.\r\n\r\n## Screenshots\r\n\r\n![image](https://user-images.githubusercontent.com/69994239/154793399-5a8ab2d1-d120-408e-85bd-e3b0095f2f95.png)\r\n\r\n## System information\r\n\r\n- OS: Windows Subsystem for Linux (Ubuntu) on Windows 10\r\n- Browser: Firefox, Chrome, Brave\r\n- Version of supabase-js: `1.30.3`\r\n- Version of Node.js: `16.13.1`",
            "author": {
                "login": "thesyedbasim"
            },
            "state": "CLOSED",
            "createdAt": "2022-02-19T08:38:28Z",
            "closedAt": "2022-02-21T06:50:33Z",
            "url": "https://github.com/supabase/supabase-js/issues/379",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs4-YGUp",
                    "body": "@thesyedbasim there was an issue authenticating realtime connections of new supabase projects that was fixed and deployed over the weekend. can you try creating a new supabase project and trying again? if that is inconvenient, please send an email to supabase@support.io with your project ref.",
                    "author": {
                        "login": "w3b6x9"
                    },
                    "createdAt": "2022-02-21T06:06:19Z",
                    "url": "https://github.com/supabase/supabase-js/issues/379#issuecomment-1046504745"
                },
                {
                    "id": "IC_kwDOD79Crs4-YLzr",
                    "body": "Thank you soooooooo much, @w3b6x9 \r\n\r\nI created a new project and the problem solved!\r\n\r\nI was just soo frustated because it was not working.\r\n\r\nThanks once again!",
                    "author": {
                        "login": "thesyedbasim"
                    },
                    "createdAt": "2022-02-21T06:50:33Z",
                    "url": "https://github.com/supabase/supabase-js/issues/379#issuecomment-1046527211"
                },
                {
                    "id": "IC_kwDOD79Crs5KAggd",
                    "body": "My Code not working\r\nfinal client = SupabaseClient(\r\n'http://localhost:54321',\r\n'MY ANON KEY'\r\n)\r\n\r\nfinal res = await client.from('schools').select().execute();\r\nfinal data = res.data;\r\n\r\nSHOWING CONNECTION REFUSE ........... PLEASE HELP\r\n",
                    "author": {
                        "login": "infolinematrix"
                    },
                    "createdAt": "2022-09-09T08:08:41Z",
                    "url": "https://github.com/supabase/supabase-js/issues/379#issuecomment-1241647133"
                },
                {
                    "id": "IC_kwDOD79Crs5KImAX",
                    "body": "I have the same issue since around the weekend. It did wonders in my nuxtjs3 project but then started with the 403. I even tried replacing the @nuxtjs/supabase module with the standalone client in a selfmade plugin, with no avail.\r\n\r\nTried checking the dashboard API logs, with no errors when comes to authenticate, but 403 in all tries to interact with the database from the nuxtjs project",
                    "author": {
                        "login": "Zeglius"
                    },
                    "createdAt": "2022-09-12T13:44:48Z",
                    "url": "https://github.com/supabase/supabase-js/issues/379#issuecomment-1243766807"
                },
                {
                    "id": "IC_kwDOD79Crs5Kr2nY",
                    "body": "@infolinematrix @Zeglius can you please submit support tickets here: https://app.supabase.com/support/new",
                    "author": {
                        "login": "w3b6x9"
                    },
                    "createdAt": "2022-09-20T23:17:48Z",
                    "url": "https://github.com/supabase/supabase-js/issues/379#issuecomment-1253009880"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5EP-rY",
            "number": 382,
            "title": "Allow filter, order for realtime subscription",
            "body": "# Feature request\r\n\r\nI want to be able to use .on() and .subscribe() with select, filter, order, ...\r\n",
            "author": {
                "login": "naptestdev"
            },
            "state": "CLOSED",
            "createdAt": "2022-02-20T14:44:14Z",
            "closedAt": "2022-02-20T23:53:30Z",
            "url": "https://github.com/supabase/supabase-js/issues/382",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs5Ee1UV",
            "number": 388,
            "title": "npm ERR! notarget No matching version found for node-fetch@2.6.7.",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nI am not able to install the npm package because of node-fetch@2.6.7 dependency, I tried to install the node-fetch@2.6.7 from npm but not able to install the specific version (even i see its available on npm)  and i updated the node-fetch package and it got updated to version 3.2.0, but still i am not able to install @supabase/supabase-js\r\n\r\n\r\n\r\nplease let me know how to fix this, thanks. \r\n\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Go to cmd\r\n2. run npm install @supabase/supabase-js\r\n\r\n## Expected behavior\r\n\r\nIt should install the package.\r\n\r\n## Screenshots\r\n<img width=\"576\" alt=\"error\" src=\"https://user-images.githubusercontent.com/65414441/155474550-32706523-0555-4824-a016-888e097a822f.png\">\r\n\r\n\r\n## System information\r\n\r\n- OS: Windows 10\r\n- Browser (if applies) firefox\r\n- Version of supabase-js: 1.30.6\r\n- Version of Node.js: v16.13.0\r\n\r\n## Additional context\r\n\r\n\r\n",
            "author": {
                "login": "jigarvishwakarma"
            },
            "state": "CLOSED",
            "createdAt": "2022-02-24T07:02:55Z",
            "closedAt": "2022-02-24T07:30:03Z",
            "url": "https://github.com/supabase/supabase-js/issues/388",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs4-jwHs",
                    "body": "Can you try running `npm install node-fetch@2.6.7` on a fresh (`npm init -y`) npm project? If there's likely something odd with your system/node installation since `node-fetch@2.6.7` [exists on npm](https://www.npmjs.com/package/node-fetch/v/2.6.7).",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-02-24T07:13:37Z",
                    "url": "https://github.com/supabase/supabase-js/issues/388#issuecomment-1049559532"
                },
                {
                    "id": "IC_kwDOD79Crs4-jwPt",
                    "body": "Ah, just saw your edit. Does it work if you do the `npm install` above? FTR I don't think you should update node-fetch - I'm not sure what happens if you actually use node-fetch for other things but it may have version conflicts and refuse to work.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-02-24T07:14:26Z",
                    "url": "https://github.com/supabase/supabase-js/issues/388#issuecomment-1049560045"
                },
                {
                    "id": "IC_kwDOD79Crs4-jysz",
                    "body": "Yes, when I tried to install on a fresh project, it worked. Then took the `\"@supabase/supabase-js\": \"^1.30.6\",` form that package.json and added in my project's package.json and ran `npm i` and it worked again, i don't how but i was able to install the @supabase/supabase-js@1.30.6.\r\n\r\n\r\nThank you so much for your help",
                    "author": {
                        "login": "jigarvishwakarma"
                    },
                    "createdAt": "2022-02-24T07:29:33Z",
                    "url": "https://github.com/supabase/supabase-js/issues/388#issuecomment-1049570099"
                },
                {
                    "id": "IC_kwDOD79Crs4-jy8I",
                    "body": "Probably it was my system issue, edit package.json and run `npm i`",
                    "author": {
                        "login": "jigarvishwakarma"
                    },
                    "createdAt": "2022-02-24T07:31:09Z",
                    "url": "https://github.com/supabase/supabase-js/issues/388#issuecomment-1049571080"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5EjRy5",
            "number": 389,
            "title": "Use the fetch available in the environment instead of cross-fetch",
            "body": "For cloudflare workers and deno where there is fetch available in the environment already, currently we need initialise the client like this\r\n\r\n```js\r\nconst supabase = createClient(\r\n    \"https://yyy.supabase.co\",  \"xxx\", {\r\n      fetch: fetch.bind(globalThis),\r\n    }\r\n  );\r\n```\r\n\r\nInstead we should use the following algorithm to get fetch\r\n- Use the custom fetch option when provided\r\n- Use the global fetch if available\r\n- else use cross-fetch \r\n\r\nWith Node implementing the fetch standard soon, `fetch` is a global we can reasonably assume the existence of in most envionments and only load `cross-fetch` as a polyfill. cross-fetch also assumes the presence of `XMLHttpRequest` which leads to a lot of errors. \r\n\r\n\r\n## Client libraries to update\r\n- [x] storage-js\r\n- [x] postgrest-js\r\n- [x] realtime-js (doesn't use fetch)\r\n- [x] gotrue-js",
            "author": {
                "login": "inian"
            },
            "state": "CLOSED",
            "createdAt": "2022-02-25T06:39:17Z",
            "closedAt": "2022-02-26T15:54:35Z",
            "url": "https://github.com/supabase/supabase-js/issues/389",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs4-t6L8",
                    "body": "Thanks a lot @soedirgo! \ud83d\udc9f  Can you make a final release to supabase-js with these?",
                    "author": {
                        "login": "inian"
                    },
                    "createdAt": "2022-02-26T15:43:46Z",
                    "url": "https://github.com/supabase/supabase-js/issues/389#issuecomment-1052222204"
                },
                {
                    "id": "IC_kwDOD79Crs5MudZW",
                    "body": "Is there probably a regressing in the 2.0 branch ... I have trouble getting the server side code to work.\r\n\r\n```bash\r\nrequire is not defined\r\nReferenceError: require is not defined\r\n    at [...]/node_modules/.pnpm/cross-fetch@3.1.5/node_modules/cross-fetch/dist/node-ponyfill.js:1:32\r\n    at instantiateModule (file:///[...]/node_modules/.pnpm/vite@3.1.8/node_modules/vite/dist/node/chunks/dep-4da11a5e.js:53445:15)\r\n\r\n```",
                    "author": {
                        "login": "Crenshinibon"
                    },
                    "createdAt": "2022-10-21T17:29:26Z",
                    "url": "https://github.com/supabase/supabase-js/issues/389#issuecomment-1287247446"
                },
                {
                    "id": "IC_kwDOD79Crs5MxW1I",
                    "body": "can you create a new issue with a reproduction and which server side environment you are using @Crenshinibon ?",
                    "author": {
                        "login": "inian"
                    },
                    "createdAt": "2022-10-23T05:12:47Z",
                    "url": "https://github.com/supabase/supabase-js/issues/389#issuecomment-1288006984"
                },
                {
                    "id": "IC_kwDOD79Crs5M63tG",
                    "body": "@inian I'm trying.",
                    "author": {
                        "login": "Crenshinibon"
                    },
                    "createdAt": "2022-10-25T12:47:43Z",
                    "url": "https://github.com/supabase/supabase-js/issues/389#issuecomment-1290500934"
                },
                {
                    "id": "IC_kwDOD79Crs5M_VUE",
                    "body": "https://github.com/supabase/supabase-js/issues/613",
                    "author": {
                        "login": "Crenshinibon"
                    },
                    "createdAt": "2022-10-26T08:22:12Z",
                    "url": "https://github.com/supabase/supabase-js/issues/389#issuecomment-1291670788"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5FOlyM",
            "number": 394,
            "title": "Use named interface types for User.app_metadata and User.user_metadata to allow declaration merging",
            "body": "# Chore\r\n\r\n## Describe the chore\r\n\r\nCurrently, the ```app_metadata``` and ```user_metadata``` fields of the ```User``` interface are defined as anonymous types like this:\r\n\r\n```\r\n app_metadata: {\r\n    provider?: string\r\n    [key: string]: any\r\n  }\r\n  user_metadata: {\r\n    [key: string]: any\r\n  }\r\n```\r\n\r\nThese fields often contain app specific data and each app has different expectations of what this data might contain. Hence, each app can provide its own types for each of these fields by using TypeScripts declaration merging (https://www.typescriptlang.org/docs/handbook/declaration-merging.html).\r\n\r\nHowever, declaration merging is ONLY possible for named interface types - NOT for anonymous types, like the ones currently used.\r\n\r\nThe necessary change to support this scenario is simple and backwards compatible. Here is what the proposed change might look like:\r\n\r\n```\r\n// In gotrue-js/types.ts\r\nexport interface AppMetadata {\r\n    provider?: string\r\n    [key: string]: any\r\n};\r\n\r\nexport interface UserMetadata {\r\n    [key: string]: any\r\n};\r\n\r\nexport interface User {\r\n  id: string\r\n  app_metadata: AppMetadata\r\n  user_metadata: UserMetadata\r\n  aud: string\r\n...\r\n}\r\n\r\n// In myapp.ts\r\ndeclare module '@supabase/gotrue-js' {\r\n  interface UserMetadata {\r\n    myField?: number;\r\n  }\r\n}\r\n\r\nsupabaseClient.auth.user()?.user_metadata.myField --> TS type checker and linters now know about myFIeld\r\n```",
            "author": {
                "login": "chipilov"
            },
            "state": "CLOSED",
            "createdAt": "2022-03-07T13:56:14Z",
            "closedAt": "2022-03-07T19:02:54Z",
            "url": "https://github.com/supabase/supabase-js/issues/394",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs4_Pf07",
                    "body": "Moved to the supabase/gotrue-js repo: https://github.com/supabase/gotrue-js/issues/241",
                    "author": {
                        "login": "chipilov"
                    },
                    "createdAt": "2022-03-07T19:02:54Z",
                    "url": "https://github.com/supabase/supabase-js/issues/394#issuecomment-1061027131"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5FZ6-c",
            "number": 396,
            "title": "Caching support?",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nCurrently the Supabase JS client feels like a simple wrapper around `fetch` and postgrest. Notably it doesn't provide anything in the way of caching of data to reduce requests to the server on repeated queries, and patchy network support. This is in contrast to Firebase which provides all of this out of the box. \r\n\r\n## Describe the solution you'd like\r\n\r\nBake caching into `supabase-js` so it's performant and robust by default, ideally with optimistic mutation support as well\r\n\r\n## Describe alternatives you've considered\r\n\r\nBYO querying layer that supports caching and eager mutations, like [react-query](https://react-query.tanstack.com/). Adds an extra layer of abstraction and complexity onto the client.\r\n\r\n## Additional context\r\n\r\nN/A\r\n",
            "author": {
                "login": "madeleineostoja"
            },
            "state": "OPEN",
            "createdAt": "2022-03-09T20:46:12Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/396",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5CCFwd",
                    "body": "SWR libraries should be kept separate so this library stays small and focused. GraphQL does caching. Have you looked at enabling the [GraphQL extension](https://supabase.com/blog/2022/03/29/graphql-now-available) on a database created after Mar 28 to see the impact on performance? Among other things, another option is to add Redis to your app. And if you wanted to see Redis within Supabase you can [log your vote here](https://github.com/supabase/supabase/discussions/6#discussioncomment-80178).",
                    "author": {
                        "login": "vhscom"
                    },
                    "createdAt": "2022-04-24T13:39:23Z",
                    "url": "https://github.com/supabase/supabase-js/issues/396#issuecomment-1107844125"
                },
                {
                    "id": "IC_kwDOD79Crs5CHY4H",
                    "body": "The supabase team has already said they're working on offline and optimistic update support, so I think this falls well within the purview of the JS SDK if that's the case. If that is no longer the case then getting clarity about exactly what the goals of this SDK is would allow dev teams like ours to better plan our tech stack until supabase hits stable. ",
                    "author": {
                        "login": "madeleineostoja"
                    },
                    "createdAt": "2022-04-26T02:26:51Z",
                    "url": "https://github.com/supabase/supabase-js/issues/396#issuecomment-1109233159"
                },
                {
                    "id": "IC_kwDOD79Crs5LJKiW",
                    "body": "I suppose this falls under https://github.com/supabase/supabase/discussions/357 - the client lib is the right place for it.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-28T10:16:41Z",
                    "url": "https://github.com/supabase/supabase-js/issues/396#issuecomment-1260693654"
                },
                {
                    "id": "IC_kwDOD79Crs5NFW73",
                    "body": "For my application I want to do `getUser` on lots of different pages, which does a new request every time. It would be nice if the User object from localstorage is retrieved instead if it is fresh enough (a couple minutes maybe)\r\n\r\nEDIT: Nvm I just found out you can use `getSession` for this, because the user is stored in the session",
                    "author": {
                        "login": "pingiun"
                    },
                    "createdAt": "2022-10-27T09:30:50Z",
                    "url": "https://github.com/supabase/supabase-js/issues/396#issuecomment-1293250295"
                },
                {
                    "id": "IC_kwDOD79Crs5VyoyV",
                    "body": "It seems like the idea of the js library (combined with RLS etc) is not having to build a backend, so IMO Redis seems like kind of overkill.\r\n\r\nCaching makes a ton of sense, not just to save db/network but for speed. It's sort of one of those features that you don't think about until you realize you don't have it. \r\n\r\nIs there any obvious way to pair another library with supabase-js to get this effect? Maybe using the rest endpoint with react query? Just spitballin. (I haven't tried the GraphQL extension to test perf fwiw)",
                    "author": {
                        "login": "sampl"
                    },
                    "createdAt": "2023-02-22T02:10:26Z",
                    "url": "https://github.com/supabase/supabase-js/issues/396#issuecomment-1439337621"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5GDLrx",
            "number": 400,
            "title": "`SupabaseClient` Request/Response Events? \ud83d\udcec",
            "body": "# Feature request\r\n\r\nIt would be handy for the SupabaseClient class to include an event emitter which emits before and after each query or rpc call. \r\n\r\nBelow is a quick sketch of some initial thoughts, but actual implementation would require more planning if interested.\r\n\r\nGiven Supabase already has emitters for `auth` events, it seems logical that queries might get the same treatment.\r\n\r\n\r\n## Describe the solution you'd like\r\n\r\n1. Add an `events` property to SupabaseClient:\r\n```typescript \r\npublic readonly events: EventEmitter = new EventEmitter()\r\n```\r\n\r\n2. Create type signatures and export events names:\r\n```typescript\r\nexport const [QUERY_REQUEST, QUERY_RESPONSE, RPC_REQUEST, RPC_RESPONSE] = [\r\n  \"QUERY_REQUEST\",\r\n  \"QUERY_RESPONSE\",\r\n  \"RPC_REQUEST\",\r\n  \"RPC_RESPONSE\"\r\n]\r\nexport const clientEvents = [\r\n  QUERY_REQUEST,\r\n  QUERY_RESPONSE,\r\n  RPC_REQUEST,\r\n  RPC_RESPONSE\r\n]\r\nexport type ClientEvent = typeof clientEvents[number]\r\n\r\nexport interface SupabaseClient {\r\n  on(\r\n    eventName: typeof RPC_REQUEST,\r\n    listener: (fn: string, params?: object) => void\r\n  ): this\r\n}\r\n```\r\n\r\n3. Emit table (or rpc) name and query params for each event.\r\nhttps://github.com/supabase/supabase-js/blob/v1.31.1/src/SupabaseClient.ts#L104\r\n\r\n```typescript\r\n\r\n  rpc<T = any>(\r\n    fn: string,\r\n    params?: object,\r\n    {\r\n      head = false,\r\n      count = null,\r\n    }: { head?: boolean; count?: null | 'exact' | 'planned' | 'estimated' } = {}\r\n  ) {\r\n    const rest = this._initPostgRESTClient()\r\n    this.events.emit(RPC_REQUEST, { fn, params })\r\n    const response = await rest.rpc<T>(fn, params, { head, count })\r\n    this.events.emit(RPC_RESPONSE, {fn, params, response })\r\n    return response\r\n  }\r\n\r\n\r\n```\r\n\r\n## Describe alternatives you've considered\r\n\r\nMaking my own emitter and hooks pre and post request. This is becoming unwieldy across several projects trying to keep changes in sync. \r\n\r\n \r\n",
            "author": {
                "login": "prescience-data"
            },
            "state": "OPEN",
            "createdAt": "2022-03-21T11:19:56Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/400",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5LJMVK",
                    "body": "Super late reply here, sorry about that. I wonder if custom fetch would do the job:\r\n\r\n```ts\r\nconst supabase = createClient('...', '...', {\r\n  global: {\r\n    fetch: (...args) => {\r\n      emitPreRequest()\r\n      return fetch(...args).then((res) => {\r\n        emitPostRequest()\r\n        return res\r\n      }\r\n    }\r\n  }\r\n})\r\n```",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-28T10:23:22Z",
                    "url": "https://github.com/supabase/supabase-js/issues/400#issuecomment-1260701002"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5GR-g_",
            "number": 404,
            "title": "Could not find a relationship between table1 and table 2",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nI have two tables, both joined through foreign keys (column of table 1 attached to id column of table 2). When i do inner join in sql editor, it works, but if i use supabase js client, it says that there is no relationship between two tables\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Install client\r\n2. Query using this \r\n```tsx\r\n  var { data, error } = await supabase.from(\"appointments\").select(`\r\n    user_id,\r\n    users (\r\n      full_name\r\n    )\r\n    `);\r\n```\r\n\r\nappointments has a foreign key on table \"users\" through \"user_id\" column. This exact same query works fine for my supabase-dart client. No errors on that. \r\n\r\n## Expected behavior\r\n\r\nShould fetch me the two columns as per documentation\r\n\r\n## Screenshots\r\n\r\nNone\r\n\r\n## System information\r\n\r\n- MacOS Monterey\r\n- Edge (latest)\r\n- NextJS 12.1\r\n- Supabase Client 1.31.1\r\n\r\n## Additional context\r\n\r\nEverything else works fine. It can fetch all columns of the table but just doesnt look at foreign keys. I have tried restarting server but no effect.\r\n",
            "author": {
                "login": "dukesx"
            },
            "state": "CLOSED",
            "createdAt": "2022-03-24T07:28:45Z",
            "closedAt": "2022-03-24T08:17:13Z",
            "url": "https://github.com/supabase/supabase-js/issues/404",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs5GYrhO",
            "number": 408,
            "title": "`data` return result from storage's `from.upload()`",
            "body": "```js\r\nconst { data, error } = await supabase\r\n  .storage\r\n  .from('avatars')\r\n  .upload('the/path/something-string.jpg', file, {\r\n    cacheControl: '3600',\r\n    upsert: false\r\n  })\r\n```\r\n\r\n```js\r\nconsole.log(data) // { Key: 'bucket/the/path/something-string.jpg' } <-- capital K\r\n```\r\n\r\nAlso, I change the filename to `something-else.jpg` in a before trigger, but it still returns `{ Key: 'bucket/the/path/something-string.jpg' }`. But I need the version of the path with the filename I changed (the true path to the uploaded file).\r\n\r\nIs this all expected behaviour? I was expecting `data` to be the `storage.objects` row it created. I can't find it documented.\r\n",
            "author": {
                "login": "wadclapp"
            },
            "state": "CLOSED",
            "createdAt": "2022-03-25T14:39:14Z",
            "closedAt": "2022-03-26T15:35:06Z",
            "url": "https://github.com/supabase/supabase-js/issues/408",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs5GbW5b",
            "number": 409,
            "title": "token fail to refresh when use multi tab",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\ntoken fail to refresh when use multi tab\r\n\r\n## To Reproduce\r\n\r\n1. on supabase dashboard, set token expiration, make it short e.g. 180 seconds\r\n2. signing in with `this.supabase.auth.signIn({email, password});`\r\n3. open site on new tab, so we have 2 tabs open now\r\n4. open devtools and wait for token refresh request\r\n\r\n## Expected behavior\r\n\r\nlike firebase https://firebase.google.com/docs/auth/admin/manage-sessions\r\n\r\n## Screenshots\r\n\r\n![Screenshot from 2022-03-26 13-48-07](https://user-images.githubusercontent.com/96174573/160228733-9eccb117-baed-4bcb-8ae7-b553c7e887d2.png)\r\n\r\n## System information\r\n\r\n- OS: [linuxmint]\r\n- Browser [chrome version 99]\r\n- Version of supabase-js: [1.32.1]\r\n- Version of Node.js: [14.17.0]\r\n",
            "author": {
                "login": "Deliana90"
            },
            "state": "CLOSED",
            "createdAt": "2022-03-26T07:41:58Z",
            "closedAt": "2022-04-21T02:49:55Z",
            "url": "https://github.com/supabase/supabase-js/issues/409",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5AWgfd",
                    "body": "Seems to be related to https://github.com/supabase/gotrue-js/issues/213",
                    "author": {
                        "login": "liaujianjie"
                    },
                    "createdAt": "2022-03-26T08:45:12Z",
                    "url": "https://github.com/supabase/supabase-js/issues/409#issuecomment-1079642077"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5HdL7S",
            "number": 424,
            "title": "Cloudflare Worker continued issue",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nI'm attempting to use the supabase-js client in a CFW. This issue is well reported on the README where the recommended solution is to override the fetch client with: `fetch: (...args) => fetch(...args),`.\r\n\r\nWhen I compile I get the error:\r\n\r\n```\r\nError: Something went wrong with the request to Cloudflare...\r\nUncaught TypeError: global.XMLHttpRequest is not a constructor\r\n  at line 2134 in sh\r\n  at line 2134\r\n  at line 2125\r\n  at line 2134\r\n  at line 2125\r\n  at line 2135\r\n  at line 2125\r\n  at line 2140\r\n  at line 2125\r\n  at line 2140\r\n [API code: 10021]\r\n```\r\n\r\nI'm using a basic wrangler.toml with a target set to JavaScript. I suspect that the basic compiler. I suspect that wrangler is still incorporating the cross-fetch library and it's not being shaken out so Workers panics when it sees a request to global.\r\n\r\nIs there an example of this working, perhaps with a webpack compile? If not has anyone else found a good workaround?\r\n\r\n## To Reproduce\r\n\r\n1. Setup worker.ts\r\n2. Add wrangler.toml with type: javascript\r\n3. Publish the worker\r\n4. Observer global.XMLHttpRequest error\r\n",
            "author": {
                "login": "davedbase"
            },
            "state": "CLOSED",
            "createdAt": "2022-04-10T01:38:01Z",
            "closedAt": "2022-04-12T14:18:46Z",
            "url": "https://github.com/supabase/supabase-js/issues/424",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5BPQ8p",
                    "body": "Hey Dave, here's an example Workers project based on https://github.com/cloudflare/worker-typescript-template: https://github.com/soedirgo/supabase-js-cfw",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-04-11T04:05:06Z",
                    "url": "https://github.com/supabase/supabase-js/issues/424#issuecomment-1094520617"
                },
                {
                    "id": "IC_kwDOD79Crs5BT3bl",
                    "body": "I haven't tried this yet since I'm using a vite build tool but I don't see this example replacing cross-fetch or overriding the default fetch. How is this overcoming the global.XMLHttpRequest is what I'm wondering? I'm not willing to switch to webpack at this point (or ever again :-p haha).",
                    "author": {
                        "login": "davedbase"
                    },
                    "createdAt": "2022-04-12T00:21:10Z",
                    "url": "https://github.com/supabase/supabase-js/issues/424#issuecomment-1095726821"
                },
                {
                    "id": "IC_kwDOD79Crs5BVnex",
                    "body": "If you don't supply a custom fetch, the client will first try to use the global fetch if available, and otherwise falls back to cross-fetch.\r\n\r\n> I'm not willing to switch to webpack at this point (or ever again\r\n\r\nAmen to that!",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-04-12T06:49:31Z",
                    "url": "https://github.com/supabase/supabase-js/issues/424#issuecomment-1096185777"
                },
                {
                    "id": "IC_kwDOD79Crs5BX7bf",
                    "body": "Yeah supplying the fetch value would still fail because it seems like cross-fetch is still being bundled and accessing the global.XMLHttpRequest.\r\n\r\nI got it working with the help of vite-plugin-cloudflare. Excellent replacement utility which uses a shim to ensure cross-fetch doesn't break things. Highly recommend using it.\r\n\r\nThanks for your help anyways.",
                    "author": {
                        "login": "davedbase"
                    },
                    "createdAt": "2022-04-12T14:18:45Z",
                    "url": "https://github.com/supabase/supabase-js/issues/424#issuecomment-1096791775"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5IUllW",
            "number": 432,
            "title": "Error updating user metadata",
            "body": "# Bug report\r\nFirst of all don't know if this issue is a bug.\r\n## Describe the bug\r\n\r\nI am confused cause updated users metadata several times and looked `https://github.com/supabase/gotrue` and read docs \ud83e\udd37\u200d\u2642\ufe0f\r\nTrying update user metadata got `{code: 500 error_id: \"ab946eeb-deb4-421d-8e04-05458a03aa54\" msg: \"Error updating user\"}`\r\nA clear and concise description of what the bug is.\r\n\r\nWhen user SignUp store some user metadata basically boolean flags to false. One of approach to change one flag is validating phone across twilio OTP verification service and once got success from twilio service update user metadata flag to true.\r\n\r\n## To Reproduce\r\nAdd some flags to SignUp file\r\n``` javascript\r\nconst { user, session, error } = await supabase.auth.signUp(\r\n        {\r\n          email: email,\r\n          password: password,\r\n        },\r\n        {\r\n          data: {\r\n            verified: false,\r\n            acceptTerms: true,\r\n          },\r\n        }\r\n      );\r\n```\r\nCreate file (I have material ui v5 Dialog) and call twilio otp verification service and got success = true\r\n\r\n```javascript\r\nconst handleVerify = () => {\r\n    if (user?.id && otp.length === 6) {\r\n      checkVerification(phone, otp).then((success) => {\r\n        if (!success) {\r\n          setInvalidCode(true);\r\n          console.log(\"code: 422 msg: A user with this phone number has already been registered\");\r\n        } // ToDo --> Error try again\r\n        console.log(success); // ToDo -> Alert Ok\r\n        updateAuthUserOde(phone);\r\n        return;\r\n      });\r\n    } else {\r\n      // ToDo -> create an alert\r\n      console.log(\"error otp code must have 6\");\r\n      return;\r\n    }\r\n  };\r\n```\r\nFunction to update users metadata\r\n```javascript\r\nconst updateAuthUserOde = async (phone) => {\r\n    try {\r\n      let { user, error } = await supabase.auth.update({\r\n        data: {\r\n          verified: true,\r\n          phone: phone,\r\n        },\r\n      });\r\n\r\n      if (error) throw error;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n```\r\nAnd got error 500\r\n\r\n![Screenshot 2022-04-23 at 18 16 30](https://user-images.githubusercontent.com/29748376/164914516-3fe82a9b-a6f6-4bfb-bcf7-37a5fd336d7c.png)\r\n\r\n![Screenshot 2022-04-23 at 18 22 29](https://user-images.githubusercontent.com/29748376/164914578-68186379-7714-4523-ae96-fabee410ca4c.png)\r\n\r\nMy users id isn't received \r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\nI will to create codesandbox with minimal neccesary files to reproduce that issue\r\n\r\n## Expected behavior\r\n\r\nA clear and concise description of what you expected to happen.\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser brave\r\n- Version of supabase-js: ^1.29.4\r\n- Version of Node.js: 16.13.0\r\n\r\n",
            "author": {
                "login": "ajgil"
            },
            "state": "CLOSED",
            "createdAt": "2022-04-23T16:32:29Z",
            "closedAt": "2022-04-23T17:00:47Z",
            "url": "https://github.com/supabase/supabase-js/issues/432",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5CA6Si",
                    "body": "Hey, just watched postgres logs and got an error on my trigger which updates public.profiles table. \r\nDeleted trigger and found, so I will put more attention next time.\r\nRegards",
                    "author": {
                        "login": "ajgil"
                    },
                    "createdAt": "2022-04-23T17:03:42Z",
                    "url": "https://github.com/supabase/supabase-js/issues/432#issuecomment-1107535010"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5I7dos",
            "number": 436,
            "title": "Ability to add arguments to supabase fetch (keepalive)",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nWe want to send unsaved changes to the server on page close using the `beforeunload` event.  In order for the connection to not get closed you have to add the `keepalive ` flag to the options of the fetch request.\r\n\r\n## Describe the solution you'd like\r\n\r\nIt would be ideal to be able to both pass fetch options on the creation of a new client as well as on every query. The first part is more or less already possible by replacing the fetch function.\r\n\r\n## Describe alternatives you've considered\r\n\r\nWe currently pass a custom fetch function to `createClient`\r\n\r\n```\r\nexport const supabase = createClient(\r\n\timport.meta.env.VITE_SUPABASE_URL as string,\r\n\timport.meta.env.VITE_SUPABASE_KEY as string,\r\n    {\r\n        fetch: (url, options) => fetch(url, { ...options, keepalive: true }),\r\n    }\r\n);\r\n```\r\n",
            "author": {
                "login": "Teiem"
            },
            "state": "CLOSED",
            "createdAt": "2022-05-03T01:47:18Z",
            "closedAt": "2022-08-04T06:03:32Z",
            "url": "https://github.com/supabase/supabase-js/issues/436",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5Hz8T9",
                    "body": "I think custom fetch is the go to solution right now - it's also how we inject headers into fetch: https://github.com/supabase/supabase-js/blob/0ec5c690143b8b453aa602d8a52ed8de18ab6c48/src/lib/fetch.ts#L25",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-08-04T06:03:32Z",
                    "url": "https://github.com/supabase/supabase-js/issues/436#issuecomment-1204798717"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5JLQQ2",
            "number": 438,
            "title": "Custom fetch per request",
            "body": "# Feature request\r\n\r\nWhen using the `load` function in Svelte Kit, it provides a [`fetch`](https://kit.svelte.dev/docs/loading) implementation that can be used.\r\n\r\nFrom the official docs:\r\n\r\n> SvelteKit's load receives an implementation of fetch, which has the following special properties:\r\n> - it has access to cookies on the server\r\n> - it can make requests against the app's own endpoints without issuing an HTTP call\r\n> - it makes a copy of the response when you use it, and then sends it embedded in the initial page load for hydration\r\n\r\n\r\n## Describe the solution you'd like\r\n\r\nI think that it would be necessary to specify the fetch on a \"per request\" basis. Something like this:\r\n\r\n```js\r\nsupabase.withFetch(fetch).from('mytable').select();\r\n```\r\n\r\nFull example:\r\n\r\n```html\r\n<script context=\"module\">\r\n  export const prerender = true;\r\n  import { supabase } from \"$lib/initSupabase\";\r\n\r\n  export async function load({ params, fetch, session, stuff }) {\r\n    let { data, error } = await supabase.from(\"users\").select();\r\n\r\n    if (error) {\r\n      return {\r\n        status: 500,\r\n      };\r\n    } else {\r\n      return {\r\n        props: {\r\n          users: data,\r\n        },\r\n      };\r\n    }\r\n  }\r\n</script>\r\n```\r\n\r\n## Describe alternatives you've considered\r\n\r\nMaybe I'm overthinking this. The way I've solved this so far is by creating a function:\r\n\r\n```js\r\nexport const getSupabase = (fetch) => createClient(url, anonKey, { fetch });\r\n```\r\n\r\nI then use it in my `load` function.\r\n\r\nIs there a downside in creating multiple clients like this? If not, this issue can probably be closed.",
            "author": {
                "login": "enyo"
            },
            "state": "OPEN",
            "createdAt": "2022-05-06T10:27:19Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/438",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5Cy90C",
                    "body": "Not sure about Auth and Realtime, but for REST this should be fine.\r\n\r\nAlternatively (and this is a bit hacky):\r\n\r\n```js\r\n// initSupabase.js\r\nlet currentFetch;\r\n\r\nexport function setFetch(fetch) { // call this per request\r\n  currentFetch = fetch;\r\n}\r\n\r\nexport const supabase = createClient(..., { fetch: (...args) => currentFetch(...args) });\r\n```",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-05-09T05:25:12Z",
                    "url": "https://github.com/supabase/supabase-js/issues/438#issuecomment-1120656642"
                },
                {
                    "id": "IC_kwDOD79Crs5Hyuen",
                    "body": "I don't think this will impact Realtime.",
                    "author": {
                        "login": "w3b6x9"
                    },
                    "createdAt": "2022-08-03T21:02:22Z",
                    "url": "https://github.com/supabase/supabase-js/issues/438#issuecomment-1204479911"
                },
                {
                    "id": "IC_kwDOD79Crs5LIvoy",
                    "body": "There shouldn't be an issue with using multiple clients, so closing this.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-28T08:44:10Z",
                    "url": "https://github.com/supabase/supabase-js/issues/438#issuecomment-1260583474"
                },
                {
                    "id": "IC_kwDOD79Crs5L8RUo",
                    "body": ">There shouldn't be an issue with using multiple clients, so closing this.\r\n\r\n@soedirgo I have definitely encountered an issue with multiple clients, specifically when using auth listeners.   I created a client factory, similar to OP, where each request to the SDK would create a new client.  I did this so I could inject dynamic headers and settings into the client for each execution.\r\n\r\n```js\r\nconst supa = (...params) => createClient(...params);\r\n\r\nsupa().from...\r\nsupa().auth...\r\n// etc\r\n```\r\n\r\nThe issue I found was that auth listeners/events are registered to a specific client instance, not to the auth events themselves.  I'm not sure if this is intended or not.\r\n\r\nSo in my example above, if I do this:\r\n\r\n```js\r\nconst supa = () => createClient(...);\r\n\r\nsupa().auth.onAuthStateChange((event, session) => {\r\n  if (event === 'SIGNED_OUT') {\r\n    console.log('Auth Event', event);\r\n  }\r\n});\r\n\r\nsupa().auth.signOut();\r\n```\r\n\r\nThe listener is never called, presumably because I signed out from a different client instance.  The auth token and user details are still removed from localStorage though.\r\n",
                    "author": {
                        "login": "5hee75"
                    },
                    "createdAt": "2022-10-11T05:01:03Z",
                    "url": "https://github.com/supabase/supabase-js/issues/438#issuecomment-1274090792"
                },
                {
                    "id": "IC_kwDOD79Crs5L9Bus",
                    "body": "Oh man @5hee75 I was wondering forever why this happened in my app. This explains it perfectly.",
                    "author": {
                        "login": "enyo"
                    },
                    "createdAt": "2022-10-11T08:19:50Z",
                    "url": "https://github.com/supabase/supabase-js/issues/438#issuecomment-1274289068"
                },
                {
                    "id": "IC_kwDOD79Crs5UOhgY",
                    "body": "I'm doing a lot of SvelteKit these days and I'd definitely like to see the ability to specify the fetch to use per request.  Although everything works in my project, I'm not happy seeing the message from svelte about using window.fetch rather then their version. And I'm not convinced that creating a new database connection for each query is a good thing.",
                    "author": {
                        "login": "johndeighan"
                    },
                    "createdAt": "2023-02-02T03:16:23Z",
                    "url": "https://github.com/supabase/supabase-js/issues/438#issuecomment-1413093400"
                },
                {
                    "id": "IC_kwDOD79Crs5V0Ym3",
                    "body": "I haven\u2019t yet found out why exactly, but I upgraded svelte kit + supabase, and now using a new supabase instance for an individual route breaks the routing completely. The page just never stops loading and there is no error. It\u2019s very strange but it has definitely something to do with using a different supabase instance because if I just use the global instance it works fine.\r\n\r\n**EDIT**: I realised that even just calling `createClient()` will break page rendering, even if then the singleton supabase instance is used. I assume that this has something to do with the auth state being broken.",
                    "author": {
                        "login": "enyo"
                    },
                    "createdAt": "2023-02-22T10:40:36Z",
                    "url": "https://github.com/supabase/supabase-js/issues/438#issuecomment-1439795639"
                },
                {
                    "id": "IC_kwDOD79Crs5V0ji0",
                    "body": "> Not sure about Auth and Realtime, but for REST this should be fine.\r\n> \r\n> Alternatively (and this is a bit hacky):\r\n> \r\n> ```js\r\n> // initSupabase.js\r\n> let currentFetch;\r\n> \r\n> export function setFetch(fetch) { // call this per request\r\n>   currentFetch = fetch;\r\n> }\r\n> \r\n> export const supabase = createClient(..., { fetch: (...args) => currentFetch(...args) });\r\n> ```\r\n\r\n@soedirgo  This would be an acceptable solution but it runs into race conditions. Especially on the server during SSR this might mix up two requests.",
                    "author": {
                        "login": "enyo"
                    },
                    "createdAt": "2023-02-22T11:14:12Z",
                    "url": "https://github.com/supabase/supabase-js/issues/438#issuecomment-1439840436"
                },
                {
                    "id": "IC_kwDOD79Crs5cs4Ec",
                    "body": "This would be a great addition. I like to use the handleFetch hook from SvelteKit to log all fetches but for that to work Supabase would have to use the SvelteKit provided fetch function.",
                    "author": {
                        "login": "MLNW"
                    },
                    "createdAt": "2023-05-19T21:23:43Z",
                    "url": "https://github.com/supabase/supabase-js/issues/438#issuecomment-1555267868"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5JpZC6",
            "number": 441,
            "title": "useRintimeConfig() with private key... ",
            "body": "# Feature request\r\n\r\nNUXT_PUBLIC_SUPABASE_URL= supabase url\r\nNUXT_SUPABASE_KEY = api_secret_token\r\n\r\n",
            "author": {
                "login": "Imanullah"
            },
            "state": "CLOSED",
            "createdAt": "2022-05-13T19:05:14Z",
            "closedAt": "2022-09-28T09:07:14Z",
            "url": "https://github.com/supabase/supabase-js/issues/441",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5LI2cj",
                    "body": "Issue is unclear, so closing this. Please follow the [contributing guidelines](https://github.com/supabase/.github/blob/main/CONTRIBUTING.md) next time.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-28T09:07:14Z",
                    "url": "https://github.com/supabase/supabase-js/issues/441#issuecomment-1260611363"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5JqNqe",
            "number": 442,
            "title": "auth.onAuthStateChanged triggers on tab switch",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\nauth.onAuthStateChanged triggers on tab switch\r\n\r\n## To Reproduce\r\n\r\n1. Create starter project using this guide https://supabase.com/docs/guides/with-vue-3\r\n\r\n2. add lines to src/main.js\r\n```\r\nimport { supabase } from \"./supabase\";\r\nsupabase.auth.onAuthStateChange(console.log);\r\n```\r\n\r\n3. run `npm run dev`\r\n4. open `http://localhost:3000` in browser\r\n5. open dev console\r\n6. Switch to another tab\r\n7. Switch back to previous tab\r\n\r\n## Expected behavior\r\n1 SIGNED_IN event in console\r\n\r\n## Actuall behaviour\r\n2 SIGNED_IN event in console\r\n\r\n## Screenshots\r\nhttps://www.loom.com/share/56993404e5f348d2bb23b68b0ad15096\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser (if applies) brave\r\n- Version of supabase-js: 1.35.3\r\n- Version of Node.js: 16.14.0\r\n",
            "author": {
                "login": "noty-nick"
            },
            "state": "CLOSED",
            "createdAt": "2022-05-14T00:08:27Z",
            "closedAt": "2022-05-17T10:08:28Z",
            "url": "https://github.com/supabase/supabase-js/issues/442",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5DJ9fZ",
                    "body": "`createClient(supabaseUrl, supabaseKey, { ...otherOptions, multiTab: false })` should disable this behavior. I am not sure it's been documented (yet), but I found this option in `SupabaseClientOptions` and it fixed the issue for me.",
                    "author": {
                        "login": "OrangeNote"
                    },
                    "createdAt": "2022-05-14T10:08:55Z",
                    "url": "https://github.com/supabase/supabase-js/issues/442#issuecomment-1126684633"
                },
                {
                    "id": "IC_kwDOD79Crs5DKyyi",
                    "body": "@OrangeNote thanks, I will try that\r\n\r\nDo you mean this is expected behaviour?",
                    "author": {
                        "login": "noty-nick"
                    },
                    "createdAt": "2022-05-15T10:19:26Z",
                    "url": "https://github.com/supabase/supabase-js/issues/442#issuecomment-1126902946"
                },
                {
                    "id": "IC_kwDOD79Crs5DOozQ",
                    "body": "I'm not sure if it's intentional or if it's an actual issue. I wonder if the object actually changes or if it's always the same after each event. If it stays the same, then I'd say it's a bug or a limitation of some sort when the `multiTab` option is set.",
                    "author": {
                        "login": "OrangeNote"
                    },
                    "createdAt": "2022-05-16T16:56:55Z",
                    "url": "https://github.com/supabase/supabase-js/issues/442#issuecomment-1127910608"
                },
                {
                    "id": "IC_kwDOD79Crs5DRkM1",
                    "body": "> `createClient(supabaseUrl, supabaseKey, { ...otherOptions, multiTab: false })` should disable this behavior. I am not sure it's been documented (yet), but I found this option in `SupabaseClientOptions` and it fixed the issue for me.\r\n\r\nThis workaround works for me, I'm closing this issue, as it looks like not a bug, but expected behaviour",
                    "author": {
                        "login": "noty-nick"
                    },
                    "createdAt": "2022-05-17T10:08:28Z",
                    "url": "https://github.com/supabase/supabase-js/issues/442#issuecomment-1128678197"
                },
                {
                    "id": "IC_kwDOD79Crs5OBqx6",
                    "body": "It looks like that workaround has been removed. \r\n\r\nAny guidance now that the multiTab option is no longer supported?\r\n\r\nhttps://github.com/supabase/supabase-js/commit/39b2642d156caa412afaef788fdfa5a7f50e7e6f\r\n",
                    "author": {
                        "login": "sjones512"
                    },
                    "createdAt": "2022-11-09T17:00:08Z",
                    "url": "https://github.com/supabase/supabase-js/issues/442#issuecomment-1309060218"
                },
                {
                    "id": "IC_kwDOD79Crs5OvDBb",
                    "body": "@sjones512 I noticed that that workaround was removed too, but in the [release notes for v2][release-notes] I found a helpful hint. \r\n\r\n> Deprecated and removed setting for multitab support because getSession() and gotrue\u2019s reuse interval setting takes care of session management across multiple tabs ([PR](https://github.com/supabase/gotrue-js/pull/366))\r\n\r\nIn my case, the [React user-management quickstart project][quickstart], I fixed the unwanted XHR to the auth backend by making the following change in `src/App.js`. I hope it helps you too!\r\n```js\r\n// Before\r\nuseEffect(() => {\r\n  supabase.auth.getSession().then(({ data: { session } }) => {\r\n    setSession(session)\r\n  })\r\n\r\n  supabase.auth.onAuthStateChange((_event, session) => {\r\n    setSession(session)\r\n  })\r\n}, [])\r\n\r\n// After\r\nuseEffect(() => {\r\n  supabase.auth.getSession().then(({ data: { session } }) => {\r\n    setSession(session)\r\n  })\r\n\r\n  supabase.auth.onAuthStateChange((event, _session) => {\r\n    if (EVENT === 'SIGN_OUT') {\r\n      setSession(null)\r\n    }\r\n  })\r\n}, [])\r\n```\r\n\r\n[release-notes]: https://supabase.com/docs/reference/javascript/release-notes\r\n[quickstart]: https://github.com/supabase/supabase/tree/master/examples/user-management/react-user-management",
                    "author": {
                        "login": "ian-s-mcb"
                    },
                    "createdAt": "2022-11-19T19:45:52Z",
                    "url": "https://github.com/supabase/supabase-js/issues/442#issuecomment-1320955995"
                },
                {
                    "id": "IC_kwDOD79Crs5PDXgM",
                    "body": "Could we reopen this? I think we need another event that is being fired when we change tabs. Because `SIGNED_IN`, from my perspective, means that a user just has signed in, or got signed in, and not just the session refreshed due to changed tabs. \r\n\r\nMaybe it would make sense to have a `SIGNED_IN_REFRESH` or something, that would be fired.\r\n\r\nI am currently handing the `SIGNED_IN` so that it redirects to the home route of my app, so everytime a user changes between tabs, it'll redirect them, which is not particularly what a user would want.",
                    "author": {
                        "login": "madebyfabian"
                    },
                    "createdAt": "2022-11-24T10:53:59Z",
                    "url": "https://github.com/supabase/supabase-js/issues/442#issuecomment-1326282764"
                },
                {
                    "id": "IC_kwDOD79Crs5QZ1Oy",
                    "body": "Possible workaround:\r\n\r\n```js\r\nlet session = null;\r\n\r\nsupabase.auth.getSession().then(async ({ data }) => {\r\n  if (data.session) {\r\n    session = data.session;\r\n  }\r\n});\r\n\r\nsupabase.auth.onAuthStateChange((event, _session) => {\r\n  if (event === 'SIGNED_IN' && !session && _session) {\r\n    // Only triggered on sign in\r\n  }\r\n  session.value = _session;\r\n});\r\n```",
                    "author": {
                        "login": "rdunk"
                    },
                    "createdAt": "2022-12-13T16:17:25Z",
                    "url": "https://github.com/supabase/supabase-js/issues/442#issuecomment-1348948914"
                },
                {
                    "id": "IC_kwDOD79Crs5Rn0s8",
                    "body": "For SvelteKit users, I did this:\r\n\r\n`+layout.svelte`\r\n```js\r\nlet session = null;\r\nonMount(async () => {\r\n    // get the current session\r\n    const {\r\n        data\r\n    } = await supabaseClient.auth.getSession();\r\n    session = data.session;\r\n\r\n    // refresh: we did this when user is login with a provider (e.g google)\r\n    if (session && $page.data.session == null) {\r\n        await invalidateAll();\r\n        // location.reload();\r\n    }\r\n\r\n    // supabase auth listener\r\n    const {\r\n        data: {\r\n            subscription\r\n        }\r\n    } = supabaseClient.auth.onAuthStateChange((event, new_session) => {\r\n        /*\r\n        \tWe did this condition cuz of this 'onAuthStateChange' function is triggered\r\n        \tWhenever the user changes the browser tab!\r\n        \tSo - we do not do anything if the session is not changed!\r\n        */\r\n        if (session?.access_token != new_session?.access_token) {\r\n            console.log('session changed');\r\n            session = new_session;\r\n\r\n            // reload all routes depends on supabase session\r\n            invalidate('supabase:auth');\r\n            if (event == 'SIGNED_IN') {\r\n                // Do what you want here\r\n            }\r\n        }\r\n    });\r\n    return () => {\r\n        subscription.unsubscribe();\r\n    };\r\n});\r\n```",
                    "author": {
                        "login": "zakaria-chahboun"
                    },
                    "createdAt": "2023-01-03T04:54:39Z",
                    "url": "https://github.com/supabase/supabase-js/issues/442#issuecomment-1369393980"
                },
                {
                    "id": "IC_kwDOD79Crs5fvWBE",
                    "body": "For nuxt users using @nuxtjs/supabase. Seems to be working, thanks @rdunk!\r\n\r\n```ts\r\n<script lang=\"ts\" setup>\r\nimport { useUsers } from \"./store/user\";\r\nimport { Subscription, Session } from \"@supabase/gotrue-js\";\r\n\r\nlet authStateSub: Subscription | null = null;\r\nlet session: Session | null = null;\r\n\r\nonMounted(async () => {\r\n  await useSupabaseClient()\r\n    .auth.getSession()\r\n    .then(({ data }) => {\r\n      if (data.session) {\r\n        session = data.session;\r\n      }\r\n    });\r\n\r\n  authStateSub = useSupabaseClient().auth.onAuthStateChange(\r\n    async (event, _session) => {\r\n      console.log(event, session);\r\n      if (!session && _session && event === \"SIGNED_IN\") {\r\n        console.log(\"user logged in\", _session.user);\r\n        await useUsers().updateOnlineStatus(_session.user.id, true);\r\n        session = _session;\r\n      } else if (session && event === \"SIGNED_OUT\") {\r\n        console.log(\"user logged out\", session.user);\r\n        await useUsers().updateOnlineStatus(session.user.id, false);\r\n        session = null;\r\n      }\r\n    }\r\n  ).data.subscription;\r\n});\r\n\r\nonUnmounted(() => {\r\n  if (authStateSub) {\r\n    authStateSub.unsubscribe();\r\n  }\r\n});\r\n```",
                    "author": {
                        "login": "MEAN-James"
                    },
                    "createdAt": "2023-06-25T20:01:56Z",
                    "url": "https://github.com/supabase/supabase-js/issues/442#issuecomment-1606246468"
                },
                {
                    "id": "IC_kwDOD79Crs5oeI64",
                    "body": "Hi,\r\nnot sure if it is related but I want to share my experience with a  similar issue.\r\n\r\nBasically, I was using the `auth.onAuthStateChange` callback to make a request to the DB `supabase.from('table')...`.\r\n\r\nThis resulted in a weird behaviour that was probably causing an internal loop (my guess), as any consequent query was getting stuck.\r\n\r\nI just removed the query from the callback \r\n",
                    "author": {
                        "login": "mijorus"
                    },
                    "createdAt": "2023-10-09T10:16:04Z",
                    "url": "https://github.com/supabase/supabase-js/issues/442#issuecomment-1752731320"
                },
                {
                    "id": "IC_kwDOD79Crs5rCRp3",
                    "body": "> For SvelteKit users, I did this:\r\n> \r\n> `+layout.svelte`\r\n> \r\n> ```js\r\n> let session = null;\r\n> onMount(async () => {\r\n>     // get the current session\r\n>     const {\r\n>         data\r\n>     } = await supabaseClient.auth.getSession();\r\n>     session = data.session;\r\n> \r\n>     // refresh: we did this when user is login with a provider (e.g google)\r\n>     if (session && $page.data.session == null) {\r\n>         await invalidateAll();\r\n>         // location.reload();\r\n>     }\r\n> \r\n>     // supabase auth listener\r\n>     const {\r\n>         data: {\r\n>             subscription\r\n>         }\r\n>     } = supabaseClient.auth.onAuthStateChange((event, new_session) => {\r\n>         /*\r\n>         \tWe did this condition cuz of this 'onAuthStateChange' function is triggered\r\n>         \tWhenever the user changes the browser tab!\r\n>         \tSo - we do not do anything if the session is not changed!\r\n>         */\r\n>         if (session?.access_token != new_session?.access_token) {\r\n>             console.log('session changed');\r\n>             session = new_session;\r\n> \r\n>             // reload all routes depends on supabase session\r\n>             invalidate('supabase:auth');\r\n>             if (event == 'SIGNED_IN') {\r\n>                 // Do what you want here\r\n>             }\r\n>         }\r\n>     });\r\n>     return () => {\r\n>         subscription.unsubscribe();\r\n>     };\r\n> });\r\n> ```\r\n\r\nDoesn't work, if I have 2 tabs opened, if i log out on 1 tab, the other tab still can browse protected route.",
                    "author": {
                        "login": "internpoon"
                    },
                    "createdAt": "2023-11-06T18:06:08Z",
                    "url": "https://github.com/supabase/supabase-js/issues/442#issuecomment-1795758711"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5Js8WB",
            "number": 444,
            "title": "Build warnings due to imports marked as having no side effects",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen building my app, I get 10 warnings like this originating from supabase-js:\r\n```\r\n03:48:54.139 | \u25b2 [WARNING] Ignoring this import because \"node_modules/@supabase/supabase-js/dist/main/index.js\" was marked as having no side effects\r\n03:48:54.139 | \u00a0\r\n03:48:54.139 | .svelte-kit/output/server/entries/endpoints/api/submit-form.ts.js:2:7:\r\n03:48:54.139 | 2 \u2502 import \"@supabase/supabase-js\";\r\n03:48:54.139 | \u2575        ~~~~~~~~~~~~~~~~~~~~~~~\r\n03:48:54.139 | \u00a0\r\n03:48:54.140 | \"sideEffects\" is false in the enclosing \"package.json\" file\r\n03:48:54.140 | \u00a0\r\n03:48:54.140 | node_modules/@supabase/supabase-js/package.json:21:2:\r\n03:48:54.140 | 21 \u2502   \"sideEffects\": false,\r\n03:48:54.140 | \u2575   ~~~~~~~~~~~~~\r\n```\r\n\r\nI'm sure there are good reasons for it being like this, but hopefully these can be avoided.\r\n\r\n## To Reproduce\r\n\r\nBuild a SvelteKit site that imports supabase-js\r\n\r\n## Expected behavior\r\n\r\nWould ideally expect have no warnings\r\n\r\n## System information\r\n\r\n- Version of supabase-js: 1.35.3\r\n- Version of Node.js: 16.13.1",
            "author": {
                "login": "probablykasper"
            },
            "state": "CLOSED",
            "createdAt": "2022-05-16T01:56:10Z",
            "closedAt": "2022-07-05T05:58:47Z",
            "url": "https://github.com/supabase/supabase-js/issues/444",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5DQ8Vj",
                    "body": "Mind if I ask what the `import \"@supabase/supabase-js\";` line is for? I wouldn't have expected that to have side effects.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-05-17T07:29:28Z",
                    "url": "https://github.com/supabase/supabase-js/issues/444#issuecomment-1128514915"
                },
                {
                    "id": "IC_kwDOD79Crs5DShV2",
                    "body": "Oh, I actually thought that was something internal from `supabase-js`. `submit-form-ts` doesn't import anything from `supabase-js` at all, it just imports other files that themselves import from `supabase-js`\r\n\r\nMaybe it's a SvelteKit or Vite issue",
                    "author": {
                        "login": "probablykasper"
                    },
                    "createdAt": "2022-05-17T14:16:51Z",
                    "url": "https://github.com/supabase/supabase-js/issues/444#issuecomment-1128928630"
                },
                {
                    "id": "IC_kwDOD79Crs5Evswb",
                    "body": "I am having the same issue. Watching.",
                    "author": {
                        "login": "N00nDay"
                    },
                    "createdAt": "2022-06-13T01:17:09Z",
                    "url": "https://github.com/supabase/supabase-js/issues/444#issuecomment-1153354779"
                },
                {
                    "id": "IC_kwDOD79Crs5GAR86",
                    "body": "Just stumbled across this same issue. In my case, using `date-fns ^2.28.0` and the [Cloudflare Adapter](https://github.com/sveltejs/kit/tree/master/packages/adapter-cloudflare).\r\n\r\nOnly use for `date-fns` is to `import { format } from 'date-fns'` on a component, then warning is displayed.\r\n\r\n<details>\r\n<summary>Build Warning</summary>\r\n\r\n```shell\r\n\u25b2 [WARNING] Ignoring this import because \"node_modules/date-fns/esm/index.js\" was marked as having no side effects [ignored-bare-import]\r\n\r\n    .svelte-kit/output/server/entries/pages/blog/index.svelte.js:10:49:\r\n      10 \u2502 import \"date-fns\";\r\n         \u2575 ~~~~~~~~~~\r\n\r\n  \"sideEffects\" is false in the enclosing \"package.json\" file\r\n\r\n    node_modules/date-fns/package.json:4:2:\r\n      4 \u2502   \"sideEffects\": false,\r\n        \u2575   ~~~~~~~~~~~~~\r\n```\r\n</details>",
                    "author": {
                        "login": "iksaku"
                    },
                    "createdAt": "2022-07-05T00:40:22Z",
                    "url": "https://github.com/supabase/supabase-js/issues/444#issuecomment-1174478650"
                },
                {
                    "id": "IC_kwDOD79Crs5GA7XH",
                    "body": "@iksaku so I guess this is a SvelteKit issue? Looks like it's tracked on https://github.com/sveltejs/kit/issues/4644, so closing this issue.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-07-05T05:58:47Z",
                    "url": "https://github.com/supabase/supabase-js/issues/444#issuecomment-1174648263"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5J5_dt",
            "number": 445,
            "title": "`range()` with `order()` return inconsistent results",
            "body": "# Bug\r\n\r\n## Description\r\n\r\nI'm using the select query with range() and order() together. The return data **is sorted differently** depending on upper limit of the range. \r\n\r\n## To Reproduce\r\n\r\n1. Create a DB table\r\n\r\n```\r\ncreate table \"cities\" (\r\n  id integer,\r\n  population integer,\r\n)\r\n```\r\n2. Populate it with 1000 entries (it's important to have many entries). `ID` values go from 1 to 1001 and `population` value on all entries should be 0. So the result will be something like this:\r\n\r\n| id | population |  \r\n|----|------------|\r\n| 1  | 0          |  \r\n| 2  | 0          |  \r\n| 3  | 0          |   \r\n| ... | ...         |   \r\n| 1001 | 0         |   \r\n\r\n3. Lets query data with `order()` and `range()` in place\r\n\r\n`const {data: range100} = await supabase.from('cities').select('*').order('population', { ascending: false }).range(0,100)`\r\n\r\n`const {data: range500} = await supabase.from('cities').select('*').order('population', { ascending: false }).range(0,500)`\r\n\r\nIf we now take a look at `range500[0]` and `range100[0]` they won't be the same object. Different order! \r\n\r\n## Expected behavior\r\n\r\nThe order is the same. \r\n\r\n## Screenshots\r\n\r\nThe issue can be reproduced in Supabase GUI as well by tweaking the visible Rows amount.  Here's a video: \r\n\r\nhttps://user-images.githubusercontent.com/9533646/169045461-b3a42972-ef5e-4684-8e64-46299e344672.mov\r\n\r\n\r\n",
            "author": {
                "login": "Dizotoff"
            },
            "state": "CLOSED",
            "createdAt": "2022-05-18T13:06:41Z",
            "closedAt": "2022-05-21T06:24:09Z",
            "url": "https://github.com/supabase/supabase-js/issues/445",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5DkIhA",
                    "body": "Since you're ordering by the same value(`population=0`) the order cannot be guaranteed. \r\n\r\nThis can be reproduced by:\r\n\r\n```sql\r\ncreate table cities (\r\n  id integer,\r\n  population integer\r\n);\r\ninsert into cities select x, 0 from generate_series(1, 1000) x;\r\n\r\n-- offset x limit y is what range does essentially\r\nselect * from cities order by population desc offset 0 limit 10;\r\n id | population\r\n----+------------\r\n  2 |          0\r\n  3 |          0\r\n  4 |          0\r\n  5 |          0\r\n  6 |          0\r\n  7 |          0\r\n  8 |          0\r\n  9 |          0\r\n 10 |          0\r\n  1 |          0\r\n```\r\n\r\nYou can order by id additionally to ensure order:\r\n\r\n```sql\r\nselect * from cities order by id asc, population desc offset 0 limit 10;\r\n id | population\r\n----+------------\r\n  1 |          0\r\n  2 |          0\r\n  3 |          0\r\n  4 |          0\r\n  5 |          0\r\n  6 |          0\r\n  7 |          0\r\n  8 |          0\r\n  9 |          0\r\n 10 |          0\r\n```\r\n\r\nIn js: \r\n```js\r\nconst {data: range100} =await supabase\r\n  .from('cities').select('*').order('population', { ascending: false }).order('id', { ascending: true }).range(0,10)\r\n```",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-05-21T06:16:51Z",
                    "url": "https://github.com/supabase/supabase-js/issues/445#issuecomment-1133545536"
                },
                {
                    "id": "IC_kwDOD79Crs5DkIv-",
                    "body": "Thanks for the clarification @steve-chavez \r\nThis helped a lot! ",
                    "author": {
                        "login": "Dizotoff"
                    },
                    "createdAt": "2022-05-21T06:24:09Z",
                    "url": "https://github.com/supabase/supabase-js/issues/445#issuecomment-1133546494"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5KickB",
            "number": 448,
            "title": "Export openapi to zod",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nCurrently it is possible to easily generate types as described [here](https://supabase.com/docs/guides/api/generating-types).\r\n\r\n## Describe the solution you'd like\r\n\r\nIt would be awesome to go a step further and be able to generate zod types instead (and thereby also types). I wonder if there is something available in the community and how many would like to see something like this.\r\n\r\n## Describe alternatives you've considered\r\n\r\nI've come across this [tool](https://github.com/josejulio/openapi2typescript/tree/main/packages/cli) but unfortunately it [doesn't seem to work with the schemas produced from supabase](https://github.com/josejulio/openapi2typescript/issues/8)\r\n\r\n",
            "author": {
                "login": "NixBiks"
            },
            "state": "CLOSED",
            "createdAt": "2022-05-27T09:24:47Z",
            "closedAt": "2022-09-28T10:28:11Z",
            "url": "https://github.com/supabase/supabase-js/issues/448",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5Gh2f6",
                    "body": "@supabase/api-team \r\nAssigning it to the PIC of the team to take care of this. ",
                    "author": {
                        "login": "monicakh"
                    },
                    "createdAt": "2022-07-13T14:12:55Z",
                    "url": "https://github.com/supabase/supabase-js/issues/448#issuecomment-1183279098"
                },
                {
                    "id": "IC_kwDOD79Crs5GlShS",
                    "body": "I have also seen a new type gen endpoint and a gen typescript types command on the CLI. Both are undocumented and not officially released yet, but maybe the transformation into zod schemas can be further improved by these new features? ",
                    "author": {
                        "login": "psteinroe"
                    },
                    "createdAt": "2022-07-14T08:54:13Z",
                    "url": "https://github.com/supabase/supabase-js/issues/448#issuecomment-1184180306"
                },
                {
                    "id": "IC_kwDOD79Crs5GlUUh",
                    "body": "Yup, they're not officially released yet. They export plain TS types though - can that be consumed directly by Zod?",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-07-14T09:01:34Z",
                    "url": "https://github.com/supabase/supabase-js/issues/448#issuecomment-1184187681"
                },
                {
                    "id": "IC_kwDOD79Crs5LJNpJ",
                    "body": "So with the new [typegen](https://supabase.com/docs/reference/javascript/next/typescript-support), we probably won't be relying on OpenAPI. I'm still not familiar with Zod, but [this tool](https://github.com/fabien0102/ts-to-zod) seems like it might work.\r\n\r\nFeel free to comment here if it doesn't, though there's currently no plan to create an official tool that outputs OpenAPI/JSON schema/Zod/etc.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-28T10:28:11Z",
                    "url": "https://github.com/supabase/supabase-js/issues/448#issuecomment-1260706377"
                },
                {
                    "id": "IC_kwDOD79Crs5Q34fk",
                    "body": "I just released [supabase-to-zod](https://github.com/psteinroe/supabase-to-zod). It transforms the types generated by the supabase cli into a format that is accepted by ts-to-zod, before generating the zod schemas. ",
                    "author": {
                        "login": "psteinroe"
                    },
                    "createdAt": "2022-12-18T15:57:30Z",
                    "url": "https://github.com/supabase/supabase-js/issues/448#issuecomment-1356826596"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5KtnlB",
            "number": 449,
            "title": "Signout doesn't behave as expected (you cannot sign in with user 1, sign out and then sign in with user 2)",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nThe OAuth signout behaviour doesn't behave as I believe it should. In other OAuth authentication flows with other (non-supabase) applications, you can sign in and out with different users, and be shown a prompt to authenticate each time. It is not possible to authenticate with different users in the same browser session using supabase OAuth authentication.\r\n\r\n## To Reproduce\r\n\r\nThis has been the same on all supabase examples I could find (including Teta https://teta.so/ & Supabase.com itself), and using different OAuth profiles (I have validated this using the Google OAuth flow but it also happens for the GitHub OAuth flow too)\r\n\r\n1. Go to supabase.com\r\n2. Sign in using any github profile by clicking \"Sign In With Github\"\r\n3. Click logout on the far left hand menu.\r\n4. Attempt to log in with a different github profile by clicking \"Sign In With Github\"\r\n5. See that you are logged in to supabase with the first profile you used\r\n\r\n## Expected behavior\r\n\r\nYou can log in and out n times with different profiles and you are shown the modal to select what user you'd like to log in with when you click \"Sign In With Github\" or \"Sign in with Google\" in different implementations. I can imagine there may be a nicer workflow whereby you do not need to log in with a user each time (for expedience and a smooth user experience), however I think there should be the option to allow re-authentication when a user clicks signout.\r\n\r\n## Screenshots\r\n\r\n-\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser (if applies) Chrome 101.0.4951.54\r\n- Version of supabase-js: Whatever is running on supabase.com as of 31st May 2022 0752 UTC\r\n- Version of Node.js: Whatever is running behind supabase.com as of 31st May 2022 0752 UTC\r\n\r\n## Additional context\r\n\r\n-\r\n",
            "author": {
                "login": "kiransmith"
            },
            "state": "CLOSED",
            "createdAt": "2022-05-31T07:53:11Z",
            "closedAt": "2022-06-08T12:06:34Z",
            "url": "https://github.com/supabase/supabase-js/issues/449",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5EiP29",
                    "body": "Closing as this seems to be the default behaviour with Google OAuth",
                    "author": {
                        "login": "kiransmith"
                    },
                    "createdAt": "2022-06-08T12:06:34Z",
                    "url": "https://github.com/supabase/supabase-js/issues/449#issuecomment-1149828541"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5L678j",
            "number": 461,
            "title": "bug: Unable to use on NextJS v12.1.6 middleware with Edge Runtime",
            "body": "# Bug report\r\n\r\nI recently tried updating to NextJS v12.1.6 and noticed that @supabase/supabase-js can no longer be used in Edge Functions. This is because native NodeJS APIs are not supported and it appears there are some dependencies of realtime-js that use these. Here is a look at the stack trace. \r\n\r\n## To Reproduce\r\n\r\nUpgrade to NextJS 12.1.6 and try to use @supabase/supabase-js lib within a middleware function.\r\n\r\n## Additional context\r\n\r\n```\r\nModule not found: Can't resolve 'fs'\r\n\r\nImport trace for requested module:\r\n./node_modules/bufferutil/index.js\r\n./node_modules/websocket/lib/WebSocketFrame.js\r\n./node_modules/websocket/lib/websocket.js\r\n./node_modules/websocket/index.js\r\n./node_modules/@supabase/realtime-js/dist/module/RealtimeClient.js\r\n./node_modules/@supabase/realtime-js/dist/module/index.js\r\n./node_modules/@supabase/supabase-js/dist/module/index.js\r\n./pages/api/v0/_middleware.ts\r\n\r\nhttps://nextjs.org/docs/messages/module-not-found\r\n\r\nYou're using a Node.js module (fs) which is not supported in the Edge Runtime.\r\nLearn more: https://nextjs.org/docs/api-reference/edge-runtime\r\n```\r\n",
            "author": {
                "login": "christopherdro"
            },
            "state": "CLOSED",
            "createdAt": "2022-06-16T15:43:53Z",
            "closedAt": "2022-07-12T07:46:52Z",
            "url": "https://github.com/supabase/supabase-js/issues/461",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5FHOwI",
                    "body": "My current workaround is to use [postgrest-js](https://github.com/supabase/postgrest-js) and remove `cross-fetch` from its dependencies. \r\nhttps://github.com/christopherdro/postgrest-js/commit/ee678bc8342211f0948c9ff828d285503eb54bf5",
                    "author": {
                        "login": "christopherdro"
                    },
                    "createdAt": "2022-06-18T17:48:56Z",
                    "url": "https://github.com/supabase/supabase-js/issues/461#issuecomment-1159523336"
                },
                {
                    "id": "IC_kwDOD79Crs5FelUU",
                    "body": "Actually, it's not just the realtime part that is affected. `gotrue-js` and `postgres-js` are both affected too.\r\n\r\nAnything that `import` directly `cross-fetch` without using a dynamic import is gonna cause the problem I suppose.",
                    "author": {
                        "login": "TheThirdRace"
                    },
                    "createdAt": "2022-06-24T14:43:26Z",
                    "url": "https://github.com/supabase/supabase-js/issues/461#issuecomment-1165645076"
                },
                {
                    "id": "IC_kwDOD79Crs5FhrQZ",
                    "body": "I can verify that we are affected by this issue as well in one of your projects.",
                    "author": {
                        "login": "natterstefan"
                    },
                    "createdAt": "2022-06-26T08:40:02Z",
                    "url": "https://github.com/supabase/supabase-js/issues/461#issuecomment-1166455833"
                },
                {
                    "id": "IC_kwDOD79Crs5Fzq_1",
                    "body": "I also have this problem in the recently released Next.js 12.2 where middleware is now stable.",
                    "author": {
                        "login": "christrain91"
                    },
                    "createdAt": "2022-06-30T12:43:25Z",
                    "url": "https://github.com/supabase/supabase-js/issues/461#issuecomment-1171173365"
                },
                {
                    "id": "IC_kwDOD79Crs5F9AOp",
                    "body": "We are also affected by this in middleware. Should we expect a quick fix or try to find a workaround?",
                    "author": {
                        "login": "cagils"
                    },
                    "createdAt": "2022-07-04T10:04:04Z",
                    "url": "https://github.com/supabase/supabase-js/issues/461#issuecomment-1173619625"
                },
                {
                    "id": "IC_kwDOD79Crs5F9FqL",
                    "body": "I believe this PR should fix the issue: https://github.com/vercel/next.js/pull/38234\r\n\r\nIn the meantime you can try using the Node.js-based API Routes instead of the Edge API Routes - you can do this by removing the `runtime: 'experimental-edge'` config.\r\n\r\nAdditionally we're also working on changing the way we package our client libs which should also fix this issue, though this may take some time.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-07-04T10:23:34Z",
                    "url": "https://github.com/supabase/supabase-js/issues/461#issuecomment-1173641867"
                },
                {
                    "id": "IC_kwDOD79Crs5F96B7",
                    "body": "The fix is still being discussed.\r\nFor Edge API route, I recommend you to switch back to regular routes, as @soedirgo suggested. \r\nFixing them may require a bit more time than fixing the middleware.",
                    "author": {
                        "login": "feugy"
                    },
                    "createdAt": "2022-07-04T14:00:40Z",
                    "url": "https://github.com/supabase/supabase-js/issues/461#issuecomment-1173856379"
                },
                {
                    "id": "IC_kwDOD79Crs5GazjG",
                    "body": "This should be resolved as of `next@12.2.1` :)",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-07-12T07:46:52Z",
                    "url": "https://github.com/supabase/supabase-js/issues/461#issuecomment-1181432006"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5MVIhQ",
            "number": 464,
            "title": "[Bug] supabase-js doesnt work with expo 44",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nreact-native expo crashes on opening\r\n\r\n\r\nUsing the latest version of supabase-js for email authentication in a react-native expo app causes it to crash\r\n\r\n## To Reproduce\r\n\r\n\r\n\r\n1. Follow the tutorial https://supabase.com/docs/guides/with-expo\r\n2. Open it on the local device\r\n3. App crashes unexpectedly\r\n\r\n## Expected behaviour\r\n\r\n\r\nFunction as normal\r\n## Screenshots\r\n\r\n\r\n\r\n## System information\r\n\r\n- OS: [e.g. macOS, Windows]-macOS\r\n- Browser (if applies) [e.g. chrome, safari]-android\r\n- Version of supabase-js: [e.g. 6.0.2]-latest\r\n- Version of Node.js: [e.g. 10.10.0]\r\n\r\n## Additional context\r\n\r\n\r\nworks when opening in web browser, however on android it crashes",
            "author": {
                "login": "etherealsunshine"
            },
            "state": "OPEN",
            "createdAt": "2022-06-22T17:30:50Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/464",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5Gh1K-",
                    "body": "@supabase/frontend-team \r\nAssigning it to the PIC @joshenlim of the Frontend team to take care of this. ",
                    "author": {
                        "login": "monicakh"
                    },
                    "createdAt": "2022-07-13T14:08:14Z",
                    "url": "https://github.com/supabase/supabase-js/issues/464#issuecomment-1183273662"
                },
                {
                    "id": "IC_kwDOD79Crs5j0WTx",
                    "body": "+1 . Same problem running in Expo Go with iOS.\r\n\r\n## Describe the bug\r\nFor email authentication in a react-native expo app causes it to crash.\r\n\r\n## To Reproduce\r\n1.  Follow the tutorial https://supabase.com/docs/guides/with-expo\r\n2. Open it on the local device\r\n3. App crashes unexpectedly\r\n\r\n## System information\r\nOS: Windows\r\nVersion of expo: ~48.0.18\r\nVersion of supabase-js: ^2.32.0\r\nVersion of Node.js: 18.16.0\r\n",
                    "author": {
                        "login": "jpaddeo"
                    },
                    "createdAt": "2023-08-11T12:18:47Z",
                    "url": "https://github.com/supabase/supabase-js/issues/464#issuecomment-1674667249"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5Mfu0i",
            "number": 465,
            "title": "Warn shows up on import { createClient } from '@supabase/supabase-js' even though I followed the instructions in the readme's usage.",
            "body": "# Bug report\r\nWarn shows up on import { createClient } from '@supabase/supabase-js' even though I followed the instructions in the readme's usage.\r\n\r\n## Describe the bug\r\n> tauri-app@1.0.0 tauri\r\n> tauri \"dev\"\r\n\r\n     Running BeforeDevCommand (`npm run dev`)\r\n\r\n> tauri-app@1.0.0 dev\r\n> rollup -c -w\r\n\r\nrollup v2.75.6\r\nbundles src/main.js \u2192 public/build/bundle.js...\r\nLiveReload enabled\r\n(!) `this` has been rewritten to `undefined`\r\nhttps://rollupjs.org/guide/en/#error-this-is-undefined\r\nnode_modules/@supabase/supabase-js/dist/module/SupabaseClient.js\r\n1: var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n                    ^\r\n2:     function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n3:     return new (P || (P = Promise))(function (resolve, reject) {\r\n...and 1 other occurrence\r\nnode_modules/@supabase/functions-js/dist/module/index.js\r\n1: var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n                    ^\r\n2:     function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n3:     return new (P || (P = Promise))(function (resolve, reject) {\r\n...and 1 other occurrence\r\nnode_modules/@supabase/realtime-js/dist/module/RealtimeClient.js\r\n1: var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n                    ^\r\n2:     function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n3:     return new (P || (P = Promise))(function (resolve, reject) {\r\n...and 3 other occurrences\r\n\r\n...and 8 other files\r\n(!) Circular dependency\r\nnode_modules/@supabase/realtime-js/dist/module/RealtimeSubscription.js -> node_modules/@supabase/realtime-js/dist/module/lib/push.js -> node_modules/@supabase/realtime-js/dist/module/RealtimeSubscription.js\r\ncreated public/build/bundle.js in 1.2s\r\n\r\n## A clear and concise description of what the bug is.\r\nWarning message appears when importing @supabase/supabase-js.\r\n\r\n## To Reproduce\r\ncomposition\uff1aRust+Tauri+Svelte+supabase-js\r\n\r\n1. npx create-tauri-app\r\n2. npm tauri init\r\n3. npm install @supabase/supabase-js\r\n4. npm install @supabase/supabase-js\r\n5. .env\r\nSVELTE_APP_SUPABASE_URL=YOUR_SUPABASE_URL\r\nSVELTE_APP_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY\r\n\r\n6. npm install --save-dev @rollup/plugin-json\r\n7. npm install --save-dev dotenv @rollup/plugin-replace\r\n8. rollup.config.js\r\n  import { config } from 'dotenv';\r\n  import replace from '@rollup/plugin-replace';\r\n  import json from '@rollup/plugin-json'\r\n\r\n  export default {\r\n    plugins: [\r\n    replace({\r\n            __api: JSON.stringify({\r\n                env: {\r\n                    isProd: production,\r\n                    ...config().parsed // attached the .env config\r\n                }\r\n            }),\r\n            delimiters: ['', '']\r\n        }),\r\n        json(),\r\n    // ...\r\n    ],\r\n    // ...\r\n  }\r\n\r\n9. src/supabaseClient.js\r\nimport { createClient } from '@supabase/supabase-js'\r\n\r\nconst supabaseUrl = __api.env.SVELTE_APP_SUPABASE_URL\r\nconst supabaseAnonKey = __api.env.SVELTE_APP_SUPABASE_ANON_KEY\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)\r\n\r\n10. import { supabase } from './supabaseClient';\r\n11. npm run tauri dev\r\n12. warn\r\n\r\n## Expected behavior\r\nWarn not displayed\r\n\r\n## Screenshots\r\nhttps://i.imgur.com/wnC4IH3_d.webp?maxwidth=760&fidelity=grand\r\n\r\n## System information\r\n\r\n- OS: Windows 11 22621.160\r\n- Browser: chrome\r\n- Version of supabase-js: v1.35.3\r\n- Version of Node.js: v18.3.0\r\n\r\n## Additional context\r\n\r\n",
            "author": {
                "login": "dog6o"
            },
            "state": "OPEN",
            "createdAt": "2022-06-24T07:43:54Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/465",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5Gh1l0",
                    "body": "@supabase/backend-team \r\nAssigning it to the PIC of the Backend team to take care of this @Lakshmipathi ",
                    "author": {
                        "login": "monicakh"
                    },
                    "createdAt": "2022-07-13T14:09:43Z",
                    "url": "https://github.com/supabase/supabase-js/issues/465#issuecomment-1183275380"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5Ms68q",
            "number": 467,
            "title": "Host an official version of supabase-js for Deno",
            "body": "The current client for deno is hosted under link-discord/supabase-js (**thanks link-discord!**). It would be better to have an official version under the supabase org name.\r\n",
            "author": {
                "login": "guy-borderless"
            },
            "state": "CLOSED",
            "createdAt": "2022-06-28T06:24:10Z",
            "closedAt": "2022-06-28T10:18:59Z",
            "url": "https://github.com/supabase/supabase-js/issues/467",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5FpLqR",
                    "body": "There's no orgs/namespaces on deno.land/x btw. The current official way is to use https://esm.sh.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-06-28T08:46:50Z",
                    "url": "https://github.com/supabase/supabase-js/issues/467#issuecomment-1168423569"
                },
                {
                    "id": "IC_kwDOD79Crs5FploM",
                    "body": "thanks! \r\n`import { createClient } from \"https://esm.sh/@supabase/supabase-js\";`\r\n",
                    "author": {
                        "login": "guy-borderless"
                    },
                    "createdAt": "2022-06-28T10:18:59Z",
                    "url": "https://github.com/supabase/supabase-js/issues/467#issuecomment-1168529932"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5NBEl1",
            "number": 471,
            "title": "Supabase does not work inside Next.js Middleware",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen I try to use supabase-js into the `middleware.ts` in next.js I take this error.\r\n\r\n```cmd\r\n../../node_modules/next/dist/compiled/native-url/index.js:1:48\r\nModule not found: Can't resolve 'querystring'\r\n\r\nImport trace for requested module:\r\n../../node_modules/websocket/lib/WebSocketClient.js\r\n../../node_modules/websocket/lib/websocket.js\r\n../../node_modules/websocket/index.js\r\n../../node_modules/@supabase/realtime-js/dist/module/RealtimeClient.js\r\n../../node_modules/@supabase/realtime-js/dist/module/index.js\r\n../../node_modules/@supabase/supabase-js/dist/module/index.js\r\n./middleware.ts\r\n\r\nhttps://nextjs.org/docs/messages/module-not-found\r\n\r\nYou're using a Node.js module (querystring) which is not supported in the Edge Runtime.\r\nLearn more: https://nextjs.org/docs/api-reference/edge-runtime\r\n```\r\n\r\n## To Reproduce\r\n\r\nCreate a `middleware.ts` file in a next.js project and import the supabase-js into the file.\r\n\r\n## Expected behavior\r\n\r\nA clear and concise description of what you expected to happen.\r\n\r\n## Screenshots\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n## System information\r\n\r\n- OS: [e.g. macOS, Windows]\r\n- Browser (if applies) [e.g. chrome, safari]\r\n- Version of supabase-js: [1.35.4]\r\n- Version of Node.js: [16.13.0]\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "emersonlaurentino"
            },
            "state": "CLOSED",
            "createdAt": "2022-07-02T19:34:19Z",
            "closedAt": "2022-07-04T09:45:33Z",
            "url": "https://github.com/supabase/supabase-js/issues/471",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5F87Zo",
                    "body": "Duplicate of https://github.com/supabase/supabase-js/issues/461",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-07-04T09:45:33Z",
                    "url": "https://github.com/supabase/supabase-js/issues/471#issuecomment-1173599848"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5NCK3f",
            "number": 472,
            "title": " Error: 'w3cwebsocket' is not exported by node_modules/websocket/index.js when using Rollup",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen using a simple rollup configuration generated by the [open-wc](https://open-wc.org/) project, and installing the supabase-js dependency, building fails with a ` Error: 'w3cwebsocket' is not exported by node_modules/websocket/index.js,` error.\r\n\r\nHere is a more complete stacktrace:  \r\n\r\n```\r\nnode_modules/@supabase/gotrue-js/dist/module/GoTrueClient.js\r\n1: var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\r\n                   ^\r\n2:   function adopt(value) {\r\n3:     return value instanceof P ? value : new P(function (resolve) {\r\n...and 1 other occurrence\r\n\r\n...and 10 other files\r\n(!) Circular dependency\r\nnode_modules/@supabase/realtime-js/dist/module/RealtimeSubscription.js -> node_modules/@supabase/realtime-js/dist/module/lib/push.js -> node_modules/@supabase/realtime-js/dist/module/RealtimeSubscription.js\r\n[!] Error: 'w3cwebsocket' is not exported by node_modules/websocket/index.js, imported by node_modules/@supabase/realtime-js/dist/module/RealtimeClient.js\r\nhttps://rollupjs.org/guide/en/#error-name-is-not-exported-by-module\r\nnode_modules/@supabase/realtime-js/dist/module/RealtimeClient.js (1:9)\r\n1: var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n            ^\r\n```\r\n\r\n## To Reproduce\r\n\r\nI have created a test repository to reproduce the issue [here](https://github.com/jlengrand/supabase-fail).\r\nYou can either clone the repo and then run `$npm install && npm run build` or directly [click this link](https://gitpod.io/#https://github.com/jlengrand/supabase-fail) to fire a GitPod instance doing it for you :)\r\n\r\n\r\n## Expected behavior\r\n\r\nI would expect the `supabase-js` dependency to not make my build fail\r\n\r\n## Screenshots\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n## System information\r\n\r\n- Version of supabase-js: [e.g. 1.35.4]\r\n- Version of Node.js: [e.g. 16.15.1]\r\n\r\n## Additional context\r\n\r\nI have found [this very similar issue](https://github.com/supabase/supabase/discussions/475) and tried to upgrade the rollup plugin to the latest version as well as apply the rollup common js plugin but then the error changes to \r\n\r\n```\r\n(!) `this` has been rewritten to `undefined`\r\nhttps://rollupjs.org/guide/en/#error-this-is-undefined\r\nnode_modules/@supabase/supabase-js/dist/module/SupabaseClient.js\r\n1: var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\r\n                   ^\r\n2:   function adopt(value) {\r\n3:     return value instanceof P ? value : new P(function (resolve) {\r\n...and 1 other occurrence\r\nnode_modules/@supabase/functions-js/dist/module/index.js\r\n1: var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\r\n                   ^\r\n2:   function adopt(value) {\r\n3:     return value instanceof P ? value : new P(function (resolve) {\r\n...and 1 other occurrence\r\nnode_modules/@supabase/gotrue-js/dist/module/GoTrueApi.js\r\n1: var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\r\n                   ^\r\n2:   function adopt(value) {\r\n3:     return value instanceof P ? value : new P(function (resolve) {\r\n...and 1 other occurrence\r\n\r\n...and 8 other files\r\n[!] (plugin commonjs--resolver) SyntaxError: Unexpected token (2:8)\r\nnode_modules/websocket/index.js (2:8)\r\n```\r\n\r\nTo reproduce : [![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/jlengrand/supabase-fail/tree/test/common-js)\r\n\r\nor run `$git checkout test-common-js; npm install && npm run build`\r\n\r\nCould you please advise? At the moment I solved the issue by importing the script from a CDN but it's not ideal. Thanks!",
            "author": {
                "login": "jlengrand"
            },
            "state": "OPEN",
            "createdAt": "2022-07-03T20:34:55Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/472",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5Ghyty",
                    "body": "@supabase/backend-team \r\nAssigning the PIC of the team @Lakshmipathi to take care of this.",
                    "author": {
                        "login": "monicakh"
                    },
                    "createdAt": "2022-07-13T14:00:20Z",
                    "url": "https://github.com/supabase/supabase-js/issues/472#issuecomment-1183263602"
                },
                {
                    "id": "IC_kwDOD79Crs5s3VKt",
                    "body": "Was there ever a resolution to this? I'm running into the same issue",
                    "author": {
                        "login": "JasonAtallah"
                    },
                    "createdAt": "2023-11-25T23:43:37Z",
                    "url": "https://github.com/supabase/supabase-js/issues/472#issuecomment-1826443949"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5N8HJA",
            "number": 479,
            "title": "When trying to fetch data from database (javascript sdk), throws error \"No API key found in request\" but I provided all required keys",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen trying to fetch data from database (javascript sdk), throws error \"No API key found in request\" but I provided all required keys.\r\n\r\n## To Reproduce\r\n\r\nIt is on CodeSandbox. Here is the link to it: https://codesandbox.io/s/supabase-video-site-1s138i?file=/src/App.js\r\n\r\n## Expected behavior\r\n\r\nI expected it to not throw that error; 1. Because I checked, 2. I followed the quick start guide **VERY** clearly.\r\n\r\n## System information\r\n\r\n- OS: I was programming on my Xbox One (long story)\r\n- Browser: Microsoft Edge (Chromium)\r\n- Version of supabase-js: Latest version (I assume because I haven't checked)\r\n- Version of Node.js: I don't know (CodeSandbox's fault)\r\n",
            "author": {
                "login": "Marcus1YouTube"
            },
            "state": "CLOSED",
            "createdAt": "2022-07-17T05:56:01Z",
            "closedAt": "2022-07-19T09:16:48Z",
            "url": "https://github.com/supabase/supabase-js/issues/479",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5GzfYu",
                    "body": "> When trying to fetch data from database (javascript sdk), throws error \"No API key found in request\" but I provided all required keys.\r\n\r\nCan you share the JS snippet for the request?",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-07-18T17:39:16Z",
                    "url": "https://github.com/supabase/supabase-js/issues/479#issuecomment-1187903022"
                },
                {
                    "id": "IC_kwDOD79Crs5G2pv_",
                    "body": "Could be a codesandbox thing - can you reproduce this locally with `npm run start`?",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-07-19T08:04:08Z",
                    "url": "https://github.com/supabase/supabase-js/issues/479#issuecomment-1188731903"
                },
                {
                    "id": "IC_kwDOD79Crs5G2rwb",
                    "body": "> Could be a codesandbox thing - can you reproduce this locally with `npm run start`?\r\n\r\nI'll try in a sec",
                    "author": {
                        "login": "Marcus1YouTube"
                    },
                    "createdAt": "2022-07-19T08:12:36Z",
                    "url": "https://github.com/supabase/supabase-js/issues/479#issuecomment-1188740123"
                },
                {
                    "id": "IC_kwDOD79Crs5G218t",
                    "body": "sorry I took too long, we have bad internet at my grandma's house and git clone took way too looooong and I ran into issues AGAIN with npm (I switched to yarn). anyway, it still shows \r\n![Message](https://user-images.githubusercontent.com/75576363/179709431-92a71018-c892-4587-8f35-e1b2589cbbec.png)\r\n(I am Hungarian, so if you don't understand something, let me know! :))\r\n",
                    "author": {
                        "login": "Marcus1YouTube"
                    },
                    "createdAt": "2022-07-19T08:53:08Z",
                    "url": "https://github.com/supabase/supabase-js/issues/479#issuecomment-1188781869"
                },
                {
                    "id": "IC_kwDOD79Crs5G25wP",
                    "body": "Looks like the API key is invalid. Can you double check? i.e. just copy the anon key from the dashboard and paste it on codesandbox.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-07-19T09:08:04Z",
                    "url": "https://github.com/supabase/supabase-js/issues/479#issuecomment-1188797455"
                },
                {
                    "id": "IC_kwDOD79Crs5G28H6",
                    "body": "how the **** did it fix itself????? i repasted it 20 times yesterday and it didn't work. now it works. thanks @soedirgo !",
                    "author": {
                        "login": "Marcus1YouTube"
                    },
                    "createdAt": "2022-07-19T09:16:48Z",
                    "url": "https://github.com/supabase/supabase-js/issues/479#issuecomment-1188807162"
                },
                {
                    "id": "IC_kwDOD79Crs5R3Lp_",
                    "body": "**Temporary Solution**\r\njust remove `process.env.SUPABASE_KEY` from ` createClient(supabaseUrl, process.env.SUPABASE_KEY);` to ` createClient(supabaseUrl, \"ANON_KEY_FROM_SUPABASE\")` and everything would be fine.\r\n",
                    "author": {
                        "login": "nitesh98bhagat"
                    },
                    "createdAt": "2023-01-06T10:01:18Z",
                    "url": "https://github.com/supabase/supabase-js/issues/479#issuecomment-1373420159"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5P_iyZ",
            "number": 514,
            "title": "[supabase-js v2] bring back the `auth.setAuth()` method ",
            "body": "# Feature request\r\n\r\nBring back the ability to manually scope the supabase request to a particular JWT.\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nThe following pattern is really useful when doing queries on next-js api routes or `getServerSideProps` function: lets you query data scoped to the current user (ie: RLS) without the need to rely on a `supabaseAdminClient`\r\n\r\n```js\r\nexport async function supabaseServerClient(\r\n  context\r\n) {\r\n  const supabaseClient = createClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\r\n    {\r\n      auth: {\r\n        autoRefreshToken: false,\r\n        detectSessionInUrl: false,\r\n        persistSession: false\r\n      }\r\n    }\r\n  )\r\n\r\n  const access_token = context.req.cookies['supabase-access-token']\r\n\r\n  if (!access_token) throw new AuthSessionMissingError()\r\n\r\n  // Previously we where able to do this...\r\n\r\n  const { error } = supabaseClient.auth.setAuth(access_token)\r\n\r\n  if (error) throw error\r\n\r\n  return supabaseClient\r\n}\r\n\r\n// On an API function or getServerSideProps\r\nexport default function handler({req, res}) {\r\n  const supabase = await supabaseServerClient({ req })\r\n\r\n  // queries will be scoped to the user\r\n  const { data } = await supabase.from('table')...\r\n\r\n}\r\n```\r\n\r\n## Describe the solution you'd like\r\n\r\nImplement a method to manually set the jwt token.\r\n\r\n## Describe alternatives you've considered\r\n\r\nI can see that in the new `supabase-v2` there is a `setSession()` method which takes the `refresh_token` and tries to generate a new token with that.\r\n\r\n```js\r\nexport async function supabaseServerClient(context) {\r\n  const supabaseClient = createClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\r\n    {\r\n      auth: {\r\n        autoRefreshToken: false,\r\n        detectSessionInUrl: false,\r\n        persistSession: false,\r\n      },\r\n    }\r\n  );\r\n\r\n  // This is not working for me. Also will this invalidate the current session on the client?\r\n\r\n  const refresh_token = context.req.cookies[\"my-app-refresh-token\"];\r\n\r\n  if (!refresh_token) throw new AuthSessionMissingError();\r\n\r\n  const { error } = await supabaseClient.auth.setSession(refresh_token);\r\n\r\n  // Outputs: AuthApiError: Invalid Refresh Token\r\n  console.log(\"setSession error\", error);\r\n\r\n  if (error) throw error;\r\n\r\n  return supabaseClient;\r\n}\r\n```\r\n\r\nWhat I worry about this is approach is:\r\n- Calling this method on the backend invalidates the current session of the client (the JWT token no longer being valid)? \r\n- Manually calling `setSession()` is not working for me ATM, I always get an `Invalid refresh token` error, but that could be an issue on my end.\r\n\r\n## Additional context\r\n\r\n---\r\n",
            "author": {
                "login": "julianpoma"
            },
            "state": "CLOSED",
            "createdAt": "2022-08-17T17:13:05Z",
            "closedAt": "2022-08-17T21:51:20Z",
            "url": "https://github.com/supabase/supabase-js/issues/514",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5IoQmX",
                    "body": "Hi there, \r\nhave you seen this page? https://supabase.com/docs/reference/javascript/next/release-notes#deprecated-setauth \r\n\r\n> To set a custom access_token jwt instead, pass the custom header into the createClient() method provided: ([PR](https://github.com/supabase/gotrue-js/pull/340))\r\n\r\nHere is a link to an example implemenation: https://github.com/supabase/gotrue-js/pull/340#issuecomment-1218065610\r\n\r\nSo you could do something like this \r\n\r\n```js\r\nexport async function supabaseServerClient(\r\n  context\r\n) {\r\n  const access_token = context.req.cookies['supabase-access-token']\r\n\r\n  if (!access_token) throw new AuthSessionMissingError()\r\n\r\n  const supabaseClient = createClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,\r\n    {\r\n      auth: {\r\n        autoRefreshToken: false,\r\n        detectSessionInUrl: false,\r\n        persistSession: false\r\n      },\r\n      global: {\r\n        headers: {\r\n          Authorization: `Bearer ${access_token}`\r\n        }\r\n      }\r\n    }\r\n  )\r\n\r\n  return supabaseClient\r\n}\r\n\r\n// On an API function or getServerSideProps\r\nexport default function handler({req, res}) {\r\n  const supabase = await supabaseServerClient({ req })\r\n\r\n  // queries will be scoped to the user\r\n  const { data } = await supabase.from('table')...\r\n\r\n}\r\n```\r\nMaybe this helps you :)",
                    "author": {
                        "login": "kryptovergleichde"
                    },
                    "createdAt": "2022-08-17T21:37:02Z",
                    "url": "https://github.com/supabase/supabase-js/issues/514#issuecomment-1218513303"
                },
                {
                    "id": "IC_kwDOD79Crs5IoS-M",
                    "body": "Oh, thats great. TYSM! @kryptovergleichde ",
                    "author": {
                        "login": "julianpoma"
                    },
                    "createdAt": "2022-08-17T21:51:20Z",
                    "url": "https://github.com/supabase/supabase-js/issues/514#issuecomment-1218523020"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5QA5Lw",
            "number": 515,
            "title": "v2 migration guide?",
            "body": "# Improve documentation\r\n\r\n## Link \r\n\r\nhttps://supabase.com/docs/reference/javascript/next/\r\n\r\n## Describe the problem\r\n\r\nI'd love to try the new v2 RC, but parsing what's changed by comparing API references is a lot. Is there a v1 \u2192 v2 migration guide in the works?\r\n\r\n## Describe the improvement\r\n\r\nWrite a migration guide with all breaking changes introduced in v2\r\n\r\n## Additional context\r\n\r\nN/A",
            "author": {
                "login": "madeleineostoja"
            },
            "state": "CLOSED",
            "createdAt": "2022-08-18T00:28:56Z",
            "closedAt": "2022-08-18T00:32:28Z",
            "url": "https://github.com/supabase/supabase-js/issues/515",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5IpOuD",
                    "body": "Nevermind just found https://supabase.com/docs/reference/javascript/next/release-notes\r\n\r\nI still think an explicit migration guide based off of that document (and more discoverable) would be good, but closing this for now since it's still an RC anyway",
                    "author": {
                        "login": "madeleineostoja"
                    },
                    "createdAt": "2022-08-18T00:32:28Z",
                    "url": "https://github.com/supabase/supabase-js/issues/515#issuecomment-1218767747"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5QElwj",
            "number": 518,
            "title": ".insert() does not return the proper type",
            "body": "Whenever I use a `supabase.from('my_table').insert(/*...*/).select()` the `data` object is of type `any`",
            "author": {
                "login": "enyo"
            },
            "state": "CLOSED",
            "createdAt": "2022-08-18T17:08:26Z",
            "closedAt": "2022-08-19T07:50:49Z",
            "url": "https://github.com/supabase/supabase-js/issues/518",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5IvNIk",
                    "body": "Hi there, \r\nI am using the supabase-v2 rc3 release, and for me, this is working fine. An example which works in my codebase:\r\n```ts\r\n// Create client with database types generated from supabase-cli\r\nimport type { Database } from '@/types/generated/supabase.gen.d.ts'\r\nconst supabase = createClient<Database>(/* ... */)\r\n\r\nconst newEntries = [\r\n  {\r\n    path: '/',\r\n    visitors_in_timerange: 0,\r\n  }\r\n]\r\n\r\nconst { data, error } = await supabase.from('analytics_livedata').insert(newEntries).select()\r\nif (error) throw error\r\n\r\nreturn data\r\n/** ->returns correct type: {\r\n  id: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n  path: string;\r\n  visitors_in_timerange: number;\r\n}[] */\r\n```\r\nIt perfectly returns the right type. It also errors if I do create an array of objects that doesn't match the schema.\r\n\r\nCould you maybe share some insights or examples for your codebase?",
                    "author": {
                        "login": "madebyfabian"
                    },
                    "createdAt": "2022-08-19T07:15:11Z",
                    "url": "https://github.com/supabase/supabase-js/issues/518#issuecomment-1220334116"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5QFwbL",
            "number": 519,
            "title": "Support database name",
            "body": "# Feature request\r\n\r\nI only use supabase for postgres. I automatically create databases within the same postgres cluster for per-PR isolated environments. This works with every other postgres client, except supabase-js.\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nI want to be able to connect to different databases in the same project. Using other clients, I can programmatically create databases for isolated per-PR environments. \r\n\r\n## Describe the solution you'd like\r\n\r\nSupabaseClient has a `datname` argument. Storage, auth, etc can still use the `postgres` database.\r\n\r\n## Describe alternatives you've considered\r\n\r\nManually creating projects for each environment and copying around secrets is more time-consuming, error-prone, and can't be done in CI. Another alternative would be to just node-pg, but I was hoping there was still a way to do it with supabase.\r\n\r\n## Additional context\r\n\r\nhttps://github.com/supabase/supabase/discussions/4471#discussioncomment-1802907",
            "author": {
                "login": "technillogue"
            },
            "state": "CLOSED",
            "createdAt": "2022-08-18T21:52:41Z",
            "closedAt": "2022-08-23T03:18:48Z",
            "url": "https://github.com/supabase/supabase-js/issues/519",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5I7NW-",
                    "body": "I don't think we'll be supporting this anytime soon \ud83d\ude15 - like Auth and Storage, REST is also tied to a single DB. You'd need to self-host PostgREST to connect to the other DBs.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-08-23T03:18:48Z",
                    "url": "https://github.com/supabase/supabase-js/issues/519#issuecomment-1223480766"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5QR4-H",
            "number": 521,
            "title": "The User object is null in Edge Function runtime with a valid authorization token",
            "body": "# Bug report\r\nThe user object is null in Edge Function runtime with a valid authorization token.\r\n\r\n## Describe the bug\r\nI'm trying to get the User object with a valid Authorization token to perform an insert on a specific table that contains the user id; the user object is always at runtime, even with a valid authorization token.\r\n\r\n## To Reproduce\r\n- Create an Edge function and deploy it\r\n\r\n```\r\n// Get the authorization header from the request.\r\nconst authHeader = req.headers.get('Authorization').replace(\"Bearer \",\"\")\r\n// Client now respects auth policies for this user\r\nsupabaseClient.auth.setAuth(authHeader)\r\n// set the user profile\r\nconst user = supabase.auth.user()\r\n\r\nconsole.log(user);\r\n>> null\r\n```\r\n\r\n## Expected behavior\r\nReturns the current Auth user with UUID.",
            "author": null,
            "state": "OPEN",
            "createdAt": "2022-08-22T19:14:43Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/521",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5mtM3y",
                    "body": "Getting the same result from copy pasting sample code from the RESTful service.\r\n\r\nFunction call runs, but the user object is null and I can't access the database with my supabase client (assuming RLS blocks queries because the user is not authenticated).\r\n\r\n```\r\nmyfunction/index.ts\r\n\r\nimport { serve } from \"https://deno.land/std@0.168.0/http/server.ts\";\r\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.33.2\";\r\n\r\nserve(async (req) => {\r\n  const { url, method } = req;\r\n\r\n  try {\r\n    const supabaseClient = createClient(\r\n      // Supabase API URL - env var exported by default.\r\n      Deno.env.get(\"SUPABASE_URL\") ?? \"\",\r\n      // Supabase API ANON KEY - env var exported by default.\r\n      Deno.env.get(\"SUPABASE_ANON_KEY\") ?? \"\",\r\n      // Create client with Auth context of the user that called the function.\r\n      // This way your row-level-security (RLS) policies are applied.\r\n      {\r\n        global: {\r\n          headers: { Authorization: req.headers.get(\"Authorization\")! },\r\n        },\r\n      }\r\n    );\r\n\r\n    const {\r\n      data: { user },\r\n    } = await supabaseClient.auth.getUser();\r\n\r\n    // Null here\r\n    console.log(\"USER : \", user);\r\n\r\n    return new Response(JSON.stringify({ user: user }), {\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      status: 200,\r\n    });\r\n  } catch (error) {\r\n    return new Response(JSON.stringify({ error: error.message }), {\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      status: 400,\r\n    });\r\n  }\r\n});\r\n```\r\n\r\nSample node app:\r\n\r\n```\r\nimport { createClient } from '@supabase/supabase-js'\r\n\r\nconst supabase = createClient(\r\n  'LOCAL HOST',\r\n  'SUPABASE_PUBLIC_KEY'\r\n)\r\n\r\n\r\nconst { data: userData, error: userError } = await supabase.auth.signInWithPassword({\r\n  email: 'my@email.com',\r\n  password: 'mypassword',\r\n})\r\n\r\n// Exists here\r\nconsole.log(\"User Data: \", userData)\r\n\r\nconst { data, error } = await supabase.functions.invoke('myfunction')\r\n```",
                    "author": {
                        "login": "Qw4z1"
                    },
                    "createdAt": "2023-09-18T10:20:11Z",
                    "url": "https://github.com/supabase/supabase-js/issues/521#issuecomment-1723125234"
                },
                {
                    "id": "IC_kwDOD79Crs5mtVnD",
                    "body": "Or maybe this is the issue... =/\r\n\r\n> No storage option exists to persist the session, which may result in unexpected behavior when using auth.\r\n> If you want to set persistSession to true, please provide a storage option or you may set persistSession to false to disable this warning.",
                    "author": {
                        "login": "Qw4z1"
                    },
                    "createdAt": "2023-09-18T10:44:47Z",
                    "url": "https://github.com/supabase/supabase-js/issues/521#issuecomment-1723161027"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5QieqM",
            "number": 526,
            "title": "TypeError: supabaseClient.auth.signIn is not a function",
            "body": "Supabase client\r\n\r\n```\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\nconst supabaseUrl = `${process.env.NEXT_PUBLIC_SUPABASE_URL}`;\r\nconst supabaseAnonKey = `${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY}`;\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\r\n\r\n```\r\n\r\n```\r\nconst handleLogin = async () => {\r\n    const { error: signInError } = await supabaseClient.auth?.signIn(\r\n      {\r\n        email: 'demo@gmail.com',\r\n        password: '123456789'\r\n      },\r\n      { redirectTo: '/' }\r\n    );\r\n    console.log(signInError);\r\n  };\r\n```\r\n\r\ndependencies\r\n\r\n```\r\n\"next\": \"12.2.5\",\r\n\"react\": \"18.2.0\",\r\n\"react-dom\": \"18.2.0\"\r\n\"@supabase/supabase-js\": \"^2.0.0-rc.6\",\r\n\"@supabase/ui\": \"^0.36.5\",\r\n```\r\n\r\n\r\nis supabase support react 18 ?",
            "author": {
                "login": "phongplus"
            },
            "state": "CLOSED",
            "createdAt": "2022-08-25T17:16:20Z",
            "closedAt": "2022-09-28T10:35:50Z",
            "url": "https://github.com/supabase/supabase-js/issues/526",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5JMdBg",
                    "body": "I think you need to call a different method in v2: https://supabase.com/docs/reference/javascript/next/auth-signinwithpassword",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-08-26T03:12:04Z",
                    "url": "https://github.com/supabase/supabase-js/issues/526#issuecomment-1228001376"
                },
                {
                    "id": "IC_kwDOD79Crs5JNj8n",
                    "body": "Thanks for @soedirgo \r\nIt work, so any version or package of supabase auth ui working with v2 ? i try using @supabase/ui and supabase-community/auth-ui-react also not supported.",
                    "author": {
                        "login": "phongplus"
                    },
                    "createdAt": "2022-08-26T09:47:28Z",
                    "url": "https://github.com/supabase/supabase-js/issues/526#issuecomment-1228291879"
                },
                {
                    "id": "IC_kwDOD79Crs5JQxNh",
                    "body": "I'm not familiar with these libraries, but I'm guessing they're still on v1. I suggest creating an issue on these libs to use supabase-js v2, though we need to move supabase-js out of prerelease first.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-08-27T06:13:10Z",
                    "url": "https://github.com/supabase/supabase-js/issues/526#issuecomment-1229132641"
                },
                {
                    "id": "IC_kwDOD79Crs5JcI4V",
                    "body": "Hi, any update on this? I'm trying Auth with Next and Typescript and getting errors such as:\r\nsupabase.auth.signIn is not a function and\r\nsupabase.auth.session is not a function",
                    "author": {
                        "login": "strangecarr"
                    },
                    "createdAt": "2022-08-30T20:07:01Z",
                    "url": "https://github.com/supabase/supabase-js/issues/526#issuecomment-1232113173"
                },
                {
                    "id": "IC_kwDOD79Crs5JdgQn",
                    "body": "Yes, you need to follow the migration notes [here](https://supabase.com/docs/reference/javascript/next/release-notes), though you may not be able to use auth-helpers, auth-ui, etc. atm since they're using supabase-js v1.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-08-31T05:11:46Z",
                    "url": "https://github.com/supabase/supabase-js/issues/526#issuecomment-1232471079"
                },
                {
                    "id": "IC_kwDOD79Crs5JdtPr",
                    "body": "thanks, that helped.\r\n\r\nIn UserContext.tsx I have:\r\n\r\n    return () => {\r\n      authListener?.unsubscribe()\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n\r\nVS Code is throwing: Property 'unsubscribe' does not exist on type '{ subscription: Subscription; }'.\r\n\r\nI couldn't see anything in migration notes on this, are you able to suggest how to resolve please?",
                    "author": {
                        "login": "strangecarr"
                    },
                    "createdAt": "2022-08-31T06:38:43Z",
                    "url": "https://github.com/supabase/supabase-js/issues/526#issuecomment-1232524267"
                },
                {
                    "id": "IC_kwDOD79Crs5JduBe",
                    "body": "Maybe `authListener?.subscription.unsubscribe()`?",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-08-31T06:43:03Z",
                    "url": "https://github.com/supabase/supabase-js/issues/526#issuecomment-1232527454"
                },
                {
                    "id": "IC_kwDOD79Crs5Jd45O",
                    "body": "thanks, also helpful! Thinking I sholud've stuck with working in React and js - but sorry one last request - I've refactored session() to getSession(), but having trouble setting session in userContext as getSession returns a promise so VS code throws an error and the app doesn' recognise if the user is logged in:  \r\n\r\nconst [session, setSession] = useState<Session | null>(\r\n    supabaseClient.auth.getSession()\r\n    \r\n  )\r\n\r\n",
                    "author": {
                        "login": "strangecarr"
                    },
                    "createdAt": "2022-08-31T07:34:40Z",
                    "url": "https://github.com/supabase/supabase-js/issues/526#issuecomment-1232571982"
                },
                {
                    "id": "IC_kwDOD79Crs5JeBOO",
                    "body": "Hmm I'm not familiar with React myself - cc @alaister ",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-08-31T08:07:25Z",
                    "url": "https://github.com/supabase/supabase-js/issues/526#issuecomment-1232606094"
                },
                {
                    "id": "IC_kwDOD79Crs5JeqcD",
                    "body": "@strangecarr it might be worth checking out [this section of the next.js guide](https://supabase.com/docs/guides/with-nextjs#launch) in the supabase docs, as it's got a good example of storing the session in state, which you should be able to apply to your user context.\r\n\r\nHope it helps!",
                    "author": {
                        "login": "alaister"
                    },
                    "createdAt": "2022-08-31T10:45:32Z",
                    "url": "https://github.com/supabase/supabase-js/issues/526#issuecomment-1232774915"
                },
                {
                    "id": "IC_kwDOD79Crs5JfB1b",
                    "body": "thanks a lot, yes got it working now. Main issue was me getting v1 and v2 mixed up. Thanks for your help!",
                    "author": {
                        "login": "strangecarr"
                    },
                    "createdAt": "2022-08-31T12:27:06Z",
                    "url": "https://github.com/supabase/supabase-js/issues/526#issuecomment-1232870747"
                },
                {
                    "id": "IC_kwDOD79Crs5Jy7Ej",
                    "body": "Similar to this is the ```supabase.auth.user()``` also different now. I get a similar not function error.",
                    "author": {
                        "login": "pratik-chakravorty"
                    },
                    "createdAt": "2022-09-06T12:30:51Z",
                    "url": "https://github.com/supabase/supabase-js/issues/526#issuecomment-1238085923"
                },
                {
                    "id": "IC_kwDOD79Crs5LJPnY",
                    "body": "Closing this as OP's issue is resolved. Please follow the migration notes linked above for other obsoleted methods.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-28T10:35:50Z",
                    "url": "https://github.com/supabase/supabase-js/issues/526#issuecomment-1260714456"
                },
                {
                    "id": "IC_kwDOD79Crs5TyrgB",
                    "body": "change `signIn` function with `signInWithPassword` ",
                    "author": {
                        "login": "Hamza-Zahir"
                    },
                    "createdAt": "2023-01-26T23:10:04Z",
                    "url": "https://github.com/supabase/supabase-js/issues/526#issuecomment-1405794305"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5QrRyC",
            "number": 530,
            "title": "supabase-js 2.0rc4 - \"This endpoint requires a Bearer token\" calling signOut()",
            "body": "Hello,\r\n\r\nI'm already using version 2.0.0-rc.4. So in the code below, user is signed in (100% sure), and when I call ```signOut()```:\r\n\r\n```js\r\nconst { error } = await supabase.auth.signOut();\r\nconsole.log(error.message);\r\n```\r\n... the following error is thrown in the chrome debug console:\r\n```\r\nhelpers.ts:40          GET https://xxxxxxxxxxxxxx.supabase.co/auth/v1/user 401\r\ncommon.ts:91 AuthApiError: This endpoint requires a Bearer token\r\n    at fetch.ts:36:16\r\n```\r\nAnyway, even after the error message, the session is successfully closed. This was working fine on the 1.x branch. What am I doing wrong?\r\n\r\nThanks",
            "author": {
                "login": "howesteve"
            },
            "state": "OPEN",
            "createdAt": "2022-08-29T00:39:15Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/530",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5JewA0",
                    "body": "Hi @howesteve,\r\nCan you confirm this is still an issue on [2.0.0-rc.8](https://www.npmjs.com/package/@supabase/supabase-js/v/2.0.0-rc.8)?",
                    "author": {
                        "login": "alaister"
                    },
                    "createdAt": "2022-08-31T11:11:38Z",
                    "url": "https://github.com/supabase/supabase-js/issues/530#issuecomment-1232797748"
                },
                {
                    "id": "IC_kwDOD79Crs5JfVrl",
                    "body": "Yes, it's still the same with [2.0.0-rc.8](https://www.npmjs.com/package/@supabase/supabase-js/v/2.0.0-rc.8).",
                    "author": {
                        "login": "howesteve"
                    },
                    "createdAt": "2022-08-31T13:38:50Z",
                    "url": "https://github.com/supabase/supabase-js/issues/530#issuecomment-1232952037"
                },
                {
                    "id": "IC_kwDOD79Crs5JgED3",
                    "body": "@alaister Same issue on [2.0.0-rc.8](https://www.npmjs.com/package/@supabase/supabase-js/v/2.0.0-rc.8) when try:\r\n\r\n```\r\nconst client = createClient(supabaseURL, supabaseAnonKey, {\r\n    global: {\r\n        headers: {\r\n            Authorization: `Bearer ${access_token}`\r\n        }\r\n    }\r\n})\r\nconst user = await client.auth.getUser()\r\n```\r\n\r\nResulting:\r\n`AuthApiError: This endpoint requires a Bearer token at https://file+.vscode-resource.vscode-cdn\u2026}`\r\n",
                    "author": {
                        "login": "fernandops26"
                    },
                    "createdAt": "2022-08-31T16:11:44Z",
                    "url": "https://github.com/supabase/supabase-js/issues/530#issuecomment-1233142007"
                },
                {
                    "id": "IC_kwDOD79Crs5J7CYQ",
                    "body": "Hey @fernandops26,\r\n\r\nAre you calling `getUser()` when the user is not logged in? That would be the correct error message in that case.\r\n\r\n`getUser()` is not a direct replacement for `user()` in V1, as it makes an HTTP request every time it's called for the user. Here's how I'd get the user in V2:\r\n```typescript\r\nconst {\r\n  data: { session },\r\n  error,\r\n} = await supabase.auth.getSession()\r\n\r\nif (error) {\r\n  // handle error\r\n}\r\n\r\nconst user = session?.user\r\n```\r\n\r\n@howesteve you wouldn't happen to be calling `getUser()` somewhere in your code as well?",
                    "author": {
                        "login": "alaister"
                    },
                    "createdAt": "2022-09-08T04:44:11Z",
                    "url": "https://github.com/supabase/supabase-js/issues/530#issuecomment-1240213008"
                },
                {
                    "id": "IC_kwDOD79Crs5J-Qrq",
                    "body": "> @howesteve you wouldn't happen to be calling `getUser()` somewhere in your code as well?\r\n\r\nYes, I was actually calling `getUser()` inside a ```onAuthStateChange()``` handler. Now that I switched into a ```getSession()``` \r\n approach as you suggested, it looks fixed. However, that was actually quite confusing, since it's supposed to be regular api.\r\n\r\nThanks\r\n\r\n",
                    "author": {
                        "login": "howesteve"
                    },
                    "createdAt": "2022-09-08T18:08:08Z",
                    "url": "https://github.com/supabase/supabase-js/issues/530#issuecomment-1241058026"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5Qrx7h",
            "number": 531,
            "title": "If https in the Supabase url is not all lower case, uninformative error is issued just by realtime-js",
            "body": "# Bug report\r\n## Describe the bug\r\n\r\nThis is more a nuisance issue, but took quite a while to figure it out.  I accidentally deleted the h in https for the url setup to the client and happened to have caplocks (I think) and typed in an H to fix it.   So the URL was Https://.......  but then went on to make other changes and restarted code.\r\n\r\nGot this error in the console:\r\n \r\n![image](https://user-images.githubusercontent.com/54564956/186941172-a0704480-55a4-4e25-af3f-ebdf206ae31a.png)\r\n\r\nIt is pretty clear it is a realtime error, but all other Supabase calls to the database and storage were working.\r\n\r\nCould not figure out how my real changes impacted realtime, spent time changing realtime-js versions, etc.\r\n\r\nFinally backed out changes, until I got to that capital H...\r\n\r\n## To Reproduce\r\n\r\nChange anything in https to a capital letter in client init.\r\n\r\n## Expected behavior\r\n\r\nRealtime-js should just work like other Supabase features with a capital letter.  \r\nSomewhere I assume code is replacing lowercase http and https with ws/wss but I could not find it in a quick search.\r\nProbably should convert to lower case if calling some 3rd party routine that is doing the replacement.\r\n\r\n## Screenshots\r\n\r\n## System information\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "GaryAustin1"
            },
            "state": "CLOSED",
            "createdAt": "2022-08-26T15:57:44Z",
            "closedAt": "2022-08-29T03:58:43Z",
            "url": "https://github.com/supabase/supabase-js/issues/531",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs5Q4RRz",
            "number": 534,
            "title": "supabase-js 2.0rc8 - \"After using client.auth.getUser overrides admin authorization header",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen I try to use the client on the backend I am getting overriding of Authorization headers for auth.admin.* when using auth.getUser(token)\r\n\r\n## To Reproduce\r\n\r\nI am creating a client with\r\n```export const client = createClient(apiUrl, serviceKey);```\r\nAfter that inside my application, I am getting the user by token\r\n```\r\nawait client.auth.getUser(token);\r\n```\r\nand after that all the requests with an auth.admin will send the users token instead of  as serviceKey\r\n```\r\nsupabase.auth.admin.inviteUserByEmail(email, {\r\n  redirectTo,\r\n});\r\n\r\n```\r\n## Expected behavior\r\n\r\nUsing of auth.getUser(token) should not override token for auth.admin.*\r\n\r\n",
            "author": {
                "login": "OverGreed"
            },
            "state": "OPEN",
            "createdAt": "2022-08-31T07:35:21Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/534",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5JeRq8",
                    "body": "hi @OverGreed, instead of creating a shared client on the backend, you should be creating a client on every route to handle the request. For example: \r\n\r\n```js\r\napp.get('/example', (req, res) => {\r\n  const supabase = createClient(process.env.SUPABASE_URL, req.cookies['sb-access-token'])\r\n  ...\r\n})\r\n```",
                    "author": {
                        "login": "kangmingtay"
                    },
                    "createdAt": "2022-08-31T09:06:03Z",
                    "url": "https://github.com/supabase/supabase-js/issues/534#issuecomment-1232673468"
                },
                {
                    "id": "IC_kwDOD79Crs5JsXtb",
                    "body": "@kangmingtay @alaister @soedirgo is this the \"new\" way to do this in supabase v2?\r\n\r\nSeems a little odd, I have never seen clients which you need to create on each request, is this efficient?",
                    "author": {
                        "login": "ydennisy"
                    },
                    "createdAt": "2022-09-04T15:50:16Z",
                    "url": "https://github.com/supabase/supabase-js/issues/534#issuecomment-1236368219"
                },
                {
                    "id": "IC_kwDOD79Crs5Js5Lp",
                    "body": "@ydennisy yes, this is now the recommended approach for supabase-js v2.\r\n\r\nCreating new clients is very lightweight, as there is no initial network request or anything like that. It's just a function call that instantiates a few classes :)",
                    "author": {
                        "login": "alaister"
                    },
                    "createdAt": "2022-09-05T03:21:07Z",
                    "url": "https://github.com/supabase/supabase-js/issues/534#issuecomment-1236505321"
                },
                {
                    "id": "IC_kwDOD79Crs5KgjIU",
                    "body": "@alaister can you elaborate as to why this design choice was made - I have never seen any client used in such a fashion.\r\n\r\nWith all the issues we faced with v1 auth, and these new changes not looking hugely ergonomic it makes us consider moving away from supabase auth.",
                    "author": {
                        "login": "ydennisy"
                    },
                    "createdAt": "2022-09-17T10:35:30Z",
                    "url": "https://github.com/supabase/supabase-js/issues/534#issuecomment-1250046484"
                },
                {
                    "id": "IC_kwDOD79Crs5L0c01",
                    "body": "While I can't speak for the supabase team, I am fairly certain that this design choice was made to take full advantage of the industry-wide shift to serverless functions aka workers aka the edge. The new lightweight client seems a perfect fit for these new runtime environments.",
                    "author": {
                        "login": "JTRNS"
                    },
                    "createdAt": "2022-10-07T19:59:27Z",
                    "url": "https://github.com/supabase/supabase-js/issues/534#issuecomment-1272040757"
                },
                {
                    "id": "IC_kwDOD79Crs5L3hm7",
                    "body": "Hi @ydennisy, could you elaborate on the issues you face with v1 auth? we would love to see if the changes we made for v2 auth helps to address those issues! \r\n\r\n> these new changes not looking hugely ergonomic\r\n\r\nit would be great if you could elaborate on this point too - are these new changes not looking ergonomic because you've not seen other client libraries do this? or are you concerned about the changes from a performance efficiency POV? ",
                    "author": {
                        "login": "kangmingtay"
                    },
                    "createdAt": "2022-10-10T06:41:38Z",
                    "url": "https://github.com/supabase/supabase-js/issues/534#issuecomment-1272846779"
                },
                {
                    "id": "IC_kwDOD79Crs5OUSD0",
                    "body": "> hi @OverGreed, instead of creating a shared client on the backend, you should be creating a client on every route to handle the request. For example:\r\n> \r\n> ```js\r\n> app.get('/example', (req, res) => {\r\n>   const supabase = createClient(process.env.SUPABASE_URL, req.cookies['sb-access-token'])\r\n>   ...\r\n> })\r\n> ```\r\n\r\nI can't get this to work. User is logged in fine. I have a correct access token. But it throws an error like this:\r\n\r\n```\r\n{\r\n   message: 'Invalid API key',\r\n   hint: 'Double check your Supabase `anon` or `service_role` API key.'\r\n}\r\n```",
                    "author": {
                        "login": "JoaoCnh"
                    },
                    "createdAt": "2022-11-14T15:32:01Z",
                    "url": "https://github.com/supabase/supabase-js/issues/534#issuecomment-1313939700"
                },
                {
                    "id": "IC_kwDOD79Crs5OUjIK",
                    "body": "> Hi @ydennisy, could you elaborate on the issues you face with v1 auth? we would love to see if the changes we made for v2 auth helps to address those issues!\r\n> \r\n> > these new changes not looking hugely ergonomic\r\n> \r\n> it would be great if you could elaborate on this point too - are these new changes not looking ergonomic because you've not seen other client libraries do this? or are you concerned about the changes from a performance efficiency POV?\r\n\r\n@kangmingtay  I can't speak for @ydennisy, but for me, creating clients everywhere makes me feel like Supabase is very tightly coupled to basically all of my application. \r\n\r\nThat's not great for me if I want to put all of my database calls in a specific chunk of code and then wrap them with some other interface for the rest of my application (in case, for example, something changes and I want to adjust to fit the new (external, e.g. Supabase) API without having to change many many pages).",
                    "author": {
                        "login": "chrisb2244"
                    },
                    "createdAt": "2022-11-14T16:15:12Z",
                    "url": "https://github.com/supabase/supabase-js/issues/534#issuecomment-1314009610"
                },
                {
                    "id": "IC_kwDOD79Crs5ejy9c",
                    "body": "@chrisb2244 what about having a module with a factory function that runs `createClient` when you want to?\r\n\r\nYou configure it in a single file, then import a `buildMyClient` function with no parameters, that actually executes the `createClient`. ",
                    "author": {
                        "login": "Pictor13"
                    },
                    "createdAt": "2023-06-12T01:39:45Z",
                    "url": "https://github.com/supabase/supabase-js/issues/534#issuecomment-1586442076"
                },
                {
                    "id": "IC_kwDOD79Crs5ejzmm",
                    "body": "@JoaoCnh did you manage to resolve the \"Invalid API key\" issue?\r\n",
                    "author": {
                        "login": "Pictor13"
                    },
                    "createdAt": "2023-06-12T01:43:23Z",
                    "url": "https://github.com/supabase/supabase-js/issues/534#issuecomment-1586444710"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5Q87uo",
            "number": 535,
            "title": "Using SUPABASE_SERVICE_ROLE_KEY to connect does not return the correct query result unless RLS is turned off",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nI am using an edge function and inside the supabase client, I am using the `SUPABASE_SERVICE_ROLE_KEY` environmental variable to connect so that the RLS policies do not apply while making a query. \r\n\r\nThe issue is that even though I use it, the RLS policy still applies and the query result is not getting returned correctly unless RLS is turned off.\r\n\r\n\r\n## To Reproduce\r\n\r\nThis is my code inside the `supabaseClient.ts` file\r\n\r\n```ts\r\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@^1.33.2'\r\n\r\nexport const supabaseClient = createClient(\r\n    Deno.env.get('SUPABASE_URL') ?? '',\r\n    Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''\r\n)\r\n```\r\n\r\nThis is the code that I am executing inside the `index.ts` file\r\n```ts\r\nsupabaseClient.auth.setAuth(req.headers.get('Authorization')!.replace('Bearer ', ''))\r\n\r\nconst { data, error } = await supabaseClient.from('users').select('*')\r\nconsole.log({ data, error })\r\n\r\nreturn new Response(JSON.stringify({ data, error }), {\r\n  headers: { ...corsHeaders, 'Content-Type': 'application/json' },\r\n  status: 200,\r\n})\r\n```\r\n\r\n## Expected behavior\r\n\r\nThe result is returned the same even if RLS is turned on.",
            "author": {
                "login": "fabianmetricsbird"
            },
            "state": "CLOSED",
            "createdAt": "2022-09-01T02:14:40Z",
            "closedAt": "2022-09-03T16:01:16Z",
            "url": "https://github.com/supabase/supabase-js/issues/535",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5JiIRH",
                    "body": "> supabaseClient.auth.setAuth(req.headers.get('Authorization')!.replace('Bearer ', ''))\r\n\r\nDoes it work if you remove this line? The API key in `createClient` sets the Bearer header - this line replaces it.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-01T03:10:53Z",
                    "url": "https://github.com/supabase/supabase-js/issues/535#issuecomment-1233683527"
                },
                {
                    "id": "IC_kwDOD79Crs5JrigL",
                    "body": "That worked. Thank you!",
                    "author": {
                        "login": "fabianmetricsbird"
                    },
                    "createdAt": "2022-09-03T16:01:15Z",
                    "url": "https://github.com/supabase/supabase-js/issues/535#issuecomment-1236150283"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5Q9qMf",
            "number": 536,
            "title": "supabase-js .single() returning array",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nAfter updating to supabase-js v2 rc-1, appending `.single()` to a query continues to return an array in the actual `data`. The types from the new type gen properly infer that a single non-array item should be returned when `.single()` is used, so manually specifying `data[0]` produces an `any` type inference. However, logging `data` shows that it was returned as an array. The same code works as expected in the latest supabase-js v1.\r\n\r\n## To Reproduce\r\n\r\n```js\r\nconst { data, error } = await supabase\r\n    .from('my_table')\r\n    .select(\r\n    `\r\n    *,\r\n    my_relation (\r\n      *\r\n    )\r\n  `\r\n    )\r\n    .eq('id', itemId)\r\n    .single();\r\n\r\n// `data` is inferenced correctly as a single `my_table` item\r\n// Additionally, error is null, so .single() did not throw, since there was 1 item returned\r\n// however, data itself is logged as an array of length 1 of the item\r\n// `[{ /* ...itemContents */ }]`\r\nconsole.log(data);\r\n```\r\n\r\n## Expected behavior\r\n\r\n`.single()` should cause data to return the single object (or throw if multiple) not an array of the object (as inferred by the types).\r\n\r\n## System information\r\n\r\n- OS: Windows\r\n- Browser chrome\r\n- Version of supabase-js: 2.0.0-rc.1\r\n- Version of Node.js: 16.14.2\r\n",
            "author": {
                "login": "Daynil"
            },
            "state": "CLOSED",
            "createdAt": "2022-08-17T22:58:48Z",
            "closedAt": "2022-09-01T21:57:40Z",
            "url": "https://github.com/supabase/supabase-js/issues/536",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5JiqLL",
                    "body": "Is this still happening? I couldn't reproduce this in 2.0.0-rc.1 or the latest `rc` version.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-08-24T03:01:12Z",
                    "url": "https://github.com/supabase/supabase-js/issues/536#issuecomment-1233822411"
                },
                {
                    "id": "IC_kwDOD79Crs5JiqLR",
                    "body": "Thanks for looking into this @soedirgo!\r\n\r\nI believe I have pinpointed the issue. I am using a custom fetch implementation, and my fetch call was not receiving the [`vnd.pgrst.object` header](https://postgrest.org/en/stable/api.html#singular-or-plural). Likewise, I'm not receiving other headers, like `headers['Content-Type'] = 'application/json';` for post requests or `headers['prefer'] = 'return=representation'` for non-GET requests.\r\n\r\nWould you be able to provide any guidance on why I'm not receiving any headers from supabase here? I used [the guidance here](https://supabase.com/docs/reference/javascript/next/initializing#custom-fetch-implementation).\r\n\r\n```ts\r\nconst supabase = createClient<Database>(\r\n\tappConfig.frontend.supabase.url,\r\n\tappConfig.frontend.supabase.anonKey,\r\n\t{\r\n\t\tglobal: {\r\n\t\t\tfetch: supabaseFetch.bind(globalThis)\r\n\t\t}\r\n\t}\r\n);\r\n\r\n\r\nexport async function supabaseFetch(\r\n\tinput: RequestInfo | URL,\r\n\tinit?: RequestInit\r\n) {\r\n        // **** Input contains the fully constructed URL from supabase\r\n        // i.e. project.supabase.co/rest/v1/my_table?id=eq.1\r\n\tconsole.log('from supabase input: ', input);\r\n\r\n        // **** init contains method 'GET', but the headers object is empty\r\n        // should this contain {Accept: 'application/vnd.pgrst.object+json'} after a .single() call?\r\n        // If not, how else can I determine .single was called in my custom fetch?\r\n       // i.e. {method: 'GET', headers: {}, body: undefined, signal: undefined}\r\n\tconsole.log('from supabase init: ', init);\r\n\r\n\tconst authHeader: { Authorization: string; apikey: string } = {\r\n\t\tAuthorization: `Bearer ${await getSupabaseToken()}`,\r\n\t\tapikey: appConfig.frontend.supabase.anonKey\r\n\t};\r\n\r\n\tconst headers: HeadersInit = init.headers\r\n\t\t? { ...init.headers, ...authHeader }\r\n\t\t: authHeader;\r\n\r\n\tif (init.body) {\r\n\t\t// https://postgrest.org/en/stable/api.html#calling-functions-with-a-single-unnamed-parameter\r\n\t\theaders['Content-Type'] = 'application/json';\r\n\t\t// body already comes stringified from supabase-js\r\n\t\t// init.body = JSON.stringify(init.body);\r\n\t}\r\n\r\n\tif (init.method !== 'GET' && init.method !== 'OPTIONS') {\r\n\t\t// Required to get data back from non-GET requests\r\n\t\t// https://postgrest.org/en/stable/api.html#insertions-updates\r\n\t\theaders['prefer'] = 'return=representation';\r\n\t}\r\n\r\n        // **** How do I know when to set this?\r\n\tif (init.method === 'GET') {\r\n\t\theaders['Accept'] = 'application/vnd.pgrst.object+json';\r\n\t}\r\n\r\n\t// Cast as RequestInfo solves a type error only found in the compiler for some reason\r\n\treturn fetch(input as RequestInfo, {\r\n\t\t...init,\r\n\t\theaders\r\n\t});\r\n}\r\n\r\n```",
                    "author": {
                        "login": "Daynil"
                    },
                    "createdAt": "2022-08-24T23:03:25Z",
                    "url": "https://github.com/supabase/supabase-js/issues/536#issuecomment-1233822417"
                },
                {
                    "id": "IC_kwDOD79Crs5JiqLZ",
                    "body": "Hmm, can you elaborate what you're aiming for with the custom fetch?\r\n\r\n> init contains method 'GET', but the headers object is empty\r\n\r\nThat's odd - it should have headers populated, incl. auth headers and Accept. Does it work if you don't pass a custom fetch?",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-08-25T04:53:48Z",
                    "url": "https://github.com/supabase/supabase-js/issues/536#issuecomment-1233822425"
                },
                {
                    "id": "IC_kwDOD79Crs5JiqLd",
                    "body": "Yeah, I'm using it to sync with an external auth provider. I need to sync the custom supabase auth key every 30 minutes since it regenerates. Previously, I was using `supabase.auth.setAuth(token)` similar to the [process described here](https://clerk.dev/docs/integration/supabase#configure-your-client). Since supabase v2 has removed setAuth, I've been considering the alternatives and this has been my favorite, other than the issue above with init.headers not getting passed through.\r\n\r\nI looked into the suggestion in [the removal PR](https://github.com/supabase/gotrue-js/pull/340) to pass the custom header into `createClient()`, but since the authentication token refreshes I can't just set it once. Also the call to get the first token is async, so that makes it tricky to export. I guess the other option is to recreate the client for every request, but that doesn't seem as clean/efficient as injecting your headers via the custom fetch?\r\n\r\n>That's odd - it should have headers populated, incl. auth headers and Accept. Does it work if you don't pass a custom fetch?\r\n\r\nIt does work fine without the custom fetch. I tried to [create a minimal reproduction here](https://stackblitz.com/edit/nextjs-8wfisu?file=pages%2F_app.js,package.json,supabase-service.js,pages%2Findex.js) (single table `todos` with two items, id's 1 and 2) and discovered that it does in fact pass an empty header into the custom fetch call. However, if I *just* pass both properties back to `fetch` without any other modification, in the network tab, all headers are set properly. If I try to set a custom header that supabase has already set (such as the one I need, `Authorization`), supabase seems to automatically overwrite it to the default (which is the `anon` key). The only way for me to get my custom `Authorization` header set is to completely overwrite the `headers` object with my own, in which case I need to manually reconstruct the appropriate headers since we aren't getting passed them in the custom fetch call, and for the `.single()` call, we can't know whether it was called with single in the custom fetch.",
                    "author": {
                        "login": "Daynil"
                    },
                    "createdAt": "2022-08-26T04:08:32Z",
                    "url": "https://github.com/supabase/supabase-js/issues/536#issuecomment-1233822429"
                },
                {
                    "id": "IC_kwDOD79Crs5JiqLh",
                    "body": "Thanks for the thorough explanation! I'll have a look at the repro link.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-08-26T04:22:45Z",
                    "url": "https://github.com/supabase/supabase-js/issues/536#issuecomment-1233822433"
                },
                {
                    "id": "IC_kwDOD79Crs5JiqLj",
                    "body": "Sorry for the late reply - had a look at the repro link (thanks again!) and it seems like this was caused by `init.headers` being a [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers) object instead of a `{ [key: string]: string }`. You can get the actual values if you do:\r\n```ts\r\nfor (const [headerKey, headerValue] of init?.headers?.entries() ?? []) {\r\n  console.log('header:', headerKey, headerValue)\r\n}\r\n```\r\n\r\nThat said, we don't make any guarantee that this will always be `Headers`, so you'll need to handle [both cases](https://developer.mozilla.org/en-US/docs/Web/API/fetch#headers).",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-01T06:49:04Z",
                    "url": "https://github.com/supabase/supabase-js/issues/536#issuecomment-1233822435"
                },
                {
                    "id": "IC_kwDOD79Crs5Jme0U",
                    "body": "Wow, can't believe I haven't run into this particular javascript idiosyncrasy until now! Thanks @soedirgo!!\r\n\r\nI adjusted my code and everything works exactly as expected:\r\n\r\n```ts\r\nexport async function supabaseFetch(\r\n\u00a0 input: RequestInfo | URL,\r\n\u00a0 init?: RequestInit\r\n) {\r\n    if (init.headers instanceof Headers) {\r\n        init.headers.set('Authorization', `Bearer ${await getSupabaseToken()}`);\r\n    } else {\r\n        init.headers['Authorization'] = `Bearer ${await getSupabaseToken()}`;\r\n    }\r\n    return fetch(input, init);\r\n}\r\n```\r\n",
                    "author": {
                        "login": "Daynil"
                    },
                    "createdAt": "2022-09-01T21:57:40Z",
                    "url": "https://github.com/supabase/supabase-js/issues/536#issuecomment-1234824468"
                },
                {
                    "id": "IC_kwDOD79Crs5ZZSB9",
                    "body": "Hi I ran into this issue as well recently in a NextJS project in a server component but in a peculiar way.\r\n\r\nI was doing\r\n\r\n```ts\r\nconst { data, error } = await supabase\r\n    .from('mytable')\r\n    .select('*')\r\n    .eq('slug', slug)\r\n    .single();\r\n```\r\n\r\nThis returns an array with one object.\r\n\r\nHowever if I add a second condition: (`.eq('column', true')`) to the first, then it just returns an object and not an array.\r\n\r\nThis is in NextJS in a server component but I'm not doing anything fancy other than this read.\r\n\r\nIs this expected behavior of some kind/when does .single() still return an array?",
                    "author": {
                        "login": "Aldo111"
                    },
                    "createdAt": "2023-04-07T00:52:33Z",
                    "url": "https://github.com/supabase/supabase-js/issues/536#issuecomment-1499799677"
                },
                {
                    "id": "IC_kwDOD79Crs5ZZ1Xc",
                    "body": "It's not expected behavior - do you have a public repo that demonstrates the issue so I can reproduce it?",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-04-07T05:13:47Z",
                    "url": "https://github.com/supabase/supabase-js/issues/536#issuecomment-1499944412"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5RAGNb",
            "number": 537,
            "title": ".on() with .subscribe() callback is not firing",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nBuilding a simple chat app with creat-react-app (React 18), supabase, chakra-ui, and react-query. I have a subscription that is definitely working as I can see the WS connection and incoming payload in the Chrome network tab, however my logic contained within the event callback is never fired. I'll include some code snippets below:\r\n\r\nHere is my mutation logic:\r\n\r\n```tsx\r\nconst add: MessageStorage[\"add\"] = async (messageNew) => {\r\n  const { data, error } = await client\r\n    .from<Message>(\"messages\")\r\n    .insert(messageNew)\r\n    .single()\r\n  if (!data) throw new Error(error.message)\r\n  return data\r\n}\r\n\r\nexport function useAddMessage() {\r\n  const {\r\n    mutate: addMessage,\r\n    isLoading,\r\n    error,\r\n  } = useMutation<Message, unknown, Omit<Message, \"id\" | \"createdAt\">>(\r\n    (partialMessage) => messageStorage.add(partialMessage),\r\n  )\r\n  return { addMessage, isLoading, error }\r\n}\r\n```\r\n\r\nHere is my subscription:\r\n\r\n```tsx\r\nexport function useMessagesSubscription() {\r\n  const queryClient = useQueryClient()\r\n\r\n  const onEventChange = useCallback(\r\n    (message: SupabaseRealtimePayload<Message>) => {\r\n      console.log(message)\r\n\r\n      queryClient.setQueryData<Message[]>(MessageQueryKeys.getAll, (prev = []) => [\r\n        ...prev,\r\n        message.new,\r\n      ])\r\n    },\r\n    [queryClient],\r\n  )\r\n\r\n  useEffect(() => {\r\n    const subscription = client\r\n      .from<Message>(\"messages\")\r\n      .on(\"INSERT\", onEventChange)\r\n      .subscribe()\r\n\r\n    return () => {\r\n      client.removeSubscription(subscription)\r\n    }\r\n  }, [queryClient, onEventChange])\r\n}\r\n```\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\nThis repo is unfortunately private so recreating is understandably annoying but might be achieved via the following:\r\n\r\n1. Create a react app with create-react-app and v18\r\n2. `npm i react-query @supabase/supabase-js @chakra-ui/react @emotion/react @emotion/styled framer-motion`\r\n3. Make sure you are running the latest stable release of supabase-js (v1.36.5)\r\n4. Create a Supabase project\r\n5. Add a table\r\n6. Enable realtime `Database -> Replication -> Turn on realtime for the given table.`\r\n7. Follow the steps for creating a Supabase client.\r\n8. Copy and paste the above useEffect and replace table name with your table. \r\n9. Listen to \"INSERT\" events\r\n10. See if the callback is invoked after adding a row via the Supabase GUI.\r\n\r\n## Expected behavior\r\n\r\nI would expect that when a new message is added that the callback within the .on() method would be invoked. Am I totally crazy, is this just a me problem? I've scoured the web only to find many people with the exact same solutions but not encountering the same problem.\r\n\r\n## Screenshots\r\n\r\n\r\nhttps://user-images.githubusercontent.com/46500734/187945199-08ac76c0-eca0-4514-b996-1e4745883786.mov\r\n\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser: Chrome\r\n- Version of supabase-js: 1.36.5\r\n- Version of Node.js: 16\r\n",
            "author": {
                "login": "thispastwinter"
            },
            "state": "CLOSED",
            "createdAt": "2022-09-01T14:53:18Z",
            "closedAt": "2022-09-02T15:41:42Z",
            "url": "https://github.com/supabase/supabase-js/issues/537",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5JpblS",
                    "body": "If making my repo public helps expedite things, I'm happy to do so. Just let me know.",
                    "author": {
                        "login": "thispastwinter"
                    },
                    "createdAt": "2022-09-02T14:52:28Z",
                    "url": "https://github.com/supabase/supabase-js/issues/537#issuecomment-1235597650"
                },
                {
                    "id": "IC_kwDOD79Crs5JpoEx",
                    "body": "Actually I figured it out and am going to close this! I'm using React 18 with Strict Mode. Since useEffects are fired twice in Strict Mode the connection was closing.",
                    "author": {
                        "login": "thispastwinter"
                    },
                    "createdAt": "2022-09-02T15:41:42Z",
                    "url": "https://github.com/supabase/supabase-js/issues/537#issuecomment-1235648817"
                },
                {
                    "id": "IC_kwDOD79Crs5Jpq6Y",
                    "body": "It appears this issue has been fixed in v2, so I look forward to that upgrade path :)",
                    "author": {
                        "login": "thispastwinter"
                    },
                    "createdAt": "2022-09-02T15:53:06Z",
                    "url": "https://github.com/supabase/supabase-js/issues/537#issuecomment-1235660440"
                },
                {
                    "id": "IC_kwDOD79Crs5Jqi1n",
                    "body": "@thispastwinter yep, want to confirm that i fixed it in v2!",
                    "author": {
                        "login": "w3b6x9"
                    },
                    "createdAt": "2022-09-02T20:57:28Z",
                    "url": "https://github.com/supabase/supabase-js/issues/537#issuecomment-1235889511"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5RgOUq",
            "number": 548,
            "title": "Add TypeScript support for views",
            "body": "# Feature request\r\n\r\nCurrently, `supabase.from(viewName)` does not provide correct typings in the same way `supabase.from(tableName)` does.\r\n\r\nAs an example, let's say I have an `accounts` table from which I derive an `accountsWithBalance` view, if I inspect the generated types from a `select` query, I will get the proper types for the `accounts` table query, but an `any[]` for the `accountsWithBalance` one:\r\n\r\n```typescript\r\nconst { data: accounts, error } = await supabase.from(\"accounts\").select(\"*\");\r\ntypeof accounts => {\r\n    id: string;\r\n    name: string;\r\n    type: \"checking\" | \"savings\" | \"debt\";\r\n    createdAt: string;\r\n    updatedAt: string;\r\n    isOffBudget: boolean;\r\n}[] | undefined\r\n\r\nVS\r\n\r\nconst { data: accounts, error } = await supabase.from(\"accountsWithBalance\").select(\"*\");\r\ntypeof accounts => any[] | undefined\r\n```\r\n\r\nI tinkered a bit with the types by adding `Views` in [`GenericSchema`](https://github.com/supabase/supabase-js/blob/rc/src/lib/types.ts#L67-L70) but this triggered a cascade of type errors which in my opinion are due to the fact that views are not updatable.\r\n\r\nI might try again looking at this a bit later if it is not added in the meantime.",
            "author": {
                "login": "madx"
            },
            "state": "CLOSED",
            "createdAt": "2022-09-09T07:20:17Z",
            "closedAt": "2022-09-09T08:36:49Z",
            "url": "https://github.com/supabase/supabase-js/issues/548",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5KAe-J",
                    "body": "Sorry about this, I keep forgetting to duplicate some postgrest-js updates to supabase-js. Can you try updating supabase-js and checking again?",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-09T08:02:42Z",
                    "url": "https://github.com/supabase/supabase-js/issues/548#issuecomment-1241640841"
                },
                {
                    "id": "IC_kwDOD79Crs5KAnx8",
                    "body": "Well that was fast! Confirming that this is working in rc10, thanks alot!",
                    "author": {
                        "login": "madx"
                    },
                    "createdAt": "2022-09-09T08:36:49Z",
                    "url": "https://github.com/supabase/supabase-js/issues/548#issuecomment-1241676924"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5RtucU",
            "number": 550,
            "title": "Handle mixed bulk upsert",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nI'm submitting some form data to Supabase where some data exists already (therefore we have primary key data for it), and some data is new (no primary key data for it).\r\n\r\nI'd like to save this data to the database in one go using [bulk upsert](https://supabase.com/docs/reference/javascript/upsert#bulk-upsert-your-data). Currently attempting to do so results in the following error:\r\n\r\n```\r\n{\"code\":\"PGRST102\",\"details\":null,\"hint\":null,\"message\":\"All object keys must match\"}\r\n```\r\n\r\nThis is the payload:\r\n\r\n```\r\n[{\"x_id\":39,\"y_id\":78,\"value\":\"ABC\",\"id\":5},{\"x_id\":40,\"y_id\":78,\"value\":\"XYZ\"}]\r\n```\r\n\r\n## Describe the solution you'd like\r\n\r\nSupabase will accept this payload, and handle both new inserts and updates automatically.\r\n\r\n## Describe alternatives you've considered\r\n\r\nMaking two Supabase API calls. This is not ideal because the JS library (and the backing Postgres library) [do not support transactions](https://github.com/supabase/supabase/issues/472) either. We can't guarantee that **both** insert and update go through, or **neither** do.",
            "author": {
                "login": "MaybeThisIsRu"
            },
            "state": "CLOSED",
            "createdAt": "2022-09-13T06:46:13Z",
            "closedAt": "2022-09-13T09:04:08Z",
            "url": "https://github.com/supabase/supabase-js/issues/550",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5KNMiJ",
                    "body": "Looks like this has been requested before in this thread: https://github.com/supabase/postgrest-js/issues/173#issuecomment-824991256",
                    "author": {
                        "login": "MaybeThisIsRu"
                    },
                    "createdAt": "2022-09-13T06:47:50Z",
                    "url": "https://github.com/supabase/supabase-js/issues/550#issuecomment-1244973193"
                },
                {
                    "id": "IC_kwDOD79Crs5KNu56",
                    "body": "Yeah, seems like the same issue as the one you linked. Closing this one in favor of that one.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-13T09:04:08Z",
                    "url": "https://github.com/supabase/supabase-js/issues/550#issuecomment-1245113978"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5Rx3Mh",
            "number": 551,
            "title": "After updating to Supabase-js 2.0, expected return type is genericStringError",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen trying to run a select query with supabase-js 2.0, typescript throws an error that the data returned by the api call is a generic string error causing issues.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\nHere is the select function being ran:\r\n\r\n```\r\n const { data, error } = await supabase\r\n      .from(\"show\")\r\n      .select(attributes)\r\n      .eq(\"slug\", slug);\r\n    if (error) throw error;\r\n    return data;\r\n```\r\n\r\n## Expected behavior\r\n\r\nNot entirely sure what the return type should be, but I know it shouldn't expect to return a genericStringError. The data does get returned but this genericStringError is causing problems\r\n\r\n## Screenshots\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n## System information\r\n\r\nMacOS\r\nSupabase-js: 2.0\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "devlukedreamstage"
            },
            "state": "CLOSED",
            "createdAt": "2022-09-13T21:27:52Z",
            "closedAt": "2022-09-13T21:51:45Z",
            "url": "https://github.com/supabase/supabase-js/issues/551",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5KR1cv",
                    "body": "If anyone else bumps into this: `.select()` expects a string literal, not a `string` variable, otherwise the typings don't work properly. To ignore the `GenericStringError`, you can do `.select(foo as any)`.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-14T03:34:59Z",
                    "url": "https://github.com/supabase/supabase-js/issues/551#issuecomment-1246189359"
                },
                {
                    "id": "IC_kwDOD79Crs5SaXzZ",
                    "body": "Unfortunately, still seeing this issue:\r\n```\r\n    const { data: publicData, error: publicError } = await supabase.from(tableName).select(columns as any).eq('id', viewableObjectId).single();\r\n    if (publicError) {\r\n      throw new Error(publicError.message);\r\n    }\r\n   ```\r\nThe types being returned for publicData shows the genericstringerror\r\n\r\nHas this fix perhaps been broken by the latest updates?",
                    "author": {
                        "login": "juanvilladev"
                    },
                    "createdAt": "2023-01-14T03:03:21Z",
                    "url": "https://github.com/supabase/supabase-js/issues/551#issuecomment-1382644953"
                },
                {
                    "id": "IC_kwDOD79Crs5ZAbfl",
                    "body": "Hi I have the same issue with the same setup as the OP, I keep seeing \"GenericStringError\" for the return and it errors out.\r\n\r\nDoing `as any` didn't work but doing `columns as '*'` seems to kill the error. Still very unwieldy as a hack.",
                    "author": {
                        "login": "Aldo111"
                    },
                    "createdAt": "2023-04-02T10:00:28Z",
                    "url": "https://github.com/supabase/supabase-js/issues/551#issuecomment-1493284837"
                },
                {
                    "id": "IC_kwDOD79Crs5q56OZ",
                    "body": "It'd be nice if they more intentionally exposed the type to do this, but you can accomplish this by doing something like:\r\n\r\n```\r\nimport type { GetResult } from \"@supabase/postgrest-js/dist/module/select-query-parser.d.ts\";\r\nexport type { Database } from \"~/types/database\"; // This is the database types file produced by \r\n\r\nconst supabase = createClient<Database>(\"...\", \"...\");\r\n      \r\ntype Tables = Database[\"public\"][\"Tables\"];\r\ntype TableName = keyof Tables;\r\ntype RowType<T extends TableName> = Tables[T][\"Row\"];\r\ntype RelationshipsType<T extends TableName> = Tables[T][\"Relationships\"];\r\n\r\ntype QueryResult<T extends TableName, Q extends string> = GetResult<\r\n    Database,\r\n    RowType<T>,\r\n    RelationshipsType<T>,\r\n    Q\r\n  >;\r\n\r\nconst myWrappedQuery = async <T extends TableName, Q extends string = \"*\">(\r\n  table: T,\r\n  select: Q,\r\n  query: Record<string, unknown> = {},\r\n): QueryResult<T, Q> => {\r\n  const {data} = await supabase\r\n        .from(table)\r\n        .select(select)\r\n        .match(query);\r\n  return data\r\n};\r\n```",
                    "author": {
                        "login": "cco3"
                    },
                    "createdAt": "2023-11-04T22:03:19Z",
                    "url": "https://github.com/supabase/supabase-js/issues/551#issuecomment-1793565593"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5SFnG0",
            "number": 552,
            "title": "supabase-js 2.0.0-rc.10 - Custom headers not being passed to supabase requests.",
            "body": "# Bug report\r\nCustom headers are not being passed to supabase queries in this RC.\r\n\r\n## Describe the bug\r\nWhen using custom headers, the supabase client no longer adds them to query requests. This is working in 1.35.2. \r\n\r\n## To Reproduce\r\n\r\n1. \r\n```\r\n   supabase = createClient(supabaseUrl, supabaseAnonKey, {\r\n      headers: {\r\n        my_custom_header: 'abracadabra',\r\n      },\r\n    });\r\n\r\n  const { data: meetingData, error } = await supabase\r\n    .from(\"my_table\")\r\n    .select(\"*\")\r\n    .eq(\"id\", id)\r\n    .single();\r\n\r\n```\r\n## Expected behavior\r\nAmong request headers in the supabase GET request:\r\nmy_custom_header: 'abracadabra'\r\n\r\n## System information\r\n- OS: Mac\r\n- Browser (if applies) Version 15.6.1 (15613.3.9.1.16, 15613)\r\n- Version of supabase-js: 2.0.0-rc.10 \r\n\r\n## Additional context\r\nI'm using a custom header with RLS rules to provide access to particular rows for anon users. This is a workaround for not being able use an auth header with realtime websockets subscriber however now with the broadcast/presence method I may be able to achieve the same result.\r\n\r\n",
            "author": {
                "login": "jonascript"
            },
            "state": "CLOSED",
            "createdAt": "2022-09-18T22:50:47Z",
            "closedAt": "2022-10-31T03:38:35Z",
            "url": "https://github.com/supabase/supabase-js/issues/552",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5M-qfX",
                    "body": "The config is updated, now headers is under global option.\r\n\r\n```ts\r\nconst supabase = createClient(supabaseUrl, supabaseAnonKey, {\r\n  global: { \r\n    headers: {\r\n      my_custom_header: 'abracadabra',\r\n    },\r\n  }\r\n});\r\n```",
                    "author": {
                        "login": "hammercodegh"
                    },
                    "createdAt": "2022-10-26T04:47:43Z",
                    "url": "https://github.com/supabase/supabase-js/issues/552#issuecomment-1291495383"
                },
                {
                    "id": "IC_kwDOD79Crs5NPc31",
                    "body": "@hammercodegh thank you!",
                    "author": {
                        "login": "jonascript"
                    },
                    "createdAt": "2022-10-29T16:40:37Z",
                    "url": "https://github.com/supabase/supabase-js/issues/552#issuecomment-1295896053"
                },
                {
                    "id": "IC_kwDOD79Crs5NRv-a",
                    "body": "Closing this - @jonascript feel free to comment if it doesn't work so we can reopen :)",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-10-31T03:38:35Z",
                    "url": "https://github.com/supabase/supabase-js/issues/552#issuecomment-1296498586"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5SK5qY",
            "number": 553,
            "title": "v2.0.0 regression: Custom JWT (particularly in realtime Channels)",
            "body": "# Bug report\r\n\r\n## Description\r\n\r\nUsing a custom JWT was a feature in v1 :\r\n https://supabase.com/docs/reference/javascript/auth-setauth\r\n\r\nPer comment:\r\n https://github.com/supabase/gotrue-js/pull/340#issuecomment-1218065610\r\nwhat we did was establish the custom header and it works for creating the client.\r\n\r\nHowever, it's not working with realtime channels. Upon inspection, the problem is that the internal initialization isn't setting up RealtimeClient's setAuth method:\r\n  https://github.com/supabase/realtime#realtime-rls\r\nwhich in turn causes the web socket to not send the JWT on the messages and heartbeats..\r\n\r\nThe result is that channels fail the RLS.\r\n\r\nA second problem is with setting up a new valid JWT when the previous one expired: there's no way to do it.  Not in the supabase client and much less in the realtime client.\r\n\r\n## To Reproduce\r\n\r\n1. Create a database with a restrictive policy based on a custom JWT\r\n2. Create a JWT with a 1 minute expiration time\r\n3. Create a client using the method explained in \r\n    https://github.com/supabase/gotrue-js/pull/340#issuecomment-1218065610\r\n4.a. Let 2 minutes go by and try to make any call to supabase using supabaseClient.  Access is denied because the JWT has expired.  Try to update the JWT -> there's no way to do it.  Would have to create a new client but that defeats the whole thing.\r\n4.b. Create a channel subscription -> 'fails' by not providing access to rows to which the user has access acording to the policy)\r\n\r\nUpon inspection of the websocket, as it was expected, the messages and heartbeats don't include the custom JWT.. Why whould they? We've only set the header /directly/ and that's it..\r\n\r\n## Workaround\r\n\r\nWhat we've done is changing from protected to public the supabase client's class elements:\r\n   \"headers\" in SupabaseClient\r\n   \"realtime\" in GoTrueClient\r\nand we're calling \r\n  a) supabaseClient.realtime.setAuth(JWT) \r\n  b) supabase.auth.headers.Authorization = `Bearer ${JWT}`;\r\nwith the customToken..\r\n\r\nThat keeps everything working..\r\n\r\nTried forking and creating an updateJWT method, but realized we're not very familiar with the modularization philosophy of the project and was most likely being both overkill about it.  Also, were falling short because an alternate method is quite likely required for the initialization, since using the headers option in the createClient doesn't impact the realtime client.\r\n",
            "author": {
                "login": "LuisAngelVzz"
            },
            "state": "CLOSED",
            "createdAt": "2022-09-19T22:19:26Z",
            "closedAt": "2023-09-20T21:06:09Z",
            "url": "https://github.com/supabase/supabase-js/issues/553",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5KqPUG",
                    "body": "What I was hoping for was a SignInWithToken(...) api\r\nthat would take the JWT, create a session, and call the authstatechanged callbacks.\r\n\r\nAs is it feels daunting reaching in to protected fields in multiple files to achieve this.",
                    "author": {
                        "login": "magicseth"
                    },
                    "createdAt": "2022-09-20T16:14:41Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1252586758"
                },
                {
                    "id": "IC_kwDOD79Crs5ShaKk",
                    "body": "Any news on this? It's a regression.. Any way to get the devs attention?",
                    "author": {
                        "login": "jmedellinc"
                    },
                    "createdAt": "2023-01-16T19:53:02Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1384489636"
                },
                {
                    "id": "IC_kwDOD79Crs5SjB2O",
                    "body": "cc @kangmingtay @w3b6x9 ",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-01-17T06:55:39Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1384914318"
                },
                {
                    "id": "IC_kwDOD79Crs5UFxiI",
                    "body": "I'm looking for something like this. It'll solve so many problems I'm having right now.",
                    "author": {
                        "login": "ofeenee"
                    },
                    "createdAt": "2023-01-31T17:38:24Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1410799752"
                },
                {
                    "id": "IC_kwDOD79Crs5UOlBT",
                    "body": "This was actually due to an issue where the Realtime client would always default to using the anon token. I released a change where Realtime client will use the global headers Authorization bearer token if present: https://github.com/supabase/supabase-js/releases/tag/v2.7.0",
                    "author": {
                        "login": "w3b6x9"
                    },
                    "createdAt": "2023-02-02T03:38:04Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1413107795"
                },
                {
                    "id": "IC_kwDOD79Crs5UOlNF",
                    "body": "I do want to mention that if your custom token is short-lived and you're refreshing it yourself you'll still have to call Realtime's `setAuth` in order to send the refreshed token to Realtime's servers.",
                    "author": {
                        "login": "w3b6x9"
                    },
                    "createdAt": "2023-02-02T03:39:42Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1413108549"
                },
                {
                    "id": "IC_kwDOD79Crs5USxVI",
                    "body": "> I do want to mention that if your custom token is short-lived and you're refreshing it yourself you'll still have to call Realtime's `setAuth` in order to send the refreshed token to Realtime's servers.\r\n\r\nHa..!  Thanks.. \r\n\r\nI wonder if the issue of a customJWT refresh method is on the todo's ? \r\nNot urgent.. My workaround works without issues..\r\n(There may be something I may be missing, though..)\r\n\r\nIt's all documented on  https://github.com/supabase/gotrue-js/issues/701 along with patches to unprotect the applicable class properties:\r\n```\r\nthis.supabase.headers.Authorization = Bearer ${supabaseToken};\r\nthis.supabase.auth.headers.Authorization = Bearer ${supabaseToken};\r\nthis.supabase.rest.headers.Authorization = Bearer ${supabaseToken};\r\n```\r\nwhich have to be updated in addition to calling setAuth again when the JWT expires..",
                    "author": {
                        "login": "jmedellinc"
                    },
                    "createdAt": "2023-02-02T18:49:45Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1414206792"
                },
                {
                    "id": "IC_kwDOD79Crs5UdCVY",
                    "body": "> This was actually due to an issue where the Realtime client would always default to using the anon token. I released a change where Realtime client will use the global headers Authorization bearer token if present: https://github.com/supabase/supabase-js/releases/tag/v2.7.0\r\n\r\nAfter taking a closer look the issue is on the API gateway. It only accepts Supabase signed tokens (i.e. `anon`, `service_role`).\r\n\r\nI just added a section to Realtime docs on how to pass in custom tokens: https://supabase.com/docs/guides/realtime/postgres-changes#custom-tokens.",
                    "author": {
                        "login": "w3b6x9"
                    },
                    "createdAt": "2023-02-05T01:51:13Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1416897880"
                },
                {
                    "id": "IC_kwDOD79Crs5VXQt5",
                    "body": "@w3b6x9 We've just been testing this and want to highlight that the docs are slightly off. They say to pass the Supabase key into headers and the custom JWT into params, whereas it's actually the other way around.\r\n\r\nWhat worked for us is:\r\n\r\n```\r\nconst { createClient } = require('@supabase/supabase-js')\r\n\r\nconst supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY, {\r\n  realtime: {\r\n    headers: {\r\n      apikey: 'custom-supabase-signed-jwt-token',\r\n    },\r\n    params: {\r\n      apikey: 'supabase-anon-key',\r\n    },\r\n  },\r\n})\r\n```\r\n\r\nWhereas the docs say:\r\n\r\n```\r\nconst { createClient } = require('@supabase/supabase-js')\r\n\r\nconst supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY, {\r\n  realtime: {\r\n    headers: {\r\n      apikey: 'supabase-signed-token',\r\n    },\r\n    params: {\r\n      apikey: 'your-custom-token',\r\n    },\r\n  },\r\n})\r\n```\r\n\r\nNote that the description of the Supabase anon key in the docs is also confusing:\r\n\r\n\"The `apikey` in `headers` must be either the `anon` or `service_role` token that Supabase signed\"\r\n\r\nOther than this needing to be the `apikey` in `params` not `headers`, it should probably also say \"that Supabase provides\" rather than \"that Supabase signed\". This caused a mini goose chase when debugging.",
                    "author": {
                        "login": "yamen"
                    },
                    "createdAt": "2023-02-15T22:37:27Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1432161145"
                },
                {
                    "id": "IC_kwDOD79Crs5YvdMb",
                    "body": "@w3b6x9 I'm migrating to Supabase from Firebase. I'm keeping firebase auth for now since Supabase doesn't have anonymous auth yet. To summarize and clarify the issues based on the above, here's what I currently do:\r\n\r\n1. Sign in the user with firebase auth \r\n2. Use an edge fn to verify the user's Firebase token then return a new token signed with the Supabase jwt key\r\n3. Create a client with the following config\r\n```ts\r\nconst db = createClient<Database>(creds.url, creds.key, {\r\n        auth: authOpts,\r\n        global: {\r\n            headers: {\r\n                authorization: `Bearer ${key}`, // my custom token\r\n            },\r\n        },\r\n        realtime: {\r\n            headers: {\r\n                apikey: key, // my custom token returned from my edge fn --docs have it backwards\r\n            },\r\n            params: {\r\n                apikey: creds.key, // the supabase anon key\r\n            },\r\n        },\r\n    })\r\n```\r\n\r\nThis method works up to the point where I need to refresh the user's token, which I want to do whenever their firebase token gets refreshed. I can call my edge fn to verify the new firebase token and generate a new supabase token, but then as @LuisAngelVzz pointed out there isn't a great way to set this new token in the existing client. For now I will use a workaround like was posted above.\r\n\r\nI think there are two things needed to solve these problems:\r\n\r\n1. Provide a method on supabase-js to explicitly handle setting a new custom auth token on an existing client\r\n2. And/or -- provide a `signUpWithCustomToken`/`signInWithCustomToken` option as suggested by @magicseth to create a real gotrue session based on the custom token.\r\n\r\nAre either of these things currently planned to be implemented? If so, when?\r\n\r\nI hope this effectively summarizes the issue. IMO this is likely to be a problem faced by almost everyone attempting to migrate from Firebse so I hope it can get bumped up to a higher priority by the Supabase team.\r\n\r\n",
                    "author": {
                        "login": "evelant"
                    },
                    "createdAt": "2023-03-29T15:22:34Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1488835355"
                },
                {
                    "id": "IC_kwDOD79Crs5Yy1Jo",
                    "body": "### Here is how I made my custom JWT work with RLS + REALTIME.\r\nI debugged this for a long time and found out that there was an issue in supabase-js package (The actual issue can be in realtime-js or go-true.js packages).\r\n\r\n**Issue:**\r\nIf you check line numbers 291 & 296 in [this file](https://github.com/supabase/supabase-js/blob/master/src/SupabaseClient.ts), you can see that if you are using a supabase auth and if the user is logged in, then they pass access token to realtime client using `this.realtime.setAuth(token)`  but if you are using custom authentication and custom JWT token then there is no way to pass that token using `setAuth`. \r\n\r\n**Workaround solution:**\r\nAdd these lines of code below line:124 and re-bundle the package (OR, simply patch it locally using method mentioned below)\r\n```\r\n this.realtime = this._initRealtimeClient({ headers: this.headers, ...settings.realtime })\r\n if(settings.realtime.params.accessToken){\r\n     this.realtime.setAuth(settings.realtime.params.accessToken)\r\n  }\r\n```\r\nThen pass the `accessToken` inside realtime.params like so\r\n\r\n\r\n```\r\nconst getSupabase = ({access_token}: {access_token: string}) => {\r\n  const supabase = createClient(\r\n    'instance_url',\r\n    'anon_key',\r\n    {\r\n      global: {\r\n        headers: {\r\n          Authorization: `Bearer ${access_token}`,\r\n        },\r\n        fetch: (url, options) => customFetchThatRefreshesAccessToken(url, options), // you don't need this if you don't want to handle refreshing your access token here\r\n      },\r\n      realtime: {\r\n        params: {\r\n          // This does not exist in Supabase doc, because this is a custom param that is handled by the local patch to @supabase/supabase-js library\r\n          // apikey was not working for some reason, so I had to use this workaround.\r\n          accessToken: access_token,\r\n        },\r\n      },\r\n    },\r\n  );\r\n\r\n  return supabase;\r\n};\r\n```\r\n\r\nIf you want to patch it locally, you can use `patch-package` and apply this patch.\r\npatch name: `@supabase+supabase-js+2.12.1.patch` (This is the patch for v2.12.1)\r\n\r\n```\r\ndiff --git a/node_modules/@supabase/supabase-js/dist/main/SupabaseClient.js b/node_modules/@supabase/supabase-js/dist/main/SupabaseClient.js\r\nindex 094b3b0..cfd033b 100644\r\n--- a/node_modules/@supabase/supabase-js/dist/main/SupabaseClient.js\r\n+++ b/node_modules/@supabase/supabase-js/dist/main/SupabaseClient.js\r\n@@ -81,6 +81,9 @@ class SupabaseClient {\r\n         this.auth = this._initSupabaseAuthClient((_e = settings.auth) !== null && _e !== void 0 ? _e : {}, this.headers, (_f = settings.global) === null || _f === void 0 ? void 0 : _f.fetch);\r\n         this.fetch = (0, fetch_1.fetchWithAuth)(supabaseKey, this._getAccessToken.bind(this), (_g = settings.global) === null || _g === void 0 ? void 0 : _g.fetch);\r\n         this.realtime = this._initRealtimeClient(Object.assign({ headers: this.headers }, settings.realtime));\r\n+        if (settings.realtime.params.accessToken){\r\n+            this.realtime.setAuth(settings.realtime.params.accessToken)\r\n+        }\r\n         this.rest = new postgrest_js_1.PostgrestClient(`${_supabaseUrl}/rest/v1`, {\r\n             headers: this.headers,\r\n             schema: (_h = settings.db) === null || _h === void 0 ? void 0 : _h.schema,\r\n\r\n```\r\n",
                    "author": {
                        "login": "Mukhammadali"
                    },
                    "createdAt": "2023-03-30T05:24:37Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1489719912"
                },
                {
                    "id": "IC_kwDOD79Crs5Y17Az",
                    "body": "For reference here is how I'm updating my supabase client whenever my firestore token gets refreshed. \r\n\r\n```ts\r\n/**\r\n * Hax to set new auth tokens on the supabase client when we generate a new token from a firebase token\r\n * See these issues\r\n * https://github.com/supabase/gotrue-js/issues/701\r\n * https://github.com/supabase/supabase-js/issues/553\r\n */\r\nexport const refreshSupabaseTokenFromFirebaseToken = async (\r\n    db: TaskHeroSupabaseClient | null,\r\n    firebaseToken: string\r\n) => {\r\n    const key = await getTokenFromFirebaseToken(firebaseToken)\r\n    if (!db) {\r\n        throw `db not initialized yet`\r\n    }\r\n    db.headers.Authorization = `Bearer ${key}`\r\n\r\n    db.realtime.setAuth(key)\r\n    \r\n    //@ts-ignore this is set as a protected field but we need to modify it to work around lack of custom token refresh\r\n    db.realtime.headers.apikey = `Bearer ${key}`\r\n    //@ts-ignore this is set as a protected field but we need to modify it to work around lack of custom token refresh\r\n    db.auth.headers.Authorization = `Bearer ${key}`\r\n    //@ts-ignore this is set as a protected field but we need to modify it to work around lack of custom token refresh\r\n    db.rest.headers.Authorization = `Bearer ${key}`\r\n\r\n    return key\r\n}\r\n\r\n```\r\nYou can use `@ts-ignore` if you don't feel like patching the .d.ts files. `protected` doesn't do anything at runtime so the fields are accessible, it's just TS that will compain when you try to access them.\r\n\r\nIt's also worth noting if you want to use firebase auth that firebase-js `onIdTokenChanged` doesn't actually get called when a token expires. You need to manually check the firebase token expiry and refresh your custom token before it expires. I use the `user.getIdTokenResult()` API to get the decoded token from the firebase API then periodically check the `claims.exp` field (and check anytime my react-native app is foregrounded) against the current time to see if expiration is near. If expiration is within 10 mins I call `user.getIdTokenResult(true)` to force a refresh and use the resulting token to refresh my custom Supabase token.",
                    "author": {
                        "login": "evelant"
                    },
                    "createdAt": "2023-03-30T15:45:02Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1490530355"
                },
                {
                    "id": "IC_kwDOD79Crs5Y3EQo",
                    "body": "As someone attempting to use a third-party auth, Clerk in this case, here are my thoughts about the direction of implementation for custom tokens. Bear with me here, I'm no master developer, so these are just my thoughts. \r\n\r\nThere seems to be a push to just create a new supabase client for every call and load the token at that time. \r\n\r\nHere are the things that I see that are problematic with this approach:\r\n1. If you have a short-lived token, you have to go fetch or compute the new token for every single call, which can add intense levels of latency to your DB calls. In my case, I have to serve up the token from Clerk, which takes 80-130ms roundtrip, which is now stacked every single time on top of the latency of making the actual db call from supabase.\r\n2. There is also just the straight-up machine overhead of creating new instances of an object over and over again instead of persisting an instantiation of it and just updating the key. De-allocating that memory and re-allocating along with all the other trace logic for every single call is bad practice but not inherently an issue on very small scales. BUT on a large application, this multiplies dramatically. Imagine an application with 5,000 active users and the sheer volume of wasted CPU and memory cycles if you're doing this on the server side. Nightmare. Gives me nightmares equivalent to edge function cold starts on every call. \ud83e\udd2e\r\n3. Connection pooling, I don't know if the supabase-js library supports the automatic pooling of requests. If it does or ever plans to in the future, this implementation would completely eliminate that possibility to pool because you have a total fresh client instantiation for every single call.\r\n\r\nNon-approached based notes of the current state of custom tokens:\r\n1. Unless someone else has found a native route in the current release that doesn't involve significant patching and overrides, Realtime just doesn't seem to function at all with custom tokens once RLS is enabled. I can confirm the docs are indeed backward in terms of where to place your anon and custom token in headers v params. The switch up not by intention/design but in functionality/existing codebase it just does not work if you place the keys in the order defined in the docs. It will fail to open the websocket period. However, even when you reverse the tokens and are able to now retrieve data via realtime, once you enable RLS, it is full stop, even with a fully permissive RLS policy. No updates are shipped to custom token subscribers. Maybe I'm missing something here, but I've been round and round with no luck. @evelant have you had any luck with realtime once RLS is enabled? I suspect that realtime is refusing to acknowledge the aud and role from the custom token claims and thus isn't treating the realtime client as an authenticated user. \ud83e\udd37\u200d\u2642\ufe0f\r\n\r\nDesign Opinion on Ideal solution:\r\nAs some others have pointed out, it seems to be the ideal outcome here is really to sidestep this process by allowing login to supabase with the custom token. So effectively leveraging supabase auth but exclusively for database access purposes when using a third party auth or custom token. Once logged in you could utilize the existing token infrastructure that supabase uses directly instead of getting a new token from your auth provider every single call or upon expiration and handling all that logic yourself. In the case of a third-party auth provider, the one drawback here is obviously that supabase would not know when the user is logged out of their auth provider, but I suppose if that is important somehow to prevent the user from continuing to be able to pull data, you could implement a heartbeat edge function that checks with the auth provider to see if their session is expired?\r\n\r\nThat's just my 2 cents on that. I apologize in advance if that's a dumb idea, I'm not super well versed in the security considerations of JWT authentication.\r\n\r\nUnfortunately, because I am planning for a production app, I am not comfortable applying the very innovative hacks that others have put together here form @Mukhammadali  and @evelant . So I am now left with a choice of losing my chosen Auth implementation, losing supabase, or coming up with some hyper custom implementation using a self-designed middleware. \r\n\r\nAny thoughts @w3b6x9 @kangmingtay @silentworks ?\r\n",
                    "author": {
                        "login": "rdylina"
                    },
                    "createdAt": "2023-03-30T19:32:49Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1490830376"
                },
                {
                    "id": "IC_kwDOD79Crs5Y4XMP",
                    "body": "@rdylina After digging into it a little bit it seems the issue, at least for me, isn't RLS specifically. Instead the problem is that realtime postgres change listeners are authenticated as `anon`, despite me setting the headers as suggested.\r\n\r\nRequests from postgres-js work fine with the token, they get the proper `authenticated` role and `sub`. Realtime however does not appear to use the custom token and treats the connection as `anon` so it probably fails most RLS rules preventing anonymous access.\r\n\r\n\r\n@w3b6x9 having realtime work with a custom token is a requirement for us to switch from firebase to supabase. We can't migrate our auth yet so we have to continue using firebase auth which means we need to have custom tokens working or we can't migrate to Supabase. Any further pointers or input on this issue would be greatly appreciated!\r\n\r\nedit: looking at the `realtime.subscription` table I can see that the `claims` column is bogus for all my realtime listeners. It's `{\"exp\": 1983812996, \"iss\": \"supabase-demo\", \"role\": \"anon\"}` instead of the actual custom token I'm sending from the client.\r\n\r\nI also see this in the docker logs for the local realtime container when I try to start a subscription without giving `anon` privilege \r\n\r\n```\r\nSubscribing to PostgreSQL failed: {:error, \"Subscription insert failed with error: ERROR P0001 (raise_exception) invalid column for filter docId. Check that tables are part of publication supabase_realtime and subscription params are correct: %{\\\"event\\\" => \\\"*\\\", \\\"filter\\\" => \\\"docId=eq.212b057f-7e32-4c40-aa90-8397df960194\\\", \\\"schema\\\" => \\\"public\\\", \\\"table\\\" => \\\"logChunks\\\"}\"}\r\n```",
                    "author": {
                        "login": "evelant"
                    },
                    "createdAt": "2023-03-31T01:37:13Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1491170063"
                },
                {
                    "id": "IC_kwDOD79Crs5Y4el0",
                    "body": "OK I seem to have gotten it working. Not sure _why_ this is working, it's not even close to what the docs suggest.\r\n\r\nIf I create a client like this -- note I commented out any realtime config\r\n\r\n```ts\r\n    const db = createClient<Database>(creds.url, creds.key, {\r\n        auth: authOpts,\r\n        global: {\r\n            headers: {\r\n                authorization: `Bearer ${key}`,\r\n            },\r\n        },\r\n        // realtime: {\r\n        //     // headers: {\r\n        //     // apikey: `Bearer ${key}`,\r\n        //     // },\r\n        //     params: {\r\n        //         // apikey: creds.key,\r\n        //         accessToken: `Bearer ${key}`,\r\n        //     },\r\n        // },\r\n    })\r\n\r\n    //@ts-ignore - this is a private method but we must call it to make auth work on realtime channels with our custom token\r\n    db.realtime.setAuth(key)\r\n\r\n```\r\n\r\nthen call `realtime.setAuth(key)` and now realtime gets the correct info from my custom token. RLS works and `realtime.subscription` shows the correct claims `{\"aud\": \"authenticated\", \"exp\": 1680230955, \"sub\": \"zsGXfLygdCt2OF4Vt0hGrodAuK7a\", \"role\": \"authenticated\", \"app_metadata\": null, \"user_metadata\": null}`\r\n\r\nI'll need to test this some more (specifically token refresh) but this may be a good enough workaround until the problems with custom tokens get fixed.",
                    "author": {
                        "login": "evelant"
                    },
                    "createdAt": "2023-03-31T02:28:10Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1491200372"
                },
                {
                    "id": "IC_kwDOD79Crs5Y43vF",
                    "body": "@evelant I suspected that realtime wasn't accepting the token but didn't have the depth of expertise to verify it, good to know that is what is actually happening. Still very much dislike that we're overriding a private method to set the refreshed token. \r\n\r\nUnfortunately, I'm still in a spot where we can't properly update the regular client token without overrides as well. =(\r\n\r\nUpdate: \r\nI can confirm your workaround. Realtime functions as expected with the token manually pushed into that private method. ",
                    "author": {
                        "login": "rdylina"
                    },
                    "createdAt": "2023-03-31T05:07:09Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1491303365"
                },
                {
                    "id": "IC_kwDOD79Crs5Y5Y9T",
                    "body": "After tooling around all evening with this, here is what I've come up with as an ugly work around. I'm using react query to perform interval updates of the token and to account for failures, refetch on mount, and window refocus, etc. \r\n\r\n```javascript\r\n\r\nconst { data, error } = useQuery({\r\n      queryKey: [\"getToken\"],\r\n      queryFn: () =>\r\n         getToken({\r\n            template: \"supabase-nextjs-boilerplate\",\r\n         }),\r\n      enabled: isSignedIn,\r\n      refetchInterval: 50 * 1000,\r\n      refetchIntervalInBackground: true,\r\n      onSuccess: (data) => {\r\n         if (data) updateToken(data);\r\n      },\r\n   });\r\n\r\n   function updateToken(newToken: string) {\r\n      if (newToken) {\r\n         const now = new Date().getTime();\r\n         const exp = parseJwt(newToken).exp * 1000;\r\n         const secondsToExpiration = exp - now;\r\n\r\n         supabaseClient?.functions.setAuth(newToken);\r\n         // @ts-ignore this is set as a private method but we need to modify it to work around lack of custom token refresh\r\n         supabaseClient?.realtime.setAuth(newToken);\r\n         //@ts-ignore this is set as a protected field but we need to modify it to work around lack of custom token refresh\r\n         supabaseClient.auth.headers.Authorization = `Bearer ${newToken}`;\r\n         //@ts-ignore this is set as a protected field but we need to modify it to work around lack of custom token refresh\r\n         supabaseClient.rest.headers.Authorization = `Bearer ${newToken}`;\r\n\r\n      }\r\n   }\r\n\r\n```\r\n\r\nThe expiration calculations were just for debugging purposes to ensure I was receiving a new token.\r\nThere are edge cases I'm not covering I'm sure, but this appears to function in the absence of a supported solution that doesn't involve suspending TS protections.",
                    "author": {
                        "login": "rdylina"
                    },
                    "createdAt": "2023-03-31T07:27:15Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1491439443"
                },
                {
                    "id": "IC_kwDOD79Crs5Y8dFC",
                    "body": "@rdylina That looks like a good workaround. Pretty much identical to what I'm doing. I'm going to test it further today and will report back here if I find any quirks in this method.\r\n\r\n@w3b6x9 doesn't seem to be responding here but I think they're following along, they've removed the `protected` from `supabase.realtime`. https://github.com/supabase/supabase-js/commit/6c61c9de0c9c5ad4aa4d8d1a2bf722c8e650d120",
                    "author": {
                        "login": "evelant"
                    },
                    "createdAt": "2023-03-31T16:34:34Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1492242754"
                },
                {
                    "id": "IC_kwDOD79Crs5Y_mnQ",
                    "body": "@rdylina Frustratingly this workaround doesn't seem to actually work. Once I've refreshed my token I still get invalid token failures. `JWSError (CompactDecodeError Invalid number of parts: Expected 3 parts; got 5)`. As far as I can tell from reading all the code in the libraries this workaround should work so I'm definitely missing something.\r\n\r\n@laktek @hf @soedirgo @J0 Could you provide some input on this issue please? Custom tokens + refresh is the final blocker for my team to finish migrating from Firebase to Supabase.",
                    "author": {
                        "login": "evelant"
                    },
                    "createdAt": "2023-04-01T18:28:38Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1493068240"
                },
                {
                    "id": "IC_kwDOD79Crs5Y_mxx",
                    "body": "> \r\n\r\nhttps://github.com/supabase/gotrue-js/issues/701\r\n\r\nCheckout my workaround. Have been using it for months. \r\nYou may need to adjust the patches a bit since I haven\u2019t small version upgraded my install",
                    "author": {
                        "login": "jmedellinc"
                    },
                    "createdAt": "2023-04-01T18:31:26Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1493068913"
                },
                {
                    "id": "IC_kwDOD79Crs5Y_m-7",
                    "body": "Hmm, I'm already setting those fields on token refresh. As far as I can tell this should cover all the bases, but I'm still running into issues. \r\n\r\n```ts\r\nexport const refreshSupabaseTokenFromFirebaseToken = async (\r\n    db: MySupabaseClient | null,\r\n    firebaseToken: string\r\n) => {\r\n    const key = await getTokenFromFirebaseToken(firebaseToken)\r\n    if (!db) {\r\n        throw `db not initialized yet`\r\n    }\r\n    //@ts-ignore protected field\r\n    db.headers.Authorization = `Bearer ${key}`\r\n\r\n    //@ts-ignore protected field\r\n    db.realtime.setAuth(key)\r\n    db.functions.setAuth(key)\r\n\r\n    //@ts-ignore this is set as a protected field but we need to modify it to work around lack of custom token refresh\r\n    db.auth.headers.Authorization = `Bearer ${key}`\r\n\r\n    //@ts-ignore this is set as a protected field but we need to modify it to work around lack of custom token refresh\r\n    db.rest.headers.Authorization = `Bearer ${key}`\r\n\r\n    return key\r\n}\r\n\r\n```\r\n\r\nI'm going to run through all my token refresh code again to check for any silly mistakes.",
                    "author": {
                        "login": "evelant"
                    },
                    "createdAt": "2023-04-01T18:36:23Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1493069755"
                },
                {
                    "id": "IC_kwDOD79Crs5Y_tAK",
                    "body": "> @rdylina Frustratingly this workaround doesn't seem to actually work. Once I've refreshed my token I still get invalid token failures. `JWSError (CompactDecodeError Invalid number of parts: Expected 3 parts; got 5)`. As far as I can tell from reading all the code in the libraries this workaround should work so I'm definitely missing something.\n> \n> @laktek @hf @soedirgo @J0 Could you provide some input on this issue please? Custom tokens + refresh is the final blocker for my team to finish migrating from Firebase to Supabase.\n\nVery curious indeed. My workaround has been working so far the last couple of days. \n\nObviously not a 1 to 1 comparison since we're getting our tokens from different places. Hmmm..",
                    "author": {
                        "login": "rdylina"
                    },
                    "createdAt": "2023-04-01T19:58:33Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1493094410"
                },
                {
                    "id": "IC_kwDOD79Crs5Y_2BI",
                    "body": "Ok, my bad, it was a silly mistake, essentially a typo. I had `authorization` where I should have had `Authorization`. The workaround of manually issuing a new token and then setting it on the headers of the various client libraries seems to be working just fine now.",
                    "author": {
                        "login": "evelant"
                    },
                    "createdAt": "2023-04-01T21:38:11Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1493131336"
                },
                {
                    "id": "IC_kwDOD79Crs5Y_20Y",
                    "body": "> Ok, my bad, it was a silly mistake, essentially a typo. I had authorization where I should have had Authorization. The workaround of manually issuing a new token and then setting it on the headers of the various client libraries seems to be working just fine now.\r\n\r\nThat's weird typically headers are case-insensitive. I'm glad you fixed it! \ud83c\udf89  ",
                    "author": {
                        "login": "hf"
                    },
                    "createdAt": "2023-04-01T21:50:34Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1493134616"
                },
                {
                    "id": "IC_kwDOD79Crs5ZCvGr",
                    "body": "Hey folks, I wanted to address the current custom token situation with your hosted Supabase project's Realtime.\r\n\r\nThe Realtime docs regarding custom tokens here are correct: https://supabase.com/docs/guides/realtime/extensions/postgres-changes#custom-tokens.\r\n\r\nI've also created this Replit as an example of it working: https://replit.com/@w3b6x9/RealtimeCustomToken. You can scroll to the bottom for database setup if you would like to reproduce it.\r\n\r\nHere's how the Supabase provided `anon` token and your custom token are being used once passed in to `supabase-js` client.\r\n\r\nProviding this here for convenient reference:\r\n\r\n```js\r\nconst supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY, {\r\n  realtime: {\r\n    headers: {\r\n      apikey: 'supabase-provided-anon-token',\r\n    },\r\n    params: {\r\n      apikey: 'your-custom-token',\r\n    },\r\n  },\r\n})\r\n```\r\n\r\nThe Supabase `anon` token that is provided to your Supabase project is checked in our Cloudflare API gateway to make sure that the project is valid and active. Then the gateway forwards the request, along with your custom token found under `realtime.params.apikey` in the options object, to our Realtime servers. \r\n\r\nRealtime servers will check your custom token and make sure it's signed by your project's JWT secret. If you're listening to Postgres changes it will then insert this custom token's claims into your project database's `realtime.subscription` table.\r\n\r\nIf you decide to reproduce my Replit example, you'll see in the `realtime.subscription` table that the claims is that of the custom signed token.\r\n\r\nLike @evelant mentioned earlier (https://github.com/supabase/supabase-js/issues/553#issuecomment-1492242754) I have removed the `protected` flag so you can call `supabaseClient.realtime.setAuth(token)` when you want to pass Realtime a refreshed token without `ts` complaining.\r\n\r\n> Note that the description of the Supabase anon key in the docs is also confusing:\r\n> \r\n> \"The apikey in headers must be either the anon or service_role token that Supabase signed\"\r\n> \r\n> Other than this needing to be the apikey in params not headers, it should probably also say \"that Supabase provides\" rather than \"that Supabase signed\".\r\n\r\n@yamen thanks, this is good feedback! will go and update the docs so it's more obvious.",
                    "author": {
                        "login": "w3b6x9"
                    },
                    "createdAt": "2023-04-03T08:22:09Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1493889451"
                },
                {
                    "id": "IC_kwDOD79Crs5ZFed2",
                    "body": "Hi @rdylina, just wanted to chime in on the feedback around the following:\r\n\r\n> If you have a short-lived token, you have to go fetch or compute the new token for every single call, which can add intense levels of latency to your DB calls. In my case, I have to serve up the token from Clerk, which takes 80-130ms roundtrip, which is now stacked every single time on top of the latency of making the actual db call from supabase.\r\n\r\nI feel like this is the tradeoff for using another auth provider here. But then again, i would like to hear how we can improve this from you. We could think about adding a method to sign in with a custom token, but then verifying that the custom token is legit and dealing with the logout issue you mentioned don't seem trivial.  \r\n\r\n\r\n> There is also just the straight-up machine overhead of creating new instances of an object over and over again instead of persisting an instantiation of it and just updating the key. De-allocating that memory and re-allocating along with all the other trace logic for every single call is bad practice but not inherently an issue on very small scales. BUT on a large application, this multiplies dramatically. Imagine an application with 5,000 active users and the sheer volume of wasted CPU and memory cycles if you're doing this on the server side. Nightmare. Gives me nightmares equivalent to edge function cold starts on every call. \ud83e\udd2e\r\n\r\nJust to provide some context, we used to have a method called `setAuth()` which allowed one to reuse a single server-side supabase client across multiple requests (each new request would call `setAuth()` to set the custom token in the authorization header) which is not secure. Depending on the client use, it could lead to one user sending requests as another user. So even if we added it back, we\u2019d still be advising that users create a new client per request.\r\n\r\nIn terms of memory usage, we are using this pattern of creating new instances of an object each time a request is made for the Supabase platform. We use our own auth and client libs and we aren't running into any of these performance issues mentioned. I've also done some napkin math for the memory consumed:\r\n\r\nThe `createClient()` call allocates ~250kb each time it's called. Assuming there are 10,000 calls / second to `createClient()` , it will only take up 0.0025gb in memory. Assuming you're using the smallest AWS instance type available (t4g.nano - 0.5gb memory) and that the node's GC runs at a frequency that's less than a sec (which is very lazy - node's GC tends to be on the more aggressive side), you would still have alot of unused memory left.   \r\n\r\n> Connection pooling, I don't know if the supabase-js library supports the automatic pooling of requests. If it does or ever plans to in the future, this implementation would completely eliminate that possibility to pool because you have a total fresh client instantiation for every single call.\r\n\r\nAre you referring to the database connection pooling here? We don't create a new connection to the database on every call. Each service has it's own fixed connection pool size and they use their own poolers. The client library just serves as a JS interface to interact with the RESTful APIs. \r\n\r\nHope that clarifies things and really appreciate the time and effort to provide such detailed feedback as well!",
                    "author": {
                        "login": "kangmingtay"
                    },
                    "createdAt": "2023-04-03T16:12:12Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1494607734"
                },
                {
                    "id": "IC_kwDOD79Crs5ZHXEv",
                    "body": "\r\n> The Supabase `anon` token that is provided to your Supabase project is checked in our Cloudflare API gateway to make sure that the project is valid and active. Then the gateway forwards the request, along with your custom token found under `realtime.params.apikey` in the options object, to our Realtime servers.\r\n> \r\n> Realtime servers will check your custom token and make sure it's signed by your project's JWT secret. If you're listening to Postgres changes it will then insert this custom token's claims into your project database's `realtime.subscription` table.\r\n> \r\n\r\nHello @w3b6x9 ! \r\n\r\nUnfortunately, this configuration continues NOT to work for me. Is there, by chance, some kind of conflict with the global header setting? I need to use this same object as both the REST API client and realtime. Hence I'm setting both the global bearer auth and the realtime. Is the global overwriting the realtime, perhaps?\r\n\r\n\r\n",
                    "author": {
                        "login": "rdylina"
                    },
                    "createdAt": "2023-04-03T23:06:43Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1495101743"
                },
                {
                    "id": "IC_kwDOD79Crs5ZHZI7",
                    "body": "Hello @kangmingtay ,\r\n\r\nThank you for the reply. My thoughts are below.\r\n\r\n> Hi @rdylina, just wanted to chime in on the feedback around the following:\r\n> \r\n> > If you have a short-lived token, you have to go fetch or compute the new token for every single call, which can add intense levels of latency to your DB calls. In my case, I have to serve up the token from Clerk, which takes 80-130ms roundtrip, which is now stacked every single time on top of the latency of making the actual db call from supabase.\r\n> \r\n> I feel like this is the tradeoff for using another auth provider here. But then again, i would like to hear how we can improve this from you. We could think about adding a method to sign in with a custom token, but then verifying that the custom token is legit and dealing with the logout issue you mentioned don't seem trivial.\r\n> \r\n\r\nCurrently, I am solving for this by making my token longer lived (120 seconds) and then caching it and only requesting updated tokens based on the current token's expiration minus 5 seconds. Not the most elegant of solutions but it beats polling for every request.\r\n\r\n> > There is also just the straight-up machine overhead of creating new instances of an object over and over again instead of persisting an instantiation of it and just updating the key. De-allocating that memory and re-allocating along with all the other trace logic for every single call is bad practice but not inherently an issue on very small scales. BUT on a large application, this multiplies dramatically. Imagine an application with 5,000 active users and the sheer volume of wasted CPU and memory cycles if you're doing this on the server side. Nightmare. Gives me nightmares equivalent to edge function cold starts on every call. \ud83e\udd2e\r\n> \r\n> Just to provide some context, we used to have a method called `setAuth()` which allowed one to reuse a single server-side supabase client across multiple requests (each new request would call `setAuth()` to set the custom token in the authorization header) which is not secure. Depending on the client use, it could lead to one user sending requests as another user. So even if we added it back, we\u2019d still be advising that users create a new client per request.\r\n> \r\n> In terms of memory usage, we are using this pattern of creating new instances of an object each time a request is made for the Supabase platform. We use our own auth and client libs and we aren't running into any of these performance issues mentioned. I've also done some napkin math for the memory consumed:\r\n> \r\n> The `createClient()` call allocates ~250kb each time it's called. Assuming there are 10,000 calls / second to `createClient()` , it will only take up 0.0025gb in memory. Assuming you're using the smallest AWS instance type available (t4g.nano - 0.5gb memory) and that the node's GC runs at a frequency that's less than a sec (which is very lazy - node's GC tends to be on the more aggressive side), you would still have alot of unused memory left.\r\n> \r\n\r\nMy concern regarding memory wasn't really the maximum point in time utilization but the pure machine overhead of allocating the memory and then deallocating and/or garbage collecting. I come from a background in lower-level machine languages, and, for better or worse, it makes me cringe how flippant we as a group are with higher-level languages in the way we treat compute overhead. It's just my natural instinct to minimize overhead and maximize performant design patterns. \ud83d\ude48 Maybe I'm over the top on this topic.\r\n\r\n> > Connection pooling, I don't know if the supabase-js library supports the automatic pooling of requests. If it does or ever plans to in the future, this implementation would completely eliminate that possibility to pool because you have a total fresh client instantiation for every single call.\r\n> \r\n> Are you referring to the database connection pooling here? We don't create a new connection to the database on every call. Each service has it's own fixed connection pool size and they use their own poolers. The client library just serves as a JS interface to interact with the RESTful APIs.\r\n> \r\n> Hope that clarifies things and really appreciate the time and effort to provide such detailed feedback as well!\r\n\r\nThank you for the clarification. I wasn't sure if any of the REST apis support batched queries or if that was a thing that was ever on the roadmap.\r\n\r\nI super appreciate you taking the time to write out such a detailed response.\r\n\r\n",
                    "author": {
                        "login": "rdylina"
                    },
                    "createdAt": "2023-04-03T23:16:24Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1495110203"
                },
                {
                    "id": "IC_kwDOD79Crs5ZIH31",
                    "body": "> I come from a background in lower-level machine languages, and, for better or worse, it makes me cringe how flippant we as a group are with higher-level languages in the way we treat compute overhead. It's just my natural instinct to minimize overhead and maximize performant design patterns.\r\n\r\n@rdylina welcome to the world of javascript \ud83d\ude43 on a more serious note, we chose to go with that design pattern of calling `createClient` on every request for the security reasons i mentioned earlier. We want to ensure that the client lib design doesn't create a security vulnerability and that's worth protecting over trying to squeeze out abit more optimizations during memory allocation. \r\n\r\n>  I wasn't sure if any of the REST apis support batched queries or if that was a thing that was ever on the roadmap.\r\n\r\nwell, this is already possible if you write your SQL statements in a function and use the `supabase.rpc` method (https://supabase.com/docs/reference/javascript/rpc)  ",
                    "author": {
                        "login": "kangmingtay"
                    },
                    "createdAt": "2023-04-04T03:42:17Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1495301621"
                },
                {
                    "id": "IC_kwDOD79Crs5ZIfNg",
                    "body": "> > The Supabase `anon` token that is provided to your Supabase project is checked in our Cloudflare API gateway to make sure that the project is valid and active. Then the gateway forwards the request, along with your custom token found under `realtime.params.apikey` in the options object, to our Realtime servers.\r\n> > Realtime servers will check your custom token and make sure it's signed by your project's JWT secret. If you're listening to Postgres changes it will then insert this custom token's claims into your project database's `realtime.subscription` table.\r\n> \r\n> Hello @w3b6x9 !\r\n> \r\n> Unfortunately, this configuration continues NOT to work for me. Is there, by chance, some kind of conflict with the global header setting? I need to use this same object as both the REST API client and realtime. Hence I'm setting both the global bearer auth and the realtime. Is the global overwriting the realtime, perhaps?\r\n\r\nHey @rdylina!\r\n\r\nSo we set it up so that Realtime's settings would overwrite global's and that includes headers: https://github.com/supabase/supabase-js/blob/fdb7bf56b313d1247409c97f7c8ed464ffca6238/src/SupabaseClient.ts#L119\r\n\r\nWhat do you mean when you write that it doesn't work for you? Are you able to subscribe at all? Can you share your setup?",
                    "author": {
                        "login": "w3b6x9"
                    },
                    "createdAt": "2023-04-04T06:01:43Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1495397216"
                },
                {
                    "id": "IC_kwDOD79Crs5ZMtbD",
                    "body": "Annoyingly I'm still having problems with updating the client's headers when I refresh my custom token. My code posted above worked fine against the local supabase instance in docker but is failing against my live staging instance. I verified that I am getting a correctly signed updated token but unfortunately postgrest and edge function requests are failing after I attempt to update the client.\r\n\r\n@w3b6x9 @hf @kangmingtay Could you please provide an example of how you would update a custom token on an existing client instance? \r\n\r\nI'm really struggling with this and it's the last major piece of the puzzle necessary to transition my app to Supabase. We can't go live with the switch to Supabase until token refresh is working reliably.",
                    "author": {
                        "login": "evelant"
                    },
                    "createdAt": "2023-04-04T19:44:36Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1496504003"
                },
                {
                    "id": "IC_kwDOD79Crs5ZOHwS",
                    "body": "Hi @evelant, you can't update a custom token on an existing client instance, you will need to create a new client and set it like this:\r\n\r\n```js\r\nconst supabase = createClient(SUPABASE_URL, SUPABASE_KEY, {\r\n  ...clientOptions,\r\n  global: {\r\n    headers: {\r\n      Authorization: `Bearer ${CUSTOM_ACCESS_TOKEN_JWT}`,\r\n    },\r\n  },\r\n});\r\n```\r\n\r\nDo note that your `CUSTOM_ACCESS_TOKEN_JWT` also has to be signed with the `JWT_SECRET` provided in your Supabase dashboard. \r\n\r\nWhen your `CUSTOM_ACCESS_TOKEN_JWT` expires, you will need to handle refreshing it and re-creating the client above by passing it in again. We currently don't handle refreshing custom tokens on Supabase.",
                    "author": {
                        "login": "kangmingtay"
                    },
                    "createdAt": "2023-04-05T03:33:04Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1496874002"
                },
                {
                    "id": "IC_kwDOD79Crs5ZQcII",
                    "body": "@kangmingtay I already sign my custom token with JWT_SECRET and it works fine per my above comments.\r\n\r\nCreating a new client on token refresh poses a problem because I have realtime subscriptions running at the time when the token refresh occurs. How does the client handle that internally on token refresh? \r\n\r\nI'd like to avoid having to stop all listeners, create a new client, then re-create all of the listeners and handle the case where they missed messages during that transition. That would be quite a headache to manage just to work around refreshing a token.",
                    "author": {
                        "login": "evelant"
                    },
                    "createdAt": "2023-04-05T13:24:20Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1497481736"
                },
                {
                    "id": "IC_kwDOD79Crs5ZTpzM",
                    "body": "@w3b6x9 I just double then triple checked to confirm, and it seems that your post above and the documentation is indeed backwards about the keys, at least during local development.\r\n\r\n```ts\r\n realtime: {\r\n            headers: {\r\n                apikey: creds.key, //--supabase anon key\r\n            },\r\n            params: {\r\n                apikey: `Bearer ${key}` //-- my JWT signed with JWT_SECRET\r\n            },\r\n        },\r\n```\r\n\r\nthat, as recommended by the docs does _not_ work, it results in the following 401 unauthorized in kong logs\r\n\r\n```\r\n \"GET /realtime/v1/websocket?apikey=Bearer+MY_SIGNED_KEY_HERE&vsn=1.0.0 HTTP/1.1\" 401 52 \"-\" \"-\"\r\n```\r\n\r\nHowever if I switch it around and put my signed custom JWT into the headers, everything works perfectly, my clients connect and get realtime updates from postgres.\r\n\r\n```ts\r\n realtime: {\r\n            headers: {\r\n               apikey: `Bearer ${key}` //-- my JWT signed with JWT_SECRET\r\n            },\r\n            params: {\r\n                apikey: creds.key,// --supabase anon key                \r\n            },\r\n        },\r\n```\r\n\r\nAlso a heads up, realtime is broken in supabase cli `1.48.1`. Stick to `1.47.0` for now. https://github.com/supabase/cli/issues/997\r\n\r\nCan anybody else confirm and reproduce this? ",
                    "author": {
                        "login": "evelant"
                    },
                    "createdAt": "2023-04-06T00:20:31Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1498324172"
                },
                {
                    "id": "IC_kwDOD79Crs5ZVJqh",
                    "body": "> Creating a new client on token refresh poses a problem because I have realtime subscriptions running at the time when the token refresh occurs. How does the client handle that internally on token refresh?\r\n> \r\n> I'd like to avoid having to stop all listeners, create a new client, then re-create all of the listeners and handle the case where they missed messages during that transition.\r\n\r\n@evelant I recommend creating two Supabase clients where the first client is the one you use for everything except Realtime so you can re-create it whenever you have a refreshed token.\r\n\r\nThe second client can be used exclusively for Realtime activity. You create the client, pass in the initial custom token, and then whenever you have the refreshed token, just call secondClient.realtime.setAuth('new-token'). This will prevent having to sever Realtime's socket connection.",
                    "author": {
                        "login": "w3b6x9"
                    },
                    "createdAt": "2023-04-06T08:57:03Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1498716833"
                },
                {
                    "id": "IC_kwDOD79Crs5ZVMs9",
                    "body": "> I just double then triple checked to confirm, and it seems that your post above and the documentation is indeed backwards about the keys, at least during local development.\r\n\r\n@evelant the instructions I provided above and the ones found in the Supabase docs are confirmed for hosted Realtime. CLI local development is a bit different b/c it's still using Kong while hosted version has transitioned over to Cloudflare for the API gateway.\r\n\r\n> ```ts\r\n>  realtime: {\r\n>             headers: {\r\n>                 apikey: creds.key, //--supabase anon key\r\n>             },\r\n>             params: {\r\n>                 apikey: `Bearer ${key}` //-- my JWT signed with JWT_SECRET\r\n>             },\r\n>         },\r\n> ```\r\n> \r\n> that, as recommended by the docs does _not_ work, it results in the following 401 unauthorized in kong logs\r\n> \r\n> ```\r\n>  \"GET /realtime/v1/websocket?apikey=Bearer+MY_SIGNED_KEY_HERE&vsn=1.0.0 HTTP/1.1\" 401 52 \"-\" \"-\"\r\n> ```\r\n> \r\n> However if I switch it around and put my signed custom JWT into the headers, everything works perfectly, my clients connect and get realtime updates from postgres.\r\n> \r\n> ```ts\r\n>  realtime: {\r\n>             headers: {\r\n>                apikey: `Bearer ${key}` //-- my JWT signed with JWT_SECRET\r\n>             },\r\n>             params: {\r\n>                 apikey: creds.key,// --supabase anon key                \r\n>             },\r\n>         },\r\n> ```\r\n\r\n@evelant thanks, will take a look at CLI local development and get back to everyone shortly.\r\n\r\n> Also a heads up, realtime is broken in supabase cli `1.48.1`. Stick to `1.47.0` for now. [supabase/cli#997](https://github.com/supabase/cli/issues/997)\r\n\r\n@evelant you're right, this was an issue but looks like it's now fixed in [CLI v1.49.3](https://github.com/supabase/cli/releases/tag/v1.49.3).",
                    "author": {
                        "login": "w3b6x9"
                    },
                    "createdAt": "2023-04-06T09:05:08Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1498729277"
                },
                {
                    "id": "IC_kwDOD79Crs5ZViBt",
                    "body": "@evelant I just looked at the way you set it up for local development:\r\n\r\n```\r\n realtime: {\r\n            headers: {\r\n               apikey: `Bearer ${key}` //-- my JWT signed with JWT_SECRET\r\n            },\r\n            params: {\r\n                apikey: creds.key,// --supabase anon key                \r\n            },\r\n        }\r\n```\r\n\r\nAnd it works b/c Kong is verifying params.apikey but the problem is that Realtime is forwarded that key as well so if you check your `realtime.subscription` table the record is the claims from the anon key and not your custom signed token's.\r\n\r\nCLI did recently merge in a change where you can pass in the initial custom token when spinning up the CLI. See PR: https://github.com/supabase/cli/pull/947.\r\n\r\nFor example, you can pass in the custom token for role `anon` by doing: `SUPABASE_AUTH_ANON_KEY=custom-token supabase start`\r\n\r\nThen you can pass in the refreshed token by calling `client.realtime.setAuth(refreshed-token)`.",
                    "author": {
                        "login": "w3b6x9"
                    },
                    "createdAt": "2023-04-06T10:12:06Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1498816621"
                },
                {
                    "id": "IC_kwDOD79Crs5ZWZVb",
                    "body": "@w3b6x9 at least locally realtime is _not_ forwarded the anon key in this case. `realtime.subscription` correctly contains the claims from my custom token. Something else is still going wrong here I think.\r\n\r\nAs for the production side it appears that manually changing the headers on the client when I refresh my token works fine. Everything continues to work, except for realtime. After calling `setAuth` with my updated token realtime no longer recieves updates.",
                    "author": {
                        "login": "evelant"
                    },
                    "createdAt": "2023-04-06T13:11:10Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1499043163"
                },
                {
                    "id": "IC_kwDOD79Crs5ZWdQ7",
                    "body": "@w3b6x9  Let me clarify exactly what I'm doing and exactly the behavior I'm seeing so hopefully there isn't any confusion.\r\n\r\nAt a high level, my app does this:\r\n1. On app start, check for a firebase auth token\r\n2. If no firebase auth exists create an anonymous user\r\n3. Send the firebase auth token to my edge function `generateToken` which verifies the firebase token then signs a new token with the supabase JWT_KEY and the role `authenticated`\r\n4. The app takes the newly minted token and creates a client like so\r\n\r\n```ts\r\nexport const setupDbConnection = async (\r\n    localStorageInstance: { getItem: any; setItem: any; removeItem: any },\r\n    firebaseToken: string\r\n) => {\r\n    const key = await getTokenFromFirebaseToken(firebaseToken)\r\n\r\n    const authOpts = {\r\n        storage: localStorageInstance,\r\n        autoRefreshToken: false,\r\n        persistSession: false,\r\n        detectSessionInUrl: false,\r\n    }\r\n\r\n    const db = createClient<Database>(creds.url, creds.key, {\r\n        auth: authOpts,\r\n        global: {\r\n            headers: {\r\n                Authorization: `Bearer ${key}`,  // custom token with 'authenticated' role signed with jwt secret\r\n            },\r\n        },\r\n        realtime: {\r\n            headers: {\r\n                apikey: `Bearer ${key}`, // custom token with 'authenticated' role signed with jwt secret\r\n            },\r\n            params: {\r\n                apikey: creds.key, // supabase anon key\r\n            },\r\n        },\r\n    })\r\n\r\n    db.realtime.setAuth(key)\r\n    return db\r\n}\r\n\r\n```\r\n5. Now everything works in local dev, including realtime which has the proper 'autheticated' claim entry in `realtime.subscription`\r\n6. Periodically (every minute) and upon app returning from the background (it's a react-native app) check for firebase token expiry. If firebase token is expired or refreshed then refresh the custom token by calling `generateToken` edge fn again\r\n7. Update the existing supabase client instance with the newly minted token with this code\r\n\r\n```ts\r\nexport const refreshSupabaseTokenFromFirebaseToken = async (\r\n    db: TaskHeroSupabaseClient | null,\r\n    firebaseToken: string\r\n) => {\r\n  if (!db) {\r\n        throw `db not initialized yet`\r\n    }\r\n    const key = await getTokenFromFirebaseToken(firebaseToken)\r\n  \r\n    //@ts-ignore protected field\r\n    db.headers.Authorization = `Bearer ${key}`\r\n    //@ts-ignore\r\n    db.auth.headers.Authorization = `Bearer ${key}`\r\n    //@ts-ignore\r\n    db.rest.headers.Authorization = `Bearer ${key}`\r\n    db.realtime.setAuth(key)\r\n\r\n    if (db.realtime.params) {\r\n        db.realtime.params.apikey = `Bearer ${key}`\r\n    }\r\n    db.functions.setAuth(key)\r\n   \r\n    return key\r\n}\r\n\r\n```\r\n\r\nAfter doing this everything still works in local development. In production deployment everything works _except realtime_ which no longer receives updates. To summarize the problems:\r\n\r\n1. Docs are backwards, at least for local dev, realtime headers must be custom token and params must be supabase anon key. This setup works 100% correctly for realtime in dev.\r\n2. In production realtime works with the same configuration as in dev _until_ calling `setAuth` with a refreshed token.\r\n\r\nI hope that clarifies exactly what's happening for me and helps track down the problem. Please ask any questions if you need clarification.",
                    "author": {
                        "login": "evelant"
                    },
                    "createdAt": "2023-04-06T13:23:20Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1499059259"
                },
                {
                    "id": "IC_kwDOD79Crs5ZYqhe",
                    "body": "I think I've finally got it working. My example code above had an issue, had to remove\r\n\r\n```\r\n// don't need this, because realtime.params.apikey is always the supabase anon key\r\n// only need to update the _headers_ with the new token on refresh   \r\n// if (db.realtime.params) {\r\n   //     db.realtime.params.apikey = `Bearer ${key}`\r\n   // }\r\n```\r\n\r\nsince that param doesn't change on token refresh. It's always the supabase anon token. With this I'm finally finding that realtime stays connected and requests from the client continue to succeed without re-creating the client. \r\n\r\nI'm still testing but hopefully I've got it this time. It would be nice if supabase-js could get a built-in `updateToken(newToken: string)` method to support this pattern (or some other method of more cleanly supporting custom tokens).",
                    "author": {
                        "login": "evelant"
                    },
                    "createdAt": "2023-04-06T21:13:10Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1499637854"
                },
                {
                    "id": "IC_kwDOD79Crs5aDbds",
                    "body": "hey @evelant, apologies for the late reply as the team was quite busy with launch week! just to clarify, i'm assuming that you'd want `updateToken(newToken: string)` to take care of setting the new custom token properly across the Supabase services like such:\r\n\r\n```javascript\r\ndb.headers.Authorization = `Bearer ${key}`\r\ndb.auth.headers.Authorization = `Bearer ${key}`\r\ndb.rest.headers.Authorization = `Bearer ${key}`\r\ndb.realtime.setAuth(key)\r\ndb.functions.setAuth(key)\r\n```",
                    "author": {
                        "login": "kangmingtay"
                    },
                    "createdAt": "2023-04-17T07:33:23Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1510848364"
                },
                {
                    "id": "IC_kwDOD79Crs5bQ_6v",
                    "body": "@kangmingtay Based on your comment, I made the realtime work with custom jwt. Here is how I handle it:\r\n```ts \r\nexport const getSupabaseRealtime = (exchangeToken: string) => {\r\n  const intialOptions = {\r\n    realtime: {\r\n      headers: {\r\n        apikey: `Bearer ${exchangeToken}`,\r\n      },\r\n      params: {\r\n        apikey: ConfigService.getPropertyAnonKey(),\r\n      },\r\n    },\r\n  };\r\n  const realtimeClient = createClient(\r\n    ConfigService.getPropertySupabaseUrl(),\r\n    ConfigService.getPropertyAnonKey(),\r\n    intialOptions\r\n  );\r\n  realtimeClient.realtime.setAuth(exchangeToken);\r\n  return realtimeClient;\r\n};\r\n```",
                    "author": {
                        "login": "solsonl"
                    },
                    "createdAt": "2023-05-02T09:45:15Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1531182767"
                },
                {
                    "id": "IC_kwDOD79Crs5dyf4y",
                    "body": "I think I've followed all of what has worked for @evelant (set `realtime.headers.apikey` to `Bearer ${myjwt}` + call `db.realtime.setAuth(myjwt)`), but I'm still unable to subscribe using an `authenticated` role with my custom JWT.\r\n\r\nI'm getting this strange error response back from the realtime websocket: `{:error, :error_generating_signer}`\r\n\r\nMy JWT looks like this:\r\n```json\r\n{\r\n  \"role\": \"authenticated\",\r\n  \"app_metadata\": {\r\n    // some metadata here\r\n  },\r\n  \"aud\": \"authenticated\",\r\n  \"iat\": 1685701508,\r\n  \"exp\": 1685705108\r\n}\r\n```\r\n\r\nAnd here's the first message sent to the websocket:\r\n\r\n```json\r\n{\"topic\":\"realtime:xxx\",\"event\":\"phx_join\",\"payload\":{\"config\":{\"broadcast\":{\"ack\":false,\"self\":false},\"presence\":{\"key\":\"\"},\"postgres_changes\":[{\"event\":\"*\",\"schema\":\"public\",\"table\":\"mytable\"}]},\"access_token\":\"myjwt\"},\"ref\":\"1\",\"join_ref\":\"1\"}\r\n```\r\n\r\nMy users don't correlate to users in Supabase, so I don't include a `sub`, but I've tried setting it to a valid user's uuid too.\r\n\r\nAnyone got an idea what's going on here? Would appreciate any help! I'm at a loss.",
                    "author": {
                        "login": "hmnd"
                    },
                    "createdAt": "2023-06-02T10:36:16Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1573518898"
                },
                {
                    "id": "IC_kwDOD79Crs5dyt0X",
                    "body": "@hmnd Sorry but I'm not sure what's going on there. FYI `sub` does not need to correspond to a row in `auth.users`. I set `sub` in my token to my firebase user id. \r\n\r\nI would double check:\r\n1. You've enabled RLS for the tables you want to listen to\r\n2. You've got an RLS policy that matches the data you want in your token , ex: \r\n```sql\r\nCREATE POLICY \"Enable full access to rows owned by authenticated user\" ON \"public\".\"my_table\"\r\n            AS PERMISSIVE FOR ALL\r\n            TO authenticated\r\n            USING (auth.jwt() ->> 'sub' = \"user_id\");\r\n```\r\n3. You've enabled replication, the `supabase_realtime` publication exists, and the tables you want are added to it\r\n4. You're totally sure you're signing your custom token with your supabase JWT secret\r\n\r\n",
                    "author": {
                        "login": "evelant"
                    },
                    "createdAt": "2023-06-02T11:22:16Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1573575959"
                },
                {
                    "id": "IC_kwDOD79Crs5dywe0",
                    "body": "@evelant wow thanks for the fast reply! That's good to know about `sub`. \n\nI believe everything is configured correctly, but I'll double check. Maybe I'll try with a regular supabase jwt too to try to narrow down what that error could mean...",
                    "author": {
                        "login": "hmnd"
                    },
                    "createdAt": "2023-06-02T11:31:09Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1573586868"
                },
                {
                    "id": "IC_kwDOD79Crs5d2sK3",
                    "body": "@evelant spent half a day yesterday trying to debug this and just found that I was missing the `typ: JWT` header :facepalm:. Now it works like a charm!",
                    "author": {
                        "login": "hmnd"
                    },
                    "createdAt": "2023-06-03T03:43:29Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1574617783"
                },
                {
                    "id": "IC_kwDOD79Crs5ef-Fb",
                    "body": "I decided to write a whole medium post for avoiding you waste time in the future: https://liviogamassia.medium.com/using-supabase-rls-with-firebase-auth-custom-auth-provider-357eaad9c70f",
                    "author": {
                        "login": "LivioGama"
                    },
                    "createdAt": "2023-06-10T02:58:32Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1585439067"
                },
                {
                    "id": "IC_kwDOD79Crs5f9gjR",
                    "body": "Hey all ... thanks for fumbling through the black box here. Especially @LivioGama for the full write up. I needed to figure this out too.\r\n\r\nI can confirm, at least for Realtime, the only thing you need to do is call `supabase.realtime.setAuth('your-custom-jwt')` after you instantiate your Supabase client with your anon jwt and before you subscribe to the Channel. It sounds like you need some headers for other services but for Realtime you don't. \r\n\r\nCouple updates:\r\n - Realtime Docs are updated: https://github.com/supabase/supabase/pull/15388\r\n - You can use the Inspector on realtime.supabase.com with a custom JWT: https://github.com/supabase/realtime/pull/592\r\n \r\nI'm also trying to get something official up in our docs wrt using your own JWTs across the whole platform. Not exactly sure why we don't have that yet. ",
                    "author": {
                        "login": "chasers"
                    },
                    "createdAt": "2023-06-27T17:43:08Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1609959633"
                },
                {
                    "id": "IC_kwDOD79Crs5nBZ-O",
                    "body": "@chasers just curious if you ever got around to documenting this more fully or if that's been put on the roadmap? I'm sure it would be very beneficial for future users trying to stumble through this.",
                    "author": {
                        "login": "hmnd"
                    },
                    "createdAt": "2023-09-20T21:03:06Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1728421774"
                },
                {
                    "id": "IC_kwDOD79Crs5nBa-3",
                    "body": "I did! See: https://supabase.com/docs/guides/realtime/postgres-changes#custom-tokens\r\n\r\nAnd you can use the Inspector with a custom JWT here: https://realtime.supabase.com/inspector/new\r\n\r\nGonna close this one now!",
                    "author": {
                        "login": "chasers"
                    },
                    "createdAt": "2023-09-20T21:06:09Z",
                    "url": "https://github.com/supabase/supabase-js/issues/553#issuecomment-1728425911"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5SOrnq",
            "number": 554,
            "title": "v2.0.0 - ThrowOnError is not unwrapping the return type",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nThe errors are not being unwrapped when calling `throwOnError`\r\n\r\nOn a simple model definition like this one:\r\n\r\n```\r\nexport interface Database {\r\n  public: {\r\n    Tables: {\r\n      profiles: {\r\n        Row: {\r\n          id: string\r\n          username: string | null\r\n          email: string | null\r\n        }\r\n        Insert: {}\r\n        Update: {}\r\n      }\r\n    }\r\n    Views: {}\r\n    Functions: {}\r\n    Enums: {}\r\n  }\r\n}\r\n\r\nconst supabase = createClient<Database>(...)\r\n\r\n\r\nconst { data } = await supabaseAdmin\r\n  .from('profiles')\r\n  .select(`*`)\r\n  .throwOnError()\r\n```\r\n\r\nThe return type of data is Profile[] | undefined, as you can see on the picture\r\n\r\n![image](https://user-images.githubusercontent.com/19490445/191295742-2cda9b8a-0359-428f-b1e5-8e5b4ca16b8e.png)\r\n\r\n## Expected behavior\r\n\r\nWhen unwrapping the error, the return type should be `Table[]`. \r\n\r\n## System information\r\n\r\n- Supabase version: V2.0.0 rc@10",
            "author": {
                "login": "julianpoma"
            },
            "state": "OPEN",
            "createdAt": "2022-09-20T15:07:33Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/554",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs5SVmSC",
            "number": 559,
            "title": "rc-10: Realtime channel name cannot be random with Supabase CLI",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\nIt seems like the channel name must conform to the v1 pattern and cannot be random as it is stated in the v2 docs.\r\n\r\n```ts\r\n// this works\r\nsupabaseClient\r\n  .channel('public:movies')\r\n  .on(\r\n    'postgres_changes',\r\n    {\r\n      event: 'INSERT',\r\n      schema: 'public',\r\n      table: 'movies',\r\n    },\r\n    (payload) => {\r\n      console.log(payload)\r\n    }\r\n  )\r\n  .subscribe()\r\n\r\n// this does not work\r\nsupabaseClient\r\n  .channel('random')\r\n  .on(\r\n    'postgres_changes',\r\n    {\r\n      event: 'INSERT',\r\n      schema: 'public',\r\n      table: 'movies',\r\n    },\r\n    (payload) => {\r\n      console.log(payload)\r\n    }\r\n  )\r\n  .subscribe()\r\n```\r\n\r\n[Please check this pr and the test runs](https://github.com/psteinroe/supabase-cache-helpers/pull/22). As soon as the channel name is set from \"random\" to \"public:contact\", the tests are green. The test runs are listed [here](https://github.com/psteinroe/supabase-cache-helpers/actions?query=branch%3Afeat%2Fsubscribe++).\r\n\r\n\r\n## To Reproduce\r\n\r\nEither checkout the PR, start supabase and run the use-subscription test.\r\n\r\nOr setup a subscription as exemplified above.\r\n\r\n## Expected behavior\r\n\r\nThe channel should be irrelevant to the subscription, and the filter param should be used as described in the documentation for v2.\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Version of supabase-js: v2 rc10\r\n- Version of Node.js: v16\r\n- CLI Version: 1.4.6\r\n\r\n",
            "author": {
                "login": "psteinroe"
            },
            "state": "CLOSED",
            "createdAt": "2022-09-21T19:24:53Z",
            "closedAt": "2023-01-18T00:01:39Z",
            "url": "https://github.com/supabase/supabase-js/issues/559",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5KwKq7",
                    "body": "@psteinroe that's only the case if you're testing against a Supabase project with an old version of Realtime, which is single tenant Realtime. We've moved everyone, except for a few, to the new multi-tenant Realtime cluster with Broadcast and Presence features.\r\n\r\nCan you create a support ticket with your project ref so that I can investigate?",
                    "author": {
                        "login": "w3b6x9"
                    },
                    "createdAt": "2022-09-21T19:33:15Z",
                    "url": "https://github.com/supabase/supabase-js/issues/559#issuecomment-1254140603"
                },
                {
                    "id": "IC_kwDOD79Crs5KwK5i",
                    "body": "Thanks for the quick response! Its also happening with the CLI (supabase start), is that expected too? ",
                    "author": {
                        "login": "psteinroe"
                    },
                    "createdAt": "2022-09-21T19:34:22Z",
                    "url": "https://github.com/supabase/supabase-js/issues/559#issuecomment-1254141538"
                },
                {
                    "id": "IC_kwDOD79Crs5KwMAE",
                    "body": "> Its also happening with the CLI (supabase start), is that expected too?\r\n\r\nThat is expected. We've been developing the multi-tenant Realtime cluster with Broadcast and Presence in a separate repo and we're going to move it to the `realtime` repo in the next few weeks. Thus, there's no docker image we can point to right now for the new Realtime.",
                    "author": {
                        "login": "w3b6x9"
                    },
                    "createdAt": "2022-09-21T19:39:11Z",
                    "url": "https://github.com/supabase/supabase-js/issues/559#issuecomment-1254146052"
                },
                {
                    "id": "IC_kwDOD79Crs5MCfkB",
                    "body": "do you have an eta here? I had to implement an [ugly workaround](https://github.com/psteinroe/supabase-cache-helpers/blob/3005abc9296032dcf598bcd7c950dac97fc74236/packages/postgrest-swr/src/subscribe/use-subscription.ts#L44-L52) for supabase-cache-helpers and cannot really test whether it works properly with the new realtime.",
                    "author": {
                        "login": "psteinroe"
                    },
                    "createdAt": "2022-10-12T07:36:05Z",
                    "url": "https://github.com/supabase/supabase-js/issues/559#issuecomment-1275721985"
                },
                {
                    "id": "IC_kwDOD79Crs5MZBI8",
                    "body": "@psteinroe appreciate your work on `supabase-cache-helpers`! will chat with the team regarding eta, as we're currently in progress, and will get back to you shortly.",
                    "author": {
                        "login": "w3b6x9"
                    },
                    "createdAt": "2022-10-17T23:29:05Z",
                    "url": "https://github.com/supabase/supabase-js/issues/559#issuecomment-1281626684"
                },
                {
                    "id": "IC_kwDOD79Crs5SXRzU",
                    "body": "@w3b6x9 this is fixed yeah?",
                    "author": {
                        "login": "chasers"
                    },
                    "createdAt": "2023-01-13T13:12:31Z",
                    "url": "https://github.com/supabase/supabase-js/issues/559#issuecomment-1381833940"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5Shwcx",
            "number": 562,
            "title": "chore: Replace TypeScript private keyword with ES2022 private class fields",
            "body": "# Chore\r\n\r\n## Describe the chore\r\n\r\nTypeScript's `private` keyword does not enforce privacy at runtime. Since JavaScript now has native support for hard runtime private members, we can replace the `private` keyword with the `#` prefix.\r\n\r\nTake the following method as an example:\r\n\r\nhttps://github.com/supabase/supabase-js/blob/14add4ccf1e0cbb956cd4fde7043e16359f9fd9b/src/SupabaseClient.ts#L271\r\n\r\nThe above method can be rewritten as:\r\n\r\n```js\r\n#getAuthHeaders(): GenericObject {\r\n    // ...\r\n}\r\n```\r\n\r\nI am open to working on this if the proposed changes are welcomed.\r\n\r\n## Additional context\r\nhttps://www.typescriptlang.org/docs/handbook/2/classes.html#private\r\nhttps://caniuse.com/?search=javascript%20private\r\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields\r\n",
            "author": {
                "login": "iShibi"
            },
            "state": "CLOSED",
            "createdAt": "2022-09-24T08:12:51Z",
            "closedAt": "2022-09-27T10:25:34Z",
            "url": "https://github.com/supabase/supabase-js/issues/562",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5LD2YN",
                    "body": "Thanks! I'm not sure if we want to do this - requiring ES2022 is a bit too restrictive, and afaik this means we can't use private fields in unit tests.\r\n\r\nI think `private` gives most of the benefits of privacy encapsulation, i.e. to document API surface.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-27T10:25:34Z",
                    "url": "https://github.com/supabase/supabase-js/issues/562#issuecomment-1259300365"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5Sjoq6",
            "number": 565,
            "title": "Error: You must provide a OpenID Connect provider with your id token and nonce.",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nI want to login with firebase id token by OpenID Connect.  The firebase id token does not have nonce. But `supabase-js` does not support id token without nonce.\r\n\r\n## To Reproduce\r\n\r\ncase 1\r\n\r\n```javascript\r\nawait supabase.auth.signIn({\r\n  oidc: {\r\n    id_token: firebaseIdToken,\r\n    client_id: OIDC_CLIENT_ID,\r\n    issuer: OIDC_ISSUER,\r\n  },\r\n});\r\n```\r\n\r\n```\r\nError: You must provide a OpenID Connect provider with your id token and nonce.\r\n```\r\n\r\ncase 2\r\n\r\n```javascript\r\nawait supabase.auth.signIn({\r\n  oidc: {\r\n    id_token: firebaseIdToken,\r\n    nonce: \"\",\r\n    client_id: OIDC_CLIENT_ID,\r\n    issuer: OIDC_ISSUER,\r\n  },\r\n});\r\n```\r\n\r\n```\r\nError: You must provide a OpenID Connect provider with your id token and nonce.\r\n```\r\n\r\ncase 3\r\n\r\n```javascript\r\nconst res = await supabase.auth.signIn({\r\n  oidc: {\r\n    id_token: firebaseIdToken,\r\n    nonce: \"hogehoge\",\r\n    client_id: OIDC_CLIENT_ID,\r\n    issuer: OIDC_ISSUER,\r\n  },\r\n});\r\nconsole.log(res)\r\n```\r\n\r\n```\r\n{\r\n  user: null,\r\n  session: null,\r\n  error: {\r\n    message: 'Passed nonce and nonce in id_token should either both exist or not.',\r\n    status: 400\r\n  }\r\n}\r\n```\r\n\r\n## Expected behavior\r\n\r\nLogin with id token without nonce by OpenID Connect.\r\n",
            "author": {
                "login": "ulbqb"
            },
            "state": "CLOSED",
            "createdAt": "2022-09-25T15:39:50Z",
            "closedAt": "2022-09-25T15:46:31Z",
            "url": "https://github.com/supabase/supabase-js/issues/565",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs5SoYkb",
            "number": 569,
            "title": "Usage with TypeScript example appears to be outdated",
            "body": "# Improve documentation\r\n\r\n## Link \r\n\r\n[Generating Types | Supabase](url)\r\n\r\n## Describe the problem\r\n\r\nIs the documentation missing? Or is it confusing? Why is it confusing?\r\n\r\nIn the documentation for how to use Typescript with Supabase this is an example: \r\n\r\n```\r\nconst response = await supabase\r\n  .from<Message>('messages')\r\n  .select('*, author:user_id(username)')\r\n  .match({ channel_id: 2 })\r\nresponse.data\r\n```\r\n\r\nHowever, when passing the `Message` type you get the following Typescript error:\r\n\r\n`No overload expects 1 type arguments, but overloads do exist that expect either 0 or 2 type arguments.ts(2743)`\r\n\r\nUpdating this example might be very helpful for people just starting out with Supabase in a Typescript context. \r\n\r\n## Additional context\r\n\r\nLove Supabase so far! Excited to see where it's headed. ",
            "author": {
                "login": "albinekman91"
            },
            "state": "CLOSED",
            "createdAt": "2022-09-26T15:50:29Z",
            "closedAt": "2022-09-26T16:03:17Z",
            "url": "https://github.com/supabase/supabase-js/issues/569",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5LCrD_",
                    "body": "Thanks! We're moving things around atm - things should hopefully look better once v2 is out.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-27T05:21:00Z",
                    "url": "https://github.com/supabase/supabase-js/issues/569#issuecomment-1258991871"
                },
                {
                    "id": "IC_kwDOD79Crs5LC6xi",
                    "body": "I was apparently on the wrong version \ud83d\ude48. Closed the issue once I realized. Sorry to take up your time! ",
                    "author": {
                        "login": "albinekman91"
                    },
                    "createdAt": "2022-09-27T06:44:57Z",
                    "url": "https://github.com/supabase/supabase-js/issues/569#issuecomment-1259056226"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5Sveu9",
            "number": 571,
            "title": "V2 breaks signInWithPassword on node (desktop app, not a web server)",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nV2 currently breaks our usage from a nodejs desktop application. This is not a web server that uses the private token in admin mode, nor does it \"impersonate\" a client using setAuthheader. It's a standalone desktop application that uses auth.signInWithPassword();\r\n\r\nThe sign in attempt is succesfull, but none of the db related methods seem to utilize the session. Only the realtime module \"sees\" the session.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Create a completely empty node js app\r\n2. Install Supabase JS V2 (RC10 at the time of writing)\r\n3. create an index.js file and inside do:\r\n\r\n```\r\nconst { createClient } = require(\"@supabase/supabase-js\");\r\n\r\nconst client = createClient(\"INSERT_HOST_HERE\", \"INSERT_PUBLIC_ANON_KEY_HERE\");\r\n\r\nclient.auth.onAuthStateChange((event, session) => {\r\n  if (event === \"SIGNED_IN\") {\r\n    client\r\n      .from(\"table\")\r\n      .select(\"*\")\r\n      .then(({ data, error }) => {\r\n        //if RLS is checking email or uid in the policy, this will not get the rows that match\r\n      });\r\n    client\r\n      .channel(\"*\")\r\n      .on(\"postgres_changes\", { event: \"*\", schema: \"*\" }, (payload) => {\r\n        //this will work just fine, it passes the session to the api and gets notifications according to RLS\r\n      })\r\n      .subscribe();\r\n  }\r\n});\r\n\r\nclient.auth.signInWithPassword({email: 'insert valid email here', password: 'insert valid password here'});\r\n```\r\n\r\n## Expected behavior\r\n\r\nThe db api call should use the session that was just established\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Version of supabase-js: V2 RC 10\r\n- Version of Node.js: v18.9.0\r\n\r\n## Additional context\r\n\r\nSince the exact same code works just fine in the browser, wIthout going deep into the sdk code, this looks like an issue with localStoarge not being available in node?\r\nHowever, I patched in localStorage and it still could not get the established session. No difference at all.\r\n\r\n\r\nI know this usecase isn't very common, but it works awesomely for us on V1.x and I'm worried we will get stuck on it forever.\r\nIf you have any pointers, I could take a stab at a fix.\r\n\r\n\r\nThanks so much for such an awesome open source project! \u2764\ufe0f ",
            "author": {
                "login": "irreal"
            },
            "state": "CLOSED",
            "createdAt": "2022-09-27T18:19:32Z",
            "closedAt": "2022-09-28T14:33:10Z",
            "url": "https://github.com/supabase/supabase-js/issues/571",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5LH5-v",
                    "body": "Hey! I actually bumped into this recently - can you try setting [`persistSession: false`](https://supabase.com/docs/reference/javascript/next/initializing#parameters)? This only happens on Node afaik - we'll add a note on this on the reference docs.\r\n\r\nEdit: the setting above means the session in stored in memory and wiped out on close, which, considering your use case, might not be what you want. Instead, you can use a NodeJS Storage polyfill like [`node-localstorage`](https://www.npmjs.com/package/node-localstorage) and pass it to [`storage`](https://supabase.com/docs/reference/javascript/next/initializing#parameters).",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-28T04:15:05Z",
                    "url": "https://github.com/supabase/supabase-js/issues/571#issuecomment-1260363695"
                },
                {
                    "id": "IC_kwDOD79Crs5LKW7A",
                    "body": "Awesome, that totally works. Setting persistSession to false makes everything work again. I understand that it will not persist the session when the app is closed and then launched again later, but this the behaviour we want, so that's cool.\r\n\r\n",
                    "author": {
                        "login": "irreal"
                    },
                    "createdAt": "2022-09-28T14:33:10Z",
                    "url": "https://github.com/supabase/supabase-js/issues/571#issuecomment-1261006528"
                },
                {
                    "id": "IC_kwDOD79Crs5N3fEO",
                    "body": "We ran into this issue as well writing jest tests for our RLS rules.  We use the locally served anon key and sign in with auth.signInWithPassword().   In supabase-js 1.x the signIn method worked fine.  With 2.x the switch to signInWithPassword() mysteriously started failing by failing all RLS rules.   Glad we found this AND it would be great if there were sample of E2E test for RLS rules so that devs can write and test locally.  ",
                    "author": {
                        "login": "joedalsin"
                    },
                    "createdAt": "2022-11-08T00:00:30Z",
                    "url": "https://github.com/supabase/supabase-js/issues/571#issuecomment-1306390798"
                },
                {
                    "id": "IC_kwDOD79Crs5Po7mw",
                    "body": "@soedirgo Could we leave this issue open until you came around to add a note to the docs (or did I oversee this)? I just bumped into this issue too, and it's easier to find this solution if the issue is still open.",
                    "author": {
                        "login": "d-e-h-i-o"
                    },
                    "createdAt": "2022-12-03T10:25:34Z",
                    "url": "https://github.com/supabase/supabase-js/issues/571#issuecomment-1336129968"
                },
                {
                    "id": "IC_kwDOD79Crs5PrQss",
                    "body": "@d-e-h-i-o you can track this on https://github.com/supabase/gotrue-js/issues/539 - that issue also links here so I think that should give enough visibility for the comments here.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-12-05T04:34:39Z",
                    "url": "https://github.com/supabase/supabase-js/issues/571#issuecomment-1336740652"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5S7J8-",
            "number": 574,
            "title": "2.0.0-rc.10 - inconsistent handling of `createClient()` options",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen setting `auth.persistSession` for a client, you have to wrap the object in an `options` object. When setting `global.headers`, you don't. Unless I'm misunderstanding and jacking something up.\r\n\r\nWhen I set `persistSession: false`, I'm expecting the localStorage info to be deleted on logout. This only happens if I do the above. Likewise, the client won't properly set the global headers, and retrieve data behind RLS, unless I exclude the `options` wrapper.\r\n\r\n## To Reproduce\r\n\r\nhttps://github.com/j4w8n/sveltekit-supabase-oauth\r\n\r\n```js\r\nimport { createClient } from '@supabase/supabase-js'\r\nimport { PUBLIC_SUPABASE_ANON_KEY, PUBLIC_SUPABASE_URL } from '$env/static/public'\r\n\r\nexport const supabaseClient = createClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {\r\n  options: {\r\n    auth: {\r\n      persistSession: false\r\n    }\r\n  }\r\n})\r\n\r\nexport let supabaseServerClient\r\nexport const createSupabaseServerClient = (access_token) => {\r\n  supabaseServerClient = createClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {\r\n    global: {\r\n      headers: { 'Authorization': `Bearer ${access_token}` }\r\n    }\r\n  })\r\n}\r\n```\r\n\r\n## Expected behavior\r\n\r\nPer the [docs](https://supabase.com/docs/reference/javascript/next/initializing#with-additional-parameters), you shouldn't have to use an `options` wrapper.\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser (if applies): Firefox\r\n- Version of supabase-js: 2.0.0-rc.10\r\n- Version of Node.js: 16.15.0\r\n\r\n## Additional Context\r\n\r\nI'm creating two clients. One for use on the client-side and one for use on the server-side. I'm defining the server-side client inside of a function; which gets called in `hooks.server.js` for every request the server receives.\r\n",
            "author": {
                "login": "j4w8n"
            },
            "state": "CLOSED",
            "createdAt": "2022-09-29T17:33:46Z",
            "closedAt": "2022-09-30T12:45:46Z",
            "url": "https://github.com/supabase/supabase-js/issues/574",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5LTn9j",
                    "body": "Not sure I understand - you don't need to wrap auth settings with `options`. I.e. instead of:\r\n\r\n```ts\r\nexport const supabaseClient = createClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {\r\n  options: {\r\n    auth: {\r\n      persistSession: false\r\n    }\r\n  }\r\n})\r\n```\r\n\r\nDo:\r\n\r\n```ts\r\nexport const supabaseClient = createClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {\r\n  auth: {\r\n    persistSession: false\r\n  }\r\n})\r\n```\r\n\r\nTesting this locally, and checking my localStorage on the browser, I'm not seeing any entry.\r\n\r\nBtw, `persistSession: false` doesn't delete the local storage on logout - it simple doesn't touch it. So if you've previously visited the site with `persistSession` unset, you might need to manually delete it from local storage first.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-30T11:06:52Z",
                    "url": "https://github.com/supabase/supabase-js/issues/574#issuecomment-1263435619"
                },
                {
                    "id": "IC_kwDOD79Crs5LT-z-",
                    "body": "yep, I must've been confused during part of the testing, and during that got further confused on how `persistSession` works.\r\n\r\nI removed the wrapper, and the session is never saved to begin with. Thanks!",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2022-09-30T12:45:45Z",
                    "url": "https://github.com/supabase/supabase-js/issues/574#issuecomment-1263529214"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5Th1eo",
            "number": 583,
            "title": "Typedoc link 404s ",
            "body": "# Improve documentation\r\n- on both the repo and the link here (both point to the same URL): https://supabase.com/docs/reference/javascript/next\r\n\r\nTypeDoc URL: https://supabase.github.io/supabase-js/\r\n\r\n\r\n## Link \r\n\r\nAdd a link to the page which needs improvement (if relevant)\r\n\r\n## Describe the problem\r\n\r\nIs the documentation missing? Or is it confusing? Why is it confusing?\r\n\r\n## Describe the improvement\r\n\r\nA clear and concise description of the improvement.\r\n\r\n## Additional context\r\n\r\nAdd any other context or screenshots that help clarify your question.",
            "author": {
                "login": "jeremyisatrecharm"
            },
            "state": "CLOSED",
            "createdAt": "2022-10-07T15:47:40Z",
            "closedAt": "2022-10-12T08:42:01Z",
            "url": "https://github.com/supabase/supabase-js/issues/583",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5MC2fL",
                    "body": "@jeremyisatrecharm thanks a lot for reporting \ud83d\ude47\ud83c\udffb\u200d\u2642\ufe0f, both links have been fixed.",
                    "author": {
                        "login": "RamiroND"
                    },
                    "createdAt": "2022-10-12T08:50:41Z",
                    "url": "https://github.com/supabase/supabase-js/issues/583#issuecomment-1275815883"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5T39qc",
            "number": 591,
            "title": "Failure mode with old sessions",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nIt seems like I can end up in a state with an expired session. When I call logout, the logout fails as it is an invalid session, but supabase browser client still thinks it's logged in as it has a session. I can't figure out how to get rid of the session from supabase.auth\r\n\r\n## Expected behavior\r\n\r\ncalling logout should remove the local session, even if the remote call to gotrue fails\r\n\r\n## System information\r\n\r\n- Version of supabase-js: 2.0.0-rc.1\r\n\r\n## Additional context\r\n\r\nIt would be nice to have some easy to use session management functions.\r\n",
            "author": {
                "login": "magicseth"
            },
            "state": "OPEN",
            "createdAt": "2022-10-13T05:43:52Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/591",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5MHub6",
                    "body": "Can you try this with the recently released `@supabase/supabase-js@2`?",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-10-13T06:28:25Z",
                    "url": "https://github.com/supabase/supabase-js/issues/591#issuecomment-1277093626"
                },
                {
                    "id": "IC_kwDOD79Crs5R4TSx",
                    "body": "> # Bug report\r\n> ## Describe the bug\r\n> It seems like I can end up in a state with an expired session. When I call logout, the logout fails as it is an invalid session, but supabase browser client still thinks it's logged in as it has a session. I can't figure out how to get rid of the session from supabase.auth\r\n> \r\n> ## Expected behavior\r\n> calling logout should remove the local session, even if the remote call to gotrue fails\r\n> \r\n\r\nProbably not the beest solution in my huumble opini\u00f6n. I feel the server is best in handling logout calls. Could lead to invalid solutions with the session alive -- but the client thinking it's logged out",
                    "author": {
                        "login": "vipulb2"
                    },
                    "createdAt": "2023-01-06T14:31:27Z",
                    "url": "https://github.com/supabase/supabase-js/issues/591#issuecomment-1373713585"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5UTI1y",
            "number": 602,
            "title": "Generic type errors in the v2 SupabaseClient",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\nTS2314 errors after updating the supabase-js module to v2\r\n\r\nA clear and concise description of what the bug is.\r\nmy Angular v14 project is not starting because I receive several 'TS2314: Generic type' errors coming from the SupabaseClient class\r\n\r\n## To Reproduce\r\nI am not able to reproduce the problem on StackBlitz\r\nI just updated a working supabase-js v1 project to v2 and started receiving these errors when trying to start the project locally\r\n\r\n## Expected behavior\r\n\r\nMy project would start and I can continue working on it\r\n\r\n## Screenshots\r\n\r\nI added 3 screenshots: The errors, the Angular service in which I initialize the client and the package.json\r\n\r\n## System information\r\n\r\n- OS: [e.g. Windows]\r\n- Version of supabase-js: 2.0.1\r\n- Version of Node.js: 16.16.0\r\n![deps](https://user-images.githubusercontent.com/8807130/196602938-5eafce84-ece6-46f4-9533-2a43bca180ac.jpg)\r\n![errors](https://user-images.githubusercontent.com/8807130/196602939-ea9e941f-604c-4a3d-9a84-cd25695f2f0f.JPG)\r\n![service](https://user-images.githubusercontent.com/8807130/196602940-ce397cd3-fffa-4e48-b1f4-993783742f4e.jpg)\r\n\r\n",
            "author": {
                "login": "rbogdy"
            },
            "state": "CLOSED",
            "createdAt": "2022-10-19T05:13:32Z",
            "closedAt": "2022-10-19T06:18:51Z",
            "url": "https://github.com/supabase/supabase-js/issues/602",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5MgI1y",
                    "body": "Hey there, can you update the lib and verify if it works now?",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-10-19T06:25:02Z",
                    "url": "https://github.com/supabase/supabase-js/issues/602#issuecomment-1283493234"
                },
                {
                    "id": "IC_kwDOD79Crs5MgeIA",
                    "body": "I confirm that the problem was solved by the update. Thank you for fixing this in such a short time.",
                    "author": {
                        "login": "rbogdy"
                    },
                    "createdAt": "2022-10-19T07:51:50Z",
                    "url": "https://github.com/supabase/supabase-js/issues/602#issuecomment-1283580416"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5Up6Gm",
            "number": 609,
            "title": "TypeScript type generation documentation",
            "body": "# Improve documentation\r\n\r\n## Link \r\n\r\n[Typescript Support](https://supabase.com/docs/reference/javascript/typescript-support)\r\n\r\n## Describe the problem\r\n\r\nCurrent [Typescript Support](https://supabase.com/docs/reference/javascript/typescript-support) documentation uses the `--local` [flag](https://supabase.com/docs/reference/cli/usage#supabase-gen-types-typescript).\r\n\r\n```\r\nsupabase start\r\nsupabase gen types typescript --local > lib/database.types.ts\r\n```\r\n\r\nHowever, in the preceding [Initializing](https://supabase.com/docs/reference/javascript/initializing) section, `https://xyzcompany.supabase.co` is used as the required `supabaseUrl` value.\r\n\r\n```javascript\r\nimport { createClient } from '@supabase/supabase-js'\r\n\r\n// Create a single supabase client for interacting with your database\r\nconst supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key')\r\n```\r\n\r\n## Describe the improvement\r\n\r\n- Providing command(s) for a hosted Supabase database. (e.g. using `--project-id`)\r\n- Hyperlink to [Supabase CLI docs](https://supabase.com/docs/reference/cli/). Commands for installation and authentication.\r\n\r\nFollowing are example commands using the [npm package](https://www.npmjs.com/package/supabase).\r\n\r\n```\r\nnpm i supabase -D\r\n```\r\n```\r\nnpx supabase login\r\nYou can generate an access token from https://app.supabase.com/account/tokens\r\nEnter your access token: token-goes-here\r\nFinished supabase login.\r\n```\r\n```\r\nnpx supabase gen types typescript --project-id id-goes-here > lib/database.types.ts\r\n```\r\n\r\n## Additional context\r\n\r\n- https://github.com/supabase/supabase/discussions/9379#discussioncomment-3947444",
            "author": {
                "login": "hyunbinseo"
            },
            "state": "CLOSED",
            "createdAt": "2022-10-24T06:07:00Z",
            "closedAt": "2022-10-28T10:17:26Z",
            "url": "https://github.com/supabase/supabase-js/issues/609",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5M3IJI",
                    "body": "Additionally. I am curious how to consume the types being generated. The examples I get from googling mention a `definitions` interface which does not seem to be there with the result from `supabase gen types typescript`.\r\n\r\n```ts\r\n ... //export type Json = \r\nexport interface Database {\r\n  public: {\r\n    Tables: {\r\n      class_lessons: {\r\n        Row: {\r\n          id: string\r\n          name: string | null\r\n          created_at: string | null\r\n          unit_id: string\r\n        }\r\n        Insert: {\r\n          id: string\r\n          name?: string | null\r\n          created_at?: string | null\r\n          unit_id: string\r\n        }\r\n        Update: {\r\n          id?: string\r\n          name?: string | null\r\n          created_at?: string | null\r\n          unit_id?: string\r\n        }\r\n      }\r\n```\r\n\r\nI'm trying to consume this and, admittedly I am pretty Typescript ignorant, but I can't figure out how to make the interface above fit into a query.\r\n\r\n\r\n```ts\r\n\tconst { data: klass } = await supabaseClient\r\n\t\t.from<Database.public.Tables.classes>('classes') // not working.\r\n\t\t.select('id, name')\r\n```",
                    "author": {
                        "login": "KevM"
                    },
                    "createdAt": "2022-10-24T19:48:23Z",
                    "url": "https://github.com/supabase/supabase-js/issues/609#issuecomment-1289519688"
                },
                {
                    "id": "IC_kwDOD79Crs5M4f6W",
                    "body": "@KevM `supabase gen types` generates the following interface.\r\n\r\n```typescript\r\ninterface Database {\r\n  public: {\r\n    Tables: {\r\n      movies: {\r\n        Row: {} // The data expected to be returned from a \"select\" statement.\r\n        Insert: {} // The data expected passed to an \"insert\" statement.\r\n        Update: {} // The data expected passed to an \"update\" statement.\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAbove interface only works with `supabase-js` v2, and it should be passed like this.\r\n\r\n```typescript\r\nimport { createClient } from '@supabase/supabase-js'\r\nimport { Database } from 'lib/database.types'\r\n\r\nconst supabase = createClient<Database>(\r\n  process.env.SUPABASE_URL,\r\n  process.env.SUPABASE_ANON_KEY\r\n)\r\n```\r\n\r\nIt should be passed in `createClient`, not `.from()`. The latter is [v1 syntax](https://supabase.com/docs/reference/javascript/v1/generating-types).\r\n\r\nReference [Typescript Support](https://supabase.com/docs/reference/javascript/typescript-support).",
                    "author": {
                        "login": "hyunbinseo"
                    },
                    "createdAt": "2022-10-25T02:07:16Z",
                    "url": "https://github.com/supabase/supabase-js/issues/609#issuecomment-1289879190"
                },
                {
                    "id": "IC_kwDOD79Crs5NKSBo",
                    "body": "is it not possible to use the types generated from openapi on supabase-js v2? \r\nif not, is there a way to generate types for v2 other than using the cli?",
                    "author": {
                        "login": "sherif414"
                    },
                    "createdAt": "2022-10-28T06:52:15Z",
                    "url": "https://github.com/supabase/supabase-js/issues/609#issuecomment-1294540904"
                },
                {
                    "id": "IC_kwDOD79Crs5NLUl4",
                    "body": "@KevM sorry for the confusion - that snippet is for supabase-js v1 which works differently wrt typings. We've updated the guide with new instructions - hopefully that clears it up.\r\n\r\n@sherif414 the openapi-typescript types isn't compatible with supabase-js v2. You can hand-write the types yourself if you like, minimally it would look like:\r\n```ts\r\nexport type Json = string | number | boolean | null | { [key: string]: Json } | Json[]\r\n\r\nexport interface Database {\r\n  my_schema: {\r\n    Tables: {\r\n      my_table: {\r\n        Row: {\r\n          id: number\r\n        }\r\n        // these are mandatory\r\n        Insert: {}\r\n        Update: {}\r\n      }\r\n    }\r\n    // these are mandatory\r\n    Views: {}\r\n    Functions: {}\r\n  }\r\n}\r\n```",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-10-28T10:15:44Z",
                    "url": "https://github.com/supabase/supabase-js/issues/609#issuecomment-1294813560"
                },
                {
                    "id": "IC_kwDOD79Crs5NLVEl",
                    "body": "We've updated the [guide](https://supabase.com/docs/guides/api/generating-types) with the `--project-id` command :+1:",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-10-28T10:17:26Z",
                    "url": "https://github.com/supabase/supabase-js/issues/609#issuecomment-1294815525"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5U2la6",
            "number": 612,
            "title": "Can't resolve 'encoding'",
            "body": "Module not found: Can't resolve 'encoding' in '/Users/thorwebdev/Documents/code/supabase/quickstarts/supabase-next-13/node_modules/.pnpm/node-fetch@2.6.7/node_modules/node-fetch/lib'\r\n\r\nThis warning is printed when using supabase-js in nextjs 13 project: https://github.com/supabase/auth-helpers/issues/340\r\n\r\nIt's related to an old version of node-fetch being used in cross-fetch: https://github.com/node-fetch/node-fetch/issues/412  https://github.com/lquixada/cross-fetch/issues/146\r\n\r\nIt should be safe to ignore as it's an optional dependency in node-fetch, but might be worthwhile to see if we can get rid of the warning.",
            "author": {
                "login": "thorwebdev"
            },
            "state": "CLOSED",
            "createdAt": "2022-10-26T07:57:04Z",
            "closedAt": "2023-09-11T09:13:45Z",
            "url": "https://github.com/supabase/supabase-js/issues/612",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5VgI9M",
                    "body": "I'm seeing the same issue.\r\n\r\n```\r\nModule not found: Can't resolve 'encoding' in '/Users/cdedreuille/Sites/kapture/node_modules/node-fetch/lib'\r\n\r\nImport trace for requested module:\r\n./node_modules/node-fetch/lib/index.js\r\n./node_modules/cross-fetch/dist/node-ponyfill.js\r\n./node_modules/@supabase/supabase-js/dist/main/lib/fetch.js\r\n./node_modules/@supabase/supabase-js/dist/main/SupabaseClient.js\r\n./node_modules/@supabase/supabase-js/dist/main/index.js\r\n./lib/supabase.ts\r\n./app/app/page.tsx\r\n\r\n./node_modules/node-fetch/lib/index.js\r\nModule not found: Can't resolve 'encoding' in '/Users/cdedreuille/Sites/kapture/node_modules/node-fetch/lib'\r\n\r\nImport trace for requested module:\r\n./node_modules/node-fetch/lib/index.js\r\n./node_modules/cross-fetch/dist/node-ponyfill.js\r\n./node_modules/@supabase/supabase-js/dist/main/lib/fetch.js\r\n./node_modules/@supabase/supabase-js/dist/main/SupabaseClient.js\r\n./node_modules/@supabase/supabase-js/dist/main/index.js\r\n./lib/supabase.ts\r\n./app/app/components/image.tsx\r\n./app/app/components/grid.tsx\r\n```\r\n\r\nEverything is working as expected but it would be great to make it go away.",
                    "author": {
                        "login": "cdedreuille"
                    },
                    "createdAt": "2023-02-17T11:10:24Z",
                    "url": "https://github.com/supabase/supabase-js/issues/612#issuecomment-1434488652"
                },
                {
                    "id": "IC_kwDOD79Crs5Vkd4v",
                    "body": "Yes, am getting the same with the latest Nextjs 13.1.6. Everything works though.",
                    "author": {
                        "login": "SharadKumar"
                    },
                    "createdAt": "2023-02-18T10:22:54Z",
                    "url": "https://github.com/supabase/supabase-js/issues/612#issuecomment-1435622959"
                },
                {
                    "id": "IC_kwDOD79Crs5XnCjs",
                    "body": "I am using node 18+ version, It does not need `cross-fetch`.\r\n\r\n```shell\r\npnpm add -D encoding\r\n```\r\nWith this you can run.",
                    "author": {
                        "login": "kamto7"
                    },
                    "createdAt": "2023-03-15T11:42:01Z",
                    "url": "https://github.com/supabase/supabase-js/issues/612#issuecomment-1469851884"
                },
                {
                    "id": "IC_kwDOD79Crs5Yfe0F",
                    "body": "Any update on this one @thorwebdev ?",
                    "author": {
                        "login": "cdedreuille"
                    },
                    "createdAt": "2023-03-27T07:34:17Z",
                    "url": "https://github.com/supabase/supabase-js/issues/612#issuecomment-1484647685"
                },
                {
                    "id": "IC_kwDOD79Crs5Yfirn",
                    "body": "@cdedreuille no update so far, but I'll take a look this week.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-03-27T07:47:38Z",
                    "url": "https://github.com/supabase/supabase-js/issues/612#issuecomment-1484663527"
                },
                {
                    "id": "IC_kwDOD79Crs5YlBpp",
                    "body": "As @kamto7 suggested, using npm:\r\n`npm i -D encoding`\r\nRemoves the error. I'm going to test a deployment on Vercel later this week to see if i'm able to deploy successfully. ",
                    "author": {
                        "login": "robbiecren07"
                    },
                    "createdAt": "2023-03-28T02:05:18Z",
                    "url": "https://github.com/supabase/supabase-js/issues/612#issuecomment-1486101097"
                },
                {
                    "id": "IC_kwDOD79Crs5d4m0s",
                    "body": "@robbiecren07 Did you get around to trying it?\r\n\r\nI just freshly installed it locally and have it running locally, but I still seem to be getting this Error",
                    "author": {
                        "login": "datashard"
                    },
                    "createdAt": "2023-06-03T18:40:20Z",
                    "url": "https://github.com/supabase/supabase-js/issues/612#issuecomment-1575120172"
                },
                {
                    "id": "IC_kwDOD79Crs5d4nRK",
                    "body": "Yup I forgot to reply, I was able to deploy with no issues after running the above command in terminal.",
                    "author": {
                        "login": "robbiecren07"
                    },
                    "createdAt": "2023-06-03T18:43:54Z",
                    "url": "https://github.com/supabase/supabase-js/issues/612#issuecomment-1575121994"
                },
                {
                    "id": "IC_kwDOD79Crs5d4omq",
                    "body": "Might be good if someone opens a PR to add this Library as a Dependency.\r\n\r\nUnless someone else wants to do this, I'm probably gonna open one soon-ish",
                    "author": {
                        "login": "datashard"
                    },
                    "createdAt": "2023-06-03T18:53:23Z",
                    "url": "https://github.com/supabase/supabase-js/issues/612#issuecomment-1575127466"
                },
                {
                    "id": "IC_kwDOD79Crs5gC9Qr",
                    "body": "whwn i use npm i -D encoding  everything is working .",
                    "author": {
                        "login": "akashislam1"
                    },
                    "createdAt": "2023-06-28T13:11:04Z",
                    "url": "https://github.com/supabase/supabase-js/issues/612#issuecomment-1611387947"
                },
                {
                    "id": "IC_kwDOD79Crs5gaDv7",
                    "body": "> whwn i use npm i -D encoding everything is working .\r\n\r\nIt's amazing how at the same time the error is old but is so current",
                    "author": {
                        "login": "mthmcalixto"
                    },
                    "createdAt": "2023-07-03T06:31:44Z",
                    "url": "https://github.com/supabase/supabase-js/issues/612#issuecomment-1617443835"
                },
                {
                    "id": "IC_kwDOD79Crs5gnvYd",
                    "body": "Facing the same issue with next 13.4.3\r\n\r\n```js\r\nImport trace for requested module:\r\n./node_modules/node-fetch/lib/index.js\r\n./node_modules/cross-fetch/dist/node-ponyfill.js\r\n./node_modules/@supabase/storage-js/dist/main/lib/helpers.js\r\n./node_modules/@supabase/storage-js/dist/main/packages/StorageFileApi.js\r\n./node_modules/@supabase/storage-js/dist/main/StorageClient.js\r\n./node_modules/@supabase/storage-js/dist/main/index.js\r\n./lib/supabase-storage.js\r\n./app/api/upload/route.ts\r\n```",
                    "author": {
                        "login": "gondar00"
                    },
                    "createdAt": "2023-07-05T05:05:26Z",
                    "url": "https://github.com/supabase/supabase-js/issues/612#issuecomment-1621030429"
                },
                {
                    "id": "IC_kwDOD79Crs5hA5J8",
                    "body": "same issue on next `next@13.4.9` with turbo `turbo@1.10.7`\r\n\r\n`npm i -D encoding` seems like a good workaround for now \ud83d\ude80 ",
                    "author": {
                        "login": "MildTomato"
                    },
                    "createdAt": "2023-07-09T06:41:42Z",
                    "url": "https://github.com/supabase/supabase-js/issues/612#issuecomment-1627624060"
                },
                {
                    "id": "IC_kwDOD79Crs5hRgW9",
                    "body": "Same issue, but for use with Firebase. On `next@13.4.9` and `node v18.16.1`. `npm i -D encoding` has removed the error.",
                    "author": {
                        "login": "JP-Soup"
                    },
                    "createdAt": "2023-07-12T07:17:57Z",
                    "url": "https://github.com/supabase/supabase-js/issues/612#issuecomment-1631978941"
                },
                {
                    "id": "IC_kwDOD79Crs5hkpvZ",
                    "body": "I am having the same error message with Nextjs semver 13.4.1. However, no issues deploying, and everything works as intended in production.\n\nWhat gives?",
                    "author": {
                        "login": "cristovalmartinez"
                    },
                    "createdAt": "2023-07-16T06:48:42Z",
                    "url": "https://github.com/supabase/supabase-js/issues/612#issuecomment-1636998105"
                },
                {
                    "id": "IC_kwDOD79Crs5jyeKV",
                    "body": "Ran into this as well, looking forward to the fix. Thank folks!",
                    "author": {
                        "login": "luxonauta"
                    },
                    "createdAt": "2023-08-11T03:40:16Z",
                    "url": "https://github.com/supabase/supabase-js/issues/612#issuecomment-1674175125"
                },
                {
                    "id": "IC_kwDOD79Crs5kBAQE",
                    "body": "@thorwebdev @soedirgo Any update on this one? ",
                    "author": {
                        "login": "cdedreuille"
                    },
                    "createdAt": "2023-08-14T20:06:10Z",
                    "url": "https://github.com/supabase/supabase-js/issues/612#issuecomment-1677984772"
                },
                {
                    "id": "IC_kwDOD79Crs5kEX-Z",
                    "body": "Still happening on Next 13.4.15",
                    "author": {
                        "login": "aokigit"
                    },
                    "createdAt": "2023-08-15T12:41:37Z",
                    "url": "https://github.com/supabase/supabase-js/issues/612#issuecomment-1678868377"
                },
                {
                    "id": "IC_kwDOD79Crs5kL1KN",
                    "body": "For me, I am using the same version (Next.js 13.4.15)  and `npm i -D encoding`  is working.\r\n\r\n",
                    "author": {
                        "login": "khRasikh"
                    },
                    "createdAt": "2023-08-16T15:24:34Z",
                    "url": "https://github.com/supabase/supabase-js/issues/612#issuecomment-1680822925"
                },
                {
                    "id": "IC_kwDOD79Crs5kNrbQ",
                    "body": "Using Next.JS 13.4.16 and can confirm that `pnpm add -D encoding` resolved this error. ",
                    "author": {
                        "login": "hkbertoson"
                    },
                    "createdAt": "2023-08-16T21:41:57Z",
                    "url": "https://github.com/supabase/supabase-js/issues/612#issuecomment-1681307344"
                },
                {
                    "id": "IC_kwDOD79Crs5kPcjN",
                    "body": "Hey all, we're still looking into a solution that doesn't require `npm i -D encoding`.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-08-17T07:22:26Z",
                    "url": "https://github.com/supabase/supabase-js/issues/612#issuecomment-1681770701"
                },
                {
                    "id": "IC_kwDOD79Crs5kcvRw",
                    "body": "Hey, I still have this error on Next 13.4.19. I can confirm that adding encoding with `pnpm add -D encoding` works, but it is not an ideal solution.",
                    "author": {
                        "login": "andrijantasevski"
                    },
                    "createdAt": "2023-08-20T11:02:17Z",
                    "url": "https://github.com/supabase/supabase-js/issues/612#issuecomment-1685255280"
                },
                {
                    "id": "IC_kwDOD79Crs5kqo-l",
                    "body": "i switched to pnpm, this solved it",
                    "author": {
                        "login": "sjohns21"
                    },
                    "createdAt": "2023-08-22T20:37:31Z",
                    "url": "https://github.com/supabase/supabase-js/issues/612#issuecomment-1688899493"
                },
                {
                    "id": "IC_kwDOD79Crs5k-sjz",
                    "body": "Looks like this will be resolved soon? @soedirgo \r\nI have an active project im working on with:\r\n```\r\n\"@supabase/auth-helpers-nextjs\": \"^0.7.4\",\r\n \"@supabase/supabase-js\": \"^2.32.0\",\r\n\"next\": \"13.4.19\",\r\n\"react\": \"18.2.0\",\r\n```\r\nSo I can test, once released.",
                    "author": {
                        "login": "robbiecren07"
                    },
                    "createdAt": "2023-08-26T04:36:03Z",
                    "url": "https://github.com/supabase/supabase-js/issues/612#issuecomment-1694157043"
                },
                {
                    "id": "IC_kwDOD79Crs5mIdUk",
                    "body": "Hey all, can you check if the errors are still there after upgrading supabase-js to v2.33.2?\r\n\r\np.s. Please also try to uninstall `encoding` if you had to install that as a workaround. Thanks!",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-09-11T09:16:31Z",
                    "url": "https://github.com/supabase/supabase-js/issues/612#issuecomment-1713493284"
                },
                {
                    "id": "IC_kwDOD79Crs5mIeEZ",
                    "body": "This seems to have fixed the issue in my case!",
                    "author": {
                        "login": "TomasHubelbauer"
                    },
                    "createdAt": "2023-09-11T09:18:23Z",
                    "url": "https://github.com/supabase/supabase-js/issues/612#issuecomment-1713496345"
                },
                {
                    "id": "IC_kwDOD79Crs5mK_LP",
                    "body": "Fixed it for me as well! (with encoding not installed)",
                    "author": {
                        "login": "AarooneyFarr"
                    },
                    "createdAt": "2023-09-11T15:50:37Z",
                    "url": "https://github.com/supabase/supabase-js/issues/612#issuecomment-1714156239"
                },
                {
                    "id": "IC_kwDOD79Crs5m1AaX",
                    "body": "> Hey all, can you check if the errors are still there after upgrading supabase-js to v2.33.2?\r\n> \r\n> p.s. Please also try to uninstall `encoding` if you had to install that as a workaround. Thanks!\r\n\r\nConfirmed",
                    "author": {
                        "login": "activenode"
                    },
                    "createdAt": "2023-09-19T09:43:56Z",
                    "url": "https://github.com/supabase/supabase-js/issues/612#issuecomment-1725171351"
                },
                {
                    "id": "IC_kwDOD79Crs5nABtl",
                    "body": "> Hey all, can you check if the errors are still there after upgrading supabase-js to v2.33.2?\r\n> \r\n> p.s. Please also try to uninstall `encoding` if you had to install that as a workaround. Thanks!\r\n\r\nThis sorted out the issue! Appreciated!",
                    "author": {
                        "login": "isener"
                    },
                    "createdAt": "2023-09-20T16:19:31Z",
                    "url": "https://github.com/supabase/supabase-js/issues/612#issuecomment-1728060261"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5U2s2n",
            "number": 613,
            "title": "require is not defined",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen using pnpm monorepo and referencing supabase from a separate package in a sveltekit/vite app the server side supabase import will fail with the error message of: \"require is not defined\". This seems to apply only for dev mode. \r\n\r\n## To Reproduce\r\n\r\nI made a reproduction repository here: \r\nhttps://github.com/Crenshinibon/supabase-error\r\nSteps are included there:\r\n\r\n## Expected behavior\r\n\r\nUse the already available \"fetch\" implementation in node v18 und don't try to import cross-fetch.\r\n\r\n## Screenshots\r\n![2022-10-26_10-15](https://user-images.githubusercontent.com/69277/197973159-5d176939-0dfe-4042-95d0-00ba64952e79.png)\r\n\r\n\r\n## System information\r\n\r\n- OS: Xubuntu 20.04\r\n- Version of supabase-js: 2.0.4\r\n- Version of Node.js: v18.12.0\r\n\r\n## Additional context\r\n",
            "author": {
                "login": "Crenshinibon"
            },
            "state": "OPEN",
            "createdAt": "2022-10-26T08:21:50Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/613",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs5VJAnn",
            "number": 616,
            "title": "Supabase auth in Node returns error 500",
            "body": "supabase-js version: 2.0.4\r\n\r\nI'm trying to build an API using Vercel serverless functions (NOT a Next.js API). I can't seem to be able to retrieve the user object from within the API handler. I'm not sure what I'm doing wrong and I see no meaningful error message in the returned error object or the Supabase log. This is the error object:\r\n\r\n```\r\nerror:  AuthApiError: Internal server error\r\n    at C:\\XXX\\node_modules\\@supabase\\gotrue-js\\src\\lib\\fetch.ts:41:16\r\n    at processTicksAndRejections (node:internal/process/task_queues:95:5) {\r\n  __isAuthError: true,\r\n  status: 500\r\n}\r\n```\r\n\r\nThe Supabase event that appears to be raised by the call (what is `invalid claim: subject missing`?):\r\n\r\n```\r\n{\"component\":\"api\",\"error\":\"invalid claim: subject missing\",\"level\":\"error\",\"method\":\"GET\",\"msg\":\"Unhandled server error: invalid claim: subject missing\",\"path\":\"/user\",\"referer\":\"\",\"remote_addr\":\"xxx.xxx.xxx.xxx\",\"time\":\"2022-10-29T19:23:01Z\",\"timestamp\":\"2022-10-29T19:23:01Z\"}\r\n```\r\n\r\nAnd the code in the API handler:\r\n\r\n```ts\r\nconst supabaseClient = createClient(supabaseUrl, supabaseKey);\r\n\r\nconst user = await supabaseClient.auth.getUser();\r\n```\r\n\r\nuser is null and user.error contains the information pasted above.\r\n\r\nI have no problem with auth in a Next.js API using createServerSupabaseClient from the auth-helpers-nextjs package.\r\n\r\nLooking at the cookies, after authentication in the browser a cookie containing a JWT gets set in local storage. But the browser does not send that cookie along when requesting the API endpoint. The request headers do not contain the cookie. So I guess the API handler can't verify the user since there is nothing to verify. \r\n\r\nI have no idea what's going on. Is this a bug or am I missing something obvious?",
            "author": {
                "login": "user72356"
            },
            "state": "CLOSED",
            "createdAt": "2022-10-29T19:41:57Z",
            "closedAt": "2022-10-31T14:46:51Z",
            "url": "https://github.com/supabase/supabase-js/issues/616",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5NRKcm",
                    "body": "Same issue here with new SupaBase JS client.",
                    "author": {
                        "login": "rafalolszewski94"
                    },
                    "createdAt": "2022-10-30T20:31:21Z",
                    "url": "https://github.com/supabase/supabase-js/issues/616#issuecomment-1296344870"
                },
                {
                    "id": "IC_kwDOD79Crs5NUbSf",
                    "body": "FWIW I found what the issue was. If you use the supabase-js client it will NOT handle cookie management. For that you need to use one of the auth-helpers for your platform (Next, Svelte, Remix, etc). The auth-helpers include wrappers around the supabase client for both the browser and server envs. The wrappers handle the cookies. Unfortunately the wrappers do not include a version for the Vercel serverless platform (only for Next, which is slightly different). So I had to build my own wrappers using the Next wrappers as inspiration.",
                    "author": {
                        "login": "user72356"
                    },
                    "createdAt": "2022-10-31T14:46:51Z",
                    "url": "https://github.com/supabase/supabase-js/issues/616#issuecomment-1297200287"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5VNxno",
            "number": 617,
            "title": "RLS prevents data reading in NextJS apps",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nExecuting basic Supabase client queries in a NextJS app doesn't seem to return any rows unless RLS (\"row-level security\") is disabled in the dashboard. Although writes should be protected, it should nevertheless still be possible to _read_ data with RLS enabled.\r\n\r\n## To Reproduce\r\n\r\n1. Create a new Supabase project.\r\n2. Define a basic schema and add (at least) one row. **Ensure that RLS is enabled** (it should be enabled by default).\r\n3. Locally, create a new NextJS project with `npx create-next-app@latest --use-npm test-project`.\r\n4. `npm install @supabase/supabase-js`.\r\n5. Create an `.env.local` file and add two variables to it: (i) `NEXT_PUBLIC_SUPABASE_URL` - the Supabase URL found on your project home page; (ii) `NEXT_PUBLIC_SUPABASE_ANON_KEY` - the Supabase anon key, also found on your project home page.\r\n6. In your NextJS app, edit `pages/index.js` to instantiate the Supabase client with `const supabase = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY)`.\r\n7. Call the client to pull data from the DB, e.g. -\r\n\r\n```\r\n  useEffect(() => {\r\n    getEntries()\r\n  }, [])\r\n\r\n  async function getEntries() {\r\n    const { data, error } = await supabase.from('entries').select()\r\n\r\n    if (error) {\r\n      console.log(error.message)\r\n    }\r\n\r\n    if (data) {\r\n      console.log(data)\r\n    }\r\n  }\r\n```\r\n8. Start the dev server with `npm run dev`.\r\n9. Browse to the URL (usually `localhost:3000`) and refresh the page.\r\n\r\nYou should be able to see that the console logs out an empty array i.e. is unable to fetch data.\r\n\r\n## Expected behavior\r\n\r\nA array of objects containing DB data should be logged to the console.\r\n\r\n## System information\r\n\r\n- OS: macOS Monterey 12.2.1\r\n- Browser: Firefox\r\n- Version of supabase-js: `2.0.4`\r\n- Version of Node.js: `14.8.12`\r\n\r\n## Additional context\r\n\r\nOne solution to this is to **disble RLS**, although in the ideal case it would be possible to keep RLS and just allow reads by NextJS clients.\r\n\r\nAlso, it appears that this problem has been experienced by other users, e.g. https://stackoverflow.com/questions/71294440/supabase-in-next-js-returning-an-empty-array-when-data-is-in-relevant-tables.\r\n",
            "author": {
                "login": "mrmikardo"
            },
            "state": "CLOSED",
            "createdAt": "2022-10-31T11:16:06Z",
            "closedAt": "2022-11-02T15:41:03Z",
            "url": "https://github.com/supabase/supabase-js/issues/617",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5NTogT",
                    "body": "Hey @mrmikardo, you need at least one RLS policy for `select`/`all` that evaluates to true for the rows to be returned. You can check out [this guide](https://supabase.com/docs/guides/auth/row-level-security) for more details.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-10-31T12:07:54Z",
                    "url": "https://github.com/supabase/supabase-js/issues/617#issuecomment-1296992275"
                },
                {
                    "id": "IC_kwDOD79Crs5Nh1Ai",
                    "body": "@soedirgo thanks for the help here!",
                    "author": {
                        "login": "mrmikardo"
                    },
                    "createdAt": "2022-11-02T15:41:03Z",
                    "url": "https://github.com/supabase/supabase-js/issues/617#issuecomment-1300713506"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5VXw9x",
            "number": 620,
            "title": "Rename example folder to examples",
            "body": "# Feature request\r\n\r\nI would like to open a pull request to rename the example folder to examples. Like this, the project will be consistent with the plural folder naming convention and with the @supabase/supabase example*s* folder.\r\n\r\n## Describe the solution you'd like\r\n\r\nTo be able to open a pull request, get familiar a bit with the codebase and make this change.",
            "author": {
                "login": "ib-ahmed"
            },
            "state": "CLOSED",
            "createdAt": "2022-11-02T00:42:26Z",
            "closedAt": "2022-11-02T06:01:14Z",
            "url": "https://github.com/supabase/supabase-js/issues/620",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5NdPiA",
                    "body": "Hey @supastore, go for it! \ud83d\ude4f",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-11-02T03:21:28Z",
                    "url": "https://github.com/supabase/supabase-js/issues/620#issuecomment-1299511424"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5VqTBr",
            "number": 625,
            "title": "FetchError: undefined is not an object (evaluating 'globalThis.localStorage.getItem')",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nAfter I build the my project to run on Android via Expo Go, I get this error when fetching data.\r\n\r\n## To Reproduce\r\n\r\nRepository of the related project: <https://gitlab.com/furkanunluturk/sorsana>\r\n\r\n1. `expo start --tunnel`\r\n2. Wait for bundling\r\n3. See the welcome screen before fetching data\r\n4. See the error\r\n\r\n## Expected behavior\r\n\r\nFetch the data successfully.\r\n\r\n## Screenshots\r\n\r\n![image](https://user-images.githubusercontent.com/10360643/200135906-1e553e65-ce41-47c6-828a-617ae16f591a.png)\r\n\r\n## System information\r\n\r\n- OS: Android\r\n- Version of supabase-js: 2.0.5\r\n- Version of Node.js: 16.17.1\r\n\r\n## Additional context\r\n\r\n**I'm not getting the same or any other error running on browser** (i.e. with `expo start --web`)\r\n",
            "author": {
                "login": "frknltrk"
            },
            "state": "CLOSED",
            "createdAt": "2022-11-05T18:53:00Z",
            "closedAt": "2022-11-06T20:17:26Z",
            "url": "https://github.com/supabase/supabase-js/issues/625",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5Nxva3",
                    "body": "this problem has been solved by implementing AsyncStorage. however, yet another bug has occurred. i will create a new issue for that later.\r\n\r\n`import AsyncStorage from '@react-native-async-storage/async-storage';`\r\n...\r\n`export const supabase = createClient(supabaseUrl, supabaseAnonKey, {\r\n  auth: {\r\n    storage: AsyncStorage,\r\n    autoRefreshToken: true,\r\n    persistSession: true,\r\n    detectSessionInUrl: false,\r\n  },\r\n});`\r\n\r\nsee more at <https://supabase.com/docs/reference/javascript/initializing#react-native-options>",
                    "author": {
                        "login": "frknltrk"
                    },
                    "createdAt": "2022-11-06T20:17:26Z",
                    "url": "https://github.com/supabase/supabase-js/issues/625#issuecomment-1304884919"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5VqTp1",
            "number": 626,
            "title": "not('column', 'in', '(value1, value2)') not working as expected",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen using the query `supabase.from('people').not('owner', 'in', '(Owner_1, Owner_2)');` to return all rows that do not have `Owner1` or `Owner2` in the column `owner`.\r\n\r\n## To Reproduce\r\n\r\nCreate a table (`people`) with the following rows:\r\n| id  | name | owner |\r\n| ------------- | ------------- | ------------- |\r\n| 1  | Name_1 | Owner_1  |\r\n| 2  | Name_2 | Owner_2  |\r\n| 3  | Name_3 | Owner_2  |\r\n\r\nWhere `name` and `owner` are text fields. Run the query `supabase.from('people').not('owner', 'in', '(Owner_1, Owner_2)');`.\r\n\r\n## Expected behavior\r\n\r\nI would expect this to return 0 results but it is returning rows 2 and 3.\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser: chrome\r\n- Version of supabase-js: 2.0.4\r\n- Version of Node.js: 16.15.0\r\n",
            "author": {
                "login": "N00nDay"
            },
            "state": "CLOSED",
            "createdAt": "2022-11-05T19:02:23Z",
            "closedAt": "2022-11-06T13:27:17Z",
            "url": "https://github.com/supabase/supabase-js/issues/626",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5NxWMn",
                    "body": "@N00nDay The following should clear it for you and solve your problem.\r\n\r\nAre you sure you're not using a space between 'Owner_1' and 'Owner_2'. `not` is a special filter and works slightly differently (attached the docs snippet below), the value which is being passed as third parameter ('(Owner_1, Owner)') is being directly interpreted, so in case you're using a space between 'Owner_1' and 'Owner_2', it will try to filter the columns where 'Owner_2' is prefixed with a space. The correct way to do this would be to not have any space between the values you're trying to filter on.\r\n\r\nTry this, it should work - `supabase.from('people').not('owner', 'in', '(Owner_1,Owner_2)'` (notice the lack of space between 'Owner_1' and 'Owner_2').\r\n\r\nAlso a side note, keep in mind to sanitize your values, in case you plan to use dynamic values to filter upon. Note from documentation.\r\n```\r\nMatch only rows which doesn't satisfy the filter.\r\nUnlike most filters, opearator and value are used as-is and need to follow [PostgREST syntax](https://postgrest.org/en/stable/api.html#operators). \r\nYou also need to make sure they are properly sanitized.\r\n```",
                    "author": {
                        "login": "anikait1"
                    },
                    "createdAt": "2022-11-06T11:46:09Z",
                    "url": "https://github.com/supabase/supabase-js/issues/626#issuecomment-1304781607"
                },
                {
                    "id": "IC_kwDOD79Crs5NxWW4",
                    "body": "I believe I am using a space! Is there a built in supabase function for this use case is there? I looked through the docs but couldn't find anything.  I appreciate the quick response!",
                    "author": {
                        "login": "N00nDay"
                    },
                    "createdAt": "2022-11-06T11:49:41Z",
                    "url": "https://github.com/supabase/supabase-js/issues/626#issuecomment-1304782264"
                },
                {
                    "id": "IC_kwDOD79Crs5NxW0c",
                    "body": "\r\n> There is t a built in supabase function for this use case is there? \r\n\r\nCan you please elaborate what you mean here, I don't think I was able to understand it.\r\n\r\nWhat I understood was, if supabase has a built in function for handling \"not in queries\". If that is the question, I think the way you're doing it is the way to go (the [docs](https://supabase.com/docs/reference/javascript/not) suggest the same), just keep in mind the input is being directly interpreted, so be mindful of adding/removing spaces and handing dynamic values. \r\n\r\n",
                    "author": {
                        "login": "anikait1"
                    },
                    "createdAt": "2022-11-06T11:59:38Z",
                    "url": "https://github.com/supabase/supabase-js/issues/626#issuecomment-1304784156"
                },
                {
                    "id": "IC_kwDOD79Crs5NxZUc",
                    "body": "My apologies. Phone autocorrected and I didn't double check. Your assumption was correct. ",
                    "author": {
                        "login": "N00nDay"
                    },
                    "createdAt": "2022-11-06T12:48:54Z",
                    "url": "https://github.com/supabase/supabase-js/issues/626#issuecomment-1304794396"
                },
                {
                    "id": "IC_kwDOD79Crs5NxaXn",
                    "body": "I hope your issue was resolved, I guess it be okay to close the issue now?",
                    "author": {
                        "login": "anikait1"
                    },
                    "createdAt": "2022-11-06T13:11:44Z",
                    "url": "https://github.com/supabase/supabase-js/issues/626#issuecomment-1304798695"
                },
                {
                    "id": "IC_kwDOD79Crs5Nxajc",
                    "body": "I haven't been able to test it yet but I have no doubt it will work as you suggest. \n\nOne follow up, I am familiar with sanitizing full sql queries but what does supabase suggest for sanitizing the filter for this use case '(Owner_1,Owner_2)'?",
                    "author": {
                        "login": "N00nDay"
                    },
                    "createdAt": "2022-11-06T13:15:52Z",
                    "url": "https://github.com/supabase/supabase-js/issues/626#issuecomment-1304799452"
                },
                {
                    "id": "IC_kwDOD79Crs5Nxa--",
                    "body": "> One follow up, I am familiar with sanitizing full sql queries but what does supabase suggest for sanitizing the filter for this use case '(Owner_1,Owner_2)'?\r\n\r\nI was unable to find any proper word from supabase on it, the documentation does not suggest any guidelines around it or mention what should be done. One way I can think of doing it would be to trim the whitespace around the values and then use the `.join` method to turn the values to a string. You can maybe add some other validation rules as well, would depend on your use case.\r\n\r\n```javascript\r\nconst owners = ['Owner_1', 'Owner_2']\r\nconst sanitizedOwners = owners.map(val => val.trim()).join(',')\r\n```  \r\n\r\n",
                    "author": {
                        "login": "anikait1"
                    },
                    "createdAt": "2022-11-06T13:25:46Z",
                    "url": "https://github.com/supabase/supabase-js/issues/626#issuecomment-1304801214"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5V9pPg",
            "number": 630,
            "title": "Body can not be parsed in edge functions",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen a POST request is made with the JS SDK to an edge functions via the invoke method with a JSON body it causes a server error. \r\n\r\n```\r\nSyntaxError: Unexpected end of JSON input\r\n    at parse (<anonymous>)\r\n    at packageData (deno:ext/fetch/22_body.js:359:16)\r\n    at consumeBody (deno:ext/fetch/22_body.js:236:14)\r\n    at async Server.<anonymous> (file:///src/main.ts:6551:26)\r\n    at async Server.#respond (file:///src/main.ts:111:24)\r\n```\r\n\r\nThe same request with the same body via Insomnia/Postman works without issue.\r\n\r\n## To Reproduce\r\n\r\nHappens with every function as long as the body is parsed and a body is present in the request.\r\n\r\n## Additional context\r\n\r\nI presume this is related to missing headers but it shouldn't happen since the SDK would be setting all required headers for the invoke function.\r\n",
            "author": {
                "login": "BenBao93"
            },
            "state": "CLOSED",
            "createdAt": "2022-11-09T14:39:57Z",
            "closedAt": "2022-11-13T17:26:52Z",
            "url": "https://github.com/supabase/supabase-js/issues/630",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5ON4m4",
                    "body": "Could this be caused by the OPTIONS request not being handled in your function?  Browser code is going to force CORS preflight requests.\r\nOtherwise you don't show an example function or your call, so hard to give more feedback.",
                    "author": {
                        "login": "GaryAustin1"
                    },
                    "createdAt": "2022-11-11T23:25:00Z",
                    "url": "https://github.com/supabase/supabase-js/issues/630#issuecomment-1312262584"
                },
                {
                    "id": "IC_kwDOD79Crs5OP3P5",
                    "body": "@GaryAustin1 it looks like I set the headers for the response but missed the OPTIONS handling at the start of the function [as mentioned in this guide.](https://supabase.com/docs/guides/functions#cors-cross-origin-resource-sharing)\r\n```\r\n  if (req.method === 'OPTIONS') {\r\n    return new Response('ok', { headers: corsHeaders })\r\n  }\r\n```",
                    "author": {
                        "login": "BenBao93"
                    },
                    "createdAt": "2022-11-13T17:26:52Z",
                    "url": "https://github.com/supabase/supabase-js/issues/630#issuecomment-1312781305"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5WLHyT",
            "number": 632,
            "title": "Javascript reference setSession docs are incorrect (recent change?)",
            "body": "# Improve documentation\r\n\r\n## Link \r\nhttps://supabase.com/docs/reference/javascript/auth-setsession\r\n![image](https://user-images.githubusercontent.com/54564956/200399985-698e07c1-c80d-4ed4-b6a5-25fbe55547bc.png)\r\n\r\n## Describe the problem\r\n\r\nThe docs show using a refresh_token in two spots, but the parameter is listed as a session object and that was what they used to show I believe.\r\n\r\nrefreshSession() also seems strange...\r\n\r\n## Describe the improvement\r\n\r\nA clear and concise description of the improvement.\r\n\r\n## Additional context\r\n\r\nAdd any other context or screenshots that help clarify your question.",
            "author": {
                "login": "GaryAustin1"
            },
            "state": "OPEN",
            "createdAt": "2022-11-07T19:42:48Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/632",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5OP6jo",
                    "body": "I'm not sure why this hasn't been resolved. I guess the team is extremely busy. I'll write up a PR, but I'm unsure how soon it'll get merged.\r\n\r\nI believe the contradiction on the page is because the parameters section, and description directly under the title, comes from the code in the gotrue-js repo(which had a recent update), but the rest of the page comes from code in the supabase repo.\r\n\r\nAs for refreshSession, it is correct. What is strange about it? Maybe something needs clarified.\r\n\r\nAlso, I *believe* you were correct to create this under the supabase repo. @saltcod might have sent it here because it has to do with the js client documentation. But it ultimately needs fixed with code in the supabase repo.",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2022-11-13T18:42:50Z",
                    "url": "https://github.com/supabase/supabase-js/issues/632#issuecomment-1312794856"
                },
                {
                    "id": "IC_kwDOD79Crs5OP_OZ",
                    "body": "@j4w8n Yeah, I did not pursue fixing in the docs as it got moved from there and it seems like several of the reference docs have been redone with error or missing info that existed just weeks ago in the v2 docs.  So I worried it was being done some other way as valid info was being thrown out like the process had changed and not just moving the old.\r\n\r\nOn refreshSession, I missed the brackets around refresh_session and am used to seeing objects spelling out in the docs like {refresh_session:refresh_session} but understand what they mean on closer look.\r\n   ",
                    "author": {
                        "login": "GaryAustin1"
                    },
                    "createdAt": "2022-11-13T20:27:02Z",
                    "url": "https://github.com/supabase/supabase-js/issues/632#issuecomment-1312813977"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5WLK18",
            "number": 633,
            "title": "Update supabase-js v2 setSession() example",
            "body": "# Improve documentation\r\n\r\nhttps://supabase.com/docs/reference/javascript/auth-setsession\r\n\r\n## Describe the problem\r\n\r\nThe example given is inaccurate and doesn't work with the current version of supabase-js. This has been discussed and mentioned in:\r\n[gotrue-js PR473](https://github.com/supabase/gotrue-js/pull/473)\r\n[gitrue-js PR511](https://github.com/supabase/gotrue-js/pull/511)\r\n\r\n\r\n## Describe the improvement\r\nUpdate the example to use the refresh token and access token in an object.\r\n```TypeScript\r\nsupabase.auth.setSession({\r\n      refresh_token\r\n      access_token\r\n    });\r\n```",
            "author": {
                "login": "Aerilym"
            },
            "state": "CLOSED",
            "createdAt": "2022-10-22T02:58:21Z",
            "closedAt": "2022-11-16T19:28:48Z",
            "url": "https://github.com/supabase/supabase-js/issues/633",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs5WUerN",
            "number": 637,
            "title": "shouldCreateUser: false still create a user using OTP",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nI'm using magic links but I don't want new users to sign up. I tried this method but it still creates new accounts:\r\n```\r\n const { error } = await supabaseClient.auth.signInWithOtp({\r\n  email,\r\n  options: {\r\n    shouldCreateUser: false,\r\n  },\r\n});\r\n```\r\n\r\n## Expected behavior\r\n\r\nI would love to keep the magic link functionality for existing users but I don't want new users to sign up as we are still in beta. By adding the `shouldCreateUser: false` I would expect that the user would not be created.\r\n\r\n## System information\r\n\r\n- OS: Mac\r\n- Browser (if applies) : Chrome\r\n- Version of supabase-js: Version 2.0.0\r\n- Version of Node.js: Version 16.14.2\r\n",
            "author": {
                "login": "cdedreuille"
            },
            "state": "CLOSED",
            "createdAt": "2022-11-14T14:51:29Z",
            "closedAt": "2022-11-14T14:54:06Z",
            "url": "https://github.com/supabase/supabase-js/issues/637",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5OUDPS",
                    "body": "My bad. Not sure what happened but it seems to work now.",
                    "author": {
                        "login": "cdedreuille"
                    },
                    "createdAt": "2022-11-14T14:54:06Z",
                    "url": "https://github.com/supabase/supabase-js/issues/637#issuecomment-1313878994"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5WaZNN",
            "number": 638,
            "title": "Function Task Timeout Error (10.01 sec) when we create or update the reminder time",
            "body": "Hi there!\r\n\r\nI'm using graphql functions and supabase db. One thing is weird, When I set reminder time or update it, only one field isn't updating. Also not getting data from endpoint (https://api.morningselfapp.com/.netlify/functions/graphql) as timeout error occoured which is stated below:\r\n\r\nTask timed out after 10.01 seconds",
            "author": {
                "login": "mimranzulkfal"
            },
            "state": "CLOSED",
            "createdAt": "2022-11-15T13:09:11Z",
            "closedAt": "2022-11-17T15:23:14Z",
            "url": "https://github.com/supabase/supabase-js/issues/638",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5Omz3l",
                    "body": "closing as duplicate of https://github.com/supabase/supabase/discussions/10383 ",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2022-11-17T15:23:13Z",
                    "url": "https://github.com/supabase/supabase-js/issues/638#issuecomment-1318796773"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5WgLhO",
            "number": 640,
            "title": "Database event payload does not match types",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWrong types for event callback.\r\n\r\n## To Reproduce\r\n\r\n```ts\r\nconst channelId = `public:app_users`;\r\nconst channel = supabaseClient\r\n  .channel(channelId)\r\n  .on<app_users_entity>(\r\n    'postgres_changes',\r\n    {\r\n      schema: 'public',\r\n      event: 'UPDATE',\r\n    },\r\n    (payload) => receivedDatabaseEvent(payload),\r\n  )\r\n  .subscribe((status) => {\r\n    console.log('status:', status);\r\n  });\r\n\r\nconst receivedDatabaseEvent = (\r\n  payload: RealtimePostgresUpdatePayload<app_users_entity>,\r\n) => {\r\n  setCurrentRecord(payload.new); // <- `.new` does not exists. It's actually `.record\r\n};\r\n```\r\n\r\n## Expected behavior\r\n\r\nPayload should be `RealtimePostgresUpdatePayload<...>` but it's actually\r\n\r\n```json\r\n{\r\n    \"columns\": [\r\n        {\r\n            \"name\": \"id\",\r\n            \"type\": \"uuid\"\r\n        },\r\n        {\r\n            \"name\": \"username\",\r\n            \"type\": \"text\"\r\n        }\r\n    ],\r\n    \"commit_timestamp\": \"2022-11-16T09:56:27Z\",\r\n    \"errors\": null,\r\n    \"old_record\": {\r\n        \"id\": \"c9871038-b055-4b41-9f7e-49d8805812e4\",\r\n        \"username\": \"1\"\r\n    },\r\n    \"record\": {\r\n        \"id\": \"c9871038-b055-4b41-9f7e-49d8805812e4\",\r\n        \"username\": \"1\"\r\n    },\r\n    \"schema\": \"public\",\r\n    \"table\": \"app_users\",\r\n    \"type\": \"UPDATE\"\r\n}\r\n```\r\n\r\nor the other way around ....\r\n\r\n## Screenshots\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser: chrome\r\n- Version of supabase-js: v2.1.0\r\n- Version of Node.js: 16.18.1\r\n",
            "author": {
                "login": "jsbrain"
            },
            "state": "CLOSED",
            "createdAt": "2022-11-16T10:03:00Z",
            "closedAt": "2022-11-16T11:46:51Z",
            "url": "https://github.com/supabase/supabase-js/issues/640",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5Ofd22",
                    "body": "Duplicate of https://github.com/supabase/realtime-js/issues/201.",
                    "author": {
                        "login": "jsbrain"
                    },
                    "createdAt": "2022-11-16T11:46:51Z",
                    "url": "https://github.com/supabase/supabase-js/issues/640#issuecomment-1316871606"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5WhFsw",
            "number": 641,
            "title": "AuthApiError: invalid claim: missing sub claim",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nCredentials are malformed are not being stored properly and therefore the client is not able to lately resolve the session\r\n\r\n![image](https://user-images.githubusercontent.com/9496960/202172260-1e4eb2eb-97e8-4f67-a977-aa944df5b292.png)\r\n\r\nAfter calling  `supabase.auth.signInWithPassword({email, password})` this strangely formatted token is generated\r\n\r\n```\r\n'[\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJhdXRoZW50aWNhdGVkIiwiZXhwIjoxNjY4NjAyNTM1LCJzdWIiOiJlYThiMjkxYS0wZTVkLTQ0YmEtYmViYi0zOGViYTQ1Y2UyOTgiLCJlbWFpbCI6ImFsZXh2Y2FzaWxsYXNAZ21haWwuY29tIiwicGhvbmUiOiIiLCJhcHBfbWV0YWRhdGEiOnsicHJvdmlkZXIiOiJlbWFpbCIsInByb3ZpZGVycyI6WyJlbWFpbCJdfSwidXNlcl9tZXRhZGF0YSI6e30sInJvbGUiOiJhdXRoZW50aWNhdGVkIiwic2Vzc2lvbl9pZCI6ImFkN2FmYzRiLTZmYzQtNGQxOC04OWJiLTRiYmM1YmNmMzUxMyJ9.LK3i6Dyh-dZX-yk4NvgEdxYwmxsoOnAk1vfK-0Nmoe4\",\"ktuUPxuJF-PHPhRpWfvUfQ\",null,null]'\r\n```\r\n\r\nAnd later on, doing `  await supabase.auth.setSession(token);` throws the following error:\r\n\r\n```\r\n{\r\n  error: AuthApiError: invalid claim: missing sub claim\r\n      at /home/alexvcasillas/otpfy/otpfy-v2/node_modules/@supabase/gotrue-js/dist/main/lib/fetch.js:41:20\r\n      at processTicksAndRejections (node:internal/process/task_queues:96:5) {\r\n    __isAuthError: true,\r\n    status: 401\r\n  }\r\n}\r\n```\r\n\r\nThis is the versions that I'm currently using:\r\n\r\n```\r\n\"@supabase/auth-helpers-nextjs\": \"^0.5.2\",\r\n\"@supabase/auth-helpers-react\": \"^0.3.1\",\r\n\"@supabase/supabase-js\": \"^2.1.0\",\r\n```\r\n\r\nThis worked before with versions:\r\n\r\n```\r\n \"@supabase/auth-helpers-nextjs\": \"^0.4.0-next.4\",\r\n\"@supabase/auth-helpers-react\": \"^0.3.0-next.4\",\r\n\"@supabase/supabase-js\": \"^2.0.0\",\r\n```\r\n\r\nAnd I have my product live without issues [https://otpfy.com](https://otpfy.com), but after upgrading everything to latest, it stopped working as expected \ud83e\udd14 \r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\nI'm using `next` for everything related\r\n\r\nSign in a user server-side\r\n```ts\r\nimport { createServerSupabaseClient } from \"@supabase/auth-helpers-nextjs\";\r\nimport { NextApiRequest, NextApiResponse } from \"next\";\r\nimport { Database } from \"../../types/database\";\r\n\r\nexport default async function handler(\r\n  req: NextApiRequest,\r\n  res: NextApiResponse\r\n) {\r\n  const { email, password } = req.body;\r\n\r\n  if (!email || !password) {\r\n    res.status(400).send({ data: null });\r\n    return;\r\n  }\r\n\r\n  const supabaseServerClient = createServerSupabaseClient<Database>({\r\n    req,\r\n    res,\r\n  });\r\n\r\n  const { data, error } = await supabaseServerClient.auth.signInWithPassword({\r\n    email,\r\n    password,\r\n  });\r\n\r\n  if (error) {\r\n    res.status(500).send({ data: null, error: error.message });\r\n    return;\r\n  }\r\n\r\n  res.status(200).send({ data: data });\r\n}\r\n```\r\n\r\nTry to see if the user is authenticated after server-side:\r\n\r\n```ts\r\nimport { createServerSupabaseClient } from \"@supabase/auth-helpers-nextjs\";\r\nimport { NextApiRequest, NextApiResponse } from \"next\";\r\nimport { fetchUser } from \"../../services/user\";\r\nimport { Database } from \"../../types/database\";\r\n\r\nexport default async function handler(\r\n  req: NextApiRequest,\r\n  res: NextApiResponse\r\n) {\r\n  const supabaseServerClient = createServerSupabaseClient<Database>({\r\n    req,\r\n    res,\r\n  });\r\n\r\n  const supabaseAuthToken = req.headers[\"supabase-auth-token\"];\r\n\r\n  if (supabaseAuthToken === \"undefined\") {\r\n    res.status(401).send({ data: null });\r\n    return;\r\n  }\r\n\r\n  const token = JSON.parse(supabaseAuthToken as string) as SupabaseAuthToken;\r\n\r\n  await supabaseServerClient.auth.setSession(token);\r\n\r\n  const {\r\n    data: { user },\r\n    error,\r\n  } = await supabaseServerClient.auth.getUser(token.access_token);\r\n\r\n  if (error) {\r\n    res.status(401).send({ data: null });\r\n    return;\r\n  }\r\n\r\n  if (user) {\r\n    const userData = await fetchUser(user.id, supabaseServerClient);\r\n\r\n    res.status(200).send({ data: userData ?? null });\r\n    return;\r\n  }\r\n\r\n  res.status(500).send({ data: null });\r\n}\r\n```\r\n\r\n## Expected behavior\r\n\r\nI should be able to sign up a user and work fine as expected\r\n\r\n## System information\r\n\r\n- OS: Windows\r\n- Browser (if applies): Chrome 107.0.5304.107 \r\n- Version of supabase-js: 2.1.0\r\n- Version of Node.js: 16.15.0 on the local environment. 16.x on Vercel",
            "author": {
                "login": "alexvcasillas"
            },
            "state": "CLOSED",
            "createdAt": "2022-11-16T12:29:14Z",
            "closedAt": "2022-11-17T15:21:09Z",
            "url": "https://github.com/supabase/supabase-js/issues/641",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5OgWub",
                    "body": "I can't reproduce the malformed credential. I'm using OAuth instead of email/pass; but I'd assume a JWT is created with the same code, no matter which is used.\r\n\r\nAs for `setSession()`, we're now required to pass in a \"session\". But not a whole session, just the `access_token` and `refresh_token`. The docs have not been fully updated to reflect this, but the [Parameters](https://supabase.com/docs/reference/javascript/auth-setsession#parameters) section is correct.\r\n\r\n```js\r\nconst { data, error } = await client.auth.setSession({ access_token: 'value', refresh_token: 'value' })\r\n```\r\n\r\n",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2022-11-16T14:24:51Z",
                    "url": "https://github.com/supabase/supabase-js/issues/641#issuecomment-1317104539"
                },
                {
                    "id": "IC_kwDOD79Crs5OglH8",
                    "body": "After following [this example](https://github.com/supabase/auth-helpers/tree/main/examples/nextjs-server-components) from the `auth-helpers` repository I managed to have all these features fully working and working like I charm I have to say.\r\n\r\nHaving upgraded to Next 13 seemed to be the root cause of this issue as now I can see that the `supabase-auth-token` is looking the same way as the one that I pointed out to be \"malformed\" because it didn't look like in the previous version.\r\n\r\nI think it's safe to close this bug report as it relates to using `supabase-js` the same way as we did for `next<13`, which now is different and I've figured it out thanks to the given example. Hope others can find this example helpful too :)",
                    "author": {
                        "login": "alexvcasillas"
                    },
                    "createdAt": "2022-11-16T15:03:50Z",
                    "url": "https://github.com/supabase/supabase-js/issues/641#issuecomment-1317163516"
                },
                {
                    "id": "IC_kwDOD79Crs5PKhMq",
                    "body": "I am having the same issue. But I am not in NextJS-land. \r\n\r\nI am working on a server-side Solid Start solution, using cookies. Having said that the reproducing sample is just about identical.\r\n\r\nThe only difference is that I am getting the access_token and refresh_token from a cookie. \r\n\r\nThe weird thing is that the `setSession` call completes fine (I am passing an object with the access and header tokens). It even returns the session-data and the error property is indeed null.\r\n\r\nThe error comes from the `getUser()` call. And it is exactly the same as described in this issue.\r\n\r\nA few days ago when I started working on the code, it was working too (AFAICT). I first then started to see this a few times and now it is there every time.\r\n\r\nIs it necessary to even call getUser? The samples all show the setSession call without using the returned data, which includes the user. Can't I just use the user returned?\r\n\r\nIn this app I am not exposing the supabase-client at all in the browser. All the code is run server-side. I am creating a secure cookie that contains the access and refresh tokens (encrypted). So, every request from the client to the server will pass that cookie and I will then be able to authenticate the user (via `setSession`).\r\n\r\nShould I then update the refresh-token in my cookie after the call, if it has changed? As I believe that it may have been rotated - and I guess it should not be reused. ",
                    "author": {
                        "login": "Spiralis"
                    },
                    "createdAt": "2022-11-27T02:39:45Z",
                    "url": "https://github.com/supabase/supabase-js/issues/641#issuecomment-1328157482"
                },
                {
                    "id": "IC_kwDOD79Crs5PKhjw",
                    "body": "Although, I haven't tried to actually *do anything* after the `setSession` call yet. That might fail just as badly as the `getUser` call of course... I have just been passing the user-data back to tell the browser-client that the user is logged in. Got to go now, but I guess that is something that I will need to test...\r\n",
                    "author": {
                        "login": "Spiralis"
                    },
                    "createdAt": "2022-11-27T02:54:51Z",
                    "url": "https://github.com/supabase/supabase-js/issues/641#issuecomment-1328158960"
                },
                {
                    "id": "IC_kwDOD79Crs5PK7zp",
                    "body": "Not sure if this is a perfect solution, but I made some option-changes to the call to `createClient`, which seems to have fixed the issue for me.\r\n\r\n```\r\nconst supabase = createClient(supabaseUrl, supabaseKey, {\r\n  auth: {\r\n    autoRefreshToken: false, // All my Supabase access is from server, so no need to refresh the token\r\n    detectSessionInUrl: false, // We are not using OAuth, so we don't need this. Also, we are manually \"detecting\" the session in the server-side code\r\n    persistSession: false, // All our access is from server, so no need to persist the session to browser's local storage\r\n  },\r\n```\r\nIt seems that after I added `persistSession: false` the `getUser` call no longer resulted in an error.",
                    "author": {
                        "login": "Spiralis"
                    },
                    "createdAt": "2022-11-27T15:09:43Z",
                    "url": "https://github.com/supabase/supabase-js/issues/641#issuecomment-1328266473"
                },
                {
                    "id": "IC_kwDOD79Crs5PK8L8",
                    "body": "> Not sure if this is a perfect solution, but I made some option-changes to the call to `createClient`, which seems to have fixed the issue for me.\n> \n> ```\n> const supabase = createClient(supabaseUrl, supabaseKey, {\n>   auth: {\n>     autoRefreshToken: false, // All my Supabase access is from server, so no need to refresh the token\n>     detectSessionInUrl: false, // We are not using OAuth, so we don't need this. Also, we are manually \"detecting\" the session in the server-side code\n>     persistSession: false, // All our access is from server, so no need to persist the session to browser's local storage\n>   },\n> ```\n> It seems that after I added `persistSession: false` the `getUser` call no longer resulted in an error.\n\nYeah, there's no good docs on this. For `getUser()` to work server-side, `persistSession` needs to be `false`.",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2022-11-27T15:18:14Z",
                    "url": "https://github.com/supabase/supabase-js/issues/641#issuecomment-1328268028"
                },
                {
                    "id": "IC_kwDOD79Crs5PL4nV",
                    "body": "@Spiralis @j4w8n thanks for bringing this up folks, I'm passing this as a feedback to the Auth team :)",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-11-28T04:14:06Z",
                    "url": "https://github.com/supabase/supabase-js/issues/641#issuecomment-1328515541"
                },
                {
                    "id": "IC_kwDOD79Crs5PL_vd",
                    "body": "No problem @soedirgo. What I said is only true if you don't pass an access token into getUser. Because in that case, it calls getSession; which is where things really breakdown.\n\nGary opened an issue about it https://github.com/supabase/gotrue-js/issues/539\n\nThere are also issues with using setSession on the server side without setting persistSession to false. Not because of that method's direct code, but because it calls `_saveSession` and it's code causes issues.",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2022-11-28T05:05:13Z",
                    "url": "https://github.com/supabase/supabase-js/issues/641#issuecomment-1328544733"
                },
                {
                    "id": "IC_kwDOD79Crs5PXM52",
                    "body": "I have also added passing the `access_code` (since I have it from `setSession`), as I understand that this reduces the work that `getUser` need to do.",
                    "author": {
                        "login": "Spiralis"
                    },
                    "createdAt": "2022-11-30T00:13:01Z",
                    "url": "https://github.com/supabase/supabase-js/issues/641#issuecomment-1331482230"
                },
                {
                    "id": "IC_kwDOD79Crs5PZLqL",
                    "body": "Yep, that's a good way to do it on the server side.",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2022-11-30T11:22:16Z",
                    "url": "https://github.com/supabase/supabase-js/issues/641#issuecomment-1332001419"
                },
                {
                    "id": "IC_kwDOD79Crs5Rjg6v",
                    "body": "I was getting this error because I have an Express backend and want to attach the user object in Express middleware. I am passing the accessToken / refreshToken via the [serverSideRendering](https://supabase.com/docs/guides/auth/server-side-rendering) docs. \r\n\r\nIn the middlware, I was calling\r\n```\r\nconst supabase = createClient<Database>(\r\n      SUPABASE_URL ?? \"\",\r\n      SUPABASE_ANON_KEY ?? \"\",\r\n    );\r\nsupabase.auth.setSession(/*tokens*/)\r\n// ...\r\nsupabse.auth.getUser() // returned the invalid claim error\r\n```\r\n\r\nAdding this flag (as referenced [above](https://github.com/supabase/supabase-js/issues/641#issuecomment-1328544733)) seems to have fixed it:\r\n\r\n```\r\n      // Without this flag, we get \"invalid subclaim\" error on supabase.auth.getUser\r\nconst supabase = createClient<Database>(\r\n      SUPABASE_URL ?? \"\",\r\n      SUPABASE_ANON_KEY ?? \"\",\r\n      {\r\n        auth: {\r\n          persistSession: false,\r\n        },\r\n      }\r\n    );\r\n\r\n```",
                    "author": {
                        "login": "jeremyisatrecharm"
                    },
                    "createdAt": "2022-12-31T18:45:36Z",
                    "url": "https://github.com/supabase/supabase-js/issues/641#issuecomment-1368264367"
                },
                {
                    "id": "IC_kwDOD79Crs5TXRYE",
                    "body": "I am experiecing this issue too.\r\n\r\nI have an nx.dev monorepo with an SPA in React sporting Vite and an express app for backend stuff (both will go inside Tauri app).\r\n\r\nBefore I landed on the `invalid claim: missing sub claim` problem I have been debugging a different issue also related to how I was using Supabase. I was getting `util.inherits is not a function`, because I was trying to use one client for both express and react app (it is a monorepo, why duplicate configs). Anyway, [one guy](https://www.thecodingcouple.com/uncaught-typeerror-util-inherits-is-not-a-function/\r\n) was having an issue with the `util.inherits` and the underlaying problem was that he was using `jsonwebtoken` that doesn't want to work with Vite because some nodejs APIs are not polyfilled. I split my code into two separate clients, which solved the `util.inherits is not a function` bug, but it gave me the `invalid claim: missing sub claim` one.\r\n\r\nCould it be that the underlying issue is in Supabasejs not communicating properly with server-based build frameworks? This library is using `jsonwebtoken`. The \"bug progression\" on my end could indicate that `jsonwebtoken` is missing context, since it is not polyfilled anywhere. This problem also exists for browser's storage APIs and I bet `jsonwebtoken` is used here to en/decode data.\r\n\r\nSince Supabasejs is isomorphic the solution could be in polyfilling `jsonwebtoken`'s missing node APIs or replacing `jwt` with eg. [jose](https://github.com/panva/jose) that seems to be supported across environemnts.\r\n\r\nI have no idea if any of this applies to `invalid claim: missing sub claim`, but I am going to debug it some more to narrow down the problem.",
                    "author": {
                        "login": "NorweskiDrwal"
                    },
                    "createdAt": "2023-01-20T16:09:37Z",
                    "url": "https://github.com/supabase/supabase-js/issues/641#issuecomment-1398609412"
                },
                {
                    "id": "IC_kwDOD79Crs5dxrvt",
                    "body": "I ran into this issue tonight, getting `invalid claim: missing sub claim`, and ended up on this issue so I'll add my solution here for intrepid explorers \ud83d\ude04 \r\n\r\nI'm doing something similar to what was mentioned above with a client that logs in via Supabase, then sends the access/refresh tokens to a separate server.\r\n\r\nThe problem for me was that `client.auth.setSession` **returns a `Promise`**! I was just missing an `await`...\r\n\r\n```js\r\nconst supabaseUserClient = createClient(supabaseUrl, supabasePublicKey, {\r\n  auth: {\r\n    autoRefreshToken: false,\r\n    persistSession: false,\r\n  },\r\n});\r\n\r\n// you have to `await` this promise for the session to actually be set!\r\nawait supabaseUserClient.auth.setSession({\r\n  access_token: accessToken,\r\n  refresh_token: refreshToken,\r\n});\r\n\r\nreturn supabaseUserClient;\r\n```",
                    "author": {
                        "login": "TranquilMarmot"
                    },
                    "createdAt": "2023-06-02T07:48:10Z",
                    "url": "https://github.com/supabase/supabase-js/issues/641#issuecomment-1573305325"
                },
                {
                    "id": "IC_kwDOD79Crs5pjVBc",
                    "body": "I'm having that issue using supabase with expo. \r\nWhen I set `persistSession: false` authentication works but I definitely want to persist my session. \r\nAny idea if there is another way to fix?",
                    "author": {
                        "login": "clemwo"
                    },
                    "createdAt": "2023-10-19T12:27:14Z",
                    "url": "https://github.com/supabase/supabase-js/issues/641#issuecomment-1770868828"
                },
                {
                    "id": "IC_kwDOD79Crs5pmOZO",
                    "body": "> I'm having that issue using supabase with expo. When I set `persistSession: false` authentication works but I definitely want to persist my session. Any idea if there is another way to fix?\r\n\r\nI'd recommend opening your own issue. This one is pretty stale. You can also ask on the Discord server.",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2023-10-19T20:03:33Z",
                    "url": "https://github.com/supabase/supabase-js/issues/641#issuecomment-1771628110"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5W0rN0",
            "number": 643,
            "title": "provider_token is missing for Twitch authentication",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nI have a sveltekit project, in which I want to use some Twitch API features. I switched to supebase v2 because of the \"refresh_token\" problems.\r\nI'm using this to sign in using Twitch:\r\n```\r\nawait supabase.auth.signInWithOAuth({\r\n\tprovider: 'twitch',\r\n\toptions: {\r\n\t\tredirectTo: supabaseRedirect,\r\n\t\tscopes: 'channel:manage:redemptions channel:read:redemptions'\r\n\t}\r\n});\r\n```\r\n\r\nLater, on a different route I try to get the provider_token using this:\r\n```\r\nconst sess = await supabase.auth.getSession();\r\nconst providerToken = sess?.data.session?.provider_token || '';\r\n```\r\n\r\nBut \"provider_token\" as well as \"provider_refresh_token\" are always undefined.\r\n\r\nIs there a step I'm missing? It worked in v1 (with the old methods).\r\n\r\n## To Reproduce\r\nSign in using Twitch:\r\n```\r\nawait supabase.auth.signInWithOAuth({\r\n\tprovider: 'twitch',\r\n\toptions: {\r\n\t\tredirectTo: supabaseRedirect,\r\n\t\tscopes: 'channel:manage:redemptions channel:read:redemptions'\r\n\t}\r\n});\r\n```\r\n\r\nAfterwards try to get the \"provider_token\":\r\nSign in using Twitch:\r\n```\r\nconst sess = await supabase.auth.getSession();\r\nconst providerToken = sess?.data.session?.provider_token || '';\r\n```\r\n\r\n-> \"provider_token\" as well as \"provider_refresh_token\" are empty.\r\n\r\n## Expected behavior\r\n\r\nBoth \"provider_token\" as well as \"provider_refresh_token\" set to the appropriate values.\r\n\r\n## Screenshots\r\n\r\nI guess screenshots are not needed?\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser: Chrome\r\n- Version of supabase-js: 2.1.0\r\n\r\n## Additional context\r\n\r\nMy session object looks like this:\r\n```\r\naccess_token: \"ACCESS_TOKEN\",\r\nexpires_at: 1668892877,\r\nexpires_in: 3600,\r\nrefresh_token: \"s0vl3SQJZg89Abl3N5ck8A\",\r\ntoken_type: \"bearer\",\r\nuser: { USER OBJECT}\r\n```\r\n\r\nIf anything else is needed or I should create a minimal reproduction repro please tell me :)",
            "author": {
                "login": "mobychan"
            },
            "state": "OPEN",
            "createdAt": "2022-11-19T20:30:06Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/643",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs5XPeKe",
            "number": 646,
            "title": "No return type generated for rpc functions that return TABLE",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nNo return type generated for rpc functions that return TABLE. If it's expected that this doesn't work, the documentation ought to say so.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\nCreate a function like\r\n```\r\nCREATE OR REPLACE FUNCTION public.search_text_snapshots(IN query text,IN limit_param integer,IN offset_param integer)\r\n    RETURNS TABLE(id bigint, url text, title text, highlight text, created_at timestamp with time zone)\r\n    LANGUAGE 'plpgsql'\r\n    \r\nAS $BODY$\r\nbegin\r\n  RETURN query\r\n  -- Get the latest version of a page that contains matches.\r\n  SELECT \r\n    t.id,\r\n    t.url,\r\n    t.title,\r\n    ts_headline(\r\n      'english', \r\n      t.data, \r\n      websearch_to_tsquery('english', $1),\r\n      'MaxWords=100, MinWords=50'),\r\n    t.created_at\r\n  FROM (\r\n    SELECT *, RANK() OVER (PARTITION BY text_snapshot.url ORDER BY text_snapshot.created_at DESC) AS rk\r\n    FROM  text_snapshot\r\n    WHERE ts @@  websearch_to_tsquery('english', $1)\r\n  ) t\r\n  WHERE t.rk = 1\r\n  ORDER BY t.created_at desc\r\n  LIMIT $2\r\n  OFFSET $3;\r\nend;\r\n$BODY$;\r\n\r\n```\r\n\r\nGenerate types\r\n```\r\nsupabase gen types typescript --local \r\n```\r\n\r\ntypes:\r\n```\r\n...\r\nexport interface Database {\r\n  public: {\r\n...\r\n    Functions: {\r\n...\r\n      search_text_snapshots: {\r\n        Args: { query: string; limit_param: number; offset_param: number }\r\n        Returns: Record<string, unknown>[]\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\r\n## Expected behavior\r\n\r\nReturns isn't of unknown type.\r\n\r\n",
            "author": {
                "login": "pmaddi"
            },
            "state": "CLOSED",
            "createdAt": "2022-11-24T17:57:11Z",
            "closedAt": "2022-11-24T18:22:55Z",
            "url": "https://github.com/supabase/supabase-js/issues/646",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs5XdG9f",
            "number": 647,
            "title": "fetch file from other cloud store.",
            "body": "# Feature request\r\n\r\nWhen I use OAuth to get users' avatars on social platforms, I need to store them in my storeage, otherwise I can't access them (next/image restrictions or users change new avatars)\r\n\r\n## Describe the solution you'd like\r\n\r\n``` node.js\r\nsupabase.fetch('https://useravatar.png').to({\r\n   bucket: 'my-bucket',\r\n   path: 'filepath'\r\n})\r\n```\r\n\r\n## Describe alternatives you've considered\r\n\r\nUse Nodejs to download remote files to local, and then upload them using supabase\r\n\r\n## Additional context\r\n\r\n1. supabase can provide syntax encapsulation to download remote files to local\r\n2. When calling the remote download, supabase does not need to download the remote file to the local, but calls the cloud function of supabase to push the file to the user's bucket",
            "author": {
                "login": "falstack"
            },
            "state": "OPEN",
            "createdAt": "2022-11-28T23:55:39Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/647",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5PYHJc",
                    "body": "Hmm, I think this is a bit out of scope for the client library. You can try fetching the image and storing them with `from().upload()`, e.g.\r\n\r\n```ts\r\nconst res = await fetch(\"https://example.com/avatar.png\")\r\nconst { data, error } = await supabase.from('bucket').upload('file/path.png', await res.blob())\r\n```\r\n\r\ncc @fenos ",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-11-30T06:59:42Z",
                    "url": "https://github.com/supabase/supabase-js/issues/647#issuecomment-1331720796"
                },
                {
                    "id": "IC_kwDOD79Crs5Poj45",
                    "body": "@soedirgo \r\nlocal fetch very slowly and dangerous for io, this service should work on cloud, like: https://github.com/qiniu/qshell/blob/master/docs/fetch.md",
                    "author": {
                        "login": "falstack"
                    },
                    "createdAt": "2022-12-03T03:32:04Z",
                    "url": "https://github.com/supabase/supabase-js/issues/647#issuecomment-1336032825"
                },
                {
                    "id": "IC_kwDOD79Crs5QKsBd",
                    "body": "@soedirgo @fenos ",
                    "author": {
                        "login": "falstack"
                    },
                    "createdAt": "2022-12-10T02:07:08Z",
                    "url": "https://github.com/supabase/supabase-js/issues/647#issuecomment-1344979037"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5YNQDU",
            "number": 651,
            "title": "AuthError should have an error code for identifying the specific reason for the failure",
            "body": "# Feature request\r\n\r\nCurrently the response to a failed sign in attempt returns the same AuthError object regardless of the failure reason. The reason is only specified as part of the object's internal error string. So, I've had to resort to the following to see if the reason was a bad password or not:\r\n\r\n```\r\nerror.toString().includes(\"Invalid login credentials\")\r\n```\r\n\r\n## Describe the solution you'd like\r\n\r\nAn error code added to the error object or something enumerable that would allow us to eloquently tell the specific reason the auth attempt failed.\r\n\r\ne: This is for handling some client-side reactions to specific auth failures, hence needing to parse the error text instead of just passing it on.\r\n",
            "author": {
                "login": "scalemaildev"
            },
            "state": "CLOSED",
            "createdAt": "2022-12-06T18:37:59Z",
            "closedAt": "2022-12-12T20:24:45Z",
            "url": "https://github.com/supabase/supabase-js/issues/651",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5QTXe0",
                    "body": "I've since just overwrote error.message on the frontend. Not too big of an issue I guess.",
                    "author": {
                        "login": "scalemaildev"
                    },
                    "createdAt": "2022-12-12T20:24:45Z",
                    "url": "https://github.com/supabase/supabase-js/issues/651#issuecomment-1347254196"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5Ydp3D",
            "number": 653,
            "title": "Supabase Auth JS not working in local development",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nIm getting Preflight response is not successful. Status code: 301, Error: load failed in Safari, and I'm getting Access to fetch at 'http://************.supabase.co/auth/v1/token?grant_type=password' from origin 'http://localhost:3000' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: Redirect is not allowed for a preflight request.\r\n\r\nIm assuming its a CORS problem but I don't know how to go about it. \r\n\r\nIt works once I've hosted the project to vercel however.\r\n\r\n## To Reproduce\r\n\r\n1. Install next js 13\r\n2. Add supabase next js auth helper and supabase js  \r\n3. Use supabase on the client side with supabase auth helper based on supabase documentation.\r\n4. do a login command in local development\r\n\r\n## Expected behavior\r\n\r\nBe able to login In local development.\r\n\r\n## System information\r\n\r\n- Browser (if applies) [e.g. chrome, safari]: chrome, safari\r\n- Version of supabase-js: 2.1.0\r\n- Next js: 13.06\r\n\r\n## Additional context\r\n\r\nThis happened out of nowhere while i was changing something unrelated in local development. It logged me out and I suddenly couldn't log in.\r\n\r\nAlso experiencing this error on the client but I tried using the server with TRPC and it's still not working in local development.",
            "author": {
                "login": "RaffoNin"
            },
            "state": "CLOSED",
            "createdAt": "2022-12-08T09:36:13Z",
            "closedAt": "2022-12-08T09:52:07Z",
            "url": "https://github.com/supabase/supabase-js/issues/653",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5QA2b1",
                    "body": "Changing the supabase url from \"http\" to \"https\" in my .env solved the problem for me.",
                    "author": {
                        "login": "RaffoNin"
                    },
                    "createdAt": "2022-12-08T09:52:07Z",
                    "url": "https://github.com/supabase/supabase-js/issues/653#issuecomment-1342400245"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5YvXqy",
            "number": 655,
            "title": "Give clear error message when API key does not have permission for action.",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nIf I perform an `update` or an `upsert` on a row, but I do not have a row level security policy, the error I receive back is `{ message: '' }`. There is no indication the method failed due to a permissions issue. I lost a lot of time to this.\r\n\r\n## To Reproduce\r\n\r\nPerform an `update` on a field using the non-service role secret.\r\n\r\n```js\r\nconst { data, error } = await supabase\r\n  .from('table')\r\n  .update({. field: value })\r\n  .eq('id', 1)\r\n\r\nconsole.log(data, error)\r\n// null, { message: '' }\r\n```\r\n\r\n## Expected behavior\r\n\r\nSome words to describe the reason the action failed.\r\n",
            "author": {
                "login": "joefitter"
            },
            "state": "OPEN",
            "createdAt": "2022-12-10T18:45:12Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/655",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs5YxOxj",
            "number": 656,
            "title": "AuthRetryableFetchError on GitHub Actions",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nI'm getting `AuthRetryableFetchError` when trying to use `signInWithPassword` in GitHub Actions.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Use `supabase.auth.signInWithPassword` on GitHub Actions\r\n\r\n## Expected behavior\r\n\r\nThe method should user in and return the user & thier session.\r\n\r\n## System information\r\n\r\n- OS: Ubuntu, 22.04.1, LTS\r\n- Version of supabase-js: 2.1.3\r\n- Version of Node.js: 16.18.1\r\n\r\n## Additional context\r\n\r\nI tried setting `NODE_TLS_REJECT_UNAUTHORIZED: '0'` but didn't work; from these two questions:\r\n\r\nhttps://stackoverflow.com/questions/74662906/authretryablefetcherror-self-signed-certificate-in-certificate-chain-with-supab/74667392\r\n\r\nhttps://stackoverflow.com/questions/45088006/nodejs-error-self-signed-certificate-in-certificate-chain/45088585#45088585\r\n",
            "author": {
                "login": "ihadabs"
            },
            "state": "CLOSED",
            "createdAt": "2022-12-11T02:31:19Z",
            "closedAt": "2023-01-06T07:08:06Z",
            "url": "https://github.com/supabase/supabase-js/issues/656",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5R0sLM",
                    "body": "Also experiencing the same here, on a local SvelteKit repo \ud83d\udc4b\ud83c\udffb ",
                    "author": {
                        "login": "didier"
                    },
                    "createdAt": "2023-01-05T21:10:36Z",
                    "url": "https://github.com/supabase/supabase-js/issues/656#issuecomment-1372766924"
                },
                {
                    "id": "IC_kwDOD79Crs5R0tVQ",
                    "body": "@didier \r\nCheck this:\r\nhttps://github.com/supabase/gotrue-js/issues/554\r\n\r\nI found no solution tell know...",
                    "author": {
                        "login": "ihadabs"
                    },
                    "createdAt": "2023-01-05T21:12:44Z",
                    "url": "https://github.com/supabase/supabase-js/issues/656#issuecomment-1372771664"
                },
                {
                    "id": "IC_kwDOD79Crs5R2c2-",
                    "body": "Closing in favor of https://github.com/supabase/gotrue-js/issues/554.\r\n\r\n@didier can you provide some repro steps on that thread? Then we can reopen the issue and track it there.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-01-06T07:08:06Z",
                    "url": "https://github.com/supabase/supabase-js/issues/656#issuecomment-1373228478"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5aB0q1",
            "number": 668,
            "title": "Missing v2 migration guide",
            "body": "The v2 migration guide, previously located at https://supabase.com/docs/reference/javascript/upgrade-guide, is missing.\r\n\r\nFor reference, this was on that page: https://web.archive.org/web/20221103094719/https://supabase.com/docs/reference/javascript/upgrade-guide.",
            "author": {
                "login": "tanoabeleyra"
            },
            "state": "CLOSED",
            "createdAt": "2022-12-25T22:09:54Z",
            "closedAt": "2023-01-06T07:12:14Z",
            "url": "https://github.com/supabase/supabase-js/issues/668",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5R2d5T",
                    "body": "Hey @tanoabeleyra, the link resolves to the upgrade guide now, so closing this.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-01-06T07:12:14Z",
                    "url": "https://github.com/supabase/supabase-js/issues/668#issuecomment-1373232723"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5aB03Z",
            "number": 669,
            "title": "ReferenceError: Can't find variable: SharedArrayBuffer",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nA clear and concise description of what the bug is.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. `import 'react-native-url-polyfill/auto';`\r\n2. error generated when trying to instantiate supabase or while querying\r\n   1. example query: `supabaseClient.from('posts').select('*').limit(25)`\r\n\r\n## Expected behavior\r\n\r\nA clear and concise description of what you expected to happen.\r\n\r\n## Screenshots\r\n\r\n<img width=\"451\" alt=\"Screenshot 2022-12-25 at 2 07 48 PM\" src=\"https://user-images.githubusercontent.com/30609097/209483187-b1f465e9-5f20-43e7-b140-c122ce6b43ca.png\">\r\n\r\n## System information\r\n\r\n- OS: MacOS\r\n- Browser (if applies): react-native v0.70.5\r\n- Version of supabase-js: 2.0.3\r\n- Version of Node.js: 16.18.1\r\n- typescript version: 4.9.4\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "TScafeJR"
            },
            "state": "OPEN",
            "createdAt": "2022-12-25T22:14:24Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/669",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs5aIVUy",
            "number": 670,
            "title": "Creating a child bucket",
            "body": "Hi! The bottom line is that when trying to create a child bucket via `await supabaseClient.storage.createBucket(\"parent_bucket/child_bucket {public: true})` - we get an error message that this is an invalid name (because of \"/\"). however, you can do this manually in the repository itself.\r\n\r\nExpected behavior\r\n\r\nWe create a bucket inside the parent bucket",
            "author": {
                "login": "Samsonov0"
            },
            "state": "CLOSED",
            "createdAt": "2022-12-27T20:18:33Z",
            "closedAt": "2022-12-28T07:09:11Z",
            "url": "https://github.com/supabase/supabase-js/issues/670",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs5aLh3H",
            "number": 671,
            "title": "Lets make it work directly in the browser (full es module version)",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nI wanted to give this a quick try and assumed that the es module version works in the browser\r\n\r\n## To Reproduce\r\n\r\n1. Create an \ud83d\udc49 `index.html` file\r\n\r\n```html\r\n<script type=\"importmap\">\r\n  {\r\n    \"imports\": {\r\n      \"@supabase/functions-js\": \"./node_modules/@supabase/functions-js/dist/module/index.js\",\r\n      \"@supabase/gotrue-js\": \"./node_modules/@supabase/gotrue-js/dist/module/index.js\",\r\n      \"@supabase/postgres-js\": \"./node_modules/@supabase/postgres-js/dist/module/index.js\",\r\n      \"@supabase/realtime-js\": \"./node_modules/@supabase/realtime-js/dist/module/index.js\",\r\n      \"@supabase/storage-js\": \"./node_modules/@supabase/storage-js/dist/module/index.js\",\r\n      \"@supabase/supabase-js\": \"./node_modules/@supabase/supabase-js/dist/module/index.js\"\r\n    }\r\n  }\r\n</script>\r\n\r\n<script type=\"module\">\r\n  import { createClient } from \"@supabase/supabase-js\";\r\n  console.log(createClient);\r\n</script>\r\n```\r\n\r\n2. server it with any webserver (npx http-server, apache, nginx...)\r\n3. open it in the browser (chrome - for import maps support)\r\n\r\n## Expected behavior\r\n\r\nLogs createClient implementation\r\n\r\n## Actual behavior\r\n\r\n```\r\nGET http://127.0.0.1:8080/node_modules/@supabase/realtime-js/dist/module/RealtimeClient net::ERR_ABORTED 404 (Not Found)       index.js:1\r\nGET http://127.0.0.1:8080/node_modules/@supabase/realtime-js/dist/module/RealtimeChannel net::ERR_ABORTED 404 (Not Found)      index.js:2             \r\nGET http://127.0.0.1:8080/node_modules/@supabase/realtime-js/dist/module/RealtimePresence net::ERR_ABORTED 404 (Not Found)     index.js:3             \r\nGET http://127.0.0.1:8080/node_modules/@supabase/gotrue-js/dist/module/lib/helpers net::ERR_ABORTED 404 (Not Found)            GoTrueAdminApi.js:22   \r\nGET http://127.0.0.1:8080/node_modules/@supabase/gotrue-js/dist/module/lib/fetch net::ERR_ABORTED 404 (Not Found)              GoTrueAdminApi.js:21   \r\nGET http://127.0.0.1:8080/node_modules/@supabase/gotrue-js/dist/module/lib/errors net::ERR_ABORTED 404 (Not Found)             GoTrueAdminApi.js:23   \r\nGET http://127.0.0.1:8080/node_modules/@supabase/gotrue-js/dist/module/lib/constants net::ERR_ABORTED 404 (Not Found)          GoTrueClient.js:11     \r\nGET http://127.0.0.1:8080/node_modules/@supabase/gotrue-js/dist/module/GoTrueAdminApi net::ERR_ABORTED 404 (Not Found)         GoTrueClient.js:10     \r\n```\r\n\r\n## Ideas\r\n\r\nthe above suggests that in the source code there are imports like\r\n```js\r\nimport RealtimeChannel from './RealtimeChannel';\r\n```\r\nwhich is impossible to know for the browser what to load... `.js`?, `.mjs`? ... \r\nalso a browser cannot do da http request for each possibility to check what is available...\r\n\r\ne.g. we need to be more explicit... e.g. it should be\r\n```js\r\nimport RealtimeChannel from './RealtimeChannel.js';\r\n```\r\n\r\n## Follup up Issues\r\n\r\nif the local import paths are solved a separate issue pops up\r\n\r\n```\r\nUncaught SyntaxError: The requested module './node_modules/cross-fetch/dist/browser-ponyfill.js' does not provide an export named 'fetch' (at index.html:2:12)\r\n```\r\n\r\n`cross-fetch` sadly does offer an es module version... I opened an issue\r\n\r\nadditionally also `websocket` seems to not offer an es module version... \r\n\r\nso 2 dependencies we will need to \"fix\"\r\n\r\n## What do you think?\r\n\r\nI would really like to use supabase directly in the browser without any tools or build steps \ud83e\udd17\r\nAlso, I think with a few small changes and some updates/or different dependencies it should be possible to get this \ud83d\ude4f\r\n\r\nIf that is something you would like to support then I could certainly help make it happen \ud83e\udd17\r\n\r\n## System information\r\n\r\n- OS: macOS [e.g. macOS, Windows]\r\n- Browser: chrome (if applies) [e.g. chrome, safari]\r\n- Version of supabase-js: 2.2.1\r\n- Version of Node.js: 18\r\n\r\n",
            "author": {
                "login": "daKmoR"
            },
            "state": "OPEN",
            "createdAt": "2022-12-21T23:24:41Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/671",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5RnsxH",
                    "body": "> I would really like to use supabase directly in the browser without any tools or build steps \r\n\r\nI think this tutorial might help: [Supabase - Back to the Basics(video)](https://www.youtube.com/watch?v=tUm1AlaMcMQ).\r\n\r\nIt uses plain `<script>` tags to load all supabase frontend libs, no build steps.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-01-03T03:32:44Z",
                    "url": "https://github.com/supabase/supabase-js/issues/671#issuecomment-1369361479"
                },
                {
                    "id": "IC_kwDOD79Crs5qcW5q",
                    "body": "Reviving this one (Hi @daKmoR  \ud83d\udc4b\ud83c\udffc ).\r\n\r\nFiddled around today with Supabase for the first time and noticed that it indeed isn't runnable natively in the browser. The packages I found were the culprit were the same ones as Dakmor has sited there.\r\n\r\nI did some small adjustments to the @supabase/node-fetch and removed dependency on the `websocket` package from @supabase/realtime-js and was able to get my browser client connecting to supabase without requiring a build step.\r\n\r\nI'll be opening up a PR on both of the projects to start up some discussion and see if we could get these shipped so I could start using this tool ",
                    "author": {
                        "login": "Matsuuu"
                    },
                    "createdAt": "2023-10-30T18:32:43Z",
                    "url": "https://github.com/supabase/supabase-js/issues/671#issuecomment-1785818730"
                },
                {
                    "id": "IC_kwDOD79Crs5qcuTx",
                    "body": "I've submitted 2 PR's to projects hosted by supabase. One is just a small code fix, the other one is a slightly larger fix with a dependency swap, but they both should function, and I've tested them locally on my supabase installation.\r\n\r\nWould love if someone could take a look at them ",
                    "author": {
                        "login": "Matsuuu"
                    },
                    "createdAt": "2023-10-30T19:37:48Z",
                    "url": "https://github.com/supabase/supabase-js/issues/671#issuecomment-1785914609"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5aTs8Z",
            "number": 673,
            "title": "Unable to call function on custom schema",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen creating a client as in \r\n\r\n```ts\r\nconst supabase = createClient<Database, 'myschema'>(\r\n  supabaseUrl,\r\n  supabaseAnonKey,\r\n  {\r\n    db: {\r\n      schema: 'myschema',\r\n    }\r\n  },\r\n);\r\n```\r\n\r\nthe supabase client will always, despite properly inferring the typed function name for 'myschema', call the function on the `public` schema.\r\n\r\n## To Reproduce\r\n\r\nCall function on a custom schema:\r\n\r\n```ts\r\nawait supabase.rpc('function_on_myschema');\r\n```\r\n\r\nResult:\r\n\r\n```txt\r\n{\r\n    \"error\": {\r\n        \"code\": \"PGRST202\",\r\n        \"details\": null,\r\n        \"hint\": \"If a new function was created in the database with this name and parameters, try reloading the schema cache.\",\r\n        \"message\": \"Could not find the public.function_on_myschema() function or the public.function_on_myschema function with a single unnamed json or jsonb parameter in the schema cache\"\r\n    },\r\n    \"data\": null,\r\n    \"count\": null,\r\n    \"status\": 404,\r\n    \"statusText\": \"Not Found\"\r\n}\r\n```\r\n\r\n## Expected behavior\r\n\r\nCall function on the schema supplied to the createClient function.\r\n",
            "author": {
                "login": "jsbrain"
            },
            "state": "CLOSED",
            "createdAt": "2022-12-31T13:00:33Z",
            "closedAt": "2023-01-20T08:23:57Z",
            "url": "https://github.com/supabase/supabase-js/issues/673",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5R7Wf_",
                    "body": "I think this is \"by design.\" Only `public` tables, views, and functions are available via the API for security. You can always create a wrapper function in the public schema that calls your custom schema function.",
                    "author": {
                        "login": "davepar"
                    },
                    "createdAt": "2023-01-07T15:17:58Z",
                    "url": "https://github.com/supabase/supabase-js/issues/673#issuecomment-1374513151"
                },
                {
                    "id": "IC_kwDOD79Crs5R7dru",
                    "body": "@Davepar if you check the docs you'll realize that this is false. There is an option to specify the schema the client should access as you can see in my first code snippet. This is a feature.\r\n\r\nThe fact that it infers the types, hence the function name for the passed schema and recommends the function name via itellisense but then tries to execute the function on the public schema instead tells me that this is in fact a bug.",
                    "author": {
                        "login": "jsbrain"
                    },
                    "createdAt": "2023-01-07T17:12:43Z",
                    "url": "https://github.com/supabase/supabase-js/issues/673#issuecomment-1374542574"
                },
                {
                    "id": "IC_kwDOD79Crs5R7y30",
                    "body": "Ah, I learned something new. You're right, you can specify the schema when you create the JS client. However, you need to specifically enable API access for any schema other than the default `public`.\r\n\r\nBuried in the docs:\r\n\r\n> By default the API server points to the `public` schema. You can enable other database schemas within the Dashboard.\r\n> Go to `Settings > API > Schema` and add the schema which you want to expose to the API.\r\n> \r\n> Note: each client connection can only access a single schema, so the code above can access the `other_schema` schema but cannot access the `public` schema.",
                    "author": {
                        "login": "davepar"
                    },
                    "createdAt": "2023-01-07T22:05:17Z",
                    "url": "https://github.com/supabase/supabase-js/issues/673#issuecomment-1374629364"
                },
                {
                    "id": "IC_kwDOD79Crs5SpPzU",
                    "body": "Hmm, I'm not able to reproduce this. Is this running against a hosted Supabase project? If so, can you file a ticket at https://app.supabase.com/support/new and link this issue?",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-01-18T06:14:40Z",
                    "url": "https://github.com/supabase/supabase-js/issues/673#issuecomment-1386544340"
                },
                {
                    "id": "IC_kwDOD79Crs5TVKmt",
                    "body": "It actually seems to be fixed now after installing 2.4.0.\r\n\r\nNot sure how the fixes in 2.3.0 or 2.4.0 could have affected this but everything works like a charm now so I guess as long as nobody else experiences this issue I'll just close this.",
                    "author": {
                        "login": "jsbrain"
                    },
                    "createdAt": "2023-01-20T08:23:57Z",
                    "url": "https://github.com/supabase/supabase-js/issues/673#issuecomment-1398057389"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5adNdP",
            "number": 675,
            "title": "[AuthRetryableFetchError: Network request failed] on signIn",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nI have an app in react native with expo, when I try to do a sign-in with supabase.auth.signInWithPassword, it throws an unhandled error with [AuthRetryableFetchError: Network request failed]. This only happens in android, emulator and physical device. not in iOS.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\ncall supabase.auth.signInWithPassword in android expo app.\r\n\r\nexpo SDK v47\r\nsupabase js v2.2.2\r\n\r\n## Expected behavior\r\n\r\nIt should login normally \r\n## System information\r\n\r\n- Version of supabase-js: 2.2.2\r\n\r\n## Additional context\r\n\r\n",
            "author": {
                "login": "LucaCevasco"
            },
            "state": "OPEN",
            "createdAt": "2023-01-03T16:06:13Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/675",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5TaCBj",
                    "body": "@LucaCevasco have you managed to resolve that issue?  I am getting the same, only on Android:\r\n\r\n```json\r\n \"error\": {\r\n    \"name\": \"AuthRetryableFetchError\",\r\n    \"message\": \"Network request failed\",\r\n    \"status\": 0\r\n  }\r\n```\r\n\r\n`supabase-js: 2.4.1`",
                    "author": {
                        "login": "atanaskanchev"
                    },
                    "createdAt": "2023-01-21T21:08:37Z",
                    "url": "https://github.com/supabase/supabase-js/issues/675#issuecomment-1399332963"
                },
                {
                    "id": "IC_kwDOD79Crs5lj5-n",
                    "body": "Same problem both with iOS and Android Simulator. ",
                    "author": {
                        "login": "aismartchat"
                    },
                    "createdAt": "2023-09-02T18:47:53Z",
                    "url": "https://github.com/supabase/supabase-js/issues/675#issuecomment-1703911335"
                },
                {
                    "id": "IC_kwDOD79Crs5munCx",
                    "body": "Can you please make sure that the app and device actually has internet. Make sure the app also has the required internet permission (that needs to be explicitly granted in Android).",
                    "author": {
                        "login": "hf"
                    },
                    "createdAt": "2023-09-18T14:03:52Z",
                    "url": "https://github.com/supabase/supabase-js/issues/675#issuecomment-1723494577"
                },
                {
                    "id": "IC_kwDOD79Crs5oqniS",
                    "body": "have the same issue, using expo, internet permission is given by default\r\n",
                    "author": {
                        "login": "amankumarm"
                    },
                    "createdAt": "2023-10-10T18:30:49Z",
                    "url": "https://github.com/supabase/supabase-js/issues/675#issuecomment-1756002450"
                },
                {
                    "id": "IC_kwDOD79Crs5pHDxy",
                    "body": "i am having same issue on real device (android) ios stimulator works fine",
                    "author": {
                        "login": "emmyduruc"
                    },
                    "createdAt": "2023-10-15T17:44:15Z",
                    "url": "https://github.com/supabase/supabase-js/issues/675#issuecomment-1763458162"
                },
                {
                    "id": "IC_kwDOD79Crs5pHbu9",
                    "body": "Also having the same issue on Android emulator with `expo@49.0.13` and `@supabase/supabase-js@2.38.0`. Also checked that both `<uses-permission android:name=\"android.permission.INTERNET\"/>` (app can use internet) and `android:usesCleartextTraffic=\"true\"` (app can access non HTTPS endpoints) are in `AndroidManifest.xml`, so the issue is likely to be Supabase client related \ud83e\udd14",
                    "author": {
                        "login": "maxwowo"
                    },
                    "createdAt": "2023-10-16T00:29:39Z",
                    "url": "https://github.com/supabase/supabase-js/issues/675#issuecomment-1763556285"
                },
                {
                    "id": "IC_kwDOD79Crs5pK3fA",
                    "body": "Commenting here because I'm also having the issue but on iOS as well ! \r\n`\"expo\": \"^49.0.11\"`\r\n`\"@supabase/supabase-js\": \"^2.33.2\"`",
                    "author": {
                        "login": "FxBresson"
                    },
                    "createdAt": "2023-10-16T13:11:10Z",
                    "url": "https://github.com/supabase/supabase-js/issues/675#issuecomment-1764456384"
                },
                {
                    "id": "IC_kwDOD79Crs5rjbEC",
                    "body": "I get these even without signing in. Emulator has internet because I can sign into google.\r\n\r\nMetro log:\r\n```\r\n ERROR  [TypeError: Network request failed]\r\n ERROR  [AuthRetryableFetchError: Network request failed]\r\n ERROR  [TypeError: Network request failed]\r\n ERROR  [AuthRetryableFetchError: Network request failed]\r\n ERROR  [TypeError: Network request failed]\r\n ERROR  [AuthRetryableFetchError: Network request failed]\r\n ERROR  [TypeError: Network request failed]\r\n ERROR  [TypeError: Network request failed]\r\n ERROR  [TypeError: Network request failed]\r\n ```\r\n \r\n <img width=\"407\" alt=\"Screenshot 2023-11-09 at 2 14 20\u202fPM\" src=\"https://github.com/supabase/supabase-js/assets/5896030/fbd7c1e2-35b2-457d-83aa-dfcc671c75c0\">\r\n \r\n \r\n The code:\r\n \r\n ```\r\n import React, { useState } from 'react'\r\nimport { Alert, StyleSheet, View } from 'react-native'\r\nimport { supabase } from 'src/db/supabase'\r\nimport { Button, Input } from 'react-native-elements'\r\nimport {\r\n  GoogleSignin,\r\n  GoogleSigninButton,\r\n  statusCodes,\r\n} from '@react-native-google-signin/google-signin'\r\n\r\nexport default function Auth() {\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [loading, setLoading] = useState(false)\r\n\tGoogleSignin.configure({\r\n    scopes: [\r\n\t\t\t'openid',\r\n\t\t\t'profile',\r\n\t\t\t'email',\r\n\t\t\t\"https://www.googleapis.com/auth/drive\",\r\n\t\t\t\"https://www.googleapis.com/auth/spreadsheets\",\r\n\t\t],\r\n    webClientId: '[dedacted]',\r\n  })\r\n\r\n  async function signInWithEmail() {\r\n    setLoading(true)\r\n    const { error } = await supabase.auth.signInWithPassword({\r\n      email: email,\r\n      password: password,\r\n    })\r\n\r\n    if (error) Alert.alert(error.message)\r\n    setLoading(false)\r\n  }\r\n\r\n  async function signUpWithEmail() {\r\n    setLoading(true)\r\n    const {\r\n      data: { session },\r\n      error,\r\n    } = await supabase.auth.signUp({\r\n      email: email,\r\n      password: password,\r\n    })\r\n\r\n    if (error) Alert.alert(error.message)\r\n    // if (!session) Alert.alert('Please check your inbox for email verification!')\r\n    setLoading(false)\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n\t\t\t<GoogleSigninButton\r\n\t\t\t\tsize={GoogleSigninButton.Size.Wide}\r\n\t\t\t\tcolor={GoogleSigninButton.Color.Dark}\r\n\t\t\t\tonPress={async () => {\r\n\t\t\t\t\ttry {\r\n\t\t\t\t\t\tawait GoogleSignin.hasPlayServices()\r\n\t\t\t\t\t\tconst userInfo = await GoogleSignin.signIn()\r\n\t\t\t\t\t\tif (userInfo.idToken) {\r\n\t\t\t\t\t\t\tconst { data, error } = await supabase.auth.signInWithIdToken({\r\n\t\t\t\t\t\t\t\tprovider: 'google',\r\n\t\t\t\t\t\t\t\ttoken: userInfo.idToken,\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\tconsole.log(error, data)\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tthrow new Error('no ID token present!')\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\tif (error.code === statusCodes.SIGN_IN_CANCELLED) {\r\n\t\t\t\t\t\t\t// user cancelled the login flow\r\n\t\t\t\t\t\t} else if (error.code === statusCodes.IN_PROGRESS) {\r\n\t\t\t\t\t\t\t// operation (e.g. sign in) is in progress already\r\n\t\t\t\t\t\t} else if (error.code === statusCodes.PLAY_SERVICES_NOT_AVAILABLE) {\r\n\t\t\t\t\t\t\t// play services not available or outdated\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// some other error happened\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}}\r\n\t\t\t/>\r\n      <View style={[styles.verticallySpaced, styles.mt20]}>\r\n        <Input\r\n          label=\"Email\"\r\n          leftIcon={{ type: 'font-awesome', name: 'envelope' }}\r\n          onChangeText={(text) => setEmail(text)}\r\n          value={email}\r\n          placeholder=\"email@address.com\"\r\n          autoCapitalize={'none'}\r\n        />\r\n      </View>\r\n      <View style={styles.verticallySpaced}>\r\n        <Input\r\n          label=\"Password\"\r\n          leftIcon={{ type: 'font-awesome', name: 'lock' }}\r\n          onChangeText={(text) => setPassword(text)}\r\n          value={password}\r\n          secureTextEntry={true}\r\n          placeholder=\"Password\"\r\n          autoCapitalize={'none'}\r\n        />\r\n      </View>\r\n      <View style={[styles.verticallySpaced, styles.mt20]}>\r\n        <Button title=\"Sign in\" disabled={loading} onPress={() => signInWithEmail()} />\r\n      </View>\r\n      <View style={styles.verticallySpaced}>\r\n        <Button title=\"Sign up\" disabled={loading} onPress={() => signUpWithEmail()} />\r\n      </View>\r\n    </View>\r\n  )\r\n}\r\n\r\n```\r\n ",
                    "author": {
                        "login": "NorseGaud"
                    },
                    "createdAt": "2023-11-09T19:13:07Z",
                    "url": "https://github.com/supabase/supabase-js/issues/675#issuecomment-1804448002"
                },
                {
                    "id": "IC_kwDOD79Crs5rjl_O",
                    "body": "Ok, my .env had the wrong supabase.co url and anon key. Fixing that an fully re-installing the app in the emulator fixed it.",
                    "author": {
                        "login": "NorseGaud"
                    },
                    "createdAt": "2023-11-09T19:31:06Z",
                    "url": "https://github.com/supabase/supabase-js/issues/675#issuecomment-1804492750"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5aeTOU",
            "number": 676,
            "title": "List of error responses for each function",
            "body": "# Improve documentation\r\n\r\n## Describe the problem\r\n\r\nIt would be useful to have a list of all the error responses for each function so that relevant messages can be displayed to the user based on the error. \r\n\r\n## Describe the improvement\r\n\r\nA list of error codes for each function",
            "author": {
                "login": "paddyjoneill"
            },
            "state": "OPEN",
            "createdAt": "2023-01-03T20:40:45Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/676",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5aB6pH",
                    "body": "Indeed. As it stands, it really is a pain in the back: I have to dig through the source to find out about errors. I'd be really really helpful if the documentation included error messages alongside their status codes.",
                    "author": {
                        "login": "imageck"
                    },
                    "createdAt": "2023-04-16T18:25:59Z",
                    "url": "https://github.com/supabase/supabase-js/issues/676#issuecomment-1510451783"
                },
                {
                    "id": "IC_kwDOD79Crs5gXDi4",
                    "body": "I ran into the same issue and started collecting possible error messages by going through the GoTrue implementation.\r\n\r\nI created a package that offers an error handler method for each function: https://github.com/joeldomke/supabase-errors-js",
                    "author": {
                        "login": "joeldomke"
                    },
                    "createdAt": "2023-07-02T13:10:29Z",
                    "url": "https://github.com/supabase/supabase-js/issues/676#issuecomment-1616656568"
                },
                {
                    "id": "IC_kwDOD79Crs5quy9p",
                    "body": "how does one release a lib without error documentation ??\r\nI need to reverse engineer the different usages in order to know what will be sent in each scenario, horrible.",
                    "author": {
                        "login": "Roeia1"
                    },
                    "createdAt": "2023-11-02T12:39:14Z",
                    "url": "https://github.com/supabase/supabase-js/issues/676#issuecomment-1790652265"
                },
                {
                    "id": "IC_kwDOD79Crs5qvSdB",
                    "body": "I just realized I need to compare a string (!) when I'm receiving a credentials error since the error that is thrown is of class AuthApiError from gotrue-js instead of the AuthInvalidCredentialsError class there.\r\nso I need to compare the error message to a string you added somewhere on your code which isn't exported from your package, which means it can change at any moment...",
                    "author": {
                        "login": "Roeia1"
                    },
                    "createdAt": "2023-11-02T13:53:00Z",
                    "url": "https://github.com/supabase/supabase-js/issues/676#issuecomment-1790781249"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5auhlX",
            "number": 678,
            "title": "is there any limitation within select.in(fieldname, values) supabase.js query? if more than 444 values, it always returns NULL",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nevery time if I query with more than 444 values with select IN parameters, supabase.js will return NULL.\r\neverything works well until it has 445 values.\r\n\r\n## To Reproduce\r\ncreate table e.g. serialnumbers with field name nr as text\r\ninject more than 445 records to the table\r\n\r\nconst { body } = await supabase\r\n    .from('serialnumbers')\r\n    .select('nr')\r\n    .in('nrr\n\r\n## Expected behavior\r\n\r\nreturn body as normally.\r\n\r\n## System information\r\n\r\n- OS: [e.g. macOS, Windows]\r\ndev machine macOS ventura 13.1 apple M1\r\n\r\n- Browser (if applies) [e.g. chrome, safari]\r\nchrome Version 108.0.5359.124\r\n\r\n- Version of supabase-js: [e.g. 6.0.2]\r\nsupabase-js version 1.35.4\r\n\r\n- Version of Node.js: [e.g. 10.10.0]\r\nNextjs v13.0.6\r\nnode.js v16.16.0\r\n\r\n\r\n## Additional context\r\n\r\nIf I query it directly with select * from product_serialnumbers where nr IN ('......) in supabase sql dashboard with more than 445 values, everything works just fine.\r\n\r\nThus I suspect the problem is within supabase.js\r\n",
            "author": {
                "login": "johnsonchandra"
            },
            "state": "CLOSED",
            "createdAt": "2023-01-06T08:03:44Z",
            "closedAt": "2023-01-06T08:10:40Z",
            "url": "https://github.com/supabase/supabase-js/issues/678",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5R21VA",
                    "body": "Seems like you're facing the URL length limit as noted [here](https://github.com/supabase/postgrest-js/issues/292). You can track the issue there instead - this should go away once upstream PostgREST support is implemented and deployed.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-01-06T08:10:40Z",
                    "url": "https://github.com/supabase/supabase-js/issues/678#issuecomment-1373328704"
                },
                {
                    "id": "IC_kwDOD79Crs5R23QN",
                    "body": "P.S. as a workaround you can use a Postgres function to do the select and call it via [`.rpc()`](https://supabase.com/docs/reference/javascript/rpc) - then you can take the list of filters as a parameter to get around the URL length limit. Let me know if it's unclear, I can try and whip up a simple example of the workaround.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-01-06T08:20:20Z",
                    "url": "https://github.com/supabase/supabase-js/issues/678#issuecomment-1373336589"
                },
                {
                    "id": "IC_kwDOD79Crs5R25FQ",
                    "body": "ok thanks for the quick reply and will try to do the workaround",
                    "author": {
                        "login": "johnsonchandra"
                    },
                    "createdAt": "2023-01-06T08:30:10Z",
                    "url": "https://github.com/supabase/supabase-js/issues/678#issuecomment-1373344080"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5a1-hn",
            "number": 679,
            "title": "WebSocket connection failed on subscribing to realtime channel",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nI'm trying to use Supabase's realtime updates locally, and I'm getting the following error\r\n\r\n```\r\nWebSocket connection to 'ws://localhost:54321/realtime/v1/websocket?apikey=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0&vsn=1.0.0' failed\r\n```\r\n\r\n## To Reproduce\r\n\r\n1. Clone this repo https://github.com/skulltech/sample-realtime-app\r\n2. Run `yarn install` and `supabase start`, and then `yarn dev` to start the server.\r\n4. Go to `http://localhost:3000` and check the console to see the above mentioned error.\r\n6. The webapp has some basic functionality for writing and reading to database to make sure that the other Supabase functionalities are working as expected. \r\n\r\n## Expected behavior\r\n\r\nNo errors while subscribing to the realtime channel.\r\n\r\n## Screenshots\r\n\r\n<img width=\"1440\" alt=\"Screenshot 2023-01-08 at 1 13 15 AM\" src=\"https://user-images.githubusercontent.com/16862545/211167834-86794b4e-3525-4e72-a850-d086a52d607f.png\">\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser: Chrome\r\n- Version of supabase-js: 2.2.3\r\n- Version of Node.js: v19.4.0\r\n- Version of Supabase CLI: 1.29.2\r\n- Version of Docker desktop for Mac: 4.15.0\r\n\r\n## Additional context\r\n\r\nThe same code seems to be working on production Supabase at app.supabase.com.\r\n\r\nThe same code was working before I updated my whole stack, i.e. updated Supabase CLI as well as @supabase/supabase-js, moved to Postgres v15 locally (i.e. in config.toml), from v14 previously, and ran brew upgrade which included updating docker desktop.\r\n",
            "author": {
                "login": "skulltech"
            },
            "state": "OPEN",
            "createdAt": "2023-01-07T19:46:23Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/679",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5R8lEe",
                    "body": "Same here\r\n\r\n![image](https://user-images.githubusercontent.com/4958587/211198260-d3479ade-f66f-4d03-be7e-3128015ed6c5.png)\r\n\r\n```js\r\n'use client'\r\n\r\nimport { createBrowserClient } from '@landlord-fusion/supabase-browser-client'\r\nimport { Suspense, useEffect, useState } from 'react'\r\n\r\nexport default function ClientComponent({ serverData }: { serverData: any }) {\r\n  const supabase = createBrowserClient\r\n\r\n  const [data, setData] = useState(serverData)\r\n\r\n  useEffect(() => {\r\n    setData(serverData)\r\n  }, [serverData])\r\n\r\n  useEffect(() => {\r\n    const channel = supabase\r\n      .channel('custom-insert-channel')\r\n      .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'customers' }, (payload) => {\r\n        console.log('Change received!', payload)\r\n      })\r\n      .subscribe()\r\n\r\n    return () => {\r\n      supabase.removeChannel(channel)\r\n    }\r\n  }, [serverData, supabase])\r\n\r\n  return (\r\n     <pre>{JSON.stringify({ data }, null, 2)}</pre>\r\n  )\r\n}\r\n```\r\n\r\nOS: macOS\r\nBrowser: Chrome\r\nVersion of supabase-js: 2.2.3\r\nVersion of Node.js: v16.18.1\r\nVersion of Supabase CLI: 1.29.3\r\nVersion of Docker desktop for Mac: 4.15.0 (93002)",
                    "author": {
                        "login": "atanaskanchev"
                    },
                    "createdAt": "2023-01-08T13:22:02Z",
                    "url": "https://github.com/supabase/supabase-js/issues/679#issuecomment-1374834974"
                },
                {
                    "id": "IC_kwDOD79Crs5SBaev",
                    "body": "I'm experiencing the same issue when trying to connect to self-hosted supabase on running dockers (locally):\r\n- `@supabase/supabase-js@2.2.3`\r\n- `supabase/realtime:v2.0.2`\r\n- `supabase/postgres:14.1.0.89`\r\n- `supabase/gotrue:v2.40.1`\r\n- `kong:2.8.1`\r\n- `postgrest/postgrest:v9.0.1.20220717`\r\n- `supabase/postgres-meta:v0.52.1`",
                    "author": {
                        "login": "aerophobic"
                    },
                    "createdAt": "2023-01-09T18:37:18Z",
                    "url": "https://github.com/supabase/supabase-js/issues/679#issuecomment-1376102319"
                },
                {
                    "id": "IC_kwDOD79Crs5SXYBi",
                    "body": "Fixed in `\"@supabase/supabase-js\": \"2.4.0\"` @skulltech @aerophobic\r\n",
                    "author": {
                        "login": "atanaskanchev"
                    },
                    "createdAt": "2023-01-13T13:36:22Z",
                    "url": "https://github.com/supabase/supabase-js/issues/679#issuecomment-1381859426"
                },
                {
                    "id": "IC_kwDOD79Crs5SbC-o",
                    "body": "@atanaskanchev I am having the same issues and I am using \"@supabase/supabase-js\": \"2.4.0\".",
                    "author": {
                        "login": "burkongla"
                    },
                    "createdAt": "2023-01-14T15:23:43Z",
                    "url": "https://github.com/supabase/supabase-js/issues/679#issuecomment-1382821800"
                },
                {
                    "id": "IC_kwDOD79Crs5SbFUY",
                    "body": "> @atanaskanchev I am having the same issues and I am using \"@supabase/supabase-js\": \"2.4.0\".\n\nIt has started working for me after I've updated all supabase dependencies to their latest versions and cleaned all docker images/containers \ud83e\udd37\u200d\u2642\ufe0f",
                    "author": {
                        "login": "atanaskanchev"
                    },
                    "createdAt": "2023-01-14T16:02:21Z",
                    "url": "https://github.com/supabase/supabase-js/issues/679#issuecomment-1382831384"
                },
                {
                    "id": "IC_kwDOD79Crs5SbVcb",
                    "body": "@atanaskanchev thank you, based on your comment I decided to try to update the supabase CLI also. That did the trick!\r\n\r\nSo if anyone has further issues as I did, make sure to update the supabase CLI version also.",
                    "author": {
                        "login": "burkongla"
                    },
                    "createdAt": "2023-01-14T19:39:58Z",
                    "url": "https://github.com/supabase/supabase-js/issues/679#issuecomment-1382897435"
                },
                {
                    "id": "IC_kwDOD79Crs5ScCVg",
                    "body": "Having the same issue, websocket connection fails on my self hosted supabase ",
                    "author": {
                        "login": "adityadhawan22"
                    },
                    "createdAt": "2023-01-15T07:51:27Z",
                    "url": "https://github.com/supabase/supabase-js/issues/679#issuecomment-1383081312"
                },
                {
                    "id": "IC_kwDOD79Crs5SdprG",
                    "body": "@skulltech @adityadhawan22 have you had a chance to check if updating and restarting the local dev setup (if using the CLI) or the `supabase/realtime` container (if using self-hosted) fixes it?",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-01-16T05:14:37Z",
                    "url": "https://github.com/supabase/supabase-js/issues/679#issuecomment-1383504582"
                },
                {
                    "id": "IC_kwDOD79Crs5f9ViU",
                    "body": "I continue to have this issue after running `brew upgrade supabase` followed by `supabase stop` and `supabase start`.\r\n\r\nTesting with:\r\n```\r\nthis.supabase.client\r\n      .channel('table-db-changes')\r\n      .on(\r\n        'postgres_changes',\r\n        {\r\n          event: '*',\r\n          schema: 'public',\r\n          table: 'my_table',\r\n        },\r\n        (payload) => {\r\n          console.log('payload', payload);\r\n        }\r\n      )\r\n      .subscribe()\r\n```",
                    "author": {
                        "login": "jziggas"
                    },
                    "createdAt": "2023-06-27T17:06:46Z",
                    "url": "https://github.com/supabase/supabase-js/issues/679#issuecomment-1609914516"
                },
                {
                    "id": "IC_kwDOD79Crs5juUE5",
                    "body": "I have the same Issue here. ",
                    "author": {
                        "login": "swissonid"
                    },
                    "createdAt": "2023-08-10T12:00:39Z",
                    "url": "https://github.com/supabase/supabase-js/issues/679#issuecomment-1673085241"
                },
                {
                    "id": "IC_kwDOD79Crs5m1d1z",
                    "body": "Similar issue here. It's somehow related to our custom domain. All other queries work with the custom domain expect for realtime connections. Reverting to the non-custom domain for realtime connections solved the connection problem, but we now have a new problem of not being able to use a custom domain for all our requests.",
                    "author": {
                        "login": "jeffreyflynn"
                    },
                    "createdAt": "2023-09-19T11:07:12Z",
                    "url": "https://github.com/supabase/supabase-js/issues/679#issuecomment-1725291891"
                },
                {
                    "id": "IC_kwDOD79Crs5nBBp9",
                    "body": "Running into the same issue here.",
                    "author": {
                        "login": "shihfu"
                    },
                    "createdAt": "2023-09-20T19:39:01Z",
                    "url": "https://github.com/supabase/supabase-js/issues/679#issuecomment-1728322173"
                },
                {
                    "id": "IC_kwDOD79Crs5pCt9X",
                    "body": "We were also able to reproduce this issue with a custom domain. The problem seemed to persist when we reverted to using a vanity domain instead. We can also confirm that reverting to the base, non-custom (or vanity) subdomain works. We're not sure about how that effects local though (as originally reported).",
                    "author": {
                        "login": "hu0p"
                    },
                    "createdAt": "2023-10-13T22:34:20Z",
                    "url": "https://github.com/supabase/supabase-js/issues/679#issuecomment-1762320215"
                },
                {
                    "id": "IC_kwDOD79Crs5pPqmT",
                    "body": "Also experiencing this.",
                    "author": {
                        "login": "allang"
                    },
                    "createdAt": "2023-10-17T05:52:25Z",
                    "url": "https://github.com/supabase/supabase-js/issues/679#issuecomment-1765714323"
                },
                {
                    "id": "IC_kwDOD79Crs5pjgoH",
                    "body": "Also have this issue:\r\n\r\n`  \r\nsupabase/postgres      \u2502 15.1.0.117           \u2502 -\r\nsupabase/gotrue        \u2502 v2.99.0              \u2502 -\r\npostgrest/postgrest    \u2502 v11.2.0              \u2502 -\r\nsupabase/realtime      \u2502 v2.10.1              \u2502 -\r\nsupabase/storage-api   \u2502 v0.40.4              \u2502 -\r\nsupabase/edge-runtime  \u2502 v1.20.2              \u2502 -\r\nsupabase/studio        \u2502 20230921-d657f29     \u2502 -\r\nsupabase/postgres-meta \u2502 v0.68.0              \u2502 -\r\nsupabase/logflare      \u2502 1.4.0                \u2502 -\r\nbitnami/pgbouncer      \u2502 1.20.1-debian-11-r39 \u2502 -\r\ndarthsim/imgproxy      \u2502 v3.8.0               \u2502 -\r\n`\r\n\r\nError:\r\n\r\n`\r\nWebSocket connection to 'ws://localhost:54321/realtime/v1/websocket?apikey={apiKey}&vsn=1.0.0: failed\r\n\r\n`\r\nCode:\r\n\r\n`\r\n\tconst entriesChannel = supabase\r\n\t\t\t.channel('custom-all-channel')\r\n\t\t\t.on('postgres_changes', { event: '*', schema: 'public', table: 'entries' }, (payload) => {\r\n\t\t\t\tconsole.log('Change received!', payload);\r\n\t\t\t})\r\n\t\t\t.subscribe();\r\n\r\n`\r\n\r\ndependencies:\r\n\r\n`\r\n  \"@supabase/auth-helpers-sveltekit\": \"^0.10.3\",\r\n    \"@supabase/auth-ui-shared\": \"^0.1.8\",\r\n    \"@supabase/auth-ui-svelte\": \"^0.2.7\",\r\n    \"@supabase/supabase-js\": \"^2.38.1\",\r\n`\r\n\r\nSupabase CLI: 1.106.1\r\n\r\n",
                    "author": {
                        "login": "JamieBShaw"
                    },
                    "createdAt": "2023-10-19T12:45:48Z",
                    "url": "https://github.com/supabase/supabase-js/issues/679#issuecomment-1770916359"
                },
                {
                    "id": "IC_kwDOD79Crs5qR9ZV",
                    "body": "We had the same issue, but it seemed like re-generating the JWT secret (and therefore changing the API keys) solved the problem...",
                    "author": {
                        "login": "fbeutel"
                    },
                    "createdAt": "2023-10-27T15:18:29Z",
                    "url": "https://github.com/supabase/supabase-js/issues/679#issuecomment-1783092821"
                },
                {
                    "id": "IC_kwDOD79Crs5r_8ee",
                    "body": "@fbeutel how did you re-generate the JWT secret? Experiencing the same issue",
                    "author": {
                        "login": "nataliaperina"
                    },
                    "createdAt": "2023-11-15T07:16:14Z",
                    "url": "https://github.com/supabase/supabase-js/issues/679#issuecomment-1811924894"
                },
                {
                    "id": "IC_kwDOD79Crs5sEt7D",
                    "body": "any updates here? I am getting the same issue when trying to connect to localhost. Have tried clearing all of my docker containers/images (with `docker system prune`), as well as resetting the local JWT token by setting in an environment variable, and running`supabase stop` & `supabase start` a number of times",
                    "author": {
                        "login": "nataliaperina"
                    },
                    "createdAt": "2023-11-15T19:57:54Z",
                    "url": "https://github.com/supabase/supabase-js/issues/679#issuecomment-1813176003"
                },
                {
                    "id": "IC_kwDOD79Crs5sI2Nl",
                    "body": "Having this issue as well! I am using the supabase cli (1.110.1) so i don't know how i can rotate the jwt secrets/api keys. i can see the option to change keys when it is the docker-compose version but not with the cli deployment. The config.toml has no options to input my own api keys/jwt secrets. It works sometimes so im thinking it is some sort of connection issue with the elixir in the realtime container that is spawned. when it works, the logs in that conatiner show that it connected to the db. When it doesn't work, the logs hang here:\r\n```11:01:58.185 [info] == Running 20210706140551 Realtime.Repo.Migrations.CreateTenants.change/0 forward\r\n11:01:58.192 [info] create table tenants\r\n11:01:58.208 [info] create index tenants_external_id_index\r\n11:01:58.226 [info] == Migrated 20210706140551 in 0.0s\r\n11:01:58.405 [info] == Running 20220329161857 Realtime.Repo.Migrations.AddExtensionsTable.change/0 forward\r\n11:01:58.406 [info] create table extensions\r\n11:01:58.415 [info] create index extensions_tenant_external_id_type_index\r\n11:01:58.418 [info] == Migrated 20220329161857 in 0.0s\r\n11:01:58.426 [info] == Running 20220410212326 Realtime.Repo.Migrations.AddTenantMaxEps.up/0 forward\r\n11:01:58.426 [info] alter table tenants\r\n11:01:58.428 [info] == Migrated 20220410212326 in 0.0s\r\n11:01:58.436 [info] == Running 20220506102948 Realtime.Repo.Migrations.RenamePollIntervalToPollIntervalMs.up/0 forward\r\n11:01:58.480 [debug] QUERY OK source=\"extensions\" db=0.7ms\r\nSELECT e0.\"id\", e0.\"type\", e0.\"settings\", e0.\"tenant_external_id\", e0.\"inserted_at\", e0.\"updated_at\" FROM \"extensions\" AS e0 WHERE (e0.\"type\" = $1) [\"postgres_cdc_rls\"]\r\n11:01:58.480 [info] == Migrated 20220506102948 in 0.0s\r\n11:01:58.490 [info] == Running 20220527210857 Realtime.Repo.Migrations.AddExternalIdUniqIndex.change/0 forward\r\n11:01:58.491 [info] execute \"alter table tenants add constraint uniq_external_id unique (external_id)\"\r\n11:01:58.498 [info] == Migrated 20220527210857 in 0.0s\r\n11:01:58.501 [info] == Running 20220815211129 Realtime.Repo.Migrations.NewMaxEventsPerSecondDefault.change/0 forward\r\n11:01:58.502 [info] alter table tenants\r\n11:01:58.505 [info] == Migrated 20220815211129 in 0.0s\r\n11:01:58.513 [info] == Running 20220815215024 Realtime.Repo.Migrations.SetCurrentMaxEventsPerSecond.change/0 forward\r\n11:01:58.513 [info] execute \"update tenants set max_events_per_second = 1000\"\r\n11:01:58.514 [info] == Migrated 20220815215024 in 0.0s\r\n11:01:58.526 [info] == Running 20220818141501 Realtime.Repo.Migrations.ChangeLimitsDefaults.change/0 forward\r\n11:01:58.527 [info] alter table tenants\r\n11:01:58.530 [info] == Migrated 20220818141501 in 0.0s\r\n11:01:58.540 [info] == Running 20221018173709 Realtime.Repo.Migrations.AddCdcDefault.up/0 forward\r\n11:01:58.540 [info] alter table tenants\r\n11:01:58.542 [info] == Migrated 20221018173709 in 0.0s\r\n11:01:58.554 [info] == Running 20221102172703 Realtime.Repo.Migrations.RenamePgType.up/0 forward\r\n11:01:58.554 [info] execute \"update extensions set type = 'postgres_cdc_rls'\"\r\n11:01:58.555 [info] == Migrated 20221102172703 in 0.0s\r\n11:01:58.562 [info] == Running 20221223010058 Realtime.Repo.Migrations.DropTenantsUniqExternalIdIndex.change/0 forward\r\n11:01:58.562 [info] execute \"ALTER TABLE IF EXISTS tenants DROP CONSTRAINT IF EXISTS uniq_external_id\"\r\n11:01:58.564 [info] == Migrated 20221223010058 in 0.0s\r\n11:01:58.575 [info] == Running 20230110180046 Realtime.Repo.Migrations.AddLimitsFieldsToTenants.change/0 forward\r\n11:01:58.575 [info] alter table tenants\r\n11:01:58.579 [info] == Migrated 20230110180046 in 0.0s\r\n11:02:00.147 [debug] QUERY OK db=2.4ms queue=170.4ms idle=0.0ms\r\nbegin []\r\n11:02:00.179 [debug] QUERY OK source=\"tenants\" db=0.6ms\r\nSELECT t0.\"id\", t0.\"name\", t0.\"external_id\", t0.\"jwt_secret\", t0.\"postgres_cdc_default\", t0.\"max_concurrent_users\", t0.\"max_events_per_second\", t0.\"max_bytes_per_second\", t0.\"max_channels_per_client\", t0.\"max_joins_per_second\", t0.\"inserted_at\", t0.\"updated_at\" FROM \"tenants\" AS t0 WHERE (t0.\"external_id\" = $1) [\"realtime-dev\"]\r\n11:02:00.246 [debug] QUERY OK db=2.7ms\r\nINSERT INTO \"tenants\" (\"external_id\",\"jwt_secret\",\"max_bytes_per_second\",\"max_channels_per_client\",\"max_concurrent_users\",\"max_events_per_second\",\"max_joins_per_second\",\"name\",\"inserted_at\",\"updated_at\",\"id\") VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11) [\"realtime-dev\", \"iNjicxc4+llvc9wovDvqymwfnj9teWMlyOIbJ8Fh6j2WNU8CIJ2ZgjR6MUIKqSmeDmvpsKLsZ9jgXJmQPpwL8w==\", 100000, 100, 200, 100, 500, \"realtime-dev\", ~N[2023-11-16 11:02:00], ~N[2023-11-16 11:02:00], <<225, 192, 199, 96, 240, 115, 70, 1, 169, 199, 221, 199, 106, 185, 146, 82>>]\r\n11:02:00.259 [debug] QUERY OK db=10.2ms\r\nINSERT INTO \"extensions\" (\"settings\",\"tenant_external_id\",\"type\",\"inserted_at\",\"updated_at\",\"id\") VALUES ($1,$2,$3,$4,$5,$6) [%{\"db_host\" => \"AsqXnLl1QzQhVdHgRakhwOUGygfGJMQFydI5HihZBh8=\", \"db_name\" => \"sWBpZNdjggEPTQVlI52Zfw==\", \"db_password\" => \"sWBpZNdjggEPTQVlI52Zfw==\", \"db_port\" => \"+enMDFi1J/3IrrquHHwUmA==\", \"db_user\" => \"uxbEq/zz8DXVD53TOI1zmw==\", \"ip_version\" => 4, \"poll_interval_ms\" => 100, \"poll_max_changes\" => 100, \"poll_max_record_bytes\" => 1048576, \"publication\" => \"supabase_realtime\", \"region\" => \"us-east-1\", \"slot_name\" => \"supabase_realtime_replication_slot\"}, \"realtime-dev\", \"postgres_cdc_rls\", ~N[2023-11-16 11:02:00], ~N[2023-11-16 11:02:00], <<17, 62, 60, 18, 127, 16, 69, 135, 159, 15, 42, 23, 194, 166, 87, 139>>]\r\n11:02:00.260 [debug] QUERY OK db=1.1ms\r\ncommit []\r\n11:02:04.803 [info] Elixir.Realtime.SignalHandler is being initialized...\r\n11:02:04.804 [notice] SYN[realtime@127.0.0.1] Adding node to scope <users>\r\n11:02:04.804 [notice] SYN[realtime@127.0.0.1] Creating tables for scope <users>\r\n11:02:04.805 [notice] SYN[realtime@127.0.0.1|registry<users>] Discovering the cluster\r\n11:02:04.805 [notice] SYN[realtime@127.0.0.1|pg<users>] Discovering the cluster\r\n11:02:04.805 [notice] SYN[realtime@127.0.0.1] Adding node to scope <Elixir.RegionNodes>\r\n11:02:04.805 [notice] SYN[realtime@127.0.0.1] Creating tables for scope <Elixir.RegionNodes>\r\n11:02:04.806 [notice] SYN[realtime@127.0.0.1|registry<Elixir.RegionNodes>] Discovering the cluster\r\n11:02:04.806 [notice] SYN[realtime@127.0.0.1|pg<Elixir.RegionNodes>] Discovering the cluster\r\n11:02:04.830 [info] Running RealtimeWeb.Endpoint with cowboy 2.9.0 at :::4000 (http)\r\n11:02:04.830 [info] Access RealtimeWeb.Endpoint at http://realtime.fly.dev\r\n11:02:04.831 [notice] SYN[realtime@127.0.0.1] Adding node to scope <Elixir.PostgresCdcStream>\r\n11:02:04.831 [notice] SYN[realtime@127.0.0.1] Creating tables for scope <Elixir.PostgresCdcStream>\r\n11:02:04.832 [notice] SYN[realtime@127.0.0.1|registry<Elixir.PostgresCdcStream>] Discovering the cluster\r\n11:02:04.832 [notice] SYN[realtime@127.0.0.1|pg<Elixir.PostgresCdcStream>] Discovering the cluster\r\n11:02:04.834 [notice] SYN[realtime@127.0.0.1] Adding node to scope <Elixir.Extensions.PostgresCdcRls>\r\n11:02:04.835 [notice] SYN[realtime@127.0.0.1] Creating tables for scope <Elixir.Extensions.PostgresCdcRls>\r\n11:02:04.835 [notice] SYN[realtime@127.0.0.1|registry<Elixir.Extensions.PostgresCdcRls>] Discovering the cluster\r\n11:02:04.835 [notice] SYN[realtime@127.0.0.1|pg<Elixir.Extensions.PostgresCdcRls>] Discovering the cluster\r\n11:02:07.803 [debug] Tzdata polling for update.\r\n11:02:08.053 [info] tzdata release in place is from a file last modified Fri, 22 Oct 2021 02:20:47 GMT. Release file on server was last modified Tue, 28 Mar 2023 20:25:39 GMT.\r\n11:02:08.053 [debug] Tzdata downloading new data from https://data.iana.org/time-zones/tzdata-latest.tar.gz\r\n11:02:08.270 [debug] Tzdata data downloaded. Release version 2023c.\r\n11:02:09.352 [info] Tzdata has updated the release from 2021e to 2023c\r\n11:02:09.353 [debug] Tzdata deleting ETS table for version 2021e\r\n11:02:09.356 [debug] Tzdata deleting ETS table file for version 2021e\r\n```\r\nSupabase local is an awesome tool but realtime is really important for our app so we can't afford to have a flaky local deployment :( ",
                    "author": {
                        "login": "Deelaw97"
                    },
                    "createdAt": "2023-11-16T11:26:01Z",
                    "url": "https://github.com/supabase/supabase-js/issues/679#issuecomment-1814258533"
                },
                {
                    "id": "IC_kwDOD79Crs5sMWDe",
                    "body": "> @fbeutel how did you re-generate the JWT secret? Experiencing the same issue\r\n\r\nWe are on the hosted version of supabase, where you can reset the JWT token in the admin panel... I'm not sure how that works in the self-hosted version.\r\n![image](https://github.com/supabase/supabase-js/assets/2996606/007b7ebc-b2e4-4c9f-9c94-2a86c1e356e2)\r\n",
                    "author": {
                        "login": "fbeutel"
                    },
                    "createdAt": "2023-11-16T19:26:16Z",
                    "url": "https://github.com/supabase/supabase-js/issues/679#issuecomment-1815175390"
                },
                {
                    "id": "IC_kwDOD79Crs5sXQIw",
                    "body": "The more recent issues might be its own, separate error; I opened https://github.com/supabase/realtime/issues/746",
                    "author": {
                        "login": "nbarrow-inspire-labs"
                    },
                    "createdAt": "2023-11-20T00:26:04Z",
                    "url": "https://github.com/supabase/supabase-js/issues/679#issuecomment-1818034736"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5a2jSn",
            "number": 680,
            "title": "single()/maybeSingle() returns wrong type when using with query across tables",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nsingle()/maybeSingle() should return a type that only consists of the object definition (not in array form). This works with regular queries, but when using queries across foreign keys/tables, it returns an array type.\r\n\r\n## To Reproduce\r\n\r\ntable_1 schema\r\n - id\r\n - table_2_id\r\n\r\ntable_2 schema\r\n - id\r\n - name\r\n\r\nWith the following code:\r\n```\r\nconst { data } = await supabase\r\n    .from(\"table_1\")\r\n    .select(\"table_2(*)\")\r\n    .single();\r\n```\r\n\r\n`data` has type `{id: string, name: string} | {id: string, name: string}[]`\r\n\r\n## Expected behavior\r\n\r\n`data` should have type `{id: string, name: string}`\r\n\r\n## System information\r\n\r\n- Version of supabase-js: 2.2.1",
            "author": {
                "login": "WesleyYue"
            },
            "state": "CLOSED",
            "createdAt": "2023-01-08T00:43:00Z",
            "closedAt": "2023-01-08T00:51:41Z",
            "url": "https://github.com/supabase/supabase-js/issues/680",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5R79rW",
                    "body": "Actually, I kind of see how this isn't a bug, but the semantics are debatable? imo, this operation is semantically a JOIN, and I would expect it to have the same behaviour as when it's applied to a view that is a JOIN of two tables (single() should constrain that there is only one row after the JOIN)\r\n\r\nAlso just realized this should probably be in supabase/postgrest-js and I found a similar [issue](https://github.com/supabase/postgrest-js/issues/303), so will close this.",
                    "author": {
                        "login": "WesleyYue"
                    },
                    "createdAt": "2023-01-08T00:51:41Z",
                    "url": "https://github.com/supabase/supabase-js/issues/680#issuecomment-1374673622"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5a2xFV",
            "number": 681,
            "title": "SSR Auth doesn't work via client.auth.setSession",
            "body": "# Bug report\r\n\r\nThis weekend I moved from v1.35.6 to 2.2.3. I noticed that all of my non-auth api calls were returning empty lists, and attempts at creating new records gave me a row level security error.\r\n\r\nI intercepted my traffic and noticed that the `apiKey` and `authorization` headers were both using my api key, so I dug into the code. I couldn't easily figure out if this was a bug or not, but I noticed that I could set a custom global `authorization` header. I tried that with my user access token, setting the `authorization` header to \"bearer xxxxx\" and my requests all worked.\r\n\r\nIs this the intended way of making authorized network requests in SSR? Should `setSession` work? Is there another solution?\r\n\r\n## To Reproduce\r\n\r\nCreate your client with the following code in a SSR typescript environment\r\n\r\n```\r\nconst client = createClient<Database>(url, apiKey);\r\n\r\nawait client.auth.setSession({\r\n    access_token: token,\r\n    refresh_token: refreshToken\r\n});\r\n\r\n```\r\nThen enable your traffic logging, be it wireshark or a passing a custom fetch function to `createClient`, or using other node debugging tools, and make the following request.\r\n\r\n```\r\nconsole.log(await supabase.from(table).select(query)\r\n```\r\n\r\nThe data you see should reflect a logged out state, and your logs should show the `apiKey` header and `authorization` headers are using the same tokens.\r\n\r\nWhen I switch my `createClient` code to the following, everything works as expected. Notice I stopped using setSession entirely and provide my own manual global authorization header.\r\n\r\n```\r\n\tconst client = createClient<Database>(url, apiKey,\r\n\t\ttoken\r\n\t\t\t? {\r\n\t\t\t\t\tglobal: {\r\n\t\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t  }\r\n\t\t\t: undefined\r\n\t);\r\n```\r\n\r\n\r\n## Expected behavior\r\n\r\nFrom reading the docs I expected `setSession` to \"log in\" my client, configuring it to properly send the authorization header along with all subsequent requests, as detailed in https://supabase.com/docs/guides/auth/server-side-rendering#bringing-it-together. \r\n\r\n## Screenshots\r\n\r\nI have none at the moment, let me know if you would like me to provide more.\r\n\r\n## System information\r\n\r\n- OS: Ubuntu 22.04\r\n- Browser: N/A\r\n- Version of supabase-js: 2.2.3\r\n- Version of Node.js: 19.3.0 and 16.13.1 both saw this error\r\n\r\n## Additional context\r\n\r\nI think that's it. Let me know if you need any more information!",
            "author": {
                "login": "Dashron"
            },
            "state": "CLOSED",
            "createdAt": "2023-01-08T03:44:28Z",
            "closedAt": "2023-01-08T04:59:27Z",
            "url": "https://github.com/supabase/supabase-js/issues/681",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5R8FQS",
                    "body": "I still don't think this is well documented. When using `setSession()` on the server-side, the client's `persistSession` auth option needs to be set to `false`. For good measure, you might as well set `autoRefreshToken` to `false` too.\n\nI guess what I should really say is that if you're using a supabase client on the server-side, chances are good that you'll want to set these options. Because there are a couple more methods which require this as well.",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2023-01-08T04:16:56Z",
                    "url": "https://github.com/supabase/supabase-js/issues/681#issuecomment-1374704658"
                },
                {
                    "id": "IC_kwDOD79Crs5R8FUe",
                    "body": "Thank you! \r\n\r\nI'll give this a try tomorrow. I figured I was just missing something. \r\n\r\nHopefully this can help others in the meanwhile.",
                    "author": {
                        "login": "Dashron"
                    },
                    "createdAt": "2023-01-08T04:19:08Z",
                    "url": "https://github.com/supabase/supabase-js/issues/681#issuecomment-1374704926"
                },
                {
                    "id": "IC_kwDOD79Crs5R8Gei",
                    "body": "Found a moment to test it and everything is working great. Thank you!",
                    "author": {
                        "login": "Dashron"
                    },
                    "createdAt": "2023-01-08T04:59:27Z",
                    "url": "https://github.com/supabase/supabase-js/issues/681#issuecomment-1374709666"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5a_KPl",
            "number": 684,
            "title": "Passing localstorage is necessary while using supabase-js in a deno runtime ",
            "body": "# Improve documentation\r\n\r\n## Link \r\n\r\n[This page could be improved](https://supabase.com/docs/reference/javascript/initializing)\r\n\r\n## Describe the problem\r\n\r\nWhile using supabase-js using deno, I ran into an issue: the client was not saving the session. I figured out this comes from the client meant to be used in a browser and then using local storage. Indeed manually passing the storage while initializing the client fixed the issue:\r\n```TS\r\nconst supabase = createClient(env.API_URL, env.SUPABASE_KEY, {\r\n  auth: {\r\n    storage: localStorage,\r\n  },\r\n});\r\n```\r\nI struggled to find the solution and had to test things based on function signatures, and other people would like to be able to use the client on a server.\r\n\r\n## Describe the improvement\r\n\r\nThe above page should mention this and provide a solution for Deno and nodejs. Tho for nodejs a third-party package might be necessary.\r\n\r\n## Related issues\r\nI believe supabase/gotrue-js#771 is related to the same issue, tho with nodejs.",
            "author": {
                "login": "nohehf"
            },
            "state": "OPEN",
            "createdAt": "2023-01-09T23:35:40Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/684",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5SDY3u",
                    "body": "You should also be able to set the client's `auth` > `persistSession` option as `false`. This will cause the session to be stored in memory.\n\nEither way, you are correct - it needs some documentation.",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2023-01-10T02:02:33Z",
                    "url": "https://github.com/supabase/supabase-js/issues/684#issuecomment-1376620014"
                },
                {
                    "id": "IC_kwDOD79Crs5SOBgm",
                    "body": "Yes, indeed, and this is a particularly useful (and probably widely needed) use-case for edge functions performing actions on the DB.",
                    "author": {
                        "login": "nohehf"
                    },
                    "createdAt": "2023-01-11T19:56:02Z",
                    "url": "https://github.com/supabase/supabase-js/issues/684#issuecomment-1379407910"
                },
                {
                    "id": "IC_kwDOD79Crs5UdQ46",
                    "body": "> You should also be able to set the client's `auth` > `persistSession` option as `false`. This will cause the session to be stored in memory.\r\n> \r\n> Either way, you are correct - it needs some documentation.\r\n\r\nSetting persistSession to false doesn't work. It is still not creating the in-memory session.",
                    "author": {
                        "login": "antick"
                    },
                    "createdAt": "2023-02-05T06:46:47Z",
                    "url": "https://github.com/supabase/supabase-js/issues/684#issuecomment-1416957498"
                },
                {
                    "id": "IC_kwDOD79Crs5UgNMn",
                    "body": "> > You should also be able to set the client's `auth` > `persistSession` option as `false`. This will cause the session to be stored in memory.\n> > \n> > Either way, you are correct - it needs some documentation.\n> \n> Setting persistSession to false doesn't work. It is still not creating the in-memory session.\n\nWhat makes you say this? Unless code has recently changed, it's one or the other. If `true`, it attempts to use local storage; if `false`, it uses memory via variables in the client.",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2023-02-05T12:41:39Z",
                    "url": "https://github.com/supabase/supabase-js/issues/684#issuecomment-1417728807"
                },
                {
                    "id": "IC_kwDOD79Crs5UgTxl",
                    "body": "> > > You should also be able to set the client's `auth` > `persistSession` option as `false`. This will cause the session to be stored in memory.\r\n> > > Either way, you are correct - it needs some documentation.\r\n> > \r\n> > \r\n> > Setting persistSession to false doesn't work. It is still not creating the in-memory session.\r\n> \r\n> What makes you say this? Unless code has recently changed, it's one or the other. If `true`, it attempts to use local storage; if `false`, it uses memory via variables in the client.\r\n\r\nHey, I have been struggling with this problem for hours and setting that flag to false alone didn't make any difference.\r\n\r\nThis worked for me though:\r\n\r\n```js\r\nthis.clientInstance = createClient(\r\n  this.configService.get('SUPABASE_URL'),\r\n  this.configService.get('SUPABASE_KEY'),\r\n  {\r\n    global: {\r\n      headers: {\r\n        Authorization: this.request.headers.authorization,\r\n      }\r\n    }\r\n  }\r\n);\r\n```\r\n\r\nUpdate:\r\n\r\nThe discussion below helped me a lot to understand the problem. This also has few potential solutions, though not as easy as using the `setAuth` but at least gets the job done.\r\n\r\nhttps://github.com/supabase/gotrue-js/pull/340#issuecomment-1260942393\r\n\r\nI really hope supabase team updates the documentation with these changes and examples properly. Figuring all this out by myself was very counter productive while I should have been able to find this in the documentation easily.\r\n",
                    "author": {
                        "login": "antick"
                    },
                    "createdAt": "2023-02-05T12:52:52Z",
                    "url": "https://github.com/supabase/supabase-js/issues/684#issuecomment-1417755749"
                },
                {
                    "id": "IC_kwDOD79Crs5UgyP5",
                    "body": "Glad you got it working.\n\nThere are some links to examples, which talk about passing global headers.\n\nhttps://supabase.com/docs/guides/functions\n\ud83d\udc47\nhttps://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/select-from-table-with-auth-rls/index.ts#L26",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2023-02-05T13:43:35Z",
                    "url": "https://github.com/supabase/supabase-js/issues/684#issuecomment-1417880569"
                },
                {
                    "id": "IC_kwDOD79Crs5bKBPV",
                    "body": "For Cloudflare Workers, this was the solution:\r\n\r\n```typescript\r\nconst supabase_client = createClient(c.env.SUPABASE_URL, c.env.SUPABASE_KEY, {\r\n  auth: {\r\n    persistSession: false\r\n  }\r\n})\r\n```\r\n\r\nThanks to https://github.com/supabase/supabase-js/issues/684#issuecomment-1376620014 for explaining it! (Just writing this comment so that I and others will find it indexed on Google in the future.)",
                    "author": {
                        "login": "Manouchehri"
                    },
                    "createdAt": "2023-05-01T05:06:45Z",
                    "url": "https://github.com/supabase/supabase-js/issues/684#issuecomment-1529353173"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5bLiYL",
            "number": 687,
            "title": "[v2.4.0] ReferenceError: Cannot access 'useSupabase' before initialization on page refresh",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\nUpdating from \"@supabase/supabase-js\": \"2.3.0\" to  \"2.4.0\" causes an error `ReferenceError: Cannot access 'useSupabase' before initialization` after a page refresh\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Recreate the `nextjs-server-components` example from [auth-helpers](https://github.com/supabase/auth-helpers/tree/main/examples/nextjs-server-components)\r\n2. Add the supabase provider\r\n```ts\r\n'use client'\r\n\r\nimport type { Session } from '@supabase/auth-helpers-nextjs'\r\nimport { createContext, useContext, useState } from 'react'\r\nimport { createBrowserClient } from '../..'\r\nimport { TypedSupabaseClient } from '../supabase-browser-client'\r\n\r\ntype MaybeSession = Session | null\r\n\r\ntype SupabaseContext = {\r\n  supabase: TypedSupabaseClient\r\n  session: MaybeSession\r\n}\r\n\r\n// @ts-ignore\r\nconst Context = createContext<SupabaseContext>()\r\n\r\nexport default function SupabaseProvider({ children, session }: { children: React.ReactNode; session: MaybeSession }) {\r\n  const [supabase] = useState(() => createBrowserClient())\r\n\r\n  return (\r\n    <Context.Provider value={{ supabase, session }}>\r\n      <>{children}</>\r\n    </Context.Provider>\r\n  )\r\n}\r\n\r\nexport const useSupabase = () => useContext(Context)\r\n```\r\n3. Start the dev server and load localhost:3000\r\n4. Refresh the page\r\n5 See the error \r\n```\r\nUncaught ReferenceError: Cannot access 'useSupabase' before initialization\r\n    at Module.useSupabase (webpack-internal:///(:3000/app-client)/../../packages/supabase/browser-client/lib/components/SupabaseProvider.tsx:4:52)\r\n    at Module.useSupabase (webpack-internal:///(:3000/app-client)/../../packages/supabase/browser-client/lib/components/index.ts:5:126)\r\n    at Object.registerExportsForReactRefresh (webpack-internal:///(:3000/app-client)/../../node_modules/next/dist/compiled/@next/react-refresh-utils/dist/internal/helpers.js:52:40)\r\n    at eval (webpack-internal:///(:3000/app-client)/../../packages/supabase/browser-client/lib/components/index.ts:31:35)\r\n    at eval (webpack-internal:///(:3000/app-client)/../../packages/supabase/browser-client/lib/components/index.ts:74:7)\r\n    at (app-client)/../../packages/supabase/browser-client/lib/components/index.ts (layout.js:752:1)\r\n    at options.factory (webpack.js:722:31)\r\n    at __webpack_require__ (webpack.js:37:33)\r\n    at fn (webpack.js:377:21)\r\n    at eval (webpack-internal:///(:3000/app-client)/../../packages/supabase/browser-client/index.ts:8:73)\r\n    at (app-client)/../../packages/supabase/browser-client/index.ts (layout.js:719:1)\r\n    at options.factory (webpack.js:722:31)\r\n    at __webpack_require__ (webpack.js:37:33)\r\n    at fn (webpack.js:377:21)\r\n    at eval (webpack-internal:///(:3000/app-client)/../../packages/supabase/browser-client/lib/components/SupabaseProvider.tsx:9:59)\r\n    at (app-client)/../../packages/supabase/browser-client/lib/components/SupabaseProvider.tsx (layout.js:741:1)\r\n    at options.factory (webpack.js:722:31)\r\n    at __webpack_require__ (webpack.js:37:33)\r\n    at fn (webpack.js:377:21)\r\n    at self.__next_require__ (webpack-internal:///(:3000/app-client)/../../node_modules/next/dist/client/app-index.js:27:17)\r\n    at requireModule (webpack-internal:///(:3000/app-client)/../../node_modules/next/dist/compiled/react-server-dom-webpack/client.js:143:32)\r\n    at initializeModuleChunk (webpack-internal:///(:3000/app-client)/../../node_modules/next/dist/compiled/react-server-dom-webpack/client.js:428:19)\r\n    at resolveModuleChunk (webpack-internal:///(:3000/app-client)/../../node_modules/next/dist/compiled/react-server-dom-webpack/client.js:386:5)\r\n    at eval (webpack-internal:///(:3000/app-client)/../../node_modules/next/dist/compiled/react-server-dom-webpack/client.js:669:14)\r\n    ```\r\n\r\n## Expected behavior\r\n\r\nNo errors on page refresh\r\n\r\n## Screenshots\r\n\r\n![image](https://user-images.githubusercontent.com/4958587/211924525-2b0dd30d-5f4c-4601-901a-eadcf6d68adb.png)\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser chrome\r\n- Version of supabase-js: 2.4.0\r\n- Version of Node.js:16\r\n\r\n## Additional context\r\n",
            "author": {
                "login": "atanaskanchev"
            },
            "state": "CLOSED",
            "createdAt": "2023-01-11T21:53:04Z",
            "closedAt": "2023-01-11T23:01:39Z",
            "url": "https://github.com/supabase/supabase-js/issues/687",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs5bVQ_r",
            "number": 688,
            "title": "Incorrect handling of union types in `PostgrestResponseSuccess<T>` type",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\n`await supabase.from(tableName).select(\"*\")` returns a type `PostgrestResponse<T>`, which could be of type `PostgrestResponseSuccess<T>`.\r\n\r\nCurrently `PostgrestResponseSuccess<T>` is defined as:\r\n```ts\r\ninterface PostgrestResponseSuccess<T> extends PostgrestResponseBase {\r\n    error: null;\r\n    data: T[];\r\n    count: number | null;\r\n}\r\n```\r\n\r\nNote that the generic type `T` above has no handling of union types. For example, for `PostgrestResponseSuccess<A | B>`, `data` is of type `(A | B)[]`, when it should be of type `A[] | B[]`.\r\n\r\nThis is problematic because `(A | B)[]`, an array that contains both type `A` and `B` entries, isn't a valid return type for a database `SELECT` query, while the correct type, `A[] | B[]`, generates a type error.\r\n\r\n## To Reproduce\r\n\r\nTo illustrate, consider a generic `useTable` hook which takes in `tableName` and returns a Tanstack Query `useQuery` hook that loads a table from Supabase.\r\n\r\n```ts\r\nimport { useQuery } from \"@tanstack/react-query\";\r\nimport { useSupabaseClient } from \"@supabase/auth-helpers-react\";\r\nimport { PostgrestError } from \"@supabase/supabase-js\";\r\n\r\n// Database types\r\ninterface Research {\r\n    id: string;\r\n    research: string;\r\n}\r\n\r\ninterface Link {\r\n    id: string;\r\n    link: string;\r\n}\r\n\r\ninterface Result {\r\n    id: string;\r\n    result: string;\r\n}\r\n\r\ntype TableName = \"researches\" | \"links\" | \"results\";\r\n\r\ntype Response<TableName> = {\r\n    data:\r\n        | (TableName extends \"researches\"\r\n              ? Research[]\r\n              : TableName extends \"links\"\r\n              ? Link[]\r\n              : TableName extends \"results\"\r\n              ? Result[]\r\n              : any[])\r\n        | null;\r\n    error: PostgrestError | null;\r\n};\r\n\r\nexport default function useTable(tableName: TableName) {\r\n    const supabase = useSupabaseClient();\r\n\r\n    const { isLoading, data } = useQuery({\r\n        queryKey: [tableName],\r\n        queryFn: async () => {\r\n            /*    Type error here!\r\n                  vvvvvvvvvvvvvvv  */\r\n            const { data, error }: Response<TableName> = await supabase\r\n                .from(tableName)\r\n                .select(\"*\");\r\n            if (error) throw error;\r\n            return data;\r\n        },\r\n    });\r\n\r\n    return { isLoading, data };\r\n}\r\n```\r\n\r\nThe full type error generated is as follows:\r\n```\r\nType 'PostgrestResponse<Research | Link | Result>' is not assignable to type 'Response<TableName>'.\r\n  Type 'PostgrestResponseSuccess<Research | Link | Result>' is not assignable to type 'Response<TableName>'.\r\n    Types of property 'data' are incompatible.\r\n      Type '(Research | Link | Result)[]' is not assignable to type 'Research[] | Link[] | Result[] | null'.\r\n        Type '(Research | Link | Result)[]' is not assignable to type 'Research[]'.\r\n          Type 'Research | Link | Result' is not assignable to type 'Research'.\r\n            Property 'research' is missing in type 'Link' but required in type 'Research'.\r\n```\r\n\r\n## Expected behaviour\r\n\r\nIn a nutshell, our supplied `Response<TableName>` generates the correct type, `Research[] | Link[] | Result[] | null`, which is what we expect returned from the database.\r\n\r\nHowever, Typescript tries to assign it to `(Research | Link | Result)[]`, an array that mixes `Research`, `Link`, and `Result` entries. This should, in no circumstance, be returned from the database. Hence, the type handling here is incorrect.\r\n\r\n## The fix\r\n\r\nThe fix is to allow the generic type `T` of `PostgrestResponseSuccess<T>` to be transformed into a distributive type if `T` is a union type. This can be implemented by adding a type `ToArray<T>`, as follows:\r\n\r\n```ts\r\ntype ToArray<T> = T extends any ? T[] : never;\r\n\r\ninterface PostgrestResponseSuccess<T> extends PostgrestResponseBase {\r\n    error: null;\r\n    data: ToArray<T>;\r\n    count: number | null;\r\n}\r\n```\r\n\r\nWith the fix in place, `PostgrestResponseSuccess<Research | Link | Result>` can be assigned correctly to `Response<TableName>`.\r\n\r\n## References\r\n\r\nDistributive Conditional Types: https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#distributive-conditional-types\r\n\r\n",
            "author": {
                "login": "leohku"
            },
            "state": "CLOSED",
            "createdAt": "2023-01-13T13:23:00Z",
            "closedAt": "2023-01-13T13:27:30Z",
            "url": "https://github.com/supabase/supabase-js/issues/688",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5SXVuV",
                    "body": "Whoops, submitted to the wrong repo - should be https://github.com/supabase/postgrest-js/issues instead.",
                    "author": {
                        "login": "leohku"
                    },
                    "createdAt": "2023-01-13T13:27:30Z",
                    "url": "https://github.com/supabase/supabase-js/issues/688#issuecomment-1381850005"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5chQld",
            "number": 691,
            "title": "v2.0.0 regression: Supabase JS fails when run inside script (TSX) ",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nIn a script, Supabase JS V2 doesn't work when doing any insert or update operation.\r\n\r\nThe error: \r\n```\r\n{\r\n  error: {\r\n    code: 'PGRST102',\r\n    details: null,\r\n    hint: null,\r\n    message: 'Content-Type not acceptable: application/json, text/plain'\r\n  },\r\n  data: null,\r\n  count: null,\r\n  status: 400,\r\n  statusText: 'Bad Request'\r\n}\r\n```\r\n\r\n## To Reproduce\r\n\r\nThe TSX package is a common tool used to execute TypeScript scripts: https://www.npmjs.com/package/tsx\r\n\r\nAfter installing, insert the following inside `script.tsx`:\r\n```\r\nimport { createClient } from \"@supabase/supabase-js\";\r\n\r\nasync function main() {\r\n  const clientSupabase = createClient(SUPABASE_URL, SUPABASE_KEY);\r\n  const testres1 = await clientSupabase.from(\"some_table\").select();\r\n  console.log(testres1.data?.length); // succeeds\r\n\r\n  const testres = await clientSupabase.from(\"some_table\").insert({\r\n    email: \"test@gmail.com\",\r\n  });\r\n\r\n  console.log(testres); // returns an error \r\n}\r\n\r\nmain();\r\n```\r\n\r\nThen run `npx tsx ./src/script.ts`.\r\n\r\nGithub repo to reproduce: https://github.com/ajay1495/supabase-playground\r\n\r\n## Expected behavior\r\n\r\nSuccessful insert.\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser (if applies): na\r\n- Version of supabase-js: 2.4.1\r\n- Version of Node.js: 18.1.0\r\n\r\n## Additional context\r\n\r\nSelect operations work fine, it seems to fail when running any request involving sending a payload. Perhaps a header needs to be set somewhere.\r\n\r\nAdditionally, this used to work in Supabase V1, so this appears to be a regression in upgrading to Supabase V2. \r\n\r\n",
            "author": {
                "login": "ajay1495"
            },
            "state": "CLOSED",
            "createdAt": "2023-01-22T18:05:04Z",
            "closedAt": "2023-02-09T04:08:07Z",
            "url": "https://github.com/supabase/supabase-js/issues/691",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5TcF88",
                    "body": "I believe you need brackets in there. Or maybe not. My api docs show them, even for one column insert; but the javascript reference does not.\n\n```js\nconst testres = await clientSupabase.from(\"some_table\").insert([\n  { email: \"test@gmail.com\", }\n]);\n```",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2023-01-23T06:26:41Z",
                    "url": "https://github.com/supabase/supabase-js/issues/691#issuecomment-1399873340"
                },
                {
                    "id": "IC_kwDOD79Crs5TcHjd",
                    "body": "I was wrong about the brackets.\n\nWould it be the trailing comma though? That would be invalid json, if I recall.",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2023-01-23T06:39:17Z",
                    "url": "https://github.com/supabase/supabase-js/issues/691#issuecomment-1399879901"
                },
                {
                    "id": "IC_kwDOD79Crs5TfRAE",
                    "body": "Hmm no I don't think so, the trailing comma isn't the issue since it's a TypeScript object and not JSON directly\r\n\r\nI suspect it has something to do with the Supabase JS library, because that exact code works when downgrading to V1, but fails for V2. ",
                    "author": {
                        "login": "ajay1495"
                    },
                    "createdAt": "2023-01-23T17:19:44Z",
                    "url": "https://github.com/supabase/supabase-js/issues/691#issuecomment-1400705028"
                },
                {
                    "id": "IC_kwDOD79Crs5TuEKE",
                    "body": "I am not using TypeScript, and seeing this exact same error. Keen to know if there's a known good version of 2.x?",
                    "author": {
                        "login": "mstade"
                    },
                    "createdAt": "2023-01-26T05:42:11Z",
                    "url": "https://github.com/supabase/supabase-js/issues/691#issuecomment-1404584580"
                },
                {
                    "id": "IC_kwDOD79Crs5UK9LH",
                    "body": "Not using Typescript, using Next.js with js.\r\nSeing exactly same error as @ajay1495  when i ran my INSERT from API Handler like this:\r\n```javascript\r\n// pages/api/insert.js\r\nimport {supabase} from './supabase'\r\n\r\nconst handler = async (req, res) => {\r\n    let insert_result = await supabase.from('items').insert({'name': 'whatever',})\r\n\r\n    res.send({message: 'ok ok',insert_result})\r\n}\r\n\r\nexport default handler;\r\n```\r\n(SELECT works just fine from backend, probably because doesnt have payload)\r\n\r\nSame INSERT code works just fine from client side components. I looked at the logs of both requests and difference seems to be only in header, correct one:\r\n```\"content_type\": \"application/json\",```\r\nThe one thats generated by calling from handler in my case:\r\n```\"content_type\": \"application/json, text/plain;charset=UTF-8\",```\r\n\r\nSeing this in latest 2.7.0",
                    "author": {
                        "login": "akella"
                    },
                    "createdAt": "2023-02-01T14:32:22Z",
                    "url": "https://github.com/supabase/supabase-js/issues/691#issuecomment-1412158151"
                },
                {
                    "id": "IC_kwDOD79Crs5UtmT-",
                    "body": "Just wanted to elaborate a little and update this.\r\nSo when you sell something with the help of Supabase, stripe/paddle - they need to talk to your backend webhooks, so you can update your database with user purchase. Currently it is not possible. Because backend supabase sends wrong(not-accepted) headers. This kind of breaks this basic functionality. \r\n\r\n**UPDATE**: I investigated and found out that i have this error on **Node 18.1.0**, and i dont have it on **Node 16.15.0**. So this is related to something inside node. This solves it for me, i hope it helps someone else too",
                    "author": {
                        "login": "akella"
                    },
                    "createdAt": "2023-02-07T18:14:57Z",
                    "url": "https://github.com/supabase/supabase-js/issues/691#issuecomment-1421239550"
                },
                {
                    "id": "IC_kwDOD79Crs5UwtqX",
                    "body": "Bumping this, a Node 18 support/fix for this would be wonderful",
                    "author": {
                        "login": "mkandan"
                    },
                    "createdAt": "2023-02-08T05:57:48Z",
                    "url": "https://github.com/supabase/supabase-js/issues/691#issuecomment-1422056087"
                },
                {
                    "id": "IC_kwDOD79Crs5Uw326",
                    "body": "@akella thanks for the find - I was able to reproduce this on @ajay1495's repo using Node 18.1.0. Upgrading to Node 18.2.0+ seems to fix this though, can you try that out?\r\n\r\n@steve-chavez should PostgREST be rejecting `Content-Type: application/json, text/plain;charset=UTF-8`?",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-02-08T06:51:26Z",
                    "url": "https://github.com/supabase/supabase-js/issues/691#issuecomment-1422097850"
                },
                {
                    "id": "IC_kwDOD79Crs5Uxlzj",
                    "body": "@soedirgo updated to 18.14.0, works for me!",
                    "author": {
                        "login": "akella"
                    },
                    "createdAt": "2023-02-08T09:23:39Z",
                    "url": "https://github.com/supabase/supabase-js/issues/691#issuecomment-1422286051"
                },
                {
                    "id": "IC_kwDOD79Crs5UzhFE",
                    "body": "> should PostgREST be rejecting Content-Type: application/json, text/plain;charset=UTF-8?\r\n\r\n@soedirgo Hm, that looks like a malformed `Content-Type`, according to [spec](https://httpwg.org/specs/rfc9110.html#rfc.section.8.3) it should be a \"singleton field\"(unlike `Accept` which can contain multiple values).\r\n\r\n> Although Content-Type is defined as a singleton field, it is sometimes incorrectly generated multiple times, resulting in a combined field value that appears to be a list. Recipients often attempt to handle this error by using the last syntactically valid member of the list, leading to potential interoperability and security issues if different implementations have different error handling behaviors.\r\n\r\nPostgREST accepts both `text/plain` and `application/json`, with a different processing for each one, I'm not sure if we can decide for the user which one is preferred.\r\n\r\nIIUC, this is a bug that was fixed in Node itself?\r\n\r\n---\r\n\r\nOne thing we could do in PostgREST is to enrich the error message with a link to [error docs](https://postgrest.org/en/stable/errors.html#pgrst102), there we could add a warning regarding Node versions.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-02-08T15:29:46Z",
                    "url": "https://github.com/supabase/supabase-js/issues/691#issuecomment-1422790980"
                },
                {
                    "id": "IC_kwDOD79Crs5U00l_",
                    "body": "Great find @akella @soedirgo ! Upgrading to Node 18.14.0 fixed for me as well.\r\n\r\nThanks for your help. \r\n\r\n> One thing we could do in PostgREST is to enrich the error message with a link to [error docs](https://postgrest.org/en/stable/errors.html#pgrst102), there we could add a warning regarding Node versions.\r\n\r\nI agree. Given the cryptic nature of the error message, it would save folks using older versions of Node many hours of debugging.",
                    "author": {
                        "login": "ajay1495"
                    },
                    "createdAt": "2023-02-08T19:30:28Z",
                    "url": "https://github.com/supabase/supabase-js/issues/691#issuecomment-1423133055"
                },
                {
                    "id": "IC_kwDOD79Crs5U2mxT",
                    "body": "> that looks like a malformed Content-Type\r\n\r\nGood to know! It does seem like a bug in Node that's been fixed, though I couldn't find a reference to the issue. Marking this as closed - thanks for the find folks!",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-02-09T04:08:07Z",
                    "url": "https://github.com/supabase/supabase-js/issues/691#issuecomment-1423600723"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5dEyf6",
            "number": 696,
            "title": "Fetching after login doesn't work correctly after 2.4.1",
            "body": "## Bug Report\r\nIn my app, I perform a login through Google, redirect back to my page, then call the database in order to get the profile table for that user.\r\nAfter 2.4.1, this call seems to hang\r\n![image](https://user-images.githubusercontent.com/102700325/215364189-ee2236f5-4677-4b08-9a93-4fe940e67602.png)\r\nThat is, using Firefox, no information about the request will ever show, and it doesn't seem to terminate.\r\nPossibly related to supabase/gotrue-js#597 \r\n\r\nIf I first downgrade to 2.4.0, perform the login, then go back to 2.4.1, it seems to work fine. However, I checked the localstorage value for both cases and found no discernible difference. My API Edge Network logs look fine too, and show Supabase returning a 200 on the request to /profiles no matter the version used.\r\n\r\n## To Reproduce\r\nI call the following code to log in:\r\n`async function signInWithGoogle() {\r\n  const { data, error } = await supabaseApp.auth.signInWithOAuth({\r\n    provider: 'google',\r\n    options: {\r\n      redirectTo: window.location.origin + '/sign-in-redirect'\r\n    }\r\n  })\r\n  return !!error\r\n}`\r\n\r\nand then from the page they're redirected to:\r\n`async function getCurrUserProfile() {\r\n  const { data, error } = await supabaseApp\r\n    .from('profiles')\r\n    .select();\r\n  if (data && data.length > 0) { return data[0] };\r\n  return error;\r\n}` (Here I rely on an RLS policy where users only see their own profile)\r\n\r\nThe code never moves past awaiting the db call. When called in 2.4.0 though, or after logging in on 2.4.0, everything works fine.\r\n\r\n## System information\r\n- OS: Linux (Debian 11)\r\n- Browser: Firefox\r\n",
            "author": {
                "login": "earsinkle"
            },
            "state": "CLOSED",
            "createdAt": "2023-01-30T00:35:19Z",
            "closedAt": "2023-01-31T18:01:09Z",
            "url": "https://github.com/supabase/supabase-js/issues/696",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5T6pgQ",
                    "body": "This is likely related to https://github.com/supabase/gotrue-js/issues/593 and should be addressed with the auth team this week.",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2023-01-30T02:09:55Z",
                    "url": "https://github.com/supabase/supabase-js/issues/696#issuecomment-1407883280"
                },
                {
                    "id": "IC_kwDOD79Crs5T-wY9",
                    "body": "Does it now work as expected in version 2.5.0?",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2023-01-30T16:41:49Z",
                    "url": "https://github.com/supabase/supabase-js/issues/696#issuecomment-1408960061"
                },
                {
                    "id": "IC_kwDOD79Crs5UAZ7E",
                    "body": "No, I was actually on 2.5.0 when I encountered this, then found through testing that 2.4.0 was the latest version that worked.",
                    "author": {
                        "login": "earsinkle"
                    },
                    "createdAt": "2023-01-30T21:44:18Z",
                    "url": "https://github.com/supabase/supabase-js/issues/696#issuecomment-1409392324"
                },
                {
                    "id": "IC_kwDOD79Crs5UAhyp",
                    "body": "They reverted the code. So if updating to 2.5.0 doesn't resolve, then this could be another issue.\n\nI was on 2.5.0 as well, then downgraded. After going back to 2.5.0 this morning I was good.",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2023-01-30T22:07:42Z",
                    "url": "https://github.com/supabase/supabase-js/issues/696#issuecomment-1409424553"
                },
                {
                    "id": "IC_kwDOD79Crs5UAn2q",
                    "body": "I'm importing client-side through jsdelivr so it could just be that their cache hasn't updated. Will try again after 24 hours have passed since the hotfix since I _believe_ that's how long their cache is.",
                    "author": {
                        "login": "earsinkle"
                    },
                    "createdAt": "2023-01-30T22:24:35Z",
                    "url": "https://github.com/supabase/supabase-js/issues/696#issuecomment-1409449386"
                },
                {
                    "id": "IC_kwDOD79Crs5UDZ85",
                    "body": "@earsinkle Do close the issue if it has stopped working for you.",
                    "author": {
                        "login": "hf"
                    },
                    "createdAt": "2023-01-31T11:17:52Z",
                    "url": "https://github.com/supabase/supabase-js/issues/696#issuecomment-1410178873"
                },
                {
                    "id": "IC_kwDOD79Crs5UF5HK",
                    "body": "Just saw that supabase-js got a version bump, can confirm that it works fine now on 2.6.0. ",
                    "author": {
                        "login": "earsinkle"
                    },
                    "createdAt": "2023-01-31T18:01:08Z",
                    "url": "https://github.com/supabase/supabase-js/issues/696#issuecomment-1410830794"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5dJmCg",
            "number": 698,
            "title": "Enable passing generic type for presence state when calling channel.presenceState()",
            "body": "# Chore\r\n\r\n## Describe the chore\r\n\r\nUpdate the types for `channel.presenceState()` to accept a generic type for the \"presence\" state.\r\n\r\n```ts\r\nchannel.on('presence', { event: 'sync' }, () => {\r\n\t/** \r\n\t* Currently returns `RealtimePresenceState` with no option to configure \r\n\t* the generic that already exists on the internal `Presence` type.\r\n\t*/\r\n\tconst presenceState = channel.presenceState();\r\n});\r\n```\r\n\r\nEnabling users to pass a generic would reduce the amount of type casting required to work with presence state.\r\n\r\n```ts\r\ninterface MyPresenceState {\r\n\textra: string;\r\n}\r\n\r\nchannel.on('presence', { event: 'sync' }, () => {\r\n\t/** \r\n\t* Pass `MyPresenceState` that gets passed to the internal `Presence` type\r\n\t* using the same default as `Presence` uses already\r\n\t*/\r\n\tconst presenceState = channel.presenceState<MyPresenceState>();\r\n});\r\n```\r\n\r\nTaking this further, it feels like it should be possible to stamp the presence type at the point that the channel is created, then it could be enforced in the `channel.track()` method as well as the returned state.\r\n\r\n## Additional context\r\n\r\nThis felt like a chore rather than a feature request but please let me know if it should be in a different category.\r\n",
            "author": {
                "login": "agubler"
            },
            "state": "CLOSED",
            "createdAt": "2023-01-30T16:44:39Z",
            "closedAt": "2023-01-30T16:49:07Z",
            "url": "https://github.com/supabase/supabase-js/issues/698",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5T-y0r",
                    "body": "Closing as this should be in the https://github.com/supabase/realtime-js repository.",
                    "author": {
                        "login": "agubler"
                    },
                    "createdAt": "2023-01-30T16:49:06Z",
                    "url": "https://github.com/supabase/supabase-js/issues/698#issuecomment-1408970027"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5dhfRm",
            "number": 701,
            "title": "Not able to login with email/password",
            "body": "# Bug report\r\n\r\nUser not set after logging in with password\r\n\r\nIf I register or log in with a already registered user supabase is not setting the user internally. I can see the reference in the localStorage and also in the response of the method signInWithPassword/signUp but useSupabaseUser() is not giving me the user back.\r\n\r\nI'm using nuxt 3 with the latest version of supabase and nuxt.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Create a account with email and password using supabase.auth.signUp\r\n2. Try to login with the created creddentials\r\n3. Signin is not working\r\n\r\n## Expected behavior\r\n\r\nThe user should be logged in and available in the user object.\r\n\r\n## System information\r\n\r\n- OS: windows and MacOS\r\n- Browser (if applies) chrome, safari, firefox\r\n- Version of supabase-js: 2.7.0\r\n- Version of @nuxtjs/supabase: 0.3.0\r\n- Version of Node.js: 16.16.0\r\n",
            "author": {
                "login": "szwenni"
            },
            "state": "OPEN",
            "createdAt": "2023-02-03T01:39:55Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/701",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5UXsdV",
                    "body": "I did some experiments today. So it seems that useSupabaseUser is actually the function which does not work properly.\r\nI replaced the ids, and email with xxx.\r\nThe code below qaas executed right after each other.\r\n\r\nconsole.log(useSupabaseUser()) -> `null`\r\nconsole.log(await supabase.auth.getUser()) -> `{\r\n    \"data\": {\r\n        \"user\": {\r\n            \"id\": \"xxx\",\r\n            \"aud\": \"authenticated\",\r\n            \"role\": \"authenticated\",\r\n            \"email\": \"xxx\",\r\n            \"email_confirmed_at\": \"2023-02-03T09:24:22.954735Z\",\r\n            \"phone\": \"\",\r\n            \"confirmed_at\": \"2023-02-03T09:24:22.954735Z\",\r\n            \"last_sign_in_at\": \"2023-02-03T09:32:39.131393Z\",\r\n            \"app_metadata\": {\r\n                \"provider\": \"email\",\r\n                \"providers\": [\r\n                    \"email\"\r\n                ]\r\n            },\r\n            \"user_metadata\": {},\r\n            \"identities\": [\r\n                {\r\n                    \"id\": \"xxx\",\r\n                    \"user_id\": \"xxx\",\r\n                    \"identity_data\": {\r\n                        \"email\": \"xxx\",\r\n                        \"sub\": \"xxx\"\r\n                    },\r\n                    \"provider\": \"email\",\r\n                    \"last_sign_in_at\": \"2023-02-03T09:24:22.951064Z\",\r\n                    \"created_at\": \"2023-02-03T09:24:22.9511Z\",\r\n                    \"updated_at\": \"2023-02-03T09:24:22.9511Z\"\r\n                }\r\n            ],\r\n            \"created_at\": \"2023-02-03T09:24:22.946151Z\",\r\n            \"updated_at\": \"2023-02-03T09:32:39.133682Z\"\r\n        }\r\n    },\r\n    \"error\": null\r\n}`\r\n\r\nconsole.log(await supabase.auth.getSession()) -> `{\r\n    \"data\": {\r\n        \"session\": {\r\n            \"access_token\": \"xxx\",\r\n            \"token_type\": \"bearer\",\r\n            \"expires_in\": 3600,\r\n            \"refresh_token\": \"xxx\",\r\n            \"user\": {\r\n                \"id\": \"xxx\",\r\n                \"aud\": \"authenticated\",\r\n                \"role\": \"authenticated\",\r\n                \"email\": \"xxx\",\r\n                \"email_confirmed_at\": \"2023-02-03T09:24:22.954735Z\",\r\n                \"phone\": \"\",\r\n                \"confirmed_at\": \"2023-02-03T09:24:22.954735Z\",\r\n                \"last_sign_in_at\": \"2023-02-03T09:32:39.131393486Z\",\r\n                \"app_metadata\": {\r\n                    \"provider\": \"email\",\r\n                    \"providers\": [\r\n                        \"email\"\r\n                    ]\r\n                },\r\n                \"user_metadata\": {},\r\n                \"identities\": [\r\n                    {\r\n                        \"id\": \"xxx\",\r\n                        \"user_id\": \"xxx\",\r\n                        \"identity_data\": {\r\n                            \"email\": \"xxx\",\r\n                            \"sub\": \"xxx\"\r\n                        },\r\n                        \"provider\": \"email\",\r\n                        \"last_sign_in_at\": \"2023-02-03T09:24:22.951064Z\",\r\n                        \"created_at\": \"2023-02-03T09:24:22.9511Z\",\r\n                        \"updated_at\": \"2023-02-03T09:24:22.9511Z\"\r\n                    }\r\n                ],\r\n                \"created_at\": \"2023-02-03T09:24:22.946151Z\",\r\n                \"updated_at\": \"2023-02-03T09:32:39.133682Z\"\r\n            },\r\n            \"expires_at\": 1675420359\r\n        }\r\n    },\r\n    \"error\": null\r\n}`",
                    "author": {
                        "login": "szwenni"
                    },
                    "createdAt": "2023-02-03T09:44:25Z",
                    "url": "https://github.com/supabase/supabase-js/issues/701#issuecomment-1415497557"
                },
                {
                    "id": "IC_kwDOD79Crs5UYlDR",
                    "body": "Again I tried to get further and now realized that the sb-supabase-auth cookie is not set, but I can not really tell why.\r\n\r\nFor all OAuth providers it is working like it should. Only for E-Mail and password it is not working at all",
                    "author": {
                        "login": "szwenni"
                    },
                    "createdAt": "2023-02-03T11:16:34Z",
                    "url": "https://github.com/supabase/supabase-js/issues/701#issuecomment-1415729361"
                },
                {
                    "id": "IC_kwDOD79Crs5sx0ou",
                    "body": "Hey, is this fixed? Currently using email and password register or login is not working for me too. Same reason",
                    "author": {
                        "login": "Shooteger"
                    },
                    "createdAt": "2023-11-23T23:44:45Z",
                    "url": "https://github.com/supabase/supabase-js/issues/701#issuecomment-1824999982"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5dmdC1",
            "number": 702,
            "title": "supabase.auth.getUser() returns JWT sub claims error",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\nI am attempting build a Vue.js application that uses Supabase authentication. For this application, I installed ```@supabase/supabase-js``` with version 2.7.0. \r\n\r\nAfter setting up the Vue app and implementing the supabase_url and supabase_anon_key in an init file in the project, I added ```const { data: { user } } = await supabase.auth.getUser();``` inside a vue-router route guard in order to retrieve the user then add the user to a conditional that prevents accessing the app before logging in. The inclusion of ```supabase.auth.getUser();``` prompts a 401 error in the console that says: \"**invalid claim: missing sub claim**\". This message appears when logged out of the app. After logging into the app, the error message goes away. \r\n\r\n## To Reproduce\r\n\r\nTo get the error, I added \"supabase.auth.getUser();\" to the following route guard.\r\n\r\n```\r\nrouter.beforeEach(async (to, from, next) => {\r\n  const { data: { user } } = await supabase.auth.getUser();\r\n\r\n  if (to.matched.some((res) => res.meta.auth)) {\r\n    if (user) {\r\n      next();\r\n      return;\r\n    }\r\n    next({ name: \"Login\" });\r\n    return;\r\n  }\r\n  next();\r\n});\r\n```\r\n\r\n## Expected behavior\r\n\r\nWhen I am logged out, I expect no errors to appear.\r\n\r\n## Screenshots\r\n\r\n![Screen Shot 2023-02-03 at 9 52 00 AM](https://user-images.githubusercontent.com/49799116/216694617-f0cdbd87-537f-42b7-a031-78381aa34323.png)\r\n![Screen Shot 2023-02-03 at 9 51 40 AM](https://user-images.githubusercontent.com/49799116/216694619-dd72e0e1-f5cf-40a2-ad7d-8909415ab523.png)\r\n\r\n\r\n## System information\r\n\r\n- OS: [e.g. macOS, Windows] - MacOS\r\n- Browser (if applies) [e.g. chrome, safari] - Chrome\r\n- Version of supabase-js: [e.g. 6.0.2] - 2.7.0\r\n- Version of Node.js: [e.g. 10.10.0] - 16.13.2\r\n",
            "author": {
                "login": "jsfanatik"
            },
            "state": "CLOSED",
            "createdAt": "2023-02-03T19:51:30Z",
            "closedAt": "2023-02-07T00:55:44Z",
            "url": "https://github.com/supabase/supabase-js/issues/702",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5Uo62O",
                    "body": "Issue is NOT a bug. I received the following guidance directly from the Supabase support team:\r\n\r\n\"Please be aware that `getUser` is a function that expects a valid access token to be sent. If there's no user logged in, you should not be sending the anon token to it. The way `getUser` identifies what user needs to be returned is by reading the `sub` claim in the JWT -- which is not present in the anon token.\r\n\r\nIt's somewhat better to use the `getSession` method as it does not use the anon token in any way.\"",
                    "author": {
                        "login": "jsfanatik"
                    },
                    "createdAt": "2023-02-07T00:55:44Z",
                    "url": "https://github.com/supabase/supabase-js/issues/702#issuecomment-1420012942"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5dpQaG",
            "number": 705,
            "title": "Documentation not clear and I can't bring user data with Google Authentication",
            "body": "# Improve documentation\r\n\r\nI could bring the user data using a Google auth method following the code bellow:\r\n\r\n```tsx\r\nimport { StatusBar } from \"expo-status-bar\";\r\nimport { Button, StyleSheet, Text, View } from \"react-native\";\r\nimport * as Google from \"expo-auth-session/providers/google\";\r\n\r\nimport \"react-native-url-polyfill/auto\";\r\nimport { createClient } from \"@supabase/supabase-js\";\r\nimport { IAuthResponse } from \"./interface\";\r\n\r\nexport default function App() {\r\n  const { SUPABASE_URL } = process.env\r\n  const { SUPABASE_ANON_KEY } = process.env\r\n\r\n  const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);\r\n\r\n  const [req, _res, promptAsync] = Google.useAuthRequest({\r\n    expoClientId: \"\",\r\n    iosClientId: \"\",\r\n    androidClientId: \"\",\r\n  });\r\n\r\n  const loginWithGoogle = async () => {\r\n    promptAsync({\r\n      url: `${SUPABASE_URL}/auth/v1/authorize?provider=google&redirect_to=${req?.redirectUri}`,\r\n    })\r\n      .then(async (res: any) => {\r\n        let response: IAuthResponse = res;\r\n\r\n        const { user, session, error } = await supabase.auth.signIn({\r\n          refreshToken: response.params.refresh_token,\r\n        });\r\n        console.log(\"user: \", user, \"session: \", session, \"error: \", error);\r\n      })\r\n      .catch((error) => console.log(\"error: \", error));\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <StatusBar style=\"auto\" />\r\n      <Text style={styles.text}>Supabase login</Text>\r\n\r\n      <Button title=\"Login with Google\" onPress={loginWithGoogle} />\r\n    </View>\r\n  );\r\n}\r\n\r\n```\r\n\r\nBut the problem is that this way is with an old version of supabase library: `\"@supabase/supabase-js\": \"1.35.6\"`\r\n\r\nCould you help me to make the code works with the latest version of `\"@supabase/supabase-js\": \"2.7.0\"`?\r\n\r\nI tried to use this new version, but inside of data only returned to me: `data:  {\"provider\": \"google\", \"url\": \"https://***supabase.co/auth/v1/authorize?provider=google\"}\r\n`.\r\n\r\nThe current documentation it's not clear to me, I have to do more steps? \r\nShould I use `expo-auth-session`? But how can I built it?\r\n\r\nI followed all the steps described into your documentation:\r\n\r\n1 - Create the Google Cloud consent screen  (but this screen even open inside the emulator)\r\n![screencapture-console-cloud-google-apis-credentials-consent-edit-2023-02-04-21_20_34 (1)](https://user-images.githubusercontent.com/21963291/216788210-dd2b8f73-cf9d-4ce3-a227-57bef3840294.png)\r\n\r\n2 - Create the credentials\r\n![Screenshot 2023-02-04 at 21 25 22](https://user-images.githubusercontent.com/21963291/216788257-271a3c4e-dc60-4f41-bd4c-afee9e484538.png)\r\n\r\n3 - Insert the credentials inside Supabase Google Provider configs:\r\n![Screenshot 2023-02-04 at 21 26 46](https://user-images.githubusercontent.com/21963291/216788311-b917cf89-94ad-4c6d-913e-6eda61d3728e.png)\r\n\r\n4 - Add the code\r\n\r\n```tsx\r\nimport React from \"react\";\r\nimport { View, Text, Button } from \"react-native\";\r\nimport { createClient } from \"@supabase/supabase-js\";\r\n\r\nconst Login = (): JSX.Element => {\r\n  const { SUPABASE_URL } = process.env\r\n  const { SUPABASE_ANON_KEY } = process.env\r\n\r\n  const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);\r\n\r\n  async function signInWithGoogle() {\r\n    const { data, error } = await supabase.auth.signInWithOAuth({\r\n      provider: \"google\",\r\n    });\r\n\r\n    if (data) {\r\n      console.log(\"data: \", data);\r\n    }\r\n\r\n    if (error) {\r\n      console.log(\"error: \", error);\r\n    }\r\n  }\r\n\r\n  async function signout() {\r\n    const { error } = await supabase.auth.signOut();\r\n  }\r\n\r\n  return (\r\n    <View>\r\n      <Text style={{ marginVertical: 40, fontSize: 24, alignSelf: \"center\" }}>\r\n        Login\r\n      </Text>\r\n\r\n      <Button title=\"Signin with Google\" onPress={signInWithGoogle} />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n```\r\n\r\nCould you help me describing in steps?\r\n\r\nI have tried a lot of solutions, included I saw this video of one of supabase's developers\r\n\r\n**https://www.youtube.com/watch?v=dE2vtnv83Fc&t=240s**\r\n\r\nBut it's outdated as well.\r\n\r\nI would love utilize this method of authentication.",
            "author": {
                "login": "ildaneta"
            },
            "state": "CLOSED",
            "createdAt": "2023-02-04T19:39:51Z",
            "closedAt": "2023-10-23T01:33:07Z",
            "url": "https://github.com/supabase/supabase-js/issues/705",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5pwYw-",
                    "body": "Closing in favour of tracking on: https://github.com/supabase/gotrue/issues/1066",
                    "author": {
                        "login": "J0"
                    },
                    "createdAt": "2023-10-23T01:33:07Z",
                    "url": "https://github.com/supabase/supabase-js/issues/705#issuecomment-1774292030"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5eHBZa",
            "number": 707,
            "title": "OAuth API connection is non-refreshable",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen a signed in user (with password) wants to connect to a Google calendar they are able to view the calendar for one hour until the session expires. At this time, the app refreshes the session. The refresh seems successful except that the refresh only refreshes the session with GoTrue but does not refresh the provider token.\r\n\r\nI might be approaching OAuth API connections in a not-the-supabase-way. Please let me know if this is the case.\r\n\r\nThanks!\r\n\r\n## To Reproduce\r\n\r\n1. Sign in a user with a password (standard Supabase stuff here)\r\n2. Sign in again with OAuth and scopes for connecting a Google calendar\r\n3. Upon receiving the user back after the OAuth redirect, listen for auth state changes and save the provider token to continue using the Google Calendar API\r\n4. Returns later on when the access token has expired. The access token/refresh token are refreshed but the provider token remains expired and can no longer retrieve data from the Google API.\r\n\r\nStep 2:\r\n```typescript\r\ngetSupabase().auth.signInWithOAuth({\r\n    provider: \"google\",\r\n    options: {\r\n      scopes:\r\n        \"https://www.googleapis.com/auth/calendar https://www.googleapis.com/auth/calendar.events\",\r\n      redirectTo: url(\"/oauth/calendar/callback\"),\r\n    },\r\n  });\r\n```\r\n\r\nSTEP 3:\r\n```typescript\r\n    getSupabase().auth.onAuthStateChange((event, session) => {\r\n      if (event === \"SIGNED_IN\") {\r\n        // I can look at the session details here and confirm that they are not stored in the database\r\n        console.log({ anAuthStateChange: session });\r\n        const formData = new FormData();\r\n        formData.append(\"session\", JSON.stringify(session));\r\n\r\n        // We're using the database to store the provider token and refresh token (security concerns, possibly)\r\n        submit(formData, { method: \"post\" });\r\n      }\r\n    });\r\n```\r\n\r\nSTEP 4:\r\n```typescript\r\n  if (isExpiringSoon(session.expires_at)) {\r\n    const newSession = await getSupabase(session.access_token).auth.refreshSession(session);\r\n    // We expect to get back a refreshed provider token here but do not so the next line is only partially successful\r\n    saveRefreshedCalendarSession(newSession);\r\n  }\r\n```\r\n\r\n`getSupabase` function uses the `createClient` function under the hood with these settings (inspired by [supa-fly-stack](https://github.com/rphlmr/supa-fly-stack)). Using `persistSession` `true` or `false` doesn't seem to make a difference for this issue.\r\n```typescript\r\n  const global = accessToken\r\n    ? {\r\n        global: {\r\n          headers: {\r\n            Authorization: `Bearer ${accessToken}`,\r\n          },\r\n        },\r\n      }\r\n    : {};\r\n\r\n  return createClient<Database>(SUPABASE_URL, supabaseKey, {\r\n    auth: {\r\n      autoRefreshToken: false,\r\n      persistSession: false,\r\n    },\r\n    ...global,\r\n  });\r\n```\r\n\r\n## Expected behavior\r\n\r\nI expect that calling `auth.refreshToken` will return a refreshed provider token. I don't care as much about the GoTrue session as I do about the Google API session. \r\n\r\n## Screenshots\r\n\r\nN/A\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser: Chrome\r\n- Version of supabase-js: 2.7.1\r\n- Version of Node.js: v18.13.0\r\n\r\n## Additional context\r\n\r\nNone.\r\n",
            "author": {
                "login": "jfeaver"
            },
            "state": "CLOSED",
            "createdAt": "2023-02-10T02:45:59Z",
            "closedAt": "2023-03-01T15:01:57Z",
            "url": "https://github.com/supabase/supabase-js/issues/707",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5U8VfU",
                    "body": "I've been attempting a workaround where I directly request a refresh from the GoTrue API or Google OAuth API directly but don't get back a new \"provider_token\" from the GoTrue API (based on the JS client behaviour, I guess I should have expected this) and can't get back a non-error response from Google OAuth API ([\"invalid_grant\" error](rfc-editor.org/rfc/rfc6749#section-5.2)).\r\n\r\nMaybe this is a GoTrue bug?\r\n\r\nFor now, I think the workaround for me is to use Supabase for authentication and handle OAuth API connections separately from Supabase.",
                    "author": {
                        "login": "jfeaver"
                    },
                    "createdAt": "2023-02-10T02:50:03Z",
                    "url": "https://github.com/supabase/supabase-js/issues/707#issuecomment-1425102804"
                },
                {
                    "id": "IC_kwDOD79Crs5VDI1-",
                    "body": "Yeah, supabase doesn't handle refreshing the provider tokens.",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2023-02-11T22:04:44Z",
                    "url": "https://github.com/supabase/supabase-js/issues/707#issuecomment-1426886014"
                },
                {
                    "id": "IC_kwDOD79Crs5VIezo",
                    "body": "> supabase doesn't handle refreshing the provider tokens\r\n\r\nOkay, thanks @j4w8n. That's good to know.\r\n\r\nThat being the case, I wish Supabase made it possible for me to initiate the OAuth with Google and then refresh those tokens on my own. As it is, I can't use Supabase for any step because the refresh tokens are not provided after Google OAuth (maybe this is the real issue). There's a `provider_refresh_token` property but it's nullish for Google OAuth sessions even though Google's API documentation and OAuth Playground show that they provide refresh tokens.\r\n\r\nI want Supabase to help with OAuth for API access but I'm looking at implementing it separately. This isn't hard but it was a bad experience working through the Supabase issues only to figure out that I couldn't use it (another \"real issue\" could be that Supabase needs documentation stating that they don't handle refreshing provider tokens). I'd like to reuse the OAuth capabilities of Supabase and keep consistency in my codebase rather than implement OAuth separately so if Supabase did handle refreshing provider tokens, that would be lovely.",
                    "author": {
                        "login": "jfeaver"
                    },
                    "createdAt": "2023-02-13T16:55:30Z",
                    "url": "https://github.com/supabase/supabase-js/issues/707#issuecomment-1428286696"
                },
                {
                    "id": "IC_kwDOD79Crs5VIojd",
                    "body": "I don't have Google oauth setup, so I can't confirm. You might hit up the discord server and ask there - if it returns a provider token.",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2023-02-13T17:11:00Z",
                    "url": "https://github.com/supabase/supabase-js/issues/707#issuecomment-1428326621"
                },
                {
                    "id": "IC_kwDOD79Crs5VLStx",
                    "body": "While implementing OAuth for myself, I found out that Google OAuth requires an `access_type=offline` URL param to be present in the initial authorization request. So... in order to get back a `provider_refresh_token`, one must add that to the request. In my case, this means doing something like this in Step 1:\r\n\r\n```typescript\r\n  signInWithOAuth({\r\n    provider: \"google\",\r\n    options: {\r\n      queryParams: { access_type: \"offline\" },\r\n      scopes:\r\n        \"https://www.googleapis.com/auth/calendar.readonly https://www.googleapis.com/auth/calendar.events.readonly\",\r\n      redirectTo: url(\"/oauth/calendar/callback\"),\r\n    },\r\n  });\r\n```\r\n\r\nAfter getting back the `provider_refresh_token`, I still have to handle refreshing that token with Google as needed. Time to get back to work. :)\r\n\r\nHopefully this discussion will save someone else the hours of time I spent going through this all.",
                    "author": {
                        "login": "jfeaver"
                    },
                    "createdAt": "2023-02-14T02:36:42Z",
                    "url": "https://github.com/supabase/supabase-js/issues/707#issuecomment-1429023601"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5fxfp9",
            "number": 716,
            "title": "onAuthStateChange fires unnecessarily on window focus",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nsupabase-js fires `auth.onAuthStateChange` on browser window focus, even when the auth state hasn't changed. This causes (in SvelteKit for example) the listeners to run unnecessarily. In SvelteKit using `invalidate`, it causes all data in the page to be reloaded unnecessarily.\r\n\r\nLooks like the call is originating in gotrue-js here: https://github.com/supabase/gotrue-js/blob/master/src/GoTrueClient.ts#L1295 and then here: https://github.com/supabase/gotrue-js/blob/master/src/GoTrueClient.ts#L909\r\n\r\nNeither function compares the current status to the new status.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\nUse supabase-js auth with a listener on `onAuthStateChange(event)`. The event will be repeatedly fired when focusing the window or tab in the browser.\r\n\r\n## Expected behavior\r\n\r\n`onAuthStateChange()` should only fire when the auth state changes.\r\n\r\n## Screenshots\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser (if applies) Firefox\r\n- Version of supabase-js: 2.10.0\r\n- Version of Node.js: 18.8.0\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "nathancahill"
            },
            "state": "OPEN",
            "createdAt": "2023-03-02T13:28:22Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/716",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5WqM_e",
                    "body": "There are one or two other similar issues in other repos.\n\nSeems to be because the _recoverAndRefresh function triggers the event here: https://github.com/supabase/gotrue-js/blob/master/src/GoTrueClient.ts#L1061\n\nI'm not sure why this was chosen to happen. Maybe it's needed for other scenarios, but it definitely seems to be causing some issues as well.",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2023-03-03T18:05:41Z",
                    "url": "https://github.com/supabase/supabase-js/issues/716#issuecomment-1453903838"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5gHJ7Z",
            "number": 722,
            "title": "Fetched int8 in database is rounded leads to bugs",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWe have a key in our database (int8). After using the JS sdk to retrieve the results from the database we get different numbers for the key. It seems like the SDK rounds the numbers because they are too big for JS.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Create a database table in Supabase with \"id\" as a column (datatype int8)\r\n2. Manually set the ID of an object in the database to: `1161380288898609914`\r\n3. Fetch that data in an edge function using the following code: \r\n```javascript\r\n  const teamsData = await supabase\r\n    .from('teams')\r\n    .select()\r\n```\r\n4. The result of the fetch will include a different ID, in my example: `1161380288898610000`\r\n5. This will lead to massive bugs\r\n\r\n## Expected behavior\r\n\r\nThe SDK should return the correct value, if its too big for an int, then as a string.\r\n\r\n## Screenshots\r\nNot applicable.\r\n\r\n## System information\r\nNot applicable.\r\n\r\n## Additional context\r\nNot applicable.\r\n",
            "author": {
                "login": "kgoedecke"
            },
            "state": "CLOSED",
            "createdAt": "2023-03-07T00:55:47Z",
            "closedAt": "2023-03-07T08:47:25Z",
            "url": "https://github.com/supabase/supabase-js/issues/722",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5W4-Yz",
                    "body": "Thanks for the report, you can follow [this issue](https://github.com/supabase/postgrest-js/issues/319) to track this. We'll likely end up auto-converting to BigInt when the number is too big.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-03-07T08:47:25Z",
                    "url": "https://github.com/supabase/supabase-js/issues/722#issuecomment-1457776179"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5gJa2Y",
            "number": 723,
            "title": "Database typings are not correct on table join for entity to one relationship",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nTypings are not correct when joining tables that are always NOT an array. For example, in my application we use the following query to fetch data about `figma_comments` and link to `figma_users` and `figma_files`:\r\n\r\n```ts\r\nconst { data: comments } = await supabase\r\n    .from('figma_comments')\r\n    .select(\r\n      'created_at, resolved_at, comment, node_id, user:figma_users(handle, img_url, email), file:figma_files(file_key, name)',\r\n    )\r\n    .order('created_at', { ascending: false });\r\n```\r\n\r\nFrom this query, I would expect the built in typings to have both `user` and `file` to be an entity of a singular user and a singular file. Since the constraints I set up in Postgres won\u2019t allow it to be multiple entries because the foreign key is unique on the joinable tables.\r\n\r\nHere is an overview of the types being generated by supabase CLI:\r\n\r\n```ts\r\nTables: {\r\n      figma_comments: {\r\n        Row: {\r\n          comment: string;\r\n          created_at: string;\r\n          figma_user_id: string;\r\n          file_key: string;\r\n          id: number;\r\n          node_id: string;\r\n          order_id: number | null;\r\n          parent_id: string | null;\r\n          resolved_at: string | null;\r\n        };\r\n        Insert: {\r\n          comment: string;\r\n          created_at?: string;\r\n          figma_user_id: string;\r\n          file_key: string;\r\n          id?: number;\r\n          node_id: string;\r\n          order_id?: number | null;\r\n          parent_id?: string | null;\r\n          resolved_at?: string | null;\r\n        };\r\n        Update: {\r\n          comment?: string;\r\n          created_at?: string;\r\n          figma_user_id?: string;\r\n          file_key?: string;\r\n          id?: number;\r\n          node_id?: string;\r\n          order_id?: number | null;\r\n          parent_id?: string | null;\r\n          resolved_at?: string | null;\r\n        };\r\n      };\r\n      figma_files: {\r\n        Row: {\r\n          editor_type: string | null;\r\n          figma_project_id: number | null;\r\n          file_key: string;\r\n          id: number;\r\n          last_modified: string;\r\n          name: string;\r\n          thumbnail_url: string;\r\n          version: string | null;\r\n        };\r\n        Insert: {\r\n          editor_type?: string | null;\r\n          figma_project_id?: number | null;\r\n          file_key: string;\r\n          id?: number;\r\n          last_modified: string;\r\n          name: string;\r\n          thumbnail_url: string;\r\n          version?: string | null;\r\n        };\r\n        Update: {\r\n          editor_type?: string | null;\r\n          figma_project_id?: number | null;\r\n          file_key?: string;\r\n          id?: number;\r\n          last_modified?: string;\r\n          name?: string;\r\n          thumbnail_url?: string;\r\n          version?: string | null;\r\n        };\r\n      };\r\n      figma_users: {\r\n        Row: {\r\n          email: string;\r\n          figma_id: string;\r\n          handle: string;\r\n          id: number;\r\n          img_url: string;\r\n        };\r\n        Insert: {\r\n          email: string;\r\n          figma_id: string;\r\n          handle: string;\r\n          id?: number;\r\n          img_url: string;\r\n        };\r\n        Update: {\r\n          email?: string;\r\n          figma_id?: string;\r\n          handle?: string;\r\n          id?: number;\r\n          img_url?: string;\r\n        };\r\n      };\r\n    };\r\n```\r\n\r\n## Expected behavior\r\n\r\nI would expect the built in typings to know that user and file in the case of my query is an object if the entity, not an array of objects. This is because `figma_files.file_key` and `figma_users.figma_id` are set to UNIQUE.\r\n\r\nI understand that making this work might be extremely difficult, but does anyone have any suggestions on how to make the typings work for me so I do not have to cast these types?\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Version of supabase-js: 2.10.0\r\n- Version of Node.js: v16.13.0\r\n",
            "author": {
                "login": "niels-bosman"
            },
            "state": "CLOSED",
            "createdAt": "2023-03-07T09:50:40Z",
            "closedAt": "2023-03-07T09:50:55Z",
            "url": "https://github.com/supabase/supabase-js/issues/723",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5Xhbrx",
                    "body": "@niels-bosman Did you figure this out? I have the same issue.",
                    "author": {
                        "login": "Rid"
                    },
                    "createdAt": "2023-03-14T16:02:16Z",
                    "url": "https://github.com/supabase/supabase-js/issues/723#issuecomment-1468381937"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5gP-B9",
            "number": 724,
            "title": "Signups not allowed for otp - Phone provider",
            "body": "Hey, I have a problem with a phone provider, I am using twillio as a phone provider and i do not want to create a user on `signInWithOtp`, and every time I trigger this method i got the same error.\r\n\r\nThis is the code I am running, phone is coming from the params of the method:\r\n\r\n```\r\nconst { data, error } = await supabase.auth.signInWithOtp({\r\n    phone,\r\n    options: {\r\n      shouldCreateUser: false,\r\n    },\r\n  });\r\n```\r\n\r\nDo i need to enable signups for otp?\r\n\r\nI am using supabase **\"@supabase/supabase-js\": \"^2.10.0\"**",
            "author": {
                "login": "kresogalic8"
            },
            "state": "CLOSED",
            "createdAt": "2023-03-08T07:44:36Z",
            "closedAt": "2023-08-24T23:24:41Z",
            "url": "https://github.com/supabase/supabase-js/issues/724",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5XckOe",
                    "body": "What's the error?",
                    "author": {
                        "login": "ZHRhodes"
                    },
                    "createdAt": "2023-03-13T23:14:30Z",
                    "url": "https://github.com/supabase/supabase-js/issues/724#issuecomment-1467106206"
                },
                {
                    "id": "IC_kwDOD79Crs5Xlkws",
                    "body": "Signups not allowed for otp",
                    "author": {
                        "login": "kresogalic8"
                    },
                    "createdAt": "2023-03-15T07:15:27Z",
                    "url": "https://github.com/supabase/supabase-js/issues/724#issuecomment-1469467692"
                },
                {
                    "id": "IC_kwDOD79Crs5cMziT",
                    "body": "This is actually intended behaviour. Since you've set shouldCreateUser to false, if the user doesn't exist yet and you're trying to call signInWithOtp, signInWithOtp will not create the user for you.\r\n\r\nThis means that the user will need to signup first and verify their phone number before calling signInWithOtp.",
                    "author": {
                        "login": "monicakh"
                    },
                    "createdAt": "2023-05-14T10:02:06Z",
                    "url": "https://github.com/supabase/supabase-js/issues/724#issuecomment-1546860691"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5ggIUo",
            "number": 725,
            "title": "Next.js Cache (beta)",
            "body": "# Improve documentation\r\n\r\n## Link \r\n\r\nhttps://supabase.com/docs/reference/javascript/select\r\n\r\n## Describe the problem\r\n\r\nSee the release notes here: https://nextjs.org/blog/next-13-2#nextjs-cache\r\n\r\nIt is not clear how to take advantage of this feature when fetching data with the supabase.js client.\r\n\r\n## Describe the improvement\r\n\r\nDescribe how to set the desired cache duration to enable ISR at the component level.\r\n\r\n## Additional context\r\n\r\nNone",
            "author": {
                "login": "yannxaver"
            },
            "state": "OPEN",
            "createdAt": "2023-03-10T14:05:36Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/725",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5eGr-j",
                    "body": "You can pass a custom fetch function into supabase and it works.\r\n\r\nFirst create a fetch factory function that takes next cache properties as parameters:\r\n\r\n```tsx\r\n// utils/cache.ts\r\n\r\nexport const createFetch =\r\n  (options: Pick<RequestInit, \"next\" | \"cache\">) =>\r\n  (url: RequestInfo | URL, init?: RequestInit) => {\r\n    return fetch(url, {\r\n      ...init,\r\n      ...options,\r\n    });\r\n  };\r\n\r\n```\r\n\r\nThen in your RSC:\r\n\r\n```tsx\r\nimport { createFetch } from \"@/utils/cache\";\r\n  \r\nconst supabase = createServerComponentClient({ cookies }, {\r\n    options: {\r\n      global: {\r\n        fetch: createFetch({\r\n          cache: \"no-store\"\r\n        })\r\n      }\r\n    }\r\n});\r\n```\r\n",
                    "author": {
                        "login": "sannajammeh"
                    },
                    "createdAt": "2023-06-06T13:52:20Z",
                    "url": "https://github.com/supabase/supabase-js/issues/725#issuecomment-1578811299"
                },
                {
                    "id": "IC_kwDOD79Crs5fUxux",
                    "body": "\"Good to know: cookies() is a [Dynamic Function](https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic-rendering#dynamic-functions) whose returned values cannot be known ahead of time. Using it in a layout or page will opt a route into [dynamic rendering](https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic-rendering#dynamic-rendering) at request time.\"\r\n\r\nAny way we get around this?\r\n\r\nEdit:  [This might be helpful](https://youtu.be/8Y6HAcf-5GM)",
                    "author": {
                        "login": "RyelBanfield"
                    },
                    "createdAt": "2023-06-20T18:15:37Z",
                    "url": "https://github.com/supabase/supabase-js/issues/725#issuecomment-1599282097"
                },
                {
                    "id": "IC_kwDOD79Crs5faztY",
                    "body": "> \"Good to know: cookies() is a [Dynamic Function](https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic-rendering#dynamic-functions) whose returned values cannot be known ahead of time. Using it in a layout or page will opt a route into [dynamic rendering](https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic-rendering#dynamic-rendering) at request time.\"\r\n> \r\n> Any way we get around this?\r\n> \r\n> Edit: [This might be helpful](https://youtu.be/8Y6HAcf-5GM)\r\n\r\nYes. Just use the regular supabase client. Create a wrapper like above using only Supabase `createClient` and service key. \r\n\r\nThe pre-requisite is that you don't use any auth on the server in that case as that requires the page to be SSR/dynamic rendered.",
                    "author": {
                        "login": "sannajammeh"
                    },
                    "createdAt": "2023-06-21T13:44:07Z",
                    "url": "https://github.com/supabase/supabase-js/issues/725#issuecomment-1600863064"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5gl7oF",
            "number": 726,
            "title": "Schema switching fails in supabase-js",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nI run Supabase in a self-hosted manner using Docker.\r\nI create a Supabase client using the supabase-js v2 lib and a custom postgres schema.\r\nWhen I try to fetch data from a table under that custom schema I get the following error:\r\n{\r\n  code: 'PGRST106',\r\n  details: null,\r\n  hint: null,\r\n  message: 'The schema must be one of the following: public, storage, graphql_public'\r\n}\r\n\r\nHowever, the schema is added to the environment via\r\nPGRST_DB_SCHEMAS=public,storage,graphql_public,custom_schema\r\nand fetching data via the API interface using curl works:\r\n\r\ncurl -X GET 'https://<mydomain>.de/rest/v1/patterns?select=*' -H \"Accept-Profile: custom_schema\" -H \"apikey: <anon_key>\" -H \"Authorization: Bearer <anon_key>\"\r\n[{\"id\":1,\"title\":\"Test\",\"published\":false,\"created_at\":\"2023-03-12T15:45:39.407648+00:00\",\"updated_at\":\"2023-03-12T15:45:39.407648+00:00\"}]\r\n\r\n## To Reproduce\r\n\r\nDatabase:\r\n-----------\r\nCREATE SCHEMA IF NOT EXISTS custom_schema;\r\n\r\ngrant usage on schema custom_schema to postgres, supabase_admin, anon, authenticated, service_role;\r\nalter default privileges in schema custom_schema grant all on tables to postgres, anon, authenticated, service_role;\r\nalter default privileges in schema custom_schema grant all on functions to postgres, anon, authenticated, service_role;\r\nalter default privileges in schema custom_schema grant all on sequences to postgres, anon, authenticated, service_role;\r\n\r\nCREATE TABLE IF NOT EXISTS custom_schema.patterns (\r\n  id bigint generated by default as identity primary key,\r\n  title text NOT NULL,\r\n  published boolean DEFAULT false,\r\n  created_at timestamptz DEFAULT now(),\r\n  updated_at timestamptz DEFAULT now()\r\n);\r\n\r\ncreate index on custom_schema.patterns using gin (tags);\r\n\r\ngrant select on table custom_schema.patterns to postgres, supabase_admin, anon, authenticated, service_role;\r\ngrant usage, select on all sequences in schema custom_schema to postgres, authenticated, service_role, supabase_admin, anon;\r\n\r\n+ manually added one test row to the database after creation via Supabase Studio\r\n\r\nClient:\r\n------\r\nimport { createClient } from '@supabase/supabase-js'\r\n\r\nconst supabase = createClient('https://<mydomain>.de', process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY, {db: { schema: 'custom_schema' }})\r\n\r\nexport default async function Page() {\r\n  const { data, error } = await supabase.from('patterns').select()\r\n  console.log(data)\r\n\r\n  return (\r\n    \\<div>Patterns\\</div>\r\n  )}\r\n\r\nDocker - supabase.env:\r\nPGRST_DB_SCHEMAS=public,storage,graphql_public,custom_schema\r\n\r\nI debugged/traced the error down to l. 84 in PostgrestBuilder.ts in @supabase/postgrest-js:\r\n          const body = await res.text()\r\n\r\nThe req header DOES contain the schema switch entry \"Accept-Profile: custom_schema\" and the setup seems ok to me, but the response is wrong!\r\n\r\n## Expected behavior\r\n\r\nI would expect the same output in the data object (-> also via console.log) as using curl on the CLI\r\n\r\n## System information\r\n\r\n- OS: Windows or Linux (tried both)\r\n- Browser Chrome, Edge\r\n- Version of supabase-js: 2.10.0\r\n- Version of Node.js: 18.13.0\r\n",
            "author": {
                "login": "rbrueckner"
            },
            "state": "OPEN",
            "createdAt": "2023-03-12T23:47:30Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/726",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5XV0EM",
                    "body": "Add-on:\r\nI just tried replacing \"custom_schema\" with \"public\" (after creating the respective table in the public schema and populating it with example data) and even there get the same error!\r\nAgain, things work correctly on the CLI.",
                    "author": {
                        "login": "rbrueckner"
                    },
                    "createdAt": "2023-03-13T00:00:18Z",
                    "url": "https://github.com/supabase/supabase-js/issues/726#issuecomment-1465336076"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5g-HDj",
            "number": 730,
            "title": "Fetching Failed and Give Invalid API Key",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\nI have rewrite my nextjs project to using latest version and install latest supabase-js. When i fetch all in my tables called \"posts\", it is work perfectly. but when i fetch one entry in posts that equal to \"slug\" `a`, sometimes is not working and response data message: invalid apikey please double check your anon or role blablabla... and error response is null. Then i tried another entries with different slug and thats work perfectly. Why that happen?\r\n\r\n## To Reproduce\r\n\r\nThis is my code \r\n![image](https://user-images.githubusercontent.com/48739090/225546699-6dae7eca-2948-4bf3-bc21-dc27cc228217.png)\r\n\r\n## Expected behavior\r\n\r\nI want it work with my code\r\n## Screenshots\r\n\r\nResponse screenshot\r\n![image](https://user-images.githubusercontent.com/48739090/225546952-5637c582-7f9f-4b7c-a115-56e149de2b22.png)\r\n\r\n## System information\r\n\r\n- OS: endeavouros - arch - linux\r\n- Browser edge\r\n- Version of supabase-js: 2.10.0\r\n- Version of Node.js: 19.7.0\r\n\r\n## Additional Context\r\n\r\nSorry for my bad english, i try so hard to explain the problem clearly. But result is not so good, i hope you understand that.",
            "author": {
                "login": "fiik346"
            },
            "state": "CLOSED",
            "createdAt": "2023-03-16T07:44:08Z",
            "closedAt": "2023-03-19T09:51:26Z",
            "url": "https://github.com/supabase/supabase-js/issues/730",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5X7YMX",
                    "body": "That's not bug, just cached on nextjs so problem solved when i delete `.next` directory",
                    "author": {
                        "login": "fiik346"
                    },
                    "createdAt": "2023-03-19T09:51:26Z",
                    "url": "https://github.com/supabase/supabase-js/issues/730#issuecomment-1475183383"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5hMcDx",
            "number": 732,
            "title": "Ability to add arguments to supabase custom fetch documented",
            "body": "# Improve documentation\r\n\r\nIt is possible to set a custom fetch that supabase client will use. But how are arguments passed to this custom fetch with the query builder api? \r\n\r\n## Link \r\n\r\nhttps://supabase.com/docs/reference/javascript/select \r\nHow to pass arguments to a custom fetch?\r\n\r\n## Describe the problem\r\n\r\nIt is unclear if it is possible or how to pass arguments to a custom `fetch`. Clippy did have some ideas; but these did not work when tried.\r\n\r\n## Describe the improvement\r\n\r\nShow an example of the query building api using custom fetch and additional arguments being past to it.\r\n\r\n## Additional context\r\n\r\nFor my specific use case - is it possible to use the nextjs 13 `fetch` and pass arguments to set per query caching instead of being limited to using segment level caching as shown in the documentation currently `export const revalidate = 60`.\r\n\r\nIt is unclear if it is possible or how to accomplish passing arguments to the specified custom fetch",
            "author": {
                "login": "mjsisley"
            },
            "state": "OPEN",
            "createdAt": "2023-03-18T22:38:33Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/732",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5ggCN4",
                    "body": "Its fully possible, see https://github.com/supabase/supabase-js/issues/725#issuecomment-1578811299",
                    "author": {
                        "login": "sannajammeh"
                    },
                    "createdAt": "2023-07-03T18:56:51Z",
                    "url": "https://github.com/supabase/supabase-js/issues/732#issuecomment-1619010424"
                },
                {
                    "id": "IC_kwDOD79Crs5qdBQT",
                    "body": "@sannajammeh I tried this a few days ago, and typescript threw all sorts of errors?\r\n",
                    "author": {
                        "login": "AarooneyFarr"
                    },
                    "createdAt": "2023-10-30T20:32:57Z",
                    "url": "https://github.com/supabase/supabase-js/issues/732#issuecomment-1785992211"
                },
                {
                    "id": "IC_kwDOD79Crs5qdl29",
                    "body": "> @sannajammeh I tried this a few days ago, and typescript threw all sorts of errors?\r\n\r\nMost likely you have conflicting environment types from the types that supabase expects from fetch. This is common in almost all frameworks where fetch is polyfilled with node-fetch or similar.\r\n\r\nI would simply place a `// @ts-expect-error` comment above the line as it's most likely a type conflict between global type of RequestInit and Supabase's internal type of RequestInit. Without seeing your error I won't know for sure though.",
                    "author": {
                        "login": "sannajammeh"
                    },
                    "createdAt": "2023-10-30T22:26:25Z",
                    "url": "https://github.com/supabase/supabase-js/issues/732#issuecomment-1786142141"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5hpQ4r",
            "number": 735,
            "title": "\"Unexpected end of JSON input\"",
            "body": "# Bug report\r\n\r\nGetting error \"Unexpected end of JSON input\" on calling Netlify graphql function endpoint. \r\n\r\n## Describe the bug\r\n\r\nWhen I perform updateUser or createUser, fetchData hook is called which call the function endpoint, data is perfectly stored in the supabase DB but the response returned is not in the correct way. I'm getting this error (res.json() response):\r\n\r\nObject {\r\n\u201cdata\u201d: null,\r\n\u201cerrors\u201d: Array [\r\nObject {\r\n\u201cextensions\u201d: Object {\r\n\u201ccode\u201d: \u201cINTERNAL_SERVER_ERROR\u201d,\r\n\u201cexception\u201d: Object {\r\n\u201cclientVersion\u201d: \u201c2.30.3\u201d,\r\n},\r\n},\r\n\u201clocations\u201d: Array [\r\nObject {\r\n\u201ccolumn\u201d: 3,\r\n\u201cline\u201d: 3,\r\n},\r\n],\r\n\u201cmessage\u201d: \u201cUnexpected end of JSON input\u201d,\r\n\u201cpath\u201d: Array [\r\n\u201cupdateUser\u201d,\r\n],\r\n},\r\n],\r\n}\r\n\r\nwhen I hit https://{myAppDomain}/.netlify/functions/{functionName}\r\n\r\n## Logs\r\n\r\n**Response when fetching Netlify's graphql function endpoint:**\r\n\r\n{\"type\":\"default\",\"status\":200,\"ok\":true,\"statusText\":\"\",\"headers\":{\"map\":{\"server\":\"Netlify\",\"content-type\":\"application/json\",\"strict-transport-security\":\"max-age=31536000\",\"age\":\"1\",\"content-length\":\"211\",\"date\":\"Tue, 21 Mar 2023 20:39:06 GMT\",\"x-nf-request-id\":\"01GW2YB6B7VJFSYQMG1ZAXK2XK\",\"cache-control\":\"no-cache\"}},\"url\":\"https://{myAppDomain}/.netlify/functions/{functionName}\",\"bodyUsed\":false,\"_bodyInit\":{\"_data\":{\"size\":211,\"offset\":0,\"blobId\":\"AB02031A-B64F-42ED-B523-153EBFB6D12C\",\"type\":\"application/json\",\"name\":\"graphql\",\"__collector\":{}}},\"_bodyBlob\":{\"_data\":{\"size\":211,\"offset\":0,\"blobId\":\"AB02031A-B64F-42ED-B523-153EBFB6D12C\",\"type\":\"application/json\",\"name\":\"graphql\",\"__collector\":{}}}}\r\n\r\n**JSON Object logged (res.json())**\r\n\r\njson Object {\r\n  \"data\": null,\r\n  \"errors\": Array [\r\n    Object {\r\n      \"extensions\": Object {\r\n        \"code\": \"INTERNAL_SERVER_ERROR\",\r\n        \"exception\": Object {\r\n          \"clientVersion\": \"2.30.3\",\r\n        },\r\n      },\r\n      \"locations\": Array [\r\n        Object {\r\n          \"column\": 3,\r\n          \"line\": 3,\r\n        },\r\n      ],\r\n      \"message\": \"Unexpected end of JSON input\",\r\n      \"path\": Array [\r\n        \"updateUser\",\r\n      ],\r\n    },\r\n  ],\r\n}\r\n\r\n## System information\r\n\r\n- OS: [e.g. macOS, Windows]\r\n- Browser (if applies) [e.g. chrome, safari]\r\n- Version of @supabase/gotrue-js: [1.18.0]\r\n- Version of @supabase/supabase-js: [1.25.1]\r\n- Version of Node.js: [16.17.0]\r\n\r\n## Additional context\r\n\r\nI'm using Netlify, Prisma, and Supabase but not getting exactly where this issue can be. Please help me to figure out this issue.\r\n\r\nThanks\r\n",
            "author": {
                "login": "mimranzulkfal"
            },
            "state": "OPEN",
            "createdAt": "2023-03-23T19:55:19Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/735",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs5h4PU_",
            "number": 737,
            "title": "HPE_INVALID_CONSTANT when running locally",
            "body": "# Bug report\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\n`HPE_INVALID_CONSTANT` error\r\n\r\n```\r\n{\"message\":\"FetchError: request to http://localhost:54321/rest/v1/memberships?select=*&limit=10 failed, reason: Parse Error: Expected HTTP/\",\"details\":\"\",\"hint\":\"\",\"code\":\"HPE_INVALID_CONSTANT\"}\r\n```\r\n\r\n## To Reproduce\r\n\r\n1. `supabase start`\r\n2. run: ```await supabase\r\n    .from(TABLES.MEMBERSHIPS)\r\n    .select()\r\n    .limit(10)```\r\n3. get this error: ```{\"message\":\"FetchError: request to http://localhost:54321/rest/v1/memberships?select=*&limit=10 failed, reason: Parse Error: Expected HTTP/\",\"details\":\"\",\"hint\":\"\",\"code\":\"HPE_INVALID_CONSTANT\"}```\r\n\r\n## Expected behavior\r\n\r\nThere should be no error.\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser (if applies) chrome\r\n- Version of supabase-js: 2.12.1\r\n- Version of Node.js: v16.15.1\r\n\r\n## Additional context\r\n\r\nIt was working the last time I was using this and nothing in my code base has changed. \r\n",
            "author": {
                "login": "72L"
            },
            "state": "CLOSED",
            "createdAt": "2023-03-27T13:57:22Z",
            "closedAt": "2023-04-06T06:08:31Z",
            "url": "https://github.com/supabase/supabase-js/issues/737",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5YhjbA",
                    "body": "I made the request with python and it works fine:\r\n```\r\nresp = requests.get(\r\n    'http://localhost:54321/rest/v1/memberships?select=*&limit=10', \r\n    headers={\r\n        'Authorization': 'Bearer <service_role key>',\r\n        'apikey': '<service_role key>'\r\n    }\r\n)\r\n```\r\n\r\n`resp.text` gives the json text as expected\r\n",
                    "author": {
                        "login": "72L"
                    },
                    "createdAt": "2023-03-27T14:16:56Z",
                    "url": "https://github.com/supabase/supabase-js/issues/737#issuecomment-1485190848"
                },
                {
                    "id": "IC_kwDOD79Crs5YhpHf",
                    "body": "was able to address it by upgrading node.js. However, I still have no idea why this was needed",
                    "author": {
                        "login": "72L"
                    },
                    "createdAt": "2023-03-27T14:26:43Z",
                    "url": "https://github.com/supabase/supabase-js/issues/737#issuecomment-1485214175"
                },
                {
                    "id": "IC_kwDOD79Crs5ZUewq",
                    "body": "This might've been a bug in either [node-fetch](https://github.com/node-fetch/node-fetch) or Node.js. I'm not able to reproduce this so I'll close this for now - feel free to create another issue if it reappears.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-04-06T06:08:31Z",
                    "url": "https://github.com/supabase/supabase-js/issues/737#issuecomment-1498541098"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5iQGhy",
            "number": 739,
            "title": "Deno support",
            "body": "# Chore\r\n\r\n## Describe the chore\r\n\r\n- Publish on deno.land/x\r\n- Docs on how to install on Deno\r\n\r\n## Additional context\r\n\r\nIt would be nice with \"official support\" for Deno!\r\n",
            "author": {
                "login": "Hexagon"
            },
            "state": "OPEN",
            "createdAt": "2023-03-30T22:05:53Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/739",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5ZEkI3",
                    "body": "We don't \"official support\" Deno, and at the moment I don't think we plan to \"official support\" Deno. But you can install supabase-js using [esm.sh](https://esm.sh). Here is the [Supabase documentation](https://supabase.com/docs/reference/javascript/installing#use-at-runtime-in-deno) on how to install supabase-js for Deno.",
                    "author": {
                        "login": "Isaiah-Hamilton"
                    },
                    "createdAt": "2023-04-03T13:56:40Z",
                    "url": "https://github.com/supabase/supabase-js/issues/739#issuecomment-1494368823"
                },
                {
                    "id": "IC_kwDOD79Crs5ZIKIB",
                    "body": "@Isaiah-Hamilton\r\n\r\nMaybe this should be opened as a separate issue, but I am encountering an error when using the `@supabase/auth-helpers-shared` package from `esm.sh`, but the issue comes from that package's own type imports from the `@supabase/supabase-js` package.\r\n\r\n```\r\nError: Module not found \"https://esm.sh/v113/@supabase/supabase-js@2.12.1/dist/module/lib/types/dist/module/index.d.ts\".\r\n```\r\n\r\nI can import the supabase-js package directly using that URL up to the version number, and using the auth helper package is working great locally, but this error is thrown when trying to bundle and deploy my function.  Is it possible the package is somehow incomplete in `esm.sh` (specifically the type declarations)?\r\n\r\nAuth Helper Package - `https://esm.sh/@supabase/auth-helpers-shared@0.3.0`\r\n\r\nEDIT:\r\n\r\nFor more context - I was able to get the deployment to work by using the auth helpers package from this CDN:\r\n`https://cdn.jsdelivr.net/npm/@supabase/auth-helpers-shared/+esm`\r\n\r\nThat CDN location doesn't provide any type information, though.",
                    "author": {
                        "login": "5hee75"
                    },
                    "createdAt": "2023-04-04T03:56:24Z",
                    "url": "https://github.com/supabase/supabase-js/issues/739#issuecomment-1495310849"
                },
                {
                    "id": "IC_kwDOD79Crs5ZYE29",
                    "body": "@5hee75 can you open a separate issue.",
                    "author": {
                        "login": "Isaiah-Hamilton"
                    },
                    "createdAt": "2023-04-06T18:53:05Z",
                    "url": "https://github.com/supabase/supabase-js/issues/739#issuecomment-1499483581"
                },
                {
                    "id": "IC_kwDOD79Crs5ZZz4a",
                    "body": "@Isaiah-Hamilton \r\n\r\nhttps://github.com/supabase/supabase-js/issues/744",
                    "author": {
                        "login": "5hee75"
                    },
                    "createdAt": "2023-04-07T05:03:22Z",
                    "url": "https://github.com/supabase/supabase-js/issues/739#issuecomment-1499938330"
                },
                {
                    "id": "IC_kwDOD79Crs5ZbWCt",
                    "body": "@Isaiah-Hamilton Why not? If you make a couple of small adjustments to the codebase this library would work in Deno (and Node, and Bun) with correct types ootb (without esm.sh), Deno could even be pointed directly at the unprocessed source code.Would be great imho!",
                    "author": {
                        "login": "Hexagon"
                    },
                    "createdAt": "2023-04-07T14:27:53Z",
                    "url": "https://github.com/supabase/supabase-js/issues/739#issuecomment-1500340397"
                },
                {
                    "id": "IC_kwDOD79Crs5aMmgE",
                    "body": "@Hexagon what are some of those adjustments that need to be made to make it work?  Might be worth putting a PR together, if it's not too crazy.",
                    "author": {
                        "login": "5hee75"
                    },
                    "createdAt": "2023-04-18T14:25:21Z",
                    "url": "https://github.com/supabase/supabase-js/issues/739#issuecomment-1513252868"
                },
                {
                    "id": "IC_kwDOD79Crs5aNIIJ",
                    "body": "Havn't looked at the codebase, but I'd lay it out like: make a fork, try to include it locally with deno, and adjust til it works :) Either run Deno agains the actual source (if possible), or make an esm build of it.",
                    "author": {
                        "login": "Hexagon"
                    },
                    "createdAt": "2023-04-18T15:45:02Z",
                    "url": "https://github.com/supabase/supabase-js/issues/739#issuecomment-1513390601"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5iQjZG",
            "number": 740,
            "title": "supabase-js doesn't re-export types correctly when using pnpm",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [X ] I confirm this is a bug with Supabase, not with my own application. \r\n- [X ] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nUsing `pnpm 7.29.1 ` and typescript `5.0.2` re-exported types don't resolve correctly from `@supabase/supabase-js`. See this screenshot\r\n\r\n![image](https://user-images.githubusercontent.com/858965/228993473-650107c6-cf46-4aaa-8665-acbe21a8c49e.png)\r\n\r\nReproduction here: https://github.com/evelant/supabase-pnpm-bug\r\n`pnpm install` then open `index.ts` with vscode to see the problem.  I'm not sure if this also happens with npm/yarn or if it's a resolution issue due to pnpm's stricter (more correct) package organization.\r\n\r\n## To Reproduce\r\n\r\n1. `pnpm add @supabase/supabase-js`\r\n2. add `import type { RealtimeChannel, RealtimePostgresChangesPayload } from \"@supabase/supabase-js\"` in any .ts file\r\n3. Observe `Module '\"@supabase/supabase-js\"' has no exported member 'RealtimeChannel'.`\r\n\r\n## Expected behavior\r\nIf supabase-js is going to re-export types from `@supabase/gotrue-js`, `@supabase/realtime-js`, and `@supabase/functions-js`  they should resolve correctly in all typescript versions with all major package managers (pnpm, npm, yarn, deno).\r\n\r\n\r\n## Screenshots\r\n![image](https://user-images.githubusercontent.com/858965/228993473-650107c6-cf46-4aaa-8665-acbe21a8c49e.png)\r\n\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser (if applies) N/A\r\n- Version of supabase-js: 2.13.1\r\n- Version of Node.js: 16.19.0\r\n- Version of typescript: 5.0.2\r\n- Version of pnpm: 7.29.1\r\n\r\n## Additional context\r\n\r\nI'm not exactly sure what's going wrong here. There are so many configurations and quirks with module resolution in typescript it's practically impossible to keep track of them all. I'm pretty sure other packages use a similar technique of bundling several sub-libraries together and re-exporting them like `supabase-js` does with the other `@supabase` packages so this is likely a small config issue. ",
            "author": {
                "login": "evelant"
            },
            "state": "OPEN",
            "createdAt": "2023-03-31T00:44:38Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/740",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5Y_fQh",
                    "body": "Also of note, if I manually install the other packages (`@supabase/realtime-js` `@supabase/functions-js` `@supabase/postgrest-js` etc of the same version as depended upon by supabase-js) then the types seem to clash. I understand the desire for simplicity by putting everything in one package, but it might be more usable to make those other packages peer dependencies so they can be installed and used without these re-exporting issues.",
                    "author": {
                        "login": "evelant"
                    },
                    "createdAt": "2023-04-01T16:25:58Z",
                    "url": "https://github.com/supabase/supabase-js/issues/740#issuecomment-1493038113"
                },
                {
                    "id": "IC_kwDOD79Crs5jW2-_",
                    "body": "Can confirm, same issue happens when using `npm`. Would love if the typescript integration was smoother! ",
                    "author": {
                        "login": "chelshaw"
                    },
                    "createdAt": "2023-08-06T18:15:11Z",
                    "url": "https://github.com/supabase/supabase-js/issues/740#issuecomment-1666936767"
                },
                {
                    "id": "IC_kwDOD79Crs5lKJBp",
                    "body": "Yep, I can also confirm that this issue does show up when I use `pnpm`.\r\n\r\n- OS: Linux (Fedora 38)\r\n- Version of supabase-js: 2.33.1\r\n- Version of pnpm: 8.6.12\r\n- Version of TypeScript: 5.0.4\r\n- Version of Node: v18.17.1\r\n",
                    "author": {
                        "login": "ironbyte"
                    },
                    "createdAt": "2023-08-29T10:15:38Z",
                    "url": "https://github.com/supabase/supabase-js/issues/740#issuecomment-1697157225"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5i2Kw-",
            "number": 744,
            "title": "[Deno] ESM.sh module not found - index.d.ts (types)",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nAttempting to import `@supabase/supabase-js` type definitions through `esm.sh`, when included as a secondary package, fails with the following error:\r\n\r\n```\r\nError: Module not found \"https://esm.sh/v113/@supabase/supabase-js@2.12.1/dist/module/lib/types/dist/module/index.d.ts\".\r\n```\r\n\r\n## To Reproduce\r\n\r\nThis specific issue was found when trying to include the `@supabase/auth-helpers-shared` package via `https://esm.sh/@supabase/auth-helpers-shared@0.3.0` in a Deno project (Edge Functions).\r\n\r\nThe following repo should be able to reproduce the error.\r\n\r\nhttps://github.com/astor-tech/supabase-edge-trpc\r\n\r\n_Note: Functionality seems ok when serving locally.  The only issue is the type imports, so just the `supabase functions deploy` fails._\r\n\r\n### Steps to reproduce\r\n1. Fork and clone the repo above\r\n2. Link to a Supabase project\r\n3. Run `supabase functions deploy`\r\n4. Note deployment error listed above\r\n\r\n## Expected behavior\r\n\r\nType definitions should be available for the `@supabase/supabase-js` SDK through the `esm.sh` module for Deno.\r\n\r\n`https://esm.sh/v113/@supabase/supabase-js@2.12.1/dist/module/lib/types/dist/module/index.d.ts`\r\n\r\n## Additional context\r\n\r\nI was able to get the deployment to work functionally by using the auth helpers package from this CDN:\r\n\r\n`https://cdn.jsdelivr.net/npm/@supabase/auth-helpers-shared/+esm`\r\n\r\nHowever, that CDN doesn't seem to provide any useful type info, so using it with tRPC (my use case) becomes somewhat limiting.\r\n\r\n(Split from https://github.com/supabase/supabase-js/issues/739)\r\n",
            "author": {
                "login": "5hee75"
            },
            "state": "OPEN",
            "createdAt": "2023-04-07T05:03:07Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/744",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5norP5",
                    "body": "@5hee75 Did you manage to resolve this? \r\nI have exactly the same problem with:\r\n\r\n```\r\nimport { serve } from \"https://deno.land/std@0.168.0/http/server.ts\"\r\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2?target=deno&no-check';\r\n```\r\n\r\nThe edge function works just fine, but I am not able to build my next app because of this.",
                    "author": {
                        "login": "nalnir"
                    },
                    "createdAt": "2023-09-28T08:36:47Z",
                    "url": "https://github.com/supabase/supabase-js/issues/744#issuecomment-1738716153"
                },
                {
                    "id": "IC_kwDOD79Crs5rkb9c",
                    "body": "@nalnir @5hee75 you can add supabase to the exclude section of `tsconfig.json`\r\n` \"exclude\": [\"node_modules\", \"supabase\"],`",
                    "author": {
                        "login": "gjohnsx"
                    },
                    "createdAt": "2023-11-09T21:30:08Z",
                    "url": "https://github.com/supabase/supabase-js/issues/744#issuecomment-1804713820"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5i4fDP",
            "number": 747,
            "title": "createServerSupabaseClient does not verify jwt token validity",
            "body": "```ts\r\nconst supabase = createServerSupabaseClient<Database>(context)\r\nconst {data: sessionRes} = await supabase.auth.getSession()\r\n```\r\nRight now this will return a valid session as long as the access_token is not expired and is issued by ANY supabase project. However there's no built in option to verify that the access_token actually being to the supabase project I specified when creating the serverSupabaseClient (e.g. `supabaseUrl`). This causes confusing permission issues later and is very unintuitive. ",
            "author": {
                "login": "tonyxiao"
            },
            "state": "OPEN",
            "createdAt": "2023-02-13T00:01:13Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/747",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5ZbsjU",
                    "body": "Hmm, we could probably append the project ref to the cookie name to scope the cookie to a project. That's what supabase-js is doing for localStorage: https://github.com/supabase/supabase-js/blob/master/src/SupabaseClient.ts#L104",
                    "author": {
                        "login": "thorwebdev"
                    },
                    "createdAt": "2023-02-13T04:45:09Z",
                    "url": "https://github.com/supabase/supabase-js/issues/747#issuecomment-1500432596"
                },
                {
                    "id": "IC_kwDOD79Crs5Zbsjd",
                    "body": "Yes, firebase also does something similar to scope it to firebase project id",
                    "author": {
                        "login": "tonyxiao"
                    },
                    "createdAt": "2023-02-13T07:34:56Z",
                    "url": "https://github.com/supabase/supabase-js/issues/747#issuecomment-1500432605"
                },
                {
                    "id": "IC_kwDOD79Crs5bbTwk",
                    "body": "Shouldn't we add the `iss` (issuer) tag to the JWT to begin with? =) ",
                    "author": {
                        "login": "Manouchehri"
                    },
                    "createdAt": "2023-05-03T23:41:13Z",
                    "url": "https://github.com/supabase/supabase-js/issues/747#issuecomment-1533885476"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5jGX3y",
            "number": 752,
            "title": " Supabase auth import server component on nextjs 13.3",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\n```\r\n./node_modules/.pnpm/next@13.3.0_biqbaboplfbrettd7655fr4n2y/node_modules/next/dist/compiled/@vercel/og/index.node.js:17950:0\r\nModule not found: Can't resolve 'fs'\r\n\r\nhttps://nextjs.org/docs/messages/module-not-found\r\n\r\nImport trace for requested module:\r\n./node_modules/.pnpm/next@13.3.0_biqbaboplfbrettd7655fr4n2y/node_modules/next/dist/server/web/spec-extension/image-response.js\r\n./node_modules/.pnpm/next@13.3.0_biqbaboplfbrettd7655fr4n2y/node_modules/next/server.js\r\n./node_modules/.pnpm/@supabase+auth-helpers-nextjs@0.5.9_azjgpjpfyzbcykafu5t4hngxtm/node_modules/@supabase/auth-helpers-nextjs/dist/index.js\r\n./src/lib/supabase-browser.js\r\n./src/components/AuthProvider.js\r\n\r\n``` \r\n\r\nThe supabase module import a server component inside the client component and it makes crash the application :/\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Go to [this repo](https://github.com/mryechkin/nextjs-supabase-auth/tree/main)\r\n2. Clone it\r\n3. run `pnpm i next@latest react@latest react-dom@latest eslint-config-next@latest supabase@latest` to get the latest version \r\n4. run `pnpm install` and `pnpm run dev` \r\n\r\n## Expected behavior\r\n\r\nJust working well\r\n\r\n\r\n## System information\r\n```bash\r\nOperating System:\r\n      Platform: darwin\r\n      Arch: arm64\r\n      Version: Darwin Kernel Version 22.4.0: Mon Mar  6 20:59:28 PST 2023; root:xnu-8796.101.5~3/RELEASE_ARM64_T6000\r\n    Binaries:\r\n      Node: 18.14.2\r\n      npm: 9.5.0\r\n      Yarn: 1.22.19\r\n      pnpm: 7.30.0\r\n    Relevant packages:\r\n      next: 13.3.1-canary.4\r\n      eslint-config-next: 13.3.0\r\n      react: 18.2.0\r\n      react-dom: 18.2.0\r\n```\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "victorbillaud"
            },
            "state": "CLOSED",
            "createdAt": "2023-04-11T14:26:53Z",
            "closedAt": "2023-04-12T10:56:55Z",
            "url": "https://github.com/supabase/supabase-js/issues/752",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5bzd2s",
                    "body": "was there a fix for this? currently trying to upgrade to next 13.4 and I'm running into the same issue, is it a version issue? \r\n",
                    "author": {
                        "login": "Mike92988"
                    },
                    "createdAt": "2023-05-09T14:17:17Z",
                    "url": "https://github.com/supabase/supabase-js/issues/752#issuecomment-1540218284"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5jfA9H",
            "number": 755,
            "title": "Image upload returns 500 with resumable uploads enabled",
            "body": "Our account was enabled for resumable uploads and we're now getting a 500 error when trying to upload images to Storage.\r\n\r\nError from logs\r\n```json\r\n\"rawError\": \"{\\\"_error\\\":{\\\"name\\\":\\\"KnexTimeoutError\\\"},\\\"name\\\":\\\"KnexTimeoutError\\\",\\\"message\\\":\\\"Knex: Timeout acquiring a connection. The pool is probably full. Are you missing a .transacting(trx) call?\\\",\\\"stack\\\":\\\"KnexTimeoutError: Knex: Timeout acquiring a connection. The pool is probably full. Are you missing a .transacting(trx) call?\\\\n    at Client_PG.acquireConnection (/app/node_modules/knex/lib/client.js:312:26)\\\\n    at runNextTicks (node:internal/process/task_queues:60:5)\\\\n    at listOnTimeout (node:internal/timers:538:9)\\\\n    at process.processTimers (node:internal/timers:512:7)\\\\n    at async Transaction_PG.acquireConnection (/app/node_modules/knex/lib/execution/transaction.js:250:28)\\\"}\",\r\n```\r\n\r\nThis happened after asking to be enabled in the resumable uploads beta but it appears as if theres a breaking change for existing uploads?\r\n\r\nWe're on Supabase 2.10.0 but have tried updating the JS client but still with no luck.\r\n",
            "author": {
                "login": "drewbietron"
            },
            "state": "CLOSED",
            "createdAt": "2023-04-15T00:26:22Z",
            "closedAt": "2023-04-15T00:28:13Z",
            "url": "https://github.com/supabase/supabase-js/issues/755",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5Z9_0m",
                    "body": "Posted in the main repo",
                    "author": {
                        "login": "drewbietron"
                    },
                    "createdAt": "2023-04-15T00:28:13Z",
                    "url": "https://github.com/supabase/supabase-js/issues/755#issuecomment-1509424422"
                },
                {
                    "id": "IC_kwDOD79Crs5tQz5i",
                    "body": "Wait how was this resolved?",
                    "author": {
                        "login": "RealmX1"
                    },
                    "createdAt": "2023-11-30T05:17:28Z",
                    "url": "https://github.com/supabase/supabase-js/issues/755#issuecomment-1833123426"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5jnp1u",
            "number": 757,
            "title": "Error when creating Supabase client in Expo app",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x ] I confirm this is a bug with Supabase, not with my own application. \r\n- [x ] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nI've got an Expo application and I'm following this guide in the Supabase docs to get a quickstart integration up and running: https://supabase.com/docs/guides/getting-started/tutorials/with-expo\r\n\r\nAfter running into some really unspecific error messages, I finally narrowed down the issue to the `createClient()` method in the Supabase JS SDK.\r\n\r\nHere's my code (an exact copy of the code given in the docs):\r\n\r\n**utils/supabase.tsx**\r\n\r\n```\r\nimport * as SecureStore from 'expo-secure-store';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport Constants from 'expo-constants';\r\nimport 'react-native-url-polyfill/auto';\r\n\r\nconst ExpoSecureStoreAdapter = {\r\n  getItem: (key: string) => {\r\n    return SecureStore.getItemAsync(key);\r\n  },\r\n  setItem: (key: string, value: string) => {\r\n    SecureStore.setItemAsync(key, value);\r\n  },\r\n  removeItem: (key: string) => {\r\n    SecureStore.deleteItemAsync(key);\r\n  },\r\n};\r\n\r\nconst supabaseUrl = Constants.expoConfig?.extra?.dbUrl;\r\nconst supabaseAnonKey = Constants.expoConfig?.extra?.dbPublicKey;\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\r\n  auth: {\r\n    storage: ExpoSecureStoreAdapter as any,\r\n    autoRefreshToken: true,\r\n    persistSession: true,\r\n    detectSessionInUrl: false,\r\n  },\r\n});\r\n```\r\n\r\nUnfortunately, this immediately throws errors:\r\n\r\n---\r\n ERROR  [TypeError: undefined is not a function]\r\n ERROR  Auto refresh tick failed with error. This is likely a transient error. [TypeError: undefined is not a function]\r\n---\r\n\r\nAfter some trial and error, I realized that if I comment the `auth.storage` value in the Supabase `createClient()` method, like so...\r\n\r\n```\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\r\n  auth: {\r\n    // storage: ExpoSecureStoreAdapter as any, // <-- no more error but no storage!\r\n    autoRefreshToken: true,\r\n    persistSession: true,\r\n    detectSessionInUrl: false,\r\n  },\r\n});\r\n```\r\n\r\nThe error no longer appears, which is great, but it leaves me without a working storage adapter.\r\n\r\n## To Reproduce\r\n\r\nAs I've copied the code from the docs exactly, I presume you have a repo for the Expo User Management starter app that you can experiment with to reproduce.\r\n\r\n## Expected behavior\r\n\r\nFollowing the docs exactly should not result in errors being thrown.\r\n\r\n## Screenshots\r\n\r\n--\r\n\r\n## System information\r\n\r\n- OS: Windows\r\n- Browser (if applies) n/a\r\n- Version of supabase-js: ^2.20.0\r\n- Version of Node.js: 18.15.0\r\n\r\n## Additional context\r\n\r\nTested in a development build of an expo app running on an Android Pixel 4 simulator (Android Studio VDM).\r\n",
            "author": {
                "login": "g-hamilton"
            },
            "state": "CLOSED",
            "createdAt": "2023-04-17T14:35:50Z",
            "closedAt": "2023-04-17T16:39:07Z",
            "url": "https://github.com/supabase/supabase-js/issues/757",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5aGvmg",
                    "body": "After investigating further, I realize now that this is not a Supabase issue. The issue was due to the fact that I did not rebuild my Expo development app after installing the expo-secure-store package. Closing :)",
                    "author": {
                        "login": "g-hamilton"
                    },
                    "createdAt": "2023-04-17T16:39:07Z",
                    "url": "https://github.com/supabase/supabase-js/issues/757#issuecomment-1511717280"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5jpnrF",
            "number": 758,
            "title": "Cryptic Error Message needs Clarification",
            "body": "# Improve documentation\r\n\r\n## Link \r\n\r\nNo link but the response from the API\r\n```\r\n{\r\n  error: {\r\n    message: 'FetchError: fetch failed',\r\n    details: '',\r\n    hint: '',\r\n    code: ''\r\n  },\r\n  data: null,\r\n  count: null,\r\n  status: 0,\r\n  statusText: ''\r\n}\r\n```\r\n\r\n## Describe the problem\r\n\r\nI was very confused by the nature of the error message because it gives no context to _why it failed_\r\n\r\n## Describe the improvement\r\n\r\nIt took me longer than I care to admit to finally go check my instance and it was **paused** \r\n![RyanReynoldsFacepalmGIF](https://user-images.githubusercontent.com/107003416/232592694-e59e0e42-3c41-4985-8d10-78fab690b709.gif)\r\n\r\n\r\n## Additional context\r\nOnce I clicked resume everything was back to normal. My only wish is that the error mention something about checking the status or even telling the user that it is failing because it is paused.",
            "author": {
                "login": "khill-fbmc"
            },
            "state": "CLOSED",
            "createdAt": "2023-04-17T19:40:09Z",
            "closedAt": "2023-04-18T13:52:53Z",
            "url": "https://github.com/supabase/supabase-js/issues/758",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5aMZkm",
                    "body": "Thanks @khill-fbmc! https://github.com/supabase/postgrest-js/pull/421 should help with this - you can upgrade the version of that dependency with `npm update @supabase/postgrest-js`.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-04-18T13:52:53Z",
                    "url": "https://github.com/supabase/supabase-js/issues/758#issuecomment-1513199910"
                },
                {
                    "id": "IC_kwDOD79Crs5aSmAV",
                    "body": "Will doing that update it inside of `@supabase/supabase-js` ? I see that [here](https://github.com/supabase/postgrest-js/pull/421#issuecomment-1512542406) the fix is in `1.5.1`....\r\n\r\nBut then in the `v2.21.0` tag for  `@supabase/supabase-js` I see that the [dependency is `^1.1.1`](https://github.com/supabase/supabase-js/blob/v2.21.0/package.json#L42)",
                    "author": {
                        "login": "khill-fbmc"
                    },
                    "createdAt": "2023-04-19T14:20:56Z",
                    "url": "https://github.com/supabase/supabase-js/issues/758#issuecomment-1514823701"
                },
                {
                    "id": "IC_kwDOD79Crs5aWAbC",
                    "body": "Yup, `1.5.1` satisfies `^1.1.1`",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-04-20T05:03:59Z",
                    "url": "https://github.com/supabase/supabase-js/issues/758#issuecomment-1515718338"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5kk6ZB",
            "number": 765,
            "title": "Many to many join not working (copied straight from docs)",
            "body": "# Bug report\r\n\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\nThis does not work:\r\n![image](https://user-images.githubusercontent.com/48984220/234962361-67ac5d57-d9cb-48e8-a9e4-767fdd964f58.png)\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Copy paste code from the example into SQL editor on app.supabase.com\r\n2. Make a user, a team, and a member through Supabase UI\r\n3. Copy paste the code into a JS or TS file:\r\n```\r\nsupabase.from(\"teams\").select(\r\n    `\r\n  id, \r\n  team_name, \r\n  users ( id, name )\r\n`\r\n  )\r\n  .then(({ data, error }) => {\r\n    console.log(\"data\", data, \"\\nerror:\", error);\r\n  });\r\n  ```\r\n4. See error: `error: {\r\n  code: 'PGRST200',\r\n  details: \"Searched for a foreign key relationship between 'teams' and 'users' in the schema 'public', but no matches were found.\",\r\n  hint: \"Perhaps you meant 'members' instead of 'users'.\",\r\n  message: \"Could not find a relationship between 'teams' and 'users' in the schema cache\"\r\n}`\r\n\r\n## Expected behavior\r\n\r\nReturning at least something.\r\n\r\n## Screenshots\r\n\r\n![image](https://user-images.githubusercontent.com/48984220/234964298-e169d8ba-b78b-4928-86b9-f5220d2780ec.png)\r\n\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Version of supabase-js: \"^2.10.0\",\r\n",
            "author": {
                "login": "dejoma"
            },
            "state": "CLOSED",
            "createdAt": "2023-04-27T18:57:55Z",
            "closedAt": "2023-04-27T19:47:40Z",
            "url": "https://github.com/supabase/supabase-js/issues/765",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs5k1qUm",
            "number": 767,
            "title": "Storing part of a query in a variable and reusing it causes unexpected behaviors",
            "body": "# Bug report\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nStoring part of a query in a variable is a common pattern in Firebase development. Right now because our client library is not immutable, when you try to do this with Supabase client library, some of the information is kept in the original instance causing unexpected behaviors. \r\n\r\n```typescript\r\nconst restaurantsTable = supabase.from('restaurants')\r\n\r\nconst { data: restaurant } = await restaurantsTable.select().eq('id', id).single()\r\nconst { data: restaurants } = await restaurantsTable.select() // the query here will contain the `eq` and `single` statement from the previous line\r\n```\r\n\r\n## Expected behavior\r\n\r\nStoring part of a query in a variable and running multiple queries using it should return the proper data. \r\n\r\n## Additional context\r\n\r\nMaybe this is something to keep in mind when doing the next major release. \r\n",
            "author": {
                "login": "dshukertjr"
            },
            "state": "OPEN",
            "createdAt": "2023-05-02T05:11:33Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/767",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs5lR1Ul",
            "number": 769,
            "title": "supabaseUrl is required",
            "body": "supabase.ts file:\r\n``` ts\r\nimport { createClient } from \"@supabase/supabase-js\";\r\n\r\nconst supabaseUrl = import.meta.env.VUE_APP_SUPABASE_URL;\r\nconst supabaseKey = import.meta.env.VUE_APP_SUPABASE_KEY;\r\n\r\nexport const supabase = createClient(\r\n  supabaseUrl as string,\r\n  supabaseKey as string\r\n);\r\n```\r\n\r\nError message:\r\n```\r\nUncaught Error: supabaseUrl is required.\r\n    SupabaseClient SupabaseClient.ts:88\r\n    createClient index.ts:38\r\n    <anonymous> supabase.ts:6\r\nSupabaseClient.ts:88:28\r\n```\r\n\r\nIt's saying supabaseUrl is required for somereason. The issue is probably about .env file but im not sure. Please help.\r\n\r\n",
            "author": {
                "login": "KonyD"
            },
            "state": "CLOSED",
            "createdAt": "2023-05-07T18:06:53Z",
            "closedAt": "2023-05-12T05:51:35Z",
            "url": "https://github.com/supabase/supabase-js/issues/769",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5brKKL",
                    "body": "The env is probably not getting supplied - can you try printing `supabaseUrl` before calling `createClient()`?",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-05-08T09:18:30Z",
                    "url": "https://github.com/supabase/supabase-js/issues/769#issuecomment-1538040459"
                },
                {
                    "id": "IC_kwDOD79Crs5cCeEr",
                    "body": "Check your `VUE_APP_SUPABASE_URL` variable, if you're using Vite the Env variable should be named as `VITE_APP_SUPABASE_URL` and your `.env` file would have something like this:\r\n`VITE_APP_SUPABASE_URL=https://url.supabase.co`\r\n\r\nor if you want to have a specific file for your enviroment, the file should be named `.env.development` and your `npm run dev` command must have the `--mode development` flag.",
                    "author": {
                        "login": "FabianMontoya"
                    },
                    "createdAt": "2023-05-11T14:59:55Z",
                    "url": "https://github.com/supabase/supabase-js/issues/769#issuecomment-1544151339"
                },
                {
                    "id": "IC_kwDOD79Crs5cGe6i",
                    "body": "Thanks @FabianMontoya! Closing this, but if `supabaseUrl` is defined and the issue persists, feel free to create a new issue.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-05-12T05:51:34Z",
                    "url": "https://github.com/supabase/supabase-js/issues/769#issuecomment-1545203362"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5lfZMu",
            "number": 771,
            "title": "Can't build sveltekit app with supabase.js using docker",
            "body": "## Describe the bug\r\n\r\nI have a simple sveltekit application with supabase.js. I use the client library listen to som e realtime data.\r\n\r\nThis is my Dockerfile:\r\nFROM node:alpine\r\n\r\nRUN apk update && apk add python3\r\nRUN apk add py3-pip\r\n\r\nCOPY ./app/package.json .\r\nCOPY ./app/package-lock.json .\r\nWORKDIR .\r\nRUN npm install\r\n\r\nCOPY ./app/ ./\r\n\r\nWORKDIR .\r\nRUN npm run build\r\nENV BODY_SIZE_LIMIT 0\r\nENV PORT 80\r\nEXPOSE 80\r\nCMD [\"node\", \"build\"]\r\n\r\nI get this error from github actions:\r\n#10 [ 6/10] RUN npm install\r\n#10 13.83 npm notice \r\n#10 13.83 npm notice New patch version of npm available! 9.6.4 -> 9.6.6\r\n#10 13.83 npm notice Changelog: <https://github.com/npm/cli/releases/tag/v9.6.6>\r\n#10 13.83 npm notice Run `npm install -g npm@9.6.6` to update!\r\n#10 13.83 npm notice \r\n#10 13.84 npm ERR! code 1\r\n#10 13.84 npm ERR! path /node_modules/utf-8-validate\r\n#10 13.85 npm ERR! command failed\r\n#10 13.85 npm ERR! command sh -c node-gyp-build\r\n#10 13.85 npm ERR! gyp info it worked if it ends with ok\r\n#10 13.85 npm ERR! gyp info using node-gyp@9.3.1\r\n#10 13.85 npm ERR! gyp info using node@20.1.0 | linux | arm64\r\n#10 13.85 npm ERR! gyp info find Python using Python version 3.10.11 found at \"/usr/bin/python3\"\r\n#10 13.85 npm ERR! gyp http GET https://nodejs.org/download/release/v20.1.0/node-v20.1.0-headers.tar.gz\r\n#10 13.85 npm ERR! gyp http 200 https://nodejs.org/download/release/v20.1.0/node-v20.1.0-headers.tar.gz\r\n#10 13.85 npm ERR! gyp http GET https://nodejs.org/download/release/v20.1.0/SHASUMS256.txt\r\n#10 13.85 npm ERR! gyp http 200 https://nodejs.org/download/release/v20.1.0/SHASUMS256.txt\r\n#10 13.85 npm ERR! gyp info spawn /usr/bin/python3\r\n#10 13.85 npm ERR! gyp info spawn args [\r\n#10 13.85 npm ERR! gyp info spawn args   '/usr/local/lib/node_modules/npm/node_modules/node-gyp/gyp/gyp_main.py',\r\n#10 13.85 npm ERR! gyp info spawn args   'binding.gyp',\r\n#10 13.85 npm ERR! gyp info spawn args   '-f',\r\n#10 13.85 npm ERR! gyp info spawn args   'make',\r\n#10 13.85 npm ERR! gyp info spawn args   '-I',\r\n#10 13.85 npm ERR! gyp info spawn args   '/node_modules/utf-8-validate/build/config.gypi',\r\n#10 13.85 npm ERR! gyp info spawn args   '-I',\r\n#10 13.85 npm ERR! gyp info spawn args   '/usr/local/lib/node_modules/npm/node_modules/node-gyp/addon.gypi',\r\n#10 13.85 npm ERR! gyp info spawn args   '-I',\r\n#10 13.85 npm ERR! gyp info spawn args   '/root/.cache/node-gyp/20.1.0/include/node/common.gypi',\r\n#10 13.85 npm ERR! gyp info spawn args   '-Dlibrary=shared_library',\r\n#10 13.85 npm ERR! gyp info spawn args   '-Dvisibility=default',\r\n#10 13.85 npm ERR! gyp info spawn args   '-Dnode_root_dir=/root/.cache/node-gyp/20.1.0',\r\n#10 13.85 npm ERR! gyp info spawn args   '-Dnode_gyp_dir=/usr/local/lib/node_modules/npm/node_modules/node-gyp',\r\n#10 13.85 npm ERR! gyp info spawn args   '-Dnode_lib_file=/root/.cache/node-gyp/20.1.0/<(target_arch)/node.lib',\r\n#10 13.85 npm ERR! gyp info spawn args   '-Dmodule_root_dir=/node_modules/utf-8-validate',\r\n#10 13.85 npm ERR! gyp info spawn args   '-Dnode_engine=v8',\r\n#10 13.85 npm ERR! gyp info spawn args   '--depth=.',\r\n#10 13.85 npm ERR! gyp info spawn args   '--no-parallel',\r\n#10 13.85 npm ERR! gyp info spawn args   '--generator-output',\r\n#10 13.85 npm ERR! gyp info spawn args   'build',\r\n#10 13.85 npm ERR! gyp info spawn args   '-Goutput_dir=.'\r\n#10 13.85 npm ERR! gyp info spawn args ]\r\n#10 13.85 npm ERR! gyp ERR! build error \r\n#10 13.85 npm ERR! gyp ERR! stack Error: not found: make\r\n#10 13.85 npm ERR! gyp ERR! stack     at getNotFoundError (/usr/local/lib/node_modules/npm/node_modules/node-gyp/node_modules/which/which.js:10:17)\r\n#10 13.85 npm ERR! gyp ERR! stack     at /usr/local/lib/node_modules/npm/node_modules/node-gyp/node_modules/which/which.js:57:18\r\n#10 13.85 npm ERR! gyp ERR! stack     at new Promise (<anonymous>)\r\n#10 13.85 npm ERR! gyp ERR! stack     at step (/usr/local/lib/node_modules/npm/node_modules/node-gyp/node_modules/which/which.js:54:21)\r\n#10 13.85 npm ERR! gyp ERR! stack     at /usr/local/lib/node_modules/npm/node_modules/node-gyp/node_modules/which/which.js:71:22\r\n#10 13.85 npm ERR! gyp ERR! stack     at new Promise (<anonymous>)\r\n#10 13.85 npm ERR! gyp ERR! stack     at subStep (/usr/local/lib/node_modules/npm/node_modules/node-gyp/node_modules/which/which.js:69:33)\r\n#10 13.85 npm ERR! gyp ERR! stack     at /usr/local/lib/node_modules/npm/node_modules/node-gyp/node_modules/which/which.js:80:22\r\n#10 13.85 npm ERR! gyp ERR! stack     at /usr/local/lib/node_modules/npm/node_modules/isexe/index.js:42:5\r\n#10 13.85 npm ERR! gyp ERR! stack     at /usr/local/lib/node_modules/npm/node_modules/isexe/mode.js:8:5\r\n#10 13.85 npm ERR! gyp ERR! System Linux 5.15.0-1034-oracle\r\n#10 13.85 npm ERR! gyp ERR! command \"/usr/local/bin/node\" \"/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js\" \"rebuild\"\r\n#10 13.85 npm ERR! gyp ERR! cwd /node_modules/utf-8-validate\r\n#10 13.85 npm ERR! gyp ERR! node -v v20.1.0\r\n#10 13.85 npm ERR! gyp ERR! node-gyp -v v9.3.1\r\n#10 13.85 npm ERR! gyp ERR! not ok\r\n#10 13.86 \r\n#10 13.86 npm ERR! A complete log of this run can be found in: /root/.npm/_logs/2023-05-09T20_[35](https://github.com/lazarcloud/john-sensors/actions/runs/4930249067/jobs/8810917746#step:3:36)_50_916Z-debug-0.log\r\n#10 ERROR: process \"/bin/sh -c npm install\" did not complete successfully: exit code: 1\r\n------\r\n > [ 6/10] RUN npm install:\r\n#10 13.85 npm ERR! gyp ERR! stack     at /usr/local/lib/node_modules/npm/node_modules/isexe/index.js:[42](https://github.com/lazarcloud/john-sensors/actions/runs/4930249067/jobs/8810917746#step:3:43):5\r\n#10 13.85 npm ERR! gyp ERR! stack     at /usr/local/lib/node_modules/npm/node_modules/isexe/mode.js:8:5\r\n#10 13.85 npm ERR! gyp ERR! System Linux 5.15.0-1034-oracle\r\n#10 13.85 npm ERR! gyp ERR! command \"/usr/local/bin/node\" \"/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js\" \"rebuild\"\r\n#10 13.85 npm ERR! gyp ERR! cwd /node_modules/utf-8-validate\r\n#10 13.85 npm ERR! gyp ERR! node -v v20.1.0\r\n#10 13.85 npm ERR! gyp ERR! node-gyp -v v9.3.1\r\n#10 13.85 npm ERR! gyp ERR! not ok\r\n#10 13.86 \r\n#10 13.86 npm ERR! A complete log of this run can be found in: /root/.npm/_logs/2023-05-09T20_35_[50](https://github.com/lazarcloud/john-sensors/actions/runs/4930249067/jobs/8810917746#step:3:51)_[91](https://github.com/lazarcloud/john-sensors/actions/runs/4930249067/jobs/8810917746#step:3:92)6Z-debug-0.log\r\n------\r\nDockerfile:9\r\n--------------------\r\n   7 |     COPY ./app/package-lock.json .\r\n   8 |     WORKDIR .\r\n   9 | >>> RUN npm install\r\n  10 |     \r\n  11 |     \r\n--------------------\r\nERROR: failed to solve: process \"/bin/sh -c npm install\" did not complete successfully: exit code: 1\r\nError: Process completed with exit code 1.\r\n\r\n\r\nI have also installed python because supabase-realtime is dependent on it.\r\n## To Reproduce\r\n\r\nSimply start a new sveltekit application and use the Dockerfile to build it.\r\nNote that this bug applies only to the github worker, it succesfully compiles on my local machine. I believe there might be another dependency for supabase.js besides python.\r\n\r\n## Expected behavior\r\n\r\nTo succesfully build the image.\r\n\r\n## System information\r\n\r\n- OS: ubuntu arm64\r\n- Version of supabase-js: [e.g. 6.0.2]\r\n- Version of Node.js: [e.g. 10.10.0]\r\n",
            "author": {
                "login": "MonsieurLazar"
            },
            "state": "CLOSED",
            "createdAt": "2023-05-09T20:42:49Z",
            "closedAt": "2023-05-10T05:57:47Z",
            "url": "https://github.com/supabase/supabase-js/issues/771",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5b39Ld",
                    "body": "apparently you had to also install gcc\r\n\r\nRUN apk add build-base",
                    "author": {
                        "login": "MonsieurLazar"
                    },
                    "createdAt": "2023-05-10T05:57:44Z",
                    "url": "https://github.com/supabase/supabase-js/issues/771#issuecomment-1541395165"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5nAwar",
            "number": 779,
            "title": "Types are erased if not immediately `await`ing or using `.then`",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nI've noticed that if you don't immediately use `await` on query (or `.then()`, then all the types get erased for that query. \r\n\r\n## To Reproduce\r\n\r\n1. Create a query such as `client.from('table').select('*')` and await it\r\n2. Notice the response type has the correct typings\r\n3. Modify the query to not await, but store the query in a variable\r\n4. Await the stored variable, notice the response type is gone\r\n\r\nFor example:\r\n\r\nWorks:\r\n```ts\r\nconst result = await client.from('table').select('*')\r\n```\r\n\r\nBreaks:\r\n```ts\r\nconst query = client.from('table').select('*')\r\nconst result = await client\r\n```\r\n\r\n## Expected behavior\r\n\r\nI would expect that the query builder holds onto the type data and further query refinements also contain the type data.\r\n\r\n## Additional context\r\n\r\nThe use case here is conditional queries. For example:\r\n\r\n\r\n```ts\r\nconst query = client.from('table').select('*')\r\n\r\nif(filterByType) query = query.eq('type', typeFilter)\r\n\r\nconst result = await client\r\n```",
            "author": {
                "login": "LordZardeck"
            },
            "state": "CLOSED",
            "createdAt": "2023-05-26T21:12:24Z",
            "closedAt": "2023-05-26T21:32:40Z",
            "url": "https://github.com/supabase/supabase-js/issues/779",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5dR7wn",
                    "body": "So I think typescript was just getting confused for some reason. After a while, (no changes to the original code), types suddenly started coming through. Probably after restarting the typescript service.",
                    "author": {
                        "login": "LordZardeck"
                    },
                    "createdAt": "2023-05-26T21:32:40Z",
                    "url": "https://github.com/supabase/supabase-js/issues/779#issuecomment-1564982311"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5nKl-B",
            "number": 782,
            "title": "Ignore (wrong repo)",
            "body": "Ignore",
            "author": {
                "login": "bombillazo"
            },
            "state": "CLOSED",
            "createdAt": "2023-05-29T14:08:35Z",
            "closedAt": "2023-05-29T14:36:36Z",
            "url": "https://github.com/supabase/supabase-js/issues/782",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs5nP7k8",
            "number": 783,
            "title": "Auth.verifyOtp removes the session",
            "body": "## Describe the bug\r\n\r\nOTP verification removes the session and logs out the user. I want authenticated users to be able to update their emails. Is there any workaround to this issue?\r\n\r\n```\r\nconst { error } = await supabase.auth.verifyOtp({\r\n              email,\r\n              token: code,\r\n              type: 'email_change',\r\n            })\r\n            \r\n            ...\r\n            \r\nasync verifyOtp(params: VerifyOtpParams): Promise<AuthResponse> {\r\n    try {\r\n      await this._removeSession()\r\n      ...\r\n```\r\n\r\n## Expected behavior\r\n\r\n`verifyOtp` shouldn't automatically renew the session\r\n",
            "author": {
                "login": "ruskid"
            },
            "state": "CLOSED",
            "createdAt": "2023-05-30T13:04:15Z",
            "closedAt": "2023-05-31T15:31:57Z",
            "url": "https://github.com/supabase/supabase-js/issues/783",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5dm0ge",
                    "body": "This is fixed now!\r\n\r\nhttps://github.com/supabase/gotrue-js/pull/698",
                    "author": {
                        "login": "ruskid"
                    },
                    "createdAt": "2023-05-31T15:31:57Z",
                    "url": "https://github.com/supabase/supabase-js/issues/783#issuecomment-1570457630"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5n5b-E",
            "number": 785,
            "title": "You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file.",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nA clear and concise description of what the bug is.\r\n\r\n![image](https://github.com/supabase/supabase-js/assets/32301380/0a2e765b-fed4-4e60-9176-8b65bf94e0aa)\r\n\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Go to '\u2026'\r\n2. Click on '\u2026'\r\n3. Scroll down to '\u2026'\r\n4. See error\r\n\r\n```\r\ngh repo clone donghoon-song/meeting-room-reservation-app\r\ngit checkout report/add-supabase\r\nyarn install\r\nyarn dev\r\n```\r\n\r\nor just use supabase-js client in any ts project.\r\nI have experienced this issue across my ts projects.\r\n\r\nhttps://github.com/donghoon-song/meeting-room-reservation-app/tree/report/supabase-issue\r\n\r\n## Expected behavior\r\n\r\nA clear and concise description of what you expected to happen.\r\n\r\nNo error expected.\r\n\r\n## Screenshots\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n## System information\r\n\r\n- OS: [macOS]\r\n- Browser (if applies) [chrome]\r\n- Version of supabase-js: [2.24.0]\r\n- Version of Node.js: [e.g. 18.16.0]\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "donghoon-song"
            },
            "state": "OPEN",
            "createdAt": "2023-06-06T05:26:57Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/785",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs5n8a7N",
            "number": 786,
            "title": "window is not defined error when creating supabase client in nodejs server side",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x ] I confirm this is a bug with Supabase, not with my own application. \r\n- [ ] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nI try to create client in nodejs but always get window is not defined error as attached below. Then when i try to debug the source code through stack trace, it turned on that isBrowser() return a True value. But when i manually set it to false, it will work. \r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. create a fastify\u200b project \r\n2. import and createClient(host, key, {db: {schema: abc}\u200b}\r\n3. run the server with node index.js\r\n4. Got error as attached\r\n\r\n## Screenshots\r\n\r\nThis is the error \r\n![IMG_20230606_170256_892](https://github.com/supabase/supabase-js/assets/22863199/eba5b528-861a-4f96-8d54-ab3cf77c5de8)\r\n\r\nThen i debug and got True value when printing isBrowser() which it should be False. I manually change code here then it works. \r\n\r\n![IMG_20230606_170300_006](https://github.com/supabase/supabase-js/assets/22863199/38c4a30b-7615-4aba-b670-577a3d9deda2)\r\n\r\n\r\n## System information\r\n\r\n- OS: macOS monetary\r\n- Version of supabase-js: 2.24.0, I also tried with some older version in Supabase 2. It's the same. \r\n- Version of Node.js: 14\r\n",
            "author": {
                "login": "Vichet97"
            },
            "state": "OPEN",
            "createdAt": "2023-06-06T13:36:23Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/786",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5eJ2Dm",
                    "body": "I commented on a Discord post for this same thing. Maybe it was yours.\n\nIn Discord I made the comment that this checks `document` now, not `window`. But I made the mistake of thinking it was gotrue-js code. I just looked in supabase-js and they have the same helper function, but still use `window`.\n\nThis likely can be changed to match gotrue-js code, but I'll let the experts decide that.",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2023-06-07T00:19:51Z",
                    "url": "https://github.com/supabase/supabase-js/issues/786#issuecomment-1579639014"
                },
                {
                    "id": "IC_kwDOD79Crs5eJ30U",
                    "body": "Yes, that's mine. But posting here will be more visible to other people who have the same issue. So when will it be fixed ? Else can you show me where to change this, i can make a temporary fork ",
                    "author": {
                        "login": "Vichet97"
                    },
                    "createdAt": "2023-06-07T00:23:43Z",
                    "url": "https://github.com/supabase/supabase-js/issues/786#issuecomment-1579646228"
                },
                {
                    "id": "IC_kwDOD79Crs5eJ43Q",
                    "body": "I'm not sure when or even if it'll be fixed because the maintainers need to decide if it's something that *should* be fixed.\n\nCode is https://github.com/supabase/supabase-js/blob/master/src/lib/helpers.ts#L16",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2023-06-07T00:30:38Z",
                    "url": "https://github.com/supabase/supabase-js/issues/786#issuecomment-1579650512"
                },
                {
                    "id": "IC_kwDOD79Crs5eKbCr",
                    "body": "Why is there a question whether it should be fixed when it just doesn't work and not usable? ",
                    "author": {
                        "login": "Vichet97"
                    },
                    "createdAt": "2023-06-07T02:55:32Z",
                    "url": "https://github.com/supabase/supabase-js/issues/786#issuecomment-1579790507"
                },
                {
                    "id": "IC_kwDOD79Crs5eNOUX",
                    "body": "I've been unable to replicate this issue. I've tried in the same version of Node you are using (which is no longer supported by Node themselves btw) and I still didn't get any error. The code I'm using is below.\r\n\r\n```js\r\nconst { createClient } = require(\"@supabase/supabase-js\");\r\n\r\nconst fastify = require(\"fastify\")({ logger: true });\r\n\r\nconst supabase = createClient(\r\n  \"http://localhost:54321\",  \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6ImFub24iLCJleHAiOjE5ODM4MTI5OTZ9.CRXP1A7WOeoJeXxjNni43kdQwgnWNReilDMblYTn_I0\",\r\n  { db: { schema: \"abc\" } }\r\n);\r\n\r\nfastify.get(\"/\", async (request, reply) => {\r\n  const { data } = await supabase.from(\"countries\").select(\"*\");\r\n  return { hello: \"world\", countries: data };\r\n});\r\n\r\n// Run the server!\r\nconst start = async () => {\r\n  try {\r\n    await fastify.listen({ port: 3000 });\r\n  } catch (err) {\r\n    fastify.log.error(err);\r\n    process.exit(1);\r\n  }\r\n};\r\n\r\nstart();\r\n```",
                    "author": {
                        "login": "silentworks"
                    },
                    "createdAt": "2023-06-07T10:57:32Z",
                    "url": "https://github.com/supabase/supabase-js/issues/786#issuecomment-1580524823"
                },
                {
                    "id": "IC_kwDOD79Crs5eNayf",
                    "body": "During my nice insomnia overnight, I went back to the screenshot and realized this *is* referencing gotrue-js code, not supabase-js.",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2023-06-07T11:20:10Z",
                    "url": "https://github.com/supabase/supabase-js/issues/786#issuecomment-1580575903"
                },
                {
                    "id": "IC_kwDOD79Crs5eNsQi",
                    "body": "@j4w8n but the issue mentions the latest `@supabase/supabase-js` which is what I tested and this also makes use of the gotrue code underneath. Were you able to replicate this by any chance?",
                    "author": {
                        "login": "silentworks"
                    },
                    "createdAt": "2023-06-07T11:53:26Z",
                    "url": "https://github.com/supabase/supabase-js/issues/786#issuecomment-1580647458"
                },
                {
                    "id": "IC_kwDOD79Crs5eNs9p",
                    "body": "> @j4w8n but the issue mentions the latest `@supabase/supabase-js` which is what I tested and this also makes use of the gotrue code underneath. Were you able to replicate this by any chance?\n\nI haven't had a chance to try it yet. Might in a few hours.",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2023-06-07T11:54:47Z",
                    "url": "https://github.com/supabase/supabase-js/issues/786#issuecomment-1580650345"
                },
                {
                    "id": "IC_kwDOD79Crs5eO4Vw",
                    "body": "It's from gotrue-js. But I also have many other dependencies installed like firestore, etc. Or maybe the document variable is just used for other purposes but not in my code. It might have made the document != undefined since gotrue only check that variable to identify browser. It's not the right way to check. But surely, that document is not the document in browser. ",
                    "author": {
                        "login": "Vichet97"
                    },
                    "createdAt": "2023-06-07T14:36:13Z",
                    "url": "https://github.com/supabase/supabase-js/issues/786#issuecomment-1580959088"
                },
                {
                    "id": "IC_kwDOD79Crs5ePHBt",
                    "body": "Please provide a minimal reproducible repository for us to test as we aren't able to replicate the issue you are having here. Also you should be testing this as a standalone project and not a mix with other libraries to be sure where the issue is from. Please upgrade your Node version too as 14 is no longer supported and has gone pass its EOL.",
                    "author": {
                        "login": "silentworks"
                    },
                    "createdAt": "2023-06-07T15:07:05Z",
                    "url": "https://github.com/supabase/supabase-js/issues/786#issuecomment-1581019245"
                },
                {
                    "id": "IC_kwDOD79Crs5eSQj9",
                    "body": "I found the issue. It will show error if you declare `const a = { document } = { document: true }\u200b` in another js file then `require('other.js')\u200b` in the same js file where you call that Supabase `createClient`.\r\n\r\nHowever, it doesn't have any problem if you just declare `const a = { document } = { document: true }\u200b` in the same file ",
                    "author": {
                        "login": "Vichet97"
                    },
                    "createdAt": "2023-06-08T03:45:19Z",
                    "url": "https://github.com/supabase/supabase-js/issues/786#issuecomment-1581844733"
                },
                {
                    "id": "IC_kwDOD79Crs5eUMS_",
                    "body": "> I found the issue. It will show error if you declare `const a = { document } = { document: true }\u200b` in another js file then `require('other.js')\u200b` in the same js file where you call that Supabase `createClient`.\r\n> \r\n> However, it doesn't have any problem if you just declare `const a = { document } = { document: true }\u200b` in the same file\r\n\r\n@Vichet97 out of curiosity, what's your use case for this?",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2023-06-08T10:41:52Z",
                    "url": "https://github.com/supabase/supabase-js/issues/786#issuecomment-1582351551"
                },
                {
                    "id": "IC_kwDOD79Crs5eUvzT",
                    "body": "It's a property in Firestore and MassiveJS. So I declared some default properties with default values to setup structure in my project. It was not a plain property with only document field. There are other fields as well but it was just an example ",
                    "author": {
                        "login": "Vichet97"
                    },
                    "createdAt": "2023-06-08T12:30:16Z",
                    "url": "https://github.com/supabase/supabase-js/issues/786#issuecomment-1582496979"
                },
                {
                    "id": "IC_kwDOD79Crs5eUwh3",
                    "body": "Anyway, that `isBrowser` function is not significant to detect whether it's a browser. ",
                    "author": {
                        "login": "Vichet97"
                    },
                    "createdAt": "2023-06-08T12:32:42Z",
                    "url": "https://github.com/supabase/supabase-js/issues/786#issuecomment-1582499959"
                },
                {
                    "id": "IC_kwDOD79Crs5eU4KA",
                    "body": "What do you think would work better?",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2023-06-08T12:55:28Z",
                    "url": "https://github.com/supabase/supabase-js/issues/786#issuecomment-1582531200"
                },
                {
                    "id": "IC_kwDOD79Crs5eVBtn",
                    "body": "Can check `typeof window ==  \"object\" ` then verify some of its default properties ?",
                    "author": {
                        "login": "Vichet97"
                    },
                    "createdAt": "2023-06-08T13:20:08Z",
                    "url": "https://github.com/supabase/supabase-js/issues/786#issuecomment-1582570343"
                },
                {
                    "id": "IC_kwDOD79Crs5eVlsv",
                    "body": "There were issues with `window`, because it exists in React Native and was causing problems; so they changed it to `document`.\r\n\r\nAt this point I'm wondering if what happened to you is more of an edge case (I haven't seen/heard of any other tickets with a similar scenario), but maybe something like this? There's a precedent for similar code in the gotrue-js repo [here](https://github.com/supabase/gotrue-js/blob/master/src/GoTrueClient.ts#L1500)\r\n```diff\r\n-export const isBrowser = () => typeof document !== 'undefined'\r\n+export const isBrowser = () => typeof document !== 'undefined' && document.addEventListener\r\n```",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2023-06-08T14:40:21Z",
                    "url": "https://github.com/supabase/supabase-js/issues/786#issuecomment-1582717743"
                },
                {
                    "id": "IC_kwDOD79Crs5eVypd",
                    "body": "Well, can use `document` but should do the same as i mentioned above like `window` ",
                    "author": {
                        "login": "Vichet97"
                    },
                    "createdAt": "2023-06-08T15:07:54Z",
                    "url": "https://github.com/supabase/supabase-js/issues/786#issuecomment-1582770781"
                },
                {
                    "id": "IC_kwDOD79Crs5oLLOF",
                    "body": "I am also experiencing this issue. I am trying to use supabase inside an [airplane task](https://docs.airplane.dev/tasks/js) and I am getting this error:\r\n<img width=\"934\" alt=\"Screenshot 2023-10-04 at 16 53 44\" src=\"https://github.com/supabase/supabase-js/assets/25437031/f0cf6fc7-f3fd-4fe7-9328-2ccfc95e4cbd\">\r\n\r\nThis is the code that I have:\r\n```ts\r\nimport { createClient } from \"@supabase/supabase-js\";\r\nimport airplane from \"airplane\";\r\n\r\nexport default airplane.task(\r\n  {\r\n    slug: \"list_users\",\r\n    name: \"list_users\",\r\n  },\r\n  async () => {\r\n    const supabase = createClient(\r\n      \"redacted url\",\r\n      \"redacted service key\",\r\n      {\r\n        auth: {\r\n          autoRefreshToken: false,\r\n          persistSession: false,\r\n        },\r\n      },\r\n    );\r\n\r\n    const { data } = await supabase.auth.admin.listUsers();\r\n    return data.users;\r\n  },\r\n);\r\n```\r\n",
                    "author": {
                        "login": "DanielSepulveda"
                    },
                    "createdAt": "2023-10-04T22:58:00Z",
                    "url": "https://github.com/supabase/supabase-js/issues/786#issuecomment-1747760005"
                },
                {
                    "id": "IC_kwDOD79Crs5omb1B",
                    "body": "@DanielSepulveda Experiencing a similar issue with an Airplane.dev task and wondering if it's how the process loads - it's interesting that the `!isBrowser()` doesn't short circuit ahead of the actual `window` check",
                    "author": {
                        "login": "schybo"
                    },
                    "createdAt": "2023-10-10T10:21:33Z",
                    "url": "https://github.com/supabase/supabase-js/issues/786#issuecomment-1754905921"
                },
                {
                    "id": "IC_kwDOD79Crs5ptrWk",
                    "body": "Also having this issue in react-native with the latest version of expo, following the [user management expo supabase tutorial](https://supabase.com/docs/guides/getting-started/tutorials/with-expo-react-native)",
                    "author": {
                        "login": "julian-hecker"
                    },
                    "createdAt": "2023-10-21T01:15:03Z",
                    "url": "https://github.com/supabase/supabase-js/issues/786#issuecomment-1773581732"
                },
                {
                    "id": "IC_kwDOD79Crs5q1ol9",
                    "body": "Hey, I'm having a similar issue I think. \r\nI'm using expo with supabase and instantiate the client like so:\r\n```ts\r\nexport const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey, {\r\n  auth: {\r\n    storage: AsyncStorage,\r\n    autoRefreshToken: true,\r\n    persistSession: true,\r\n    detectSessionInUrl: false,\r\n  },\r\n});\r\n```\r\n\r\nOn iOS and Android that works fine but on web I get the following error:\r\n```\r\nReferenceError: window is not defined\r\n    at http://localhost:8081/node_modules/expo-router/node/render.bundle//&platform=web&dev=true&minify=false&resolver.environment=node&transform.environment=node:192612:9\r\n    at http://localhost:8081/node_modules/expo-router/node/render.bundle//&platform=web&dev=true&minify=false&resolver.environment=node&transform.environment=node:192586:21\r\n    at new Promise (<anonymous>)\r\n    at createPromise (http://localhost:8081/node_modules/expo-router/node/render.bundle//&platform=web&dev=true&minify=false&resolver.environment=node&transform.environment=node:192584:12)\r\n    at Object.getItem (http://localhost:8081/node_modules/expo-router/node/render.bundle//&platform=web&dev=true&minify=false&resolver.environment=node&transform.environment=node:192611:14)\r\n    at http://localhost:8081/node_modules/expo-router/node/render.bundle//&platform=web&dev=true&minify=false&resolver.environment=node&transform.environment=node:42084:33\r\n    at Generator.next (<anonymous>)\r\n    at asyncGeneratorStep (http://localhost:8081/node_modules/expo-router/node/render.bundle//&platform=web&dev=true&minify=false&resolver.environment=node&transform.environment=node:1462:26)\r\n    at _next (http://localhost:8081/node_modules/expo-router/node/render.bundle//&platform=web&dev=true&minify=false&resolver.environment=node&transform.environment=node:1481:11)\r\n    at http://localhost:8081/node_modules/expo-router/node/render.bundle//&platform=web&dev=true&minify=false&resolver.environment=node&transform.environment=node:1486:9\r\n```\r\nIn react native community async storage they even have added web as a feature which looks like it would solve my issue: https://github.com/react-native-async-storage/async-storage/releases/tag/v1.9.0\r\n    \r\nBut react native community async storage is deprecated so Im wondering whether this is expected to not work in the current async storage.\r\nIm a beginner with expo and supabase and all that stuff so I would appreciate some input :)",
                    "author": {
                        "login": "clemwo"
                    },
                    "createdAt": "2023-11-03T13:33:16Z",
                    "url": "https://github.com/supabase/supabase-js/issues/786#issuecomment-1792444797"
                },
                {
                    "id": "IC_kwDOD79Crs5q2k_u",
                    "body": "I found a solution which should probably also work for the issue @julian-hecker is describing. \r\nI got help from a colleague and we found out that the issue is caused by `localStorage` being undefined during bundling with metro.\r\n\r\nA workaround is to write a custom class that implements getItem, setItem & removeItem that simply returns null if localStorage is undefined (and returns AsyncStorage on mobile)\r\n\r\n```ts\r\nclass SupabaseStorage {\r\n  async getItem(key: string) {\r\n    if (Platform.OS === \"web\") {\r\n      if (typeof localStorage === \"undefined\") {\r\n        return null;\r\n      }\r\n      return localStorage.getItem(key);\r\n    }\r\n    return AsyncStorage.getItem(key);\r\n  }\r\n  async removeItem(key: string) {\r\n    if (Platform.OS === \"web\") {\r\n      return localStorage.removeItem(key);\r\n    }\r\n    return AsyncStorage.removeItem(key);\r\n  }\r\n  async setItem(key: string, value: string) {\r\n    if (Platform.OS === \"web\") {\r\n      return localStorage.setItem(key, value);\r\n    }\r\n    return AsyncStorage.setItem(key, value);\r\n  }\r\n}\r\n\r\nexport const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey, {\r\n  auth: {\r\n    storage: new SupabaseStorage(),\r\n    autoRefreshToken: true,\r\n    persistSession: true,\r\n    detectSessionInUrl: false,\r\n  },\r\n});\r\n```\r\n\r\nWe found a related issue here: https://github.com/expo/expo/issues/23895\r\nAnd the fix in this commit https://github.com/expo/expo/commit/1277abdd1ecb21aa43b22a48282439c97b1c1798\r\n\r\nNote: we haven't tested this for a long time but I just wanted to share this quick fix in case it helps",
                    "author": {
                        "login": "clemwo"
                    },
                    "createdAt": "2023-11-03T15:53:19Z",
                    "url": "https://github.com/supabase/supabase-js/issues/786#issuecomment-1792692206"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5n8lpr",
            "number": 787,
            "title": "No storage option exists... warning spammed in Next 13.",
            "body": "When using `@supabase/auth-helpers-nextjs` it is very redundant to always have to disable `persistSession` every time I create a new supabase client. Following your docs will produce this stream of warnings as new clients are created.\r\n\r\nPlease limit this warning to only happen once (as the helpers create a singleton this should not be very difficult). In development it should really only fire a single time when the project boots (first supabase client is created), subsequent creations shouldn't fire this warning at all. \r\n\r\nThis right here is not pleasant to work with:\r\n\r\n```bash\r\nNo storage option exists to persist the session, which may result in unexpected behavior when using auth.\r\n        If you want to set persistSession to true, please provide a storage option or you may set persistSession to false to disable this warning.\r\nNo storage option exists to persist the session, which may result in unexpected behavior when using auth.\r\n        If you want to set persistSession to true, please provide a storage option or you may set persistSession to false to disable this warning.\r\nNo storage option exists to persist the session, which may result in unexpected behavior when using auth.\r\n        If you want to set persistSession to true, please provide a storage option or you may set persistSession to false to disable this warning.\r\n- wait compiling...\r\n- event compiled client and server successfully in 1930 ms (1751 modules)\r\nNo storage option exists to persist the session, which may result in unexpected behavior when using auth.\r\n        If you want to set persistSession to true, please provide a storage option or you may set persistSession to false to disable this warning.\r\nNo storage option exists to persist the session, which may result in unexpected behavior when using auth.\r\n        If you want to set persistSession to true, please provide a storage option or you may set persistSession to false to disable this warning.\r\nNo storage option exists to persist the session, which may result in unexpected behavior when using auth.\r\n        If you want to set persistSession to true, please provide a storage option or you may set persistSession to false to disable this warning.\r\nNo storage option exists to persist the session, which may result in unexpected behavior when using auth.\r\n        If you want to set persistSession to true, please provide a storage option or you may set persistSession to false to disable this warning.\r\n```",
            "author": {
                "login": "sannajammeh"
            },
            "state": "CLOSED",
            "createdAt": "2023-06-06T13:58:34Z",
            "closedAt": "2023-06-16T17:49:57Z",
            "url": "https://github.com/supabase/supabase-js/issues/787",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5eJ0Vo",
                    "body": "Can you clarify what you mean by \"very redundant\"? Are you saying that you have a bunch of projects you're creating, and you always have to set this option? Or something else?\n\nThis warning is meant to indicate that your current setup could cause negative side effects in your app and ought to be changed. Do you have a use case where this isn't true? Many devs have spent hours troubleshooting issues, only to find out they simply needed to set `persistSession` to `false` - so this is trying to alleviate that.\n\nDoes this warning usually happen with the server clients in your apps?\n\nI'd imagine it would be difficult to run this check once for the whole codebase because there can be a few different clients - client, middleware, server. And we won't know the whole situation until each client is initialized.",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2023-06-07T00:12:01Z",
                    "url": "https://github.com/supabase/supabase-js/issues/787#issuecomment-1579631976"
                },
                {
                    "id": "IC_kwDOD79Crs5eSDNd",
                    "body": "> Can you clarify what you mean by \"very redundant\"? Are you saying that you have a bunch of projects you're creating, and you always have to set this option? Or something else?\n> \n> This warning is meant to indicate that your current setup could cause negative side effects in your app and ought to be changed. Do you have a use case where this isn't true? Many devs have spent hours troubleshooting issues, only to find out they simply needed to set `persistSession` to `false` - so this is trying to alleviate that.\n> \n> Does this warning usually happen with the server clients in your apps?\n> \n> I'd imagine it would be difficult to run this check once for the whole codebase because there can be a few different clients - client, middleware, server. And we won't know the whole situation until each client is initialized.\n\nTo clarify, your docs state to instantiate the RSC client inside of an RSC. Meaning if I have 5 components fetching data, all those 5 needs that extra option of `persistSession` or the warnings won't go away.\n\nYou are correct, doing this project wise will result in side effects. My suggestion is to warn it once per singleton. So middelware shows once, then RSC instantiates as a singleton and shows again, subsequent instantiates will not show it. \n\nThe local solution for me is another factory function around your factory functions that sets it as default, this would solve it but makes the code a bit less extensible.\n\nI suggest an update to the docs here: https://supabase.com/docs/guides/getting-started/tutorials/with-nextjs So each code snippet actually includes persistSession. \n\nThis could be seen as a bug or a docs issue depending on what you guys think is best.",
                    "author": {
                        "login": "sannajammeh"
                    },
                    "createdAt": "2023-06-08T02:18:53Z",
                    "url": "https://github.com/supabase/supabase-js/issues/787#issuecomment-1581790045"
                },
                {
                    "id": "IC_kwDOD79Crs5eSE5S",
                    "body": "Or even better (though I guess this requires a bit of discussion), default to false on server. If that isn't already the case though. \n\nI can't think of any edge cases where you'd actually want to persist to a fake local storage in NodeJS or Edge runtimes. If you do, that's an edge case and can be opted into by flipping the flag again.",
                    "author": {
                        "login": "sannajammeh"
                    },
                    "createdAt": "2023-06-08T02:30:46Z",
                    "url": "https://github.com/supabase/supabase-js/issues/787#issuecomment-1581796946"
                },
                {
                    "id": "IC_kwDOD79Crs5eULS5",
                    "body": "Thanks for your feedback.\r\n\r\nSo what's interesting here is that the auth helpers use a common `createSupabaseClient()` which does have `storage` set, and `persistSession` is `true`. So I'm not sure why you're seeing these warnings. Unless, in addition to using the auth helper clients, you're creating your own one-off native clients for certain things.\r\n\r\nCan you share a minimum repo that has the issue?",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2023-06-08T10:38:13Z",
                    "url": "https://github.com/supabase/supabase-js/issues/787#issuecomment-1582347449"
                },
                {
                    "id": "IC_kwDOD79Crs5emIj8",
                    "body": "i got same problem on nuxt3 project when update new version.\r\nand today i also use supabase edge functions with simple example.\r\n\r\n```\r\nimport { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm'\r\n\r\nexport const supabase = createClient(\r\n  Deno.env.get('SUPABASE_URL') ?? '',\r\n  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''\r\n)\r\n```\r\n\r\n![Screenshot 2023-06-12 at 17 32 45](https://github.com/supabase/supabase-js/assets/2610894/147000d6-1a70-4105-b06b-67210bbb14ca)\r\n\r\nAnd the problem still same.\r\n",
                    "author": {
                        "login": "tidusvn05"
                    },
                    "createdAt": "2023-06-12T10:32:58Z",
                    "url": "https://github.com/supabase/supabase-js/issues/787#issuecomment-1587054844"
                },
                {
                    "id": "IC_kwDOD79Crs5eoqx8",
                    "body": "@tidusvn05 thanks for the feedback.\n\nFor the native client in the edge function, you can pass the `persistSession` auth option of `false`.",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2023-06-12T17:01:16Z",
                    "url": "https://github.com/supabase/supabase-js/issues/787#issuecomment-1587719292"
                },
                {
                    "id": "IC_kwDOD79Crs5fElyl",
                    "body": "Managed to resolve the issue. Closing.",
                    "author": {
                        "login": "sannajammeh"
                    },
                    "createdAt": "2023-06-16T17:49:54Z",
                    "url": "https://github.com/supabase/supabase-js/issues/787#issuecomment-1595038885"
                },
                {
                    "id": "IC_kwDOD79Crs5iv_6X",
                    "body": "@sannajammeh what resolution did you use?",
                    "author": {
                        "login": "tomelliot"
                    },
                    "createdAt": "2023-07-29T15:05:57Z",
                    "url": "https://github.com/supabase/supabase-js/issues/787#issuecomment-1656749719"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5oATP-",
            "number": 788,
            "title": "Expose custom scheme",
            "body": "How to expose custom scheme without using UI. I am creating custom scheme using rpc. But how do I expose it to  api?\r\n\r\nthis doesn't work\r\nimport { createClient } from \"https://cdn.skypack.dev/@supabase/supabase-js\"\r\nconst schemaName = \"custom\"\r\nconst supabaseClient = createClient(\r\nDeno.env.get('SUPABASE_URL')!,\r\nDeno.env.get('SUPABASE_ANON_KEY')!, {\r\ndb: { schema: schemaName }}\r\n)",
            "author": {
                "login": "Sangeeth-versos"
            },
            "state": "CLOSED",
            "createdAt": "2023-06-07T02:15:07Z",
            "closedAt": "2023-09-05T08:58:43Z",
            "url": "https://github.com/supabase/supabase-js/issues/788",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5esbrt",
                    "body": "Have you added the schema to \"Exposed schemas\" in https://app.supabase.com/project/_/settings/api?\r\n\r\nIf you want to change that programmatically, you can also use [this endpoint](http://api.supabase.com/api/v1#/services/updatePostgRESTConfig) and update `db_schema` (it's a comma-separated string)",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-06-13T07:27:46Z",
                    "url": "https://github.com/supabase/supabase-js/issues/788#issuecomment-1588706029"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5oj2V3",
            "number": 791,
            "title": "ci: add `paths-ignore` to ci GHA",
            "body": "# Chore\r\n\r\n## Describe the chore\r\n \r\nRunning tests when making changes to .md files or maybe .ignore files can be a bit unnecessary so I guess adding something like below would be good:\r\n\r\n```yaml\r\non:\r\n  push:\r\n    branches:\r\n      - master\r\n      - next\r\n      - rc\r\n    paths-ignore:\r\n      - *.md\r\n      - .gitignore\r\n```\r\n\r\nI would like to work on it if it's approved :)\r\n",
            "author": {
                "login": "Ananya2001-an"
            },
            "state": "CLOSED",
            "createdAt": "2023-06-13T07:30:37Z",
            "closedAt": "2023-06-14T03:26:49Z",
            "url": "https://github.com/supabase/supabase-js/issues/791",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5esvyo",
                    "body": "This'd be nice, go for it @Ananya2001-an!",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-06-13T08:19:43Z",
                    "url": "https://github.com/supabase/supabase-js/issues/791#issuecomment-1588788392"
                },
                {
                    "id": "IC_kwDOD79Crs5esweP",
                    "body": "Cool thanks @soedirgo ",
                    "author": {
                        "login": "Ananya2001-an"
                    },
                    "createdAt": "2023-06-13T08:21:14Z",
                    "url": "https://github.com/supabase/supabase-js/issues/791#issuecomment-1588791183"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5omm1U",
            "number": 794,
            "title": "chore: restructure `test` folder",
            "body": "## Describe the chore\r\n\r\nIt would be good to have all the expected results (basically the constants created in each test file) defined in a separate file maybe something like: `test/utils/constants.ts` for better readability and maintainability. Actually we can do further more restructuring with the test folder; like right now we have a `helper.test.ts` and a `helpers.test.ts` file where both are testing the functions defined in lib/helpers.ts so why not do something like this:\r\n\r\n> \r\n\r\n    .\r\n    \u251c\u2500\u2500 test         \r\n    \u2502   \u251c\u2500\u2500 utils \r\n    \u2502           \u251c\u2500\u2500 constants.ts      \r\n    \u2502   \u251c\u2500\u2500supabase        \r\n    \u2502          \u2514\u2500\u2500 helpers.test.ts\r\n    \u2502          \u2514\u2500\u2500 client.test.ts\r\n    \u2502          \u2514\u2500\u2500 ....\r\n    \u2514\u2500\u2500 ...\r\n\r\n>\r\n\r\nAlso the `constants.test.ts` file is just checking the type of the DEFAULT_HEADERS object which seems unnecessary so instead we can add a static type check like this:\r\n\r\n```ts\r\nexport const DEFAULT_HEADERS: {[key: string]: string} = {\r\n  'X-Client-Info': `supabase-js/${version}`,\r\n};\r\n```\r\nFeel free to suggest anything you feel can be done to further improve this :)\r\n\r\n",
            "author": {
                "login": "Ananya2001-an"
            },
            "state": "OPEN",
            "createdAt": "2023-06-13T13:53:10Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/794",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs5pEv_f",
            "number": 795,
            "title": "Strings Upserted Into An Encrypted Text Column Cannot Be Decrypted",
            "body": "# Bug report\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nWhen a string is inserted into an encrypted column via the API, the decrypted copy of that column does not display the original value.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n```\r\n  const { team, user, bot } = installation;\r\n  const customerId = cusId;\r\n  const customerData = {\r\n    id: customerId,\r\n    ref: team.name,\r\n    bot_token: bot.token,\r\n    installed_by_user: user.id,\r\n    installed_by_team: team.id,\r\n  };\r\n  const conflictField = 'id';\r\n\r\n  await upsertData('customers', customerData, conflictField, supabase);\r\n\r\nasync function upsertData(table, data, conflictField, supabase) {\r\n  const { data: result, error } = await supabase\r\n    .from(table)\r\n    .upsert(data, { onConflict: conflictField });\r\n\r\n  if (error) {\r\n    throw new Error('Error upserting data: ', error);\r\n  } else {\r\n    return result;\r\n  }\r\n}\r\n```\r\n\r\n## Expected behavior\r\n\r\nThe content that was originally inserted into the encrypted column will be returned when the column is decrypted.\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Version of supabase-js: 2.24.0\r\n- Version of Node.js: 18.16\r\n\r\n## Note\r\n\r\nI first asked about this on Discord [here](https://discord.com/channels/839993398554656828/1120234698258530325).\r\n",
            "author": {
                "login": "AlexIsMaking"
            },
            "state": "CLOSED",
            "createdAt": "2023-06-19T06:39:07Z",
            "closedAt": "2023-09-02T18:24:03Z",
            "url": "https://github.com/supabase/supabase-js/issues/795",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5fLiQ6",
                    "body": "Just tried inserting the data by calling [Postgres function](https://supabase.com/docs/reference/javascript/rpc) but the outcome was the same.",
                    "author": {
                        "login": "AlexIsMaking"
                    },
                    "createdAt": "2023-06-19T09:44:10Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1596859450"
                },
                {
                    "id": "IC_kwDOD79Crs5g4Ts_",
                    "body": "I am seeing the same issue. It looks like strings are being encrypted twice when using supabase-js.\r\n```\r\n@supabase/supabase-js version 2.26.0\r\n```",
                    "author": {
                        "login": "72L"
                    },
                    "createdAt": "2023-07-07T12:53:19Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1625373503"
                },
                {
                    "id": "IC_kwDOD79Crs5g4Vj3",
                    "body": "It looks like `update` works, but upsert does not work. Might need to upsert first and then update.",
                    "author": {
                        "login": "72L"
                    },
                    "createdAt": "2023-07-07T12:59:30Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1625381111"
                },
                {
                    "id": "IC_kwDOD79Crs5g8ILc",
                    "body": "@AlexIsMaking @72L Can you share how you create your tables? Is this using [TCE](https://supabase.com/blog/transparent-column-encryption-with-postgres)?",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-07-08T00:03:48Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1626374876"
                },
                {
                    "id": "IC_kwDOD79Crs5g-FuJ",
                    "body": "@steve-chavez yes it's using TCE, I've created the table and columns from the dashboard.",
                    "author": {
                        "login": "AlexIsMaking"
                    },
                    "createdAt": "2023-07-08T06:51:01Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1626889097"
                },
                {
                    "id": "IC_kwDOD79Crs5g-Ha0",
                    "body": "> It looks like update works, but upsert does not work.\r\n\r\n@72L just tested this and it looks like you might be right.\r\n\r\nI'll update the title a little bit later, I'm just going to wait and see if the behaviour changes because I noticed that inserting and then updating data using upsert works when the row is new but stops working X hours later.\r\n\r\n> Might need to upsert first and then update.\r\n\r\nAppreciate this suggestion too. Do you know of a way to do this without making 2 API requests by any chance?",
                    "author": {
                        "login": "AlexIsMaking"
                    },
                    "createdAt": "2023-07-08T07:30:37Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1626896052"
                },
                {
                    "id": "IC_kwDOD79Crs5g-sQ8",
                    "body": "@72L just checked and looks like you were right about upserting being the issue - I was able to update my encrypted text column and retrieve the decrypted content as expected, several hours after the row was first created.",
                    "author": {
                        "login": "AlexIsMaking"
                    },
                    "createdAt": "2023-07-08T10:09:32Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1627046972"
                },
                {
                    "id": "IC_kwDOD79Crs5g_eCP",
                    "body": "> Do you know of a way to do this without making 2 API requests by any chance?\r\n\r\nNo, I'm making two api requests now ha\r\n\r\n@steve-chavez same here, I used the dashboard to create a new column on an existing table with TCE",
                    "author": {
                        "login": "72L"
                    },
                    "createdAt": "2023-07-08T13:01:40Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1627250831"
                },
                {
                    "id": "IC_kwDOD79Crs5hAK4t",
                    "body": "@michelp Any idea to what could be wrong here? PostgREST basically generates an `INSERT .. ON CONFLICT` for `upsert`.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-07-08T17:28:10Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1627434541"
                },
                {
                    "id": "IC_kwDOD79Crs5hVrDP",
                    "body": "looks like the `update` workaround is no longer working",
                    "author": {
                        "login": "72L"
                    },
                    "createdAt": "2023-07-12T19:13:48Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1633071311"
                },
                {
                    "id": "IC_kwDOD79Crs5hheOe",
                    "body": "I can't reproduce this in straight SQL using an encrypted table as snow below, Can you provide the table definition and security label for the effected table?\r\n\r\n```\r\npostgres=# insert into \"tce-example\".\"decrypted_test\" (name, secret) values ('foo', 's3kr3t');\r\nINSERT 0 1\r\npostgres=# insert into \"tce-example\".\"decrypted_test\" (name, secret) values ('foo', 's3kr3t');\r\nERROR:  duplicate key value violates unique constraint \"test_name_key\"\r\nDETAIL:  Key (name)=(foo) already exists.\r\npostgres=# insert into \"tce-example\".\"decrypted_test\" (name, secret) values ('foo', 's3kr3t') on conflict (name) do update set secret = 'zing';\r\nINSERT 0 1\r\npostgres=# select * from \"tce-example\".\"decrypted_test\" ;\r\n-[ RECORD 1 ]----+-------------------------------------------------\r\nsecret           | ow7MfsW8XNq4/cd/aRVbO6/SA08+k0YmlDA6gdDQZObyVX2w\r\ndecrypted_secret | zing\r\nname             | foo\r\n\r\npostgres=# \r\n```",
                    "author": {
                        "login": "michelp"
                    },
                    "createdAt": "2023-07-14T17:27:18Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1636164510"
                },
                {
                    "id": "IC_kwDOD79Crs5hhflS",
                    "body": "@michelp here's the table definition -\r\n\r\n```\r\ncreate table\r\n  public.demo (\r\n    id text not null,\r\n    created_at timestamp with time zone null default now(),\r\n    secret text null,\r\n    constraint demo_pkey primary key (id)\r\n  ) tablespace pg_default;\r\n\r\ncreate trigger demo_encrypt_secret_trigger_secret before insert\r\nor\r\nupdate of secret on demo for each row\r\nexecute function demo_encrypt_secret_secret ();\r\n```\r\n\r\nNot sure where to look for the security label? I'm using 1 key for the entire column, like [this](https://supabase.com/docs/guides/database/column-encryption#one-key-id-for-the-entire-column).",
                    "author": {
                        "login": "AlexIsMaking"
                    },
                    "createdAt": "2023-07-14T17:32:12Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1636170066"
                },
                {
                    "id": "IC_kwDOD79Crs5hhmp_",
                    "body": "It's in the `pg_seclabel` catalog\r\n\r\nFor example\r\n```\r\npostgres=# select * from pg_seclabel;\r\n objoid | classoid | objsubid | provider |                                                    label                                                     \r\n--------+----------+----------+----------+--------------------------------------------------------------------------------------------------------------\r\n  16530 |     1259 |       10 | pgsodium | ENCRYPT WITH KEY COLUMN parent_key ASSOCIATED (id, associated_data) NONCE raw_key_nonce\r\n  16697 |     1259 |        1 | pgsodium | ENCRYPT WITH KEY ID 56f1a181-6ae9-4144-bae5-0e6d3225484e\r\n  16705 |     1259 |        0 | pgsodium | DECRYPT WITH VIEW \"tce-example\".\"other-test2\"\r\n  16705 |     1259 |        2 | pgsodium | ENCRYPT WITH KEY ID 13e57804-293d-4fde-86e4-691e6fc752a7 ASSOCIATED (associated) NONCE nonce\r\n  16705 |     1259 |        5 | pgsodium | ENCRYPT WITH KEY COLUMN secret2_key_id ASSOCIATED (id, associated2) NONCE nonce2\r\n  16786 |     1259 |        1 | pgsodium | ENCRYPT WITH KEY COLUMN secret2_key_id-test ASSOCIATED (associated2-test) NONCE nonce2-test SECURITY INVOKER\r\n(6 rows)\r\n```",
                    "author": {
                        "login": "michelp"
                    },
                    "createdAt": "2023-07-14T17:59:41Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1636199039"
                },
                {
                    "id": "IC_kwDOD79Crs5hhnq4",
                    "body": "@michelp thanks, here you go -\r\n\r\n| objoid | classoid | objsubid | provider | label                                                                                           |\r\n| ------ | -------- | -------- | -------- | ----------------------------------------------------------------------------------------------- |\r\n| 16788  | 1259     | 10       | pgsodium | ENCRYPT WITH KEY COLUMN parent_key ASSOCIATED (id, associated_data) NONCE raw_key_nonce         |\r\n| 16948  | 1259     | 4        | pgsodium | ENCRYPT WITH KEY COLUMN key_id ASSOCIATED (id, description, created_at, updated_at) NONCE nonce |\r\n| 28583  | 1259     | 11       | pgsodium | ENCRYPT WITH KEY ID c7d22cb9-4e1b-4a1b-a701-42f913477920                                        |\r\n| 28583  | 1259     | 13       | pgsodium | ENCRYPT WITH KEY ID c7d22cb9-4e1b-4a1b-a701-42f913477920                                        |\r\n| 28583  | 1259     | 14       | pgsodium | ENCRYPT WITH KEY ID c7d22cb9-4e1b-4a1b-a701-42f913477920                                        |\r\n| 32556  | 1259     | 4        | pgsodium | ENCRYPT WITH KEY ID c7d22cb9-4e1b-4a1b-a701-42f913477920 SECURITY INVOKER                       |",
                    "author": {
                        "login": "AlexIsMaking"
                    },
                    "createdAt": "2023-07-14T18:03:04Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1636203192"
                },
                {
                    "id": "IC_kwDOD79Crs5hhpMU",
                    "body": "I don't know which table is related to which oid, try this:\r\n```\r\npostgres=# select relname, attname, label from pg_seclabel sl, pg_class c, pg_attribute a where sl.objoid = c.oid and c.oid = a.attrelid and a.attnum = sl.objsubid;\r\n  relname  |   attname    |                                                    label                                                     \r\n-----------+--------------+--------------------------------------------------------------------------------------------------------------\r\n test2     | secret2      | ENCRYPT WITH KEY COLUMN secret2_key_id ASSOCIATED (id, associated2) NONCE nonce2\r\n test2     | secret       | ENCRYPT WITH KEY ID 13e57804-293d-4fde-86e4-691e6fc752a7 ASSOCIATED (associated) NONCE nonce\r\n key       | raw_key      | ENCRYPT WITH KEY COLUMN parent_key ASSOCIATED (id, associated_data) NONCE raw_key_nonce\r\n bob-testt | secret2-test | ENCRYPT WITH KEY COLUMN secret2_key_id-test ASSOCIATED (associated2-test) NONCE nonce2-test SECURITY INVOKER\r\n test      | secret       | ENCRYPT WITH KEY ID 56f1a181-6ae9-4144-bae5-0e6d3225484e\r\n(5 rows)\r\n```",
                    "author": {
                        "login": "michelp"
                    },
                    "createdAt": "2023-07-14T18:08:35Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1636209428"
                },
                {
                    "id": "IC_kwDOD79Crs5hhpe0",
                    "body": "@michelp \r\n\r\n| relname   | attname    | label                                                                                           |\r\n| --------- | ---------- | ----------------------------------------------------------------------------------------------- |\r\n| key       | raw_key    | ENCRYPT WITH KEY COLUMN parent_key ASSOCIATED (id, associated_data) NONCE raw_key_nonce         |\r\n| secrets   | secret     | ENCRYPT WITH KEY COLUMN key_id ASSOCIATED (id, description, created_at, updated_at) NONCE nonce |\r\n| customers | api_key    | ENCRYPT WITH KEY ID c7d22cb9-4e1b-4a1b-a701-42f913477920                                        |\r\n| customers | user_token | ENCRYPT WITH KEY ID c7d22cb9-4e1b-4a1b-a701-42f913477920                                        |\r\n| customers | bot_token  | ENCRYPT WITH KEY ID c7d22cb9-4e1b-4a1b-a701-42f913477920                                        |\r\n| demo      | secret     | ENCRYPT WITH KEY ID c7d22cb9-4e1b-4a1b-a701-42f913477920 SECURITY INVOKER                       |",
                    "author": {
                        "login": "AlexIsMaking"
                    },
                    "createdAt": "2023-07-14T18:09:43Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1636210612"
                },
                {
                    "id": "IC_kwDOD79Crs5hhqkT",
                    "body": "Hmm it seems to be working fine in SQL so perhaps this is a postgrest issue?  See below for insert with conflict update:\r\n\r\n```\r\npostgres=# create table\r\n  public.demo (\r\n    id text not null,\r\n    created_at timestamp with time zone null default now(),\r\n    secret text null,\r\n    constraint demo_pkey primary key (id)\r\n  ) tablespace pg_default;\r\nCREATE TABLE\r\npostgres=# SELECT format('ENCRYPT WITH KEY ID %s', (pgsodium.create_key('aead-det')).id)\r\n    AS seclabel \\gset\r\npostgres=# SECURITY LABEL FOR pgsodium  ON COLUMN public.demo.secret IS :'seclabel';\r\nNOTICE:  view \"decrypted_demo\" does not exist, skipping\r\nNOTICE:  function public.demo_encrypt_secret_secret() does not exist, skipping\r\nNOTICE:  trigger \"demo_encrypt_secret_trigger_secret\" for relation \"public.demo\" does not exist, skipping\r\nNOTICE:  about to masking role public.demo public.decrypted_demo\r\nSECURITY LABEL\r\npostgres=# insert into public.demo (id, secret) values ('foo', 's3kret');\r\nINSERT 0 1\r\npostgres=# insert into public.demo (id, secret) values ('foo', 's3kret');\r\nERROR:  duplicate key value violates unique constraint \"demo_pkey\"\r\nDETAIL:  Key (id)=(foo) already exists.\r\npostgres=# insert into public.demo (id, secret) values ('foo', 's3kret') on conflict (id) do update set secret = 'bizz';\r\nINSERT 0 1\r\npostgres=# select * from public.demo;\r\n id  |          created_at           |                      secret                      \r\n-----+-------------------------------+--------------------------------------------------\r\n foo | 2023-07-14 18:12:24.762347+00 | 7Qem3XpVhD1VyKUSx78BonHtIzcdl9vj/yw65UWfSjTVzXig\r\n(1 row)\r\n\r\npostgres=# select * from public.decrypted_demo ;\r\n id  |          created_at           |                      secret                      | decrypted_secret \r\n-----+-------------------------------+--------------------------------------------------+------------------\r\n foo | 2023-07-14 18:12:24.762347+00 | 7Qem3XpVhD1VyKUSx78BonHtIzcdl9vj/yw65UWfSjTVzXig | bizz\r\n(1 row)\r\n```",
                    "author": {
                        "login": "michelp"
                    },
                    "createdAt": "2023-07-14T18:13:48Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1636215059"
                },
                {
                    "id": "IC_kwDOD79Crs5hhrjW",
                    "body": "Ah I think I get it, the issue is that you're upserting into the table and not the decrypted *view*, postgrest is correctly returning you the upserted row into the table, if you want to get the secret back out, you have to access it through the view:\r\n\r\n```\r\npostgres=# insert into public.decrypted_demo (id, secret) values ('foo', 's3kret') on conflict (id) do update set secret = 'zing';\r\nINSERT 0 1\r\npostgres=# select * from public.decrypted_demo ;\r\n id  |          created_at           |                      secret                      | decrypted_secret \r\n-----+-------------------------------+--------------------------------------------------+------------------\r\n foo | 2023-07-14 18:12:24.762347+00 | /A7jJo3nwa4l0NSdeRUs8ZwnC6ap/xmt3tJ2kVpEUPrJvXXT | zing\r\n(1 row)\r\n\r\n```\r\n\r\nNote I'm inserting into the decryptor view, not the table itself (you can insert/update views when postgres considers them \"updatable\", see the section \"Updatable Views\" https://www.postgresql.org/docs/current/sql-createview.html)",
                    "author": {
                        "login": "michelp"
                    },
                    "createdAt": "2023-07-14T18:17:21Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1636219094"
                },
                {
                    "id": "IC_kwDOD79Crs5hhu5j",
                    "body": "@michelp got it, that worked for me too \ud83c\udf89\r\n\r\n> Note I'm inserting into the decryptor view, not the table itself (you can insert/update views when postgres considers them \"updatable\", see the section \"Updatable Views\" https://www.postgresql.org/docs/current/sql-createview.html)\r\n\r\nWould definitely help if the [docs](https://supabase.com/docs/guides/database/column-encryption#encrypting-columns) mentioned that. This makes it sound like you can just update the table, rather than the view -\r\n\r\n> Once you've created an encrypted column, you can insert data into the table like you would any other table. For example if you were to insert an email address into an encrypted column, you will see that the address is transparently converted into an encrypted value on the new row.",
                    "author": {
                        "login": "AlexIsMaking"
                    },
                    "createdAt": "2023-07-14T18:29:58Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1636232803"
                },
                {
                    "id": "IC_kwDOD79Crs5hhvI8",
                    "body": "Ah good point that is confusingly worded, I'll update the docs, thanks!",
                    "author": {
                        "login": "michelp"
                    },
                    "createdAt": "2023-07-14T18:31:02Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1636233788"
                },
                {
                    "id": "IC_kwDOD79Crs5hhvdW",
                    "body": "Thanks! Guess I can close this now then.",
                    "author": {
                        "login": "AlexIsMaking"
                    },
                    "createdAt": "2023-07-14T18:32:07Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1636235094"
                },
                {
                    "id": "IC_kwDOD79Crs5hhvvh",
                    "body": "I'll also add a helper function that does that security label join mess so it's easier to diagnose.",
                    "author": {
                        "login": "michelp"
                    },
                    "createdAt": "2023-07-14T18:32:54Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1636236257"
                },
                {
                    "id": "IC_kwDOD79Crs5hiIzB",
                    "body": "@michelp sorry, looks like I spoke too soon. If I run exactly the same script that was working before and upsert the row that I created earlier, in the decrypted view, I run into the same issue now - the decrypted view displays an encrypted key. I saw this before too - it seems like there's something time related that causes the upsert to stop working.\r\n\r\nIf you try upserting the row that you created earlier, rather than creating a new one, hopefully you can reproduce the issue.",
                    "author": {
                        "login": "AlexIsMaking"
                    },
                    "createdAt": "2023-07-14T19:45:48Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1636338881"
                },
                {
                    "id": "IC_kwDOD79Crs5hitOJ",
                    "body": "I can run that insert over and over again with no problems or time issues, are you sure you're not mixing up the `secret` and `decrypted_secret` columns?  There's a specific reason they are separate, the secret column can be written to, and is stored encrypted, but reading it isn't useful (it is after all encrypted), the decrypted_secret column of the view is for reading the value, it cannot be written to (postgres wont let you, because it's a \"computed column\" of the view).  If you write the encrypted `secret` column back into itself, it will double encrypt the value, which you don't want.",
                    "author": {
                        "login": "michelp"
                    },
                    "createdAt": "2023-07-14T21:57:46Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1636488073"
                },
                {
                    "id": "IC_kwDOD79Crs5hiwV3",
                    "body": "@michelp I'm definitely not mixing up the columns, here's the complete code that I'm using for testing -\r\n\r\n```\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\n\r\nconst supabaseUrl = process.env.SUPABASE_URL;\r\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY;\r\nconst options = {\r\n  auth: {\r\n    persistSession: false,\r\n  },\r\n};\r\n\r\nconst supabase = createClient(\r\n  supabaseUrl,\r\n  supabaseServiceKey,\r\n  options,\r\n);\r\n\r\nconst tableName = 'decrypted_demo';\r\nconst conflict = 'id';\r\nconst apiKey = 's3kr3t';\r\nconst content = {\r\n  id: 'test',\r\n  secret: apiKey,\r\n};\r\n\r\nasync function upsertRowInTable(table, rowData, conflictField) {\r\n  try {\r\n    const { data: result, error } = await supabase\r\n      .from(tableName)\r\n      .upsert(rowData, { onConflict: conflictField })\r\n      .select();\r\n\r\n    if (error) {\r\n      console.error(`Error inserting row into ${table}:`, error);\r\n      return null;\r\n    }\r\n\r\n    return result;\r\n  } catch (err) {\r\n    throw new Error('Unexpected error in upsertRowInTable:', err);\r\n  }\r\n}\r\n\r\nconst result = await upsertRowInTable(tableName, content, conflict, supabase);\r\nconsole.log('result:', result);\r\n```\r\n\r\n```\r\nresult: [\r\n  {\r\n    id: 'test',\r\n    created_at: '2023-07-14T18:27:29.382944+00:00',\r\n    secret: 'ReVoKjIXeaize08bvcotOvsjdE9pnvpiOcZosi/T3JWvugtOMpmn48wFYXBFsGmooAP7rO7SS6Ju\\n' +\r\n      'cRAAaQCDI8Gf086gGwQn5G9YBufzSTA2Qikx',\r\n    decrypted_secret: '1GtUuxbDD++TYcqxBVt1znjKiRaGaosyIVxVSEFU9yxAhorf028='\r\n  }\r\n]\r\n```\r\n\r\nAre you updating the same row that you created earlier, via an upsert? If it's a new row, you (probably), won't see the error.",
                    "author": {
                        "login": "AlexIsMaking"
                    },
                    "createdAt": "2023-07-14T22:11:06Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1636500855"
                },
                {
                    "id": "IC_kwDOD79Crs5hi0wA",
                    "body": "Yep I'm inserting the \"same\" row, of course in SQL the \"sameness\" of a row in this case is whether or not it satisfies a uniqueness constraint or not, so I'm inserting the same `id` value, and thus violating the constraint, and consequently the `ON CONFLICT` clause is evaluated.\r\n\r\nThis might be something to do with PostgREST after all then, since I can't reproduce what you're describing in straight SQL.  I'll investigate further.",
                    "author": {
                        "login": "michelp"
                    },
                    "createdAt": "2023-07-14T22:37:14Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1636518912"
                },
                {
                    "id": "IC_kwDOD79Crs5iq_No",
                    "body": "@michelp have you had a chance to look further into this at all? It'd be great to be able to use the encrypted columns to store sensitive information.",
                    "author": {
                        "login": "AlexIsMaking"
                    },
                    "createdAt": "2023-07-28T10:12:44Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1655436136"
                },
                {
                    "id": "IC_kwDOD79Crs5ishjg",
                    "body": "Hi @AlexIsMaking,\r\n\r\nWe've found the issue is an intersection of two problems, the first is that PostgREST (correctly IMO) generates the ON CONFLICT query using the `EXCLUDED.*` pseudo-row to set columns from the row that conflicted (ie the data to be updated).  In this case, the excluded column contains the encrypted data, not the plaintext (that plaintext isn't included in any column of the excluded row, that comes from the _view_) so it ends up being double encrypted.\r\n\r\nThe view does have both columns, but the second issue is that you cannot usefully `INSERT ... ON CONFLICT` to a view, because a conflict clause requires a unique constraint violation, and views do not have constraints.  So even if problem 1 didn't exist problem 2 would prevent it.\r\n\r\nThe only workaround we can think of for the moment is to use and RPC function to do the upsert, joining the table and the view and doing `INSERT ... ON CONFLICT (id) DO UPDATE SET ..., t.secret = v.decrypted_secret` and this will decrypt the column using the view, then reencrypt it using the table trigger.  I'll try and come up with a working example for you and drop it here in a comment.",
                    "author": {
                        "login": "michelp"
                    },
                    "createdAt": "2023-07-28T14:57:20Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1655838944"
                },
                {
                    "id": "IC_kwDOD79Crs5is6Sv",
                    "body": "@michelp really appreciate the update. An example of workaround would be a big help, that sounds like it might be a little bit complicated to set up \ud83d\ude05",
                    "author": {
                        "login": "AlexIsMaking"
                    },
                    "createdAt": "2023-07-28T16:04:16Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1655940271"
                },
                {
                    "id": "IC_kwDOD79Crs5lch5a",
                    "body": "Hi Alex,\r\n\r\nSorry for the delay I forgot to circle back on this one, here's a gist of a working example for a function that does \"upsert\" into a TCE table:\r\n\r\nhttps://gist.github.com/michelp/b77b29089855f8bdaf8852cd115781ac\r\n\r\nYou'll have to adapt this to your specific case.  In order to call an RPC function with supabase js, see this documentation:\r\n\r\nhttps://supabase.com/docs/reference/javascript/rpc",
                    "author": {
                        "login": "michelp"
                    },
                    "createdAt": "2023-09-01T01:16:23Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1701977690"
                },
                {
                    "id": "IC_kwDOD79Crs5leBNZ",
                    "body": "@michelp thanks a lot for sharing that example. I'm a little bit wary about saying this definitely works for me, after we had the issue with the previous solution seemingly working but only temporarily \ud83d\ude05 but it's working so far \ud83d\ude4c\r\n\r\nFor the benefit of anyone who's setting this up - unfortunately this SQL can't be run in Supabase's built-in SQL editor because it uses \\gset. If you don't have psql set up (which is needed in order to use \\gset), like me, you can run this SQL using [Postgres.js](https://supabase.com/docs/guides/database/connecting-to-postgres#connecting-with-postgresjs), like this:\r\n\r\nhttps://gist.github.com/AlexIsMaking/e58c3c4996755b1e96b306a670479ecc\r\n\r\n",
                    "author": {
                        "login": "AlexIsMaking"
                    },
                    "createdAt": "2023-09-01T08:26:44Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1702368089"
                },
                {
                    "id": "IC_kwDOD79Crs5lj4vD",
                    "body": "Just confirmed that, that the function is working. Thanks again @michelp!",
                    "author": {
                        "login": "AlexIsMaking"
                    },
                    "createdAt": "2023-09-02T18:24:04Z",
                    "url": "https://github.com/supabase/supabase-js/issues/795#issuecomment-1703906243"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5qIBIK",
            "number": 801,
            "title": "`throwOnError` with await returns nullable type",
            "body": "# Bug report\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\n`.throwOnError` should return non-nullable type because since in a case of error it will throw instead of returning an `error` object with null `data` object.\r\n\r\n## To Reproduce\r\n\r\nSee below code for example:\r\n```ts\r\nconst { data, error } = await supabase.from('groups').insert({ name }).select('id').throwOnError().single()\r\n```\r\n\r\nIn this example return type is nullabe `{ data: { id: string } } | null` but it shouldn't because it'll throw on error.\r\n\r\nIn this case I have to do below to correct typing which doesn't make any sense to do extra if checks even though it's unnecessary:\r\n```ts\r\nconst { data, error } = await supabase.from('groups').insert({ name }).select('id').throwOnError().single()\r\n\r\nif (error) throw error\r\n```\r\n\r\n## Expected behavior\r\n\r\nIf `.throwOnError` called return type must be `{ data: NonNullable<...>, error: null }` or even without error object if possible.\r\n\r\n## Screenshots\r\n<img width=\"888\" alt=\"Screenshot 2023-06-29 at 12 47 37\" src=\"https://github.com/supabase/supabase-js/assets/51231605/0bd9b545-03a8-444c-97c8-c3871c3a8b5a\">\r\n\r\n## System information\r\n\r\n- OS: MacOS\r\n- Version of supabase-js: 2.26.0\r\n- Version of Node.js: 20.3.1\r\n- Version of Typescript: 5.1.3\r\n",
            "author": {
                "login": "dogukanakkaya"
            },
            "state": "OPEN",
            "createdAt": "2023-06-29T09:50:44Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/801",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5hr19P",
                    "body": "Thank you for opening this issue. I was about to open an issue for this exact thing.",
                    "author": {
                        "login": "wallpants"
                    },
                    "createdAt": "2023-07-17T21:07:23Z",
                    "url": "https://github.com/supabase/supabase-js/issues/801#issuecomment-1638883151"
                },
                {
                    "id": "IC_kwDOD79Crs5o7WH_",
                    "body": "One workaround until it's resolved:\r\n\r\n```typescript\r\nconst get = async (id: string) => {\r\n  const entity = await supabase.client.from('auth.users').select(`*`)\r\n    .eq('id', id)\r\n    .single()\r\n    .throwOnError();\r\n\r\n  return entity.data as NonNullable<typeof entity.data>;\r\n}\r\n```",
                    "author": {
                        "login": "rfreydi"
                    },
                    "createdAt": "2023-10-12T21:27:07Z",
                    "url": "https://github.com/supabase/supabase-js/issues/801#issuecomment-1760387583"
                },
                {
                    "id": "IC_kwDOD79Crs5retlk",
                    "body": "I opened a PR to support this: https://github.com/supabase/postgrest-js/pull/494\r\n\r\nI got impatient so I published it under [@rebundled/postgrest-js](https://www.npmjs.com/package/@rebundled/postgrest-js). Here's how you can use it with `@supabase/ssr`:\r\n\r\n```bash\r\nnpm install @rebundled/postgrest-js\r\n```\r\n\r\n```ts\r\nimport { CookieOptions, createServerClient } from '@supabase/ssr'\r\nimport { PostgrestClient } from '@rebundled/postgrest-js'\r\nimport { cookies } from 'next/headers'\r\nimport { Database } from '~/db'\r\n\r\nexport const createClient = () => {\r\n  const client = createServerClient<Database>(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        get(name: string) {\r\n          return cookieStore.get(name)?.value\r\n        },\r\n      },\r\n    },\r\n  )\r\n\r\n  // @ts-expect-error `.rest` is protected\r\n  const { rest } = client\r\n  const wrapper = new PostgrestClient<Database>(rest.url, {\r\n    fetch: rest.fetch,\r\n    headers: rest.headers,\r\n    schema: rest.schemaName,\r\n  }).throwOnError()\r\n  return Object.assign(wrapper, {\r\n    rest,\r\n    realtime: client.realtime,\r\n    auth: client.auth,\r\n  })\r\n}\r\n```\r\n\r\nYou can then use like:\r\n\r\n```ts\r\nimport {createClient} from '..'\r\n\r\nexport default async () => {\r\n  const client = createClient()\r\n\r\n  const { data: user } = await client.from('users').select('*').single()\r\n\r\n  console.log(`Hello ${user.username}`) // no need to check truthiness/ throw manually\r\n}\r\n```\r\n\r\nIf you need access to the non-throwing client, you can use `createClient().rest`. Note that if the PR is merged, it'll probably make sense to make a change in this repo too, so explicitly creating a `new PostgrestClient` wouldn't be necessary. But this seemed like a non-invasive way to let people try this out now.",
                    "author": {
                        "login": "mmkal"
                    },
                    "createdAt": "2023-11-09T06:01:16Z",
                    "url": "https://github.com/supabase/supabase-js/issues/801#issuecomment-1803213156"
                },
                {
                    "id": "IC_kwDOD79Crs5rk3ky",
                    "body": "+1. this is kinda annoying tbh",
                    "author": {
                        "login": "AlbertMarashi"
                    },
                    "createdAt": "2023-11-09T23:12:01Z",
                    "url": "https://github.com/supabase/supabase-js/issues/801#issuecomment-1804826930"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5qnm7S",
            "number": 802,
            "title": "Resend Signup Confirmation Email is broken - does not use emailRedirectTo",
            "body": "# Bug report\r\n\r\nWhen a user signs up, the first email link has the `emailRedirectTo` provided.\r\n\r\nWhen you resend a confirmation email, the email link only has the origin, not the entire redirect url.\r\n\r\nAs a result, resending confirmation emails is broken.\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nUser signs up using this:\r\n```ts\r\nawait supabase.auth.signUp({\r\n    email,\r\n    password,\r\n    options: {\r\n        emailRedirectTo: `http://localhost:3000/auth/callback/`,\r\n    },\r\n});\r\n```\r\n\r\nThe first email received has the correct `redirect_to`:\r\n\r\n`http://localhost:54321/auth/v1/verify?token=_TOKEN_&type=signup&redirect_to=http://localhost:3000/auth/callback/`\r\n\r\nHowever, when you request a resend:\r\n```ts\r\nawait supabase.auth.resend({ email, type: 'signup' });\r\n```\r\n\r\nThe email does not have the correct redirect to in the link. It just has the origin:\r\n\r\n`http://localhost:54321/auth/v1/verify?token=_NEW_TOKEN_&type=signup&redirect_to=http://localhost:3000`\r\n\r\n[ResendParams](https://github.com/supabase/gotrue-js/blob/master/src/lib/types.ts#L550-L566) does not accept `emailRedirectTo`.\r\n\r\n## To Reproduce\r\n\r\nSee above.\r\n\r\n## Expected behavior\r\n\r\nWhen a resend signup email request is made, the `redirect_to` url in the email link should be the same url passed to signUp.\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Version of supabase-js: 2.26.0 (latest as of this post)\r\n- Version of Node.js: 18.16.1 (LTS as of this post)\r\n\r\n",
            "author": {
                "login": "stevensacks"
            },
            "state": "CLOSED",
            "createdAt": "2023-07-05T05:02:50Z",
            "closedAt": "2023-08-24T23:12:08Z",
            "url": "https://github.com/supabase/supabase-js/issues/802",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5gt1Sk",
                    "body": "There's a PR on the gotrue-js repo that will hopefully resolve this.\n\nhttps://github.com/supabase/gotrue-js/pull/719",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2023-07-05T22:42:55Z",
                    "url": "https://github.com/supabase/supabase-js/issues/802#issuecomment-1622627492"
                },
                {
                    "id": "IC_kwDOD79Crs5k4fI8",
                    "body": "This has been fixed so i'm gonna close the issue. Thanks for reporting this btw!",
                    "author": {
                        "login": "kangmingtay"
                    },
                    "createdAt": "2023-08-24T23:12:08Z",
                    "url": "https://github.com/supabase/supabase-js/issues/802#issuecomment-1692529212"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5q4Cn0",
            "number": 803,
            "title": "Unable to call public schema function that accesses other schema",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\nI've a parameterless function that fetches `email`, `confirmation_token` from `auth.users` schema and `email_verify_retry_count` from `public.users`. When I call this function from SQL editor, it is working as expected. However, when I try to call it via supabase-js, I'm getting the following error:\r\n\r\n```\r\n{\r\n  error: {\r\n    code: 'PGRST202',\r\n    details: 'Searched for the function public.get_unconfirmed_users without parameters or with a single unnamed json/jsonb parameter, but no matches were found in the schema cache.',\r\n    hint: null,\r\n    message: 'Could not find the function public.get_unconfirmed_users without parameters in the schema cache'\r\n  },\r\n  data: null,\r\n  count: null,\r\n  status: 404,\r\n  statusText: 'Not Found'\r\n}\r\n```\r\n\r\n## To Reproduce\r\n\r\n1. Create `public.users` by running the below query in SQL editor:\r\n```\r\ncreate table \"public\".\"users\" (\r\n    \"id\" uuid not null,\r\n    \"full_name\" text,\r\n    \"avatar_url\" text,\r\n    \"billing_address\" jsonb,\r\n    \"payment_method\" jsonb,\r\n    \"credits\" integer not null default 10,\r\n    \"email\" text not null,\r\n    \"email_verify_retry_count\" smallint not null default '0'::smallint,\r\n    \"is_email_verified\" boolean not null default false\r\n);\r\n```\r\n\r\n2. Create `get_unconfirmed_users` function by running the below query in SQL editor:\r\n\r\n```\r\nDROP function IF EXISTS get_unconfirmed_users;\r\n\r\nCREATE OR REPLACE FUNCTION get_unconfirmed_users() RETURNS TABLE (\r\n  email VARCHAR,\r\n  confirmation_token VARCHAR,\r\n  email_verify_retry_count int2\r\n) AS $$\r\nBEGIN\r\n  RETURN QUERY\r\n  SELECT \r\n    auth_users.email, \r\n    auth_users.confirmation_token,\r\n    public_users.email_verify_retry_count\r\n  FROM \r\n    auth.users as auth_users\r\n  JOIN \r\n    public.users as public_users \r\n    ON auth_users.id = public_users.id \r\n  WHERE \r\n    public_users.email_verify_retry_count < 3 \r\n    AND auth_users.email_confirmed_at IS NULL;\r\nEND; \r\n$$ LANGUAGE plpgsql;\r\n```\r\n\r\n3. Clone the [rishisundar/supabase-function-issue-demo](https://github.com/rishisundar/supabase-function-issue-demo), install the dependencies with `yarn` and then run the sample script using `yarn start`.\r\n\r\n## Expected behavior\r\nReturn data similar to what I'm getting in SQL editor.\r\n\r\n## Screenshots\r\n1. Supabase DB function page\r\n![Screenshot 2023-07-07 at 1 18 32 PM](https://github.com/supabase/supabase-js/assets/12433764/14b063e1-3ee2-40f0-a735-5871aee7d01e)\r\n\r\n2. Output when function is executed from SQL Editor\r\n![Screenshot 2023-07-07 at 1 21 36 PM](https://github.com/supabase/supabase-js/assets/12433764/99ef7152-d686-43d0-bdb9-4c33465c008b)\r\n\r\n3. Error when executed from supbase-js\r\n\r\n![Screenshot 2023-07-07 at 1 48 16 PM](https://github.com/supabase/supabase-js/assets/12433764/c2fc7cc2-570f-482c-91f0-06ca78ee4948)\r\n\r\n4. Query working fine when executed directly by connecting to DB via DbVisualizer:\r\n![Screenshot 2023-07-07 at 4 47 58 PM](https://github.com/supabase/supabase-js/assets/12433764/7480f4ab-b3f5-4885-8cc9-d04cd460ee63)\r\n\r\n## System information\r\n\r\n- OS: macOS 13.4.1 22F82 arm64\r\n- Browser: Arc version 0.111.0 (39916)\r\n- Version of supabase-cli: 1.75.3\r\n- Version of supabase-js: 2.26.0\r\n- Version of Node.js: v16.19.0\r\n\r\n",
            "author": {
                "login": "rishisundar"
            },
            "state": "CLOSED",
            "createdAt": "2023-07-07T08:37:22Z",
            "closedAt": "2023-07-07T13:50:22Z",
            "url": "https://github.com/supabase/supabase-js/issues/803",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5g4lq0",
                    "body": "Issue occurred due wrong configuration. Please ignore this.",
                    "author": {
                        "login": "rishisundar"
                    },
                    "createdAt": "2023-07-07T13:50:22Z",
                    "url": "https://github.com/supabase/supabase-js/issues/803#issuecomment-1625447092"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5rR_wY",
            "number": 805,
            "title": "Updating & refreshing user metadata causes Error \"Invalid Refresh Token: Already Used\"",
            "body": "# Bug report\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nI'm trying to use the Supabase user metadata as a means of storing user metadata (like preferences eg. is_subscribed_to_newsletter), since it seems way more intuitive than having a clone of it in Postgres, and updating those... This is my code:\r\n\r\n```typescript\r\nawait supabaseClient.auth.updateUser({\r\n            data: {\r\n                ...metadata,\r\n                ...updatedMetadata\r\n            }\r\n        })\r\n        const { error } = await supabaseClient.auth.refreshSession()\r\n```\r\n\r\nBasically, the first time I update any user metadata, it works perfectly, but the second time and all times after that I get the error \"Invalid Refresh Token: Already Used\"\r\n\r\nAs seen [here](https://github.com/orgs/supabase/discussions/14708) and [here](https://github.com/orgs/supabase/discussions/15349), other people are also facing this issue.\r\n\r\n## To Reproduce\r\n\r\n- Create a Next app with an authenticated user\r\n- call `updateUser`, then `refreshSession`\r\n- Try to `updateUser`, then `refreshSession` again, and you will get error \"Invalid Refresh Token: Already Used\"\r\n\r\n## Expected behavior\r\n\r\nI expect the `refreshSession` to also refetch a new refresh-token, while refetching updated account information for the `useUser` hook.\r\n\r\nBeing able to use the `user_metadata` field for small personal user preferences is super good for DX. I always cringed at the idea of creating some Postgres triggers (that last I checked weren't even production ready) only to create a matching `public.users` table that then contained the users data, when we could just use the `user_metadata` itself.\r\n\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser (if applies) Chrome\r\n- Version of supabase-js: 2.26.0\r\n- Version of Node.js: v18.15.0",
            "author": {
                "login": "skoshx"
            },
            "state": "CLOSED",
            "createdAt": "2023-07-11T22:59:35Z",
            "closedAt": "2023-08-08T17:34:23Z",
            "url": "https://github.com/supabase/supabase-js/issues/805",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5ho7Vd",
                    "body": "Friendly bump :)",
                    "author": {
                        "login": "skoshx"
                    },
                    "createdAt": "2023-07-17T13:14:11Z",
                    "url": "https://github.com/supabase/supabase-js/issues/805#issuecomment-1638118749"
                },
                {
                    "id": "IC_kwDOD79Crs5iWgel",
                    "body": "Friendly bump :)",
                    "author": {
                        "login": "skoshx"
                    },
                    "createdAt": "2023-07-25T15:32:36Z",
                    "url": "https://github.com/supabase/supabase-js/issues/805#issuecomment-1650067365"
                },
                {
                    "id": "IC_kwDOD79Crs5jiqjl",
                    "body": "This is tracked in https://github.com/supabase/gotrue-js/issues/755",
                    "author": {
                        "login": "skoshx"
                    },
                    "createdAt": "2023-08-08T17:34:23Z",
                    "url": "https://github.com/supabase/supabase-js/issues/805#issuecomment-1670031589"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5rgLLC",
            "number": 806,
            "title": "Unable to redirect user to a page other than root upon password login",
            "body": "# Bug report\r\nWhen I try to redirect a user to a different URL upon logging in with a password, I always get redirected to the root page of the website.\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [ x ] I confirm this is a bug with Supabase, not with my own application. \r\n- [ x ] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nUpon logging in with password login, I only get redirected to the root page of my website. I tried passing a redirectTo prop to the signInWithPassword function and tried router.pushing the url I wanted to route to upon logging in, but I always get sent to my root domain.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n```\r\nconst supabase = createBrowserSupabaseClient();\r\n\r\nconst handleLogin = async ({ email, password }) => {\r\n    onSubmitCallback();\r\n    try {\r\n      setLoading(true);\r\n      const { error, data } = await supabase.auth.signInWithPassword({\r\n        email,\r\n        password,\r\n        options: {\r\n          data: { locale },\r\n        },\r\n      });\r\n      if (error) throw error;\r\n      if (data) {\r\n        router.push(redirectTo || \"/\").then(() => router.reload());\r\n      }\r\n    } catch (error) {\r\n      alert(error.error_description || error.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n```\r\n\r\n## Expected behavior\r\n\r\nI should be routed to my redirectTo url I pass to router.push()\r\n\r\n\r\n\r\n## System information\r\n\r\n- OS:  Windows\r\n- Browser chrome\r\n- Version of supabase-js:  \"@supabase/auth-helpers-nextjs\": \"^0.6.1\",\r\n",
            "author": {
                "login": "devlukedreamstage"
            },
            "state": "CLOSED",
            "createdAt": "2023-07-13T18:59:50Z",
            "closedAt": "2023-08-24T23:10:35Z",
            "url": "https://github.com/supabase/supabase-js/issues/806",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5k4e4V",
                    "body": "@devlukedreamstage `signInWithPassword` doesn't accept a `redirectTo` value in it's arguments. What is the value of `redirectTo` in `router.push(redirectTo || \"/\").then(() => router.reload());` here? if it's undefined, then it's always gonna be redirecting you to your root domain. \r\n\r\nIf you want to redirect your user to a different page after a successful password login, you have to handle it yourself after you get a successful response from `signInWithPassword` ",
                    "author": {
                        "login": "kangmingtay"
                    },
                    "createdAt": "2023-08-24T23:10:35Z",
                    "url": "https://github.com/supabase/supabase-js/issues/806#issuecomment-1692528149"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5rks_0",
            "number": 807,
            "title": "deleteUser returns a response with FormatException",
            "body": "I made an edge function that is calling `supabase.auth.admin.deletUser(....)`. It is deleting the user as expected but it returns just \r\n```\r\n\"User deleted: {\r\n  \"user\": {}\r\n}\"\r\n```\r\nwhich is then leading to an format exception.\r\nThis is my called edge function i call within flutter.\r\n\r\n```\r\nserve(async (req: Request) => {\r\n  try {\r\n    // Create a Supabase client with the Auth context of the logged in user.\r\n    const supabaseClient = createClient(\r\n      // Supabase API URL - env var exported by default.\r\n      Deno.env.get('SUPABASE_URL') ?? '',\r\n      // Supabase API ANON KEY - env var exported by default.\r\n      Deno.env.get('SUPABASE_ANON_KEY') ?? '',\r\n      // Create client with Auth context of the user that called the function.\r\n      // This way your row-level-security (RLS) policies are applied.\r\n      { global: { headers: { Authorization: req.headers.get('Authorization')! } } }\r\n    );\r\n    // Now we can get the session or user object\r\n    const {\r\n      data: { user },\r\n    } = await supabaseClient.auth.getUser();\r\n\r\n    const supabaseAdmin = createClient(\r\n      Deno.env.get('SUPABASE_URL') ?? '',\r\n      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''\r\n    );\r\n    const { data: deletion_data, error: deletion_error } = await supabaseAdmin.auth.admin.deleteUser(user.id, true);\r\n    if (deletion_error) throw deletion_error;\r\n\r\n    return new Response(\"User deleted: \" + JSON.stringify(deletion_data, null, 2), {\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            status: 200,\r\n          });\r\n  } catch (error) {\r\n    return new Response(JSON.stringify({ error: error.message }), {\r\n      headers: { 'Content-Type': 'application/json' },\r\n      status: 400,\r\n    });\r\n  }\r\n})\r\n```\r\n\r\nIs it wrong to catch the result from deletUser? If so, how do I recognize then if it worked?\r\n\r\n```\r\nflutter: ----------------FIREBASE CRASHLYTICS----------------\r\nflutter: FormatException: Unexpected character (at character 1)\r\nUser deleted: \"fd4f1aab-76af-41b3-95e8-22048f81defa\"\r\n^\r\nflutter:\r\n#0      _ChunkedJsonParser.fail (dart:convert-patch/convert_patch.dart:1383:5)\r\n#1      _ChunkedJsonParser.parseNumber (dart:convert-patch/convert_patch.dart:1250:9)\r\n#2      _ChunkedJsonParser.parse (dart:convert-patch/convert_patch.dart:915:22)\r\n#3      _parseJson (dart:convert-patch/convert_patch.dart:35:10)\r\n#4      JsonDecoder.convert (dart:convert/json.dart:610:36)\r\n#5      JsonCodec.decode (dart:convert/json.dart:216:41)\r\n#6      jsonDecode (dart:convert/json.dart:155:10)\r\n#7      _compute\r\n_isolates_io.dart:109\r\n<asynchronous suspension>\r\nflutter: ----------------------------------------------------\r\n```",
            "author": {
                "login": "Ben1980"
            },
            "state": "CLOSED",
            "createdAt": "2023-07-14T12:18:11Z",
            "closedAt": "2023-07-16T12:01:55Z",
            "url": "https://github.com/supabase/supabase-js/issues/807",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5hk6RJ",
                    "body": "Solved in https://github.com/supabase/supabase-flutter/issues/551",
                    "author": {
                        "login": "Ben1980"
                    },
                    "createdAt": "2023-07-16T12:01:55Z",
                    "url": "https://github.com/supabase/supabase-js/issues/807#issuecomment-1637065801"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5rqjCp",
            "number": 808,
            "title": "Json type: Type instantiation is excessively deep and possibly infinite.",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nI have a Vue/Nuxt project with TypeScript which is throwing me an error with the profile table when I try to assign it to a variable based on the types generated from the DB. \"Type instantiation is excessively deep and possibly infinite.\"\r\n\r\nThe problematic column in question is one called \"links\" which stores JSONB data. The type that is generated from the Supabase Cli using the command `npx supabase gen types typescript` creates a self referencing type called `Json`.\r\n\r\n```typescript\r\nexport type Json =\r\n  | string\r\n  | number\r\n  | boolean\r\n  | null\r\n  | { [key: string]: Json | undefined }\r\n  | Json[]\r\n```\r\n\r\nWith my (generated) profile row types looking like:\r\n\r\n```typescript\r\nprofile: {\r\n  Row: {\r\n    about: string | null\r\n    available: string | null\r\n    avatar: string | null\r\n    avatar_url: string | null\r\n    created_at: string | null\r\n    id: number\r\n    links: Json | null // this is the problematic column.\r\n    location: string | null\r\n    name: string | null\r\n    poster: string | null\r\n    poster_url: string | null\r\n    tagline: string | null\r\n    updated_at: string\r\n    user_id: string\r\n    username: string | null\r\n  }\r\n}\r\n```\r\n\r\nIn my Pinia Vue store I get the following error when trying to assign it against these types.\r\n\r\n```typescript\r\nimport type { Database } from '@/types/supabase'\r\nimport { defineStore } from 'pinia'\r\n\r\nexport const useUserStore = defineStore('user', {\r\n  state: () => ({\r\n    profile: null as Database['public']['Tables']['profile']['Row'] | null\r\n  }),\r\n  actions: {\r\n    setProfile(profile: Database['public']['Tables']['profile']['Row'] | null) {\r\n      this.profile = profile // Here is where the TS error occurs.\r\n    }\r\n  }\r\n})\r\n```\r\n\r\nI'm guessing this error happens because the generated type is self referencing and TS does not know how deep it would be?\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Create a column and set its type to jsonb\r\n2. Generate types using the Supabase Cli\r\n3. Try to do something similar and see that TS complains.\r\n\r\n## Expected behavior\r\n\r\nThere should be no TS error.\r\n\r\n## Screenshots\r\n\r\n<img width=\"340\" alt=\"Screenshot 2023-07-15 at 21 02 12\" src=\"https://github.com/supabase/supabase-js/assets/4269460/d98a5ce2-0ffd-47db-948a-49cc1a5558e4\">\r\n<img width=\"654\" alt=\"Screenshot 2023-07-15 at 21 16 15\" src=\"https://github.com/supabase/supabase-js/assets/4269460/8dd77439-b203-4e7f-a9f8-f4f78678a859\">\r\n\r\n## System information\r\n\r\n- OS: Apple Macbook Pro M2 Ventura 13.4\r\n- Version of supabase-js: 2.26.0\r\n- Version of Node.js: 18.16.0\r\n\r\n## Additional context\r\n\r\nI have not been able to see similar issues with other Supabase users but perhaps the use of JSONB is quite rare?\r\n",
            "author": {
                "login": "michaelpumo"
            },
            "state": "OPEN",
            "createdAt": "2023-07-15T20:19:28Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/808",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5iKA7Q",
                    "body": "I'm also facing same issue",
                    "author": {
                        "login": "rahulretnan"
                    },
                    "createdAt": "2023-07-23T09:29:34Z",
                    "url": "https://github.com/supabase/supabase-js/issues/808#issuecomment-1646792400"
                },
                {
                    "id": "IC_kwDOD79Crs5iMKcN",
                    "body": "Hey there, what version of TypeScript are you on? Also, can you put up an example project that demonstrates the issue so I can replicate it?",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-07-24T07:24:00Z",
                    "url": "https://github.com/supabase/supabase-js/issues/808#issuecomment-1647355661"
                },
                {
                    "id": "IC_kwDOD79Crs5iMK26",
                    "body": "FWIW this seems to run fine: https://www.typescriptlang.org/play?#code/C4TwDgpgBAUgzgewHZQLwCgpQD5TsAJwEskBzTHKJAVwFsAjCAi3ehBAGwgEMkWrqHDvwDeUANoBrCCABceQiVIBdefGSVqSACYQAZiQjaoAX37qk45UA",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-07-24T07:25:18Z",
                    "url": "https://github.com/supabase/supabase-js/issues/808#issuecomment-1647357370"
                },
                {
                    "id": "IC_kwDOD79Crs5iWWRD",
                    "body": "I did a little more digging and I think it may be an issue in combination with Vue's reactivity and not directly Supabase afterall. You may see something similar with React?\r\n\r\nIf I try to a assign to a simple variable with `let` for example it's okay but using `ref()` in Vue causes the warning, possibly due to Vue / TS not knowing how deep it would have to watch the reactive object.\r\n\r\nIf I use `shallowRef()` instead, it's fine: https://vuejs.org/api/reactivity-advanced.html#shallowref",
                    "author": {
                        "login": "michaelpumo"
                    },
                    "createdAt": "2023-07-25T15:08:24Z",
                    "url": "https://github.com/supabase/supabase-js/issues/808#issuecomment-1650025539"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5sGxKL",
            "number": 811,
            "title": "after google login stuck on page application not calls getSession",
            "body": "# Bug report\r\n\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nHi,\r\nI am using google login with simple implementation and 2 days before it started not working after user selects google account it page stuck in application with below url. Actually the reason is getSession method not triggered and session is not set the browser. I checked access token information is valid but I didn't change anything. After updating 2.26.0 it started doing this. I downgraded to 2.4.0 but not works.\r\n\r\nhttp://localhost:5173/#access_token=eyJhbGciOiJIUzI1NiIsImtpZCI6ImdLVWdtWEgzWDdRanhQVzMiLCJ0eXAiOiJKV1QifQ.eyJhdWQiOiJhdXRoZW50aWNhdGVkIiwiZXhwIjoxNjkwNDU1MTAwLCJpYXQiOjE2ODk4NTAzMDAsImlzcyI6Imh0dHBzOi8vaHR0cHM6Ly9md2FhcnFkc3hqbnRjeWhpbWtuay5zdXBhYmFzZS5jby9hdXRoL3YxIiwic3ViIjoiYjY2NDBmYTEtMzA0ZS00YjdlLWJhNmItZWUwYzBmYzc4OTE3IiwiZW1haWwiOiJkYXZ1dC5va2FuQGdtYWlsLmNvbSIsInBob25lIjoiIiwiYXBwX21ldGFkYXRhIjp7InByb3ZpZGVyIjoiZW1haWwiLCJwcm92aWRlcnMiOlsiZW1haWwiLCJnb29nbGUiLCJnaXRodWIiXX0sInVzZXJfbWV0YWRhdGEiOnsiYXZhdGFyX3VybCI6Imh0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS9hL0FBY0hUdGNqdnlKSXM2SFJoUXFQWXZ2bWp2RHNLak41OXZ4c2FzQkE2MWYtTmxsWnhPMD1zOTYtYyIsImVtYWlsIjoiZGF2dXQub2thbkBnbWFpbC5jb20iLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwiZnVsbF9uYW1lIjoiT2thbiBEQVZVVCIsImlzcyI6Imh0dHBzOi8vYWNjb3VudHMuZ29vZ2xlLmNvbSIsIm5hbWUiOiJPa2FuIERBVlVUIiwicGljdHVyZSI6Imh0dHBzOi8vbGgzLmdvb2dsZXVzZXJjb250ZW50LmNvbS9hL0FBY0hUdGNqdnlKSXM2SFJoUXFQWXZ2bWp2RHNLak41OXZ4c2FzQkE2MWYtTmxsWnhPMD1zOTYtYyIsInByb3ZpZGVyX2lkIjoiMTA4Mzc0NzEyOTU1MTA3Nzc1OTA5Iiwic3ViIjoiMTA4Mzc0NzEyOTU1MTA3Nzc1OTA5In0sInJvbGUiOiJhdXRoZW50aWNhdGVkIiwiYWFsIjoiYWFsMSIsImFtciI6W3sibWV0aG9kIjoib2F1dGgiLCJ0aW1lc3RhbXAiOjE2ODk4NTAzMDB9XSwic2Vzc2lvbl9pZCI6IjM2MWY4MWE5LWZmY2YtNGE1Ni05NzViLTc4MzM3NGIzYzdhZCJ9.1U19f7r-TSA9VjTiQP4Vovnd1AlCuz7pFovt7hpw4sc&expires_in=604800&provider_refresh_token=1%2F%2F09AQRMtQGNgqNCgYIARAAGAkSNwF-L9Ira5xFR18NzO2M9mi62ixWocSiSH06SUCSSYyh082cjLei4aD0xzcK9P7btLIkN3etEds&provider_token=ya29.a0AbVbY6MrOUQbj6HO4M64vKM7FsdJFdWOQoXltySEZkLcV--iSwtSO91x_lg4Y-iD63XUbbMfgDhqyJib8Q58ubb9JdtX_QQebhdR1Tl7Yz5sXwIbvS7WewBXVot0YhSnpm0te9mh8_NpwBbo_cR0PRBlC69_aCgYKAc0SARMSFQFWKvPlfUJRB9xfCnevnoDtmiFnfg0163&refresh_token=GhgurJLmr_xiswoz5fuoGA&token_type=bearer\r\n\r\n\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Go to login\r\n2. Select account\r\n3. Stuck on the page\r\n4. See error\r\n\r\n## Expected behavior\r\n\r\nNeeds to set session to localstorage and cookie and open page.\r\n\r\n## Screenshots\r\n\r\n<img width=\"1143\" alt=\"image\" src=\"https://github.com/supabase/supabase-js/assets/10600157/6b8ce513-611e-4a09-a45d-2a6dbf7ebde2\">\r\n\r\nCode:\r\n\r\nsignInWithOAuth:\r\n<img width=\"567\" alt=\"image\" src=\"https://github.com/supabase/supabase-js/assets/10600157/2573a220-2133-4b91-9137-d911573fee06\">\r\n\r\n\r\n\r\nApp.jsx file:\r\n\r\n<img width=\"576\" alt=\"image\" src=\"https://github.com/supabase/supabase-js/assets/10600157/e130c255-c4d7-4e9a-89ba-b97194cab609\">\r\n\r\n<img width=\"590\" alt=\"image\" src=\"https://github.com/supabase/supabase-js/assets/10600157/9df8d2c6-ab38-4d97-8843-559c0d3f10a0\">\r\n\r\n\r\n\r\n## System information\r\n\r\n- OS: [e.g. macOS, Windows/]\r\n- Browser - Chrome / Safari / Mozilla\r\n- Version of supabase-js: 2.26.0\r\n- Version of Node.js: latest\r\n\r\n## Additional context\r\n\r\nApplication is react app + Vite and using TypeScript.\r\n",
            "author": {
                "login": "okandavut"
            },
            "state": "CLOSED",
            "createdAt": "2023-07-20T10:57:16Z",
            "closedAt": "2023-08-24T23:07:36Z",
            "url": "https://github.com/supabase/supabase-js/issues/811",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5h-Tsd",
                    "body": "Please upgrade to the latest version of gotrue-js.",
                    "author": {
                        "login": "hf"
                    },
                    "createdAt": "2023-07-20T11:05:59Z",
                    "url": "https://github.com/supabase/supabase-js/issues/811#issuecomment-1643723549"
                },
                {
                    "id": "IC_kwDOD79Crs5h-T_k",
                    "body": "I updated  and tried before creating the issue. @hf \r\nCurrent version is:\r\n    \"@supabase/gotrue-js\": \"^2.44.1\",\r\n    \"@supabase/supabase-js\": \"^2.26.0\",\r\n\r\n\r\nI checked package-lock now and can see like this: \r\n\r\n<img width=\"867\" alt=\"image\" src=\"https://github.com/supabase/supabase-js/assets/10600157/53fc3d7d-53de-4930-b97e-4280c9b07232\">",
                    "author": {
                        "login": "okandavut"
                    },
                    "createdAt": "2023-07-20T11:06:56Z",
                    "url": "https://github.com/supabase/supabase-js/issues/811#issuecomment-1643724772"
                },
                {
                    "id": "IC_kwDOD79Crs5iAXnb",
                    "body": "Can anyone help about this problem because after install last version I started see errors. Today also updated and you can see in screenshots. @hf  do you have any suggestion for me?",
                    "author": {
                        "login": "okandavut"
                    },
                    "createdAt": "2023-07-20T16:52:08Z",
                    "url": "https://github.com/supabase/supabase-js/issues/811#issuecomment-1644263899"
                },
                {
                    "id": "IC_kwDOD79Crs5iDzhB",
                    "body": "I'm facing the same issue. I'm using Nuxt@3.6.1 and @nuxtjs/supabase@0.3.8.",
                    "author": {
                        "login": "meathill"
                    },
                    "createdAt": "2023-07-21T07:54:51Z",
                    "url": "https://github.com/supabase/supabase-js/issues/811#issuecomment-1645164609"
                },
                {
                    "id": "IC_kwDOD79Crs5iHO8X",
                    "body": "Used this solution but latest version has problems. \r\n\r\nhttps://github.com/supabase/supabase/issues/15930#issuecomment-1645861712",
                    "author": {
                        "login": "okandavut"
                    },
                    "createdAt": "2023-07-21T18:03:02Z",
                    "url": "https://github.com/supabase/supabase-js/issues/811#issuecomment-1646063383"
                },
                {
                    "id": "IC_kwDOD79Crs5iJuw9",
                    "body": "Having the same issue with Nuxt@3.6.5 and @nuxtjs/supabase@0.3.8",
                    "author": {
                        "login": "nddr"
                    },
                    "createdAt": "2023-07-23T01:30:53Z",
                    "url": "https://github.com/supabase/supabase-js/issues/811#issuecomment-1646718013"
                },
                {
                    "id": "IC_kwDOD79Crs5iOlT5",
                    "body": "Hey folks! Sorry about these issues. Please roll back to any version that worked for you.\r\n\r\nWe're tracking the fix in this issue: https://github.com/supabase/supabase/issues/15930",
                    "author": {
                        "login": "hf"
                    },
                    "createdAt": "2023-07-24T14:07:20Z",
                    "url": "https://github.com/supabase/supabase-js/issues/811#issuecomment-1647990009"
                },
                {
                    "id": "IC_kwDOD79Crs5k4eXd",
                    "body": "hey everyone, we're gonna close this since the issue has been resolved as mentioned in https://github.com/supabase/supabase/issues/15930",
                    "author": {
                        "login": "kangmingtay"
                    },
                    "createdAt": "2023-08-24T23:07:36Z",
                    "url": "https://github.com/supabase/supabase-js/issues/811#issuecomment-1692526045"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5s1n7_",
            "number": 823,
            "title": "Nothing happen after login with Google",
            "body": "# Bug report\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nAfter setting up my login with credentials (that work perfectly good) i tried to setup the google provider. I followed the documentation but when i click to login, i'm redirected to the google login page, i choose the user that i want, and then i'm redirect to my app but not connected. I see the new user in the database with the status \"never\" in the row \"Last Sign In\". When i try again that row update with the current date but in my app i'm not logged in.\r\n\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Go tologin\r\n2. Click on google button\r\n3. redirected to my website but not connected\r\n\r\n## Expected behavior\r\n\r\nI want to be connected after the google redirection.\r\n\r\n## Screenshots\r\n\r\n\r\nthis is my login function : https://gyazo.com/bd500927a2a5331ec5a54ff34ab87204\r\n\r\nthis the URL i got when i'm redirect to my website : https://gyazo.com/73724c00ad7a62ce9be91e7b90a81385\r\n\r\n## System information\r\n\r\n- OS: widnows\r\n- Browser (if applies) chrome\r\n- Version of supabase-js: 2.31.0\r\n- Version of Node.js: v16.14.2\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "NicolasDeGouveia"
            },
            "state": "CLOSED",
            "createdAt": "2023-07-28T08:48:55Z",
            "closedAt": "2023-08-24T16:32:22Z",
            "url": "https://github.com/supabase/supabase-js/issues/823",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5jCpfU",
                    "body": "Are you using hosted supabase or a local stand-alone?",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2023-08-02T07:15:13Z",
                    "url": "https://github.com/supabase/supabase-js/issues/823#issuecomment-1661638612"
                },
                {
                    "id": "IC_kwDOD79Crs5jfkx_",
                    "body": "I'm using a local stand-alone",
                    "author": {
                        "login": "NicolasDeGouveia"
                    },
                    "createdAt": "2023-08-08T09:07:31Z",
                    "url": "https://github.com/supabase/supabase-js/issues/823#issuecomment-1669221503"
                },
                {
                    "id": "IC_kwDOD79Crs5khkaw",
                    "body": "@NicolasDeGouveia can you please include the code you used to initialise the supabase client? ",
                    "author": {
                        "login": "kangmingtay"
                    },
                    "createdAt": "2023-08-21T15:13:15Z",
                    "url": "https://github.com/supabase/supabase-js/issues/823#issuecomment-1686521520"
                },
                {
                    "id": "IC_kwDOD79Crs5khqRs",
                    "body": "I initialize the supabase client with : `const supabase = createClientComponentClient();`",
                    "author": {
                        "login": "NicolasDeGouveia"
                    },
                    "createdAt": "2023-08-21T15:26:16Z",
                    "url": "https://github.com/supabase/supabase-js/issues/823#issuecomment-1686545516"
                },
                {
                    "id": "IC_kwDOD79Crs5kiGVn",
                    "body": "@NicolasDeGouveia are you calling the `handleSignInClick` function from the client-side or server-side? the supabase client you created with `createClientComponentClient()` returns a supabase client that uses PKCE for auth. This means that after the oauth flow is completed with google, supabase auth returns a code in the query param which will be exchange for a pair of access and refresh tokens. \r\n\r\nIf you open up your browser network inspector when being redirected to `http://localhost:3000?code....`, you should be able to see requests made to `/token?grant_type=pkce` and check if they are failing. This is the endpoint that handles the code exchange i mentioned earlier. If no requests are made to that endpoint, can you reach out to us via support (https://app.supabase.com/support/new) and we can investigate further. ",
                    "author": {
                        "login": "kangmingtay"
                    },
                    "createdAt": "2023-08-21T16:36:37Z",
                    "url": "https://github.com/supabase/supabase-js/issues/823#issuecomment-1686660455"
                },
                {
                    "id": "IC_kwDOD79Crs5k0X0j",
                    "body": "@kangmingtay I'm using it in the client-side. I don't know why but now it's seems to work, but now when i'm logged with google i'm well redirected to my homepage but i must press F5 to be able to see the user connected, even if i have a `router.refresh()` in my function : \r\n```\r\n    const handleSignGoogle = async () => {\r\n        await supabase.auth.signInWithOAuth({\r\n            provider: 'google',\r\n            options: {\r\n                queryParams: {\r\n                    access_type: 'offline',\r\n                    prompt: 'consent',\r\n                },\r\n            },\r\n        });\r\n        router.refresh();\r\n    };\r\n```\r\nAny ideas of why ?\r\n",
                    "author": {
                        "login": "NicolasDeGouveia"
                    },
                    "createdAt": "2023-08-24T10:49:49Z",
                    "url": "https://github.com/supabase/supabase-js/issues/823#issuecomment-1691450659"
                },
                {
                    "id": "IC_kwDOD79Crs5k2mZj",
                    "body": "@NicolasDeGouveia not too sure what `router.refresh()` here does but calling it right after `signInWithOAuth()` won't help because `signInWithOAuth()` only redirects you to the oauth provider (google) to kickstart the oauth flow. After authenticating with google, you are actually redirected to an endpoint on Supabase Auth first before redirecting again back to the client. \r\n\r\nYou can try moving `router.refresh()` to your homepage and see if that helps. Since this issue is resolved, i'm gonna mark it as closed for now.",
                    "author": {
                        "login": "kangmingtay"
                    },
                    "createdAt": "2023-08-24T16:32:22Z",
                    "url": "https://github.com/supabase/supabase-js/issues/823#issuecomment-1692034659"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5tYwBE",
            "number": 825,
            "title": "?access_token on different oauth triggers logout",
            "body": "In my app I have different oauth, not related to login and after redirect it addes ?access_token={blabla} to my url and for some reason i get logged out.\r\n\r\nWhat could be the problem?",
            "author": {
                "login": "yarikbratashchuk"
            },
            "state": "CLOSED",
            "createdAt": "2023-08-03T14:40:53Z",
            "closedAt": "2023-08-03T22:54:17Z",
            "url": "https://github.com/supabase/supabase-js/issues/825",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs5td6Dc",
            "number": 826,
            "title": "Subscribing to PostgreSQL failed: {:error, \"Error parsing `filter` params ...\"}",
            "body": "# Bug report\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nWhen setting up a `supabaseListener` on a public users table (not users.auth), setting the filter to a text column (not a uuid column), causes an error in the realtime logs:\r\n\r\n> Subscribing to PostgreSQL failed: {:error, \"Error parsing filter params: [\"f96efe56-ff22-4fc4-abc1-abc1\"]\"}\r\n\r\n## To Reproduce\r\n\r\nTry to create a subscription inside a useEffect hook with:\r\n\r\n```\r\n  supabaseListener = supabase\r\n    .channel(\"balance\")\r\n    .on(\r\n      \"postgres_changes\",\r\n      {\r\n        event: \"UPDATE\",\r\n        schema: \"public\",\r\n        table: \"users\",\r\n        filter: `id=eq.${userId}`,\r\n      },\r\n      handleRecordUpdated\r\n    )\r\n    .subscribe();\r\n\r\n  return () => {\r\n    authListener.unsubscribe();\r\n    if (supabaseListener) {\r\n      supabaseListener.unsubscribe();\r\n    }\r\n  };\r\n```\r\n\r\n## Expected behavior\r\n\r\nA subscription is created.\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser (if applies) Arc (Chromium)\r\n- Version of supabase-js: 2.31.0\r\n- Version of Node.js: 18.16.0\r\n\r\n## Additional context\r\n\r\nI checked this with [StackOverflow](https://stackoverflow.com/questions/76817808/supabase-subscribing-to-postgresql-failed-error-error-parsing-filter-pa) and no one there could figure it out the issue either.",
            "author": {
                "login": "AlexIsMaking"
            },
            "state": "CLOSED",
            "createdAt": "2023-08-04T11:13:51Z",
            "closedAt": "2023-08-09T21:38:35Z",
            "url": "https://github.com/supabase/supabase-js/issues/826",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5jq4-o",
                    "body": "I ended up being unable to reproduce this issue myself 5 days later and getting the subscriptions working so closing the issue.",
                    "author": {
                        "login": "AlexIsMaking"
                    },
                    "createdAt": "2023-08-09T21:38:35Z",
                    "url": "https://github.com/supabase/supabase-js/issues/826#issuecomment-1672187816"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5tnckx",
            "number": 829,
            "title": "Error while calling a SQL function using supabase-js",
            "body": "**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. I ve create a simple function using SQL editor:\r\n\r\n`DROP FUNCTION IF exists public.check_planning_conflit;\r\nCREATE FUNCTION public.check_planning_conflit(clinicid int) RETURNS int AS $$\r\n  SELECT clinicid;\r\n$$ LANGUAGE SQL;\r\nGRANT EXECUTE ON FUNCTION public.check_planning_conflit(int) TO PUBLIC;`\r\n\r\n3. I ve call the previous function using supabase js\r\n`const checkConflitDoctorAvailibility = async (\r\n\tplanning: {\r\n\t\tclinic_id: number,\r\n\t}\r\n) => {\r\n\tconst { data, error } = await supabase.rpc('check_planning_conflit', { clinicid: planning.clinic_id })\r\n\tif (error)\r\n\t\tthrow error;\r\n\treturn data;\r\n}`\r\n\r\n**Expected behavior**\r\nIt must return simply the param that ive passed on the arguments \r\n\r\n**Error**\r\n`{\r\n    \"code\": \"PGRST202\",\r\n    \"details\": \"Searched for the function public.check_planning_conflit without parameters or with a single unnamed json/jsonb parameter, but no matches were found in the schema cache.\",\r\n    \"hint\": null,\r\n    \"message\": \"Could not find the function public.check_planning_conflit without parameters in the schema cache\"\r\n}`\r\n\r\n**Desktop**\r\n - OS: iOS\r\n - Browser  chrome\r\n - Version of CLI v1.57.7\r\n - Version of supabase-js v2.32.0\r\n - Version of Node.js v18.15.0\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "ayoubgm"
            },
            "state": "CLOSED",
            "createdAt": "2023-08-07T09:30:07Z",
            "closedAt": "2023-08-07T11:49:56Z",
            "url": "https://github.com/supabase/supabase-js/issues/829",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5jZz3a",
                    "body": "I fix the problem by pass all params as text type and convert it on SQL function to integer with i pass it as param type number doesn't find the function ",
                    "author": {
                        "login": "ayoubgm"
                    },
                    "createdAt": "2023-08-07T11:49:52Z",
                    "url": "https://github.com/supabase/supabase-js/issues/829#issuecomment-1667710426"
                },
                {
                    "id": "IC_kwDOD79Crs5jbDp2",
                    "body": "> I fix the problem by pass all params as text type and convert it on SQL function to integer with i pass it as param type number doesn't find the function\r\n\r\nThe function detection doesn't depend on the types, only on the parameter names.\r\n\r\n> Searched for the function public.check_planning_conflit without parameter\r\n\r\nThe error message indicates that there was no body sent on the request. So the root cause is likely somewhere on the JS code.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-08-07T15:00:18Z",
                    "url": "https://github.com/supabase/supabase-js/issues/829#issuecomment-1668037238"
                },
                {
                    "id": "IC_kwDOD79Crs5jbGiH",
                    "body": "I have kept checking the parameters  names are correct,\r\nits not depend on names only but also on there types too ! ",
                    "author": {
                        "login": "ayoubgm"
                    },
                    "createdAt": "2023-08-07T15:04:30Z",
                    "url": "https://github.com/supabase/supabase-js/issues/829#issuecomment-1668049031"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5tuOI-",
            "number": 830,
            "title": "TypeError: Illegal invocation",
            "body": "# Bug report\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\nWhen executing the `supabase.auth.signOut()` method, the following error message occurs.\r\n\r\n```\r\nUncaught (in promise) TypeError: Illegal invocation\r\n    at run (utils.js:41:9)\r\n    at Array.forEach (<anonymous>)\r\n    at run_all (utils.js:53:6)\r\n    at destroy_component (Component.js:68:3)\r\n    at root.svelte:44:41\r\n    at transitions.js:89:5\r\n    at run (utils.js:41:9)\r\n    at Array.forEach (<anonymous>)\r\n    at run_all (utils.js:53:6)\r\n    at check_outros (transitions.js:57:3)\r\n```\r\n\r\n## To Reproduce\r\n\r\nCall the `supabase.auth.signOut()` method.\r\n\r\n## Expected behavior\r\n\r\nA clear and concise description of what you expected to happen.\r\n\r\n## System information\r\n- Version of supabase-js:: 2.32.0\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "yunseop-dev"
            },
            "state": "CLOSED",
            "createdAt": "2023-08-08T08:27:50Z",
            "closedAt": "2023-08-09T05:12:34Z",
            "url": "https://github.com/supabase/supabase-js/issues/830",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5jlJGr",
                    "body": "sorry, it's my mistake...",
                    "author": {
                        "login": "yunseop-dev"
                    },
                    "createdAt": "2023-08-09T05:12:34Z",
                    "url": "https://github.com/supabase/supabase-js/issues/830#issuecomment-1670681003"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5twrrD",
            "number": 831,
            "title": "Is there a way to handle oauth without using detectSessionInUrl=true",
            "body": "Hello\r\n\r\nIn my app i'm using oauth not just for the login, but on the dashboard to connect integrations. And if I have detectSessionInUrl=true the flow fails because supabase client thinks that \"access_token\" should be checked and so it brings me to the login page, as this token is not valid for supabase.\r\n\r\nIs there a way to work this around? So i can have oauth for supabase with ?#access_token= returned and also oauth inside my dashboard that I want supabase client to not touch?",
            "author": {
                "login": "yarikbratashchuk"
            },
            "state": "CLOSED",
            "createdAt": "2023-08-08T14:53:37Z",
            "closedAt": "2023-08-09T09:04:00Z",
            "url": "https://github.com/supabase/supabase-js/issues/831",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5jiq_J",
                    "body": "would be nice if there was a way to provide path at which you want url parsing to work",
                    "author": {
                        "login": "yarikbratashchuk"
                    },
                    "createdAt": "2023-08-08T17:35:49Z",
                    "url": "https://github.com/supabase/supabase-js/issues/831#issuecomment-1670033353"
                },
                {
                    "id": "IC_kwDOD79Crs5jmKRK",
                    "body": "found a solution:\r\n```\r\nconst supabase = createClient(supabaseUrl, supabaseKey, {auth: {detectSessionInUrl: !window.location.href.includes(\"/oauth\")}});\r\n```",
                    "author": {
                        "login": "yarikbratashchuk"
                    },
                    "createdAt": "2023-08-09T09:04:00Z",
                    "url": "https://github.com/supabase/supabase-js/issues/831#issuecomment-1670947914"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5uIqDV",
            "number": 834,
            "title": "Can not use supabase js lib in a module web worker",
            "body": "I am trying to use supabase in a web worker as follows.\r\n\r\nindex.html\r\n```javascript\r\n var worker = new Worker('worker.js', {type : 'module'});\r\n```\r\n\r\nworker.js\r\n```javascript\r\nimport { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm';\r\nconst supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key')\r\nlet { data, e } = await supabase.from('test').select('id');\r\nconsole.log(data);\r\n```\r\nI have already replace 'https://xyzcompany.supabase.co' and 'public-anon-key' with right string and test them in a normal web page. In this web worker the data object is undefined. But the supabase object can be viewed. ",
            "author": {
                "login": "sunzhuo"
            },
            "state": "CLOSED",
            "createdAt": "2023-08-12T05:17:00Z",
            "closedAt": "2023-08-12T05:33:40Z",
            "url": "https://github.com/supabase/supabase-js/issues/834",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs5uc9tO",
            "number": 836,
            "title": "onAuthStateChange does not fire with password reset link or magic link",
            "body": "I'm currently having some problems with the onAuthStateChange being fired whenever a user tries to reset a password. The url should automatically be recognized by supabase and log in the user from my understanding, however, no such this is happening and my application keeps displaying a loading state. \r\n\r\nI've also tried setting the session with the access_token and refresh_token from the url and use setSession(), however this also returns no data nor sets a session. \r\n\r\nI'm using plain react with react-router-dom\r\n\r\nAny help would be much appreciated.\r\n\r\nHere is my auth provider code:\r\n\r\n```\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n    const [user, setUser] = useState<User | null>();\r\n    const [session, setSession] = useState<Session | null>(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [currentUser, setCurrentUser] = useState<UserType | null>(null);\r\n\r\n    useEffect(() => {\r\n        const setData = async () => {\r\n            const {\r\n                data: { session },\r\n                error,\r\n            } = await supabase.auth.getSession();\r\n            if (error) throw error;\r\n            setSession(session);\r\n            setUser(session?.user);\r\n            if (session?.user) {\r\n                setCurrentUser(await fetchUser(session?.user.id));\r\n            }\r\n\r\n            setLoading(false);\r\n        };\r\n\r\n        const {\r\n            data: { subscription },\r\n        } = supabase.auth.onAuthStateChange(async (_event, session) => {\r\n            setSession(session);\r\n            setUser(session?.user);\r\n            if (session?.user) {\r\n                setCurrentUser(await fetchUser(session?.user.id));\r\n            }\r\n            setLoading(false);\r\n        });\r\n\r\n        setData();\r\n\r\n        return () => subscription.unsubscribe();\r\n    }, []);\r\n\r\n    const signIn = async (email: string, password: string) => {\r\n        const { error } = await supabase.auth.signInWithPassword({ email, password });\r\n        if (error) {\r\n            throw new Error(error.message);\r\n        }\r\n    };\r\n\r\n    const signUp = async (email: string, password: string) => {\r\n        const { error } = await supabase.auth.signUp({ email, password });\r\n        if (error) {\r\n            throw new Error(error.message);\r\n        }\r\n    };\r\n\r\n    const signOut = async () => {\r\n        const { error } = await supabase.auth.signOut();\r\n\r\n        if (error) {\r\n            throw new Error(error.message);\r\n        } else {\r\n            setUser(null);\r\n        }\r\n    };\r\n\r\n    const resetPassword = async (email: string) => {\r\n        const { data, error } = await supabase.auth.resetPasswordForEmail(email);\r\n\r\n        if (error) {\r\n            console.log(error);\r\n        }\r\n\r\n        if (data) {\r\n            console.log(data);\r\n        }\r\n    };\r\n    return <AuthContext.Provider value={{ user, session, signIn, signUp, signOut, resetPassword, currentUser }}>{loading ? <>Loading</> : children}</AuthContext.Provider>;\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\n```",
            "author": {
                "login": "NielsVeen"
            },
            "state": "CLOSED",
            "createdAt": "2023-08-16T11:55:29Z",
            "closedAt": "2023-08-20T10:23:32Z",
            "url": "https://github.com/supabase/supabase-js/issues/836",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5kZpdf",
                    "body": "Are you using auth helpers?",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2023-08-18T21:18:43Z",
                    "url": "https://github.com/supabase/supabase-js/issues/836#issuecomment-1684445023"
                },
                {
                    "id": "IC_kwDOD79Crs5kcGko",
                    "body": "I also faced this issue. I Got \"Auth Session Missing\" error and session was null. Also found this: https://stackoverflow.com/questions/76733274/supabase-reset-password-error-auth-session-missing ,but it is not that helpful. I previously managed to reset the password and it seems to be a new bug. Also in the docs (supabase-js) there is a section for React apps that wasn't there before. The example is ridiculous since if this is the only way to detect for RESET-PASSWORD event and the only way to do so is by prompting the user, what about UX? (designed UI and route in client for password update).  ",
                    "author": {
                        "login": "TalMikey"
                    },
                    "createdAt": "2023-08-19T19:22:07Z",
                    "url": "https://github.com/supabase/supabase-js/issues/836#issuecomment-1685088552"
                },
                {
                    "id": "IC_kwDOD79Crs5kctZX",
                    "body": "So the fix for me was fairly simply, I just had to update supabase-js to the latest version.",
                    "author": {
                        "login": "NielsVeen"
                    },
                    "createdAt": "2023-08-20T10:23:32Z",
                    "url": "https://github.com/supabase/supabase-js/issues/836#issuecomment-1685247575"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5vTneV",
            "number": 843,
            "title": "React Native - Expo, Password Reset, redirect URL and Exchange authorization code.",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n- Related issues (#5663), (https://github.com/supabase/auth-helpers/issues/567)\r\n## Describe the bug\r\n\r\nI am encountering difficulties with the password reset feature in while developing a React Native Expo application. The password reset is not functioning as expected, and I am experiencing inconsistent behavior with the redirect URL. Additionally, how to handle reset password after redirect what is `code` ? \r\n![Screenshot from 2023-08-23 02-16-41](https://github.com/supabase/supabase/assets/75797110/f5142526-de31-4271-889d-755fa89f2a61)\r\n\r\n\r\n## Actual Behavior\r\n- Sometimes it's redirect to base URL `exp://127.0.0.1:8081` and some time it is redirecting to provided URL `exp://127.0.0.1:8081/--/resetPassword`,\r\n\r\n-  Then at final approach as supabase [docs](https://supabase.com/docs/guides/auth/auth-password-reset#exchange-authorization-code): \r\n```ts // api/auth/callback.ts\r\n\r\n// The code is retrieved from the query parameter - use whichever mechanism is recommended\r\n// for your app/framework. This is just an example.\r\nconst code = url.searchParams.get('code')\r\n\r\n// call the Supabase API to exchange the code for a session\r\nawait supabase.auth.exchangeCodeForSession(code)\r\n```\r\nHowever, the query parameter looks like this:\r\n`exp://127.0.0.1:8081/--/resetPassword#access_token=123&expires_in=3600&refresh_token=123&token_type=bearer&type=recovery\"`\r\n\r\n\r\n- Redirect URLs\r\n![Screenshot from 2023-08-23 01-20-06](https://github.com/supabase/supabase/assets/75797110/d0a5f8cb-82de-429c-8775-87f55cf000e6)\r\n\r\n- Code snippets:\r\n`supabase.ts`\r\n```ts\r\nimport \"react-native-url-polyfill/auto\";\r\nimport * as SecureStore from \"expo-secure-store\";\r\nimport { createClient } from \"@supabase/supabase-js\";\r\nimport { SUPABASE_ANON_KEY } from \"@env\";\r\nimport { SupabaseAuthClientOptions } from \"@supabase/supabase-js/dist/module/lib/types\";\r\n\r\nconst ExpoSecureStoreAdapter = {\r\n  getItem: (key: string) => {\r\n    return SecureStore.getItemAsync(key);\r\n  },\r\n  setItem: (key: string, value: string) => {\r\n    SecureStore.setItemAsync(key, value);\r\n  },\r\n  removeItem: (key: string) => {\r\n    SecureStore.deleteItemAsync(key);\r\n  },\r\n};\r\n\r\nconst supabaseUrl = \"https://bbrkeceesipzffkdvfpd.supabase.co\";\r\nconst supabaseAnonKey = SUPABASE_ANON_KEY;\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\r\n  auth: {\r\n    storage: ExpoSecureStoreAdapter as SupabaseAuthClientOptions[\"storage\"],\r\n    autoRefreshToken: true,\r\n    persistSession: true,\r\n    detectSessionInUrl: false,\r\n  },\r\n});\r\n```\r\n\r\n`LoginScreen.ts`\r\n```ts\r\n    const resetPassword = async (email: string) => {\r\n\r\n      const resetPasswordURL = Linking.createURL(\"resetPassword\"); \r\n\r\n      const { data, error } = await supabase.auth.resetPasswordForEmail(email, {\r\n        redirectTo: resetPasswordURL,\r\n      });\r\n    };\r\n```\r\n\r\n\r\n\r\n- [Gotcha supabase/supabase#2: Supabase's Unconventional Query Parameters](https://blog.theodo.com/2023/03/supabase-reset-password-rn/)\r\n\r\n## Screenshots\r\n![inspector](https://github.com/supabase/supabase/assets/75797110/331e2067-5978-4b7f-adcc-09a3f4d4b1c8)\r\n\r\n## System information\r\n\r\n* React Native: 0.72.3\r\n* Expo: ^49.0.0\r\n* Expo Linking: ~5.0.2\r\n* Supabase: ^2.32.0\r\n\r\n\r\n",
            "author": {
                "login": "AHMED-5G"
            },
            "state": "OPEN",
            "createdAt": "2023-08-22T23:24:06Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/843",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5lJqlB",
                    "body": "To take advantage of the exchange code route method, you need to set auth > flowType option to pkce for your supabase client",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2023-08-29T08:52:52Z",
                    "url": "https://github.com/supabase/supabase-js/issues/843#issuecomment-1697032513"
                },
                {
                    "id": "IC_kwDOD79Crs5l1Qn3",
                    "body": "> However, the query parameter looks like this:\r\nexp://127.0.0.1:8081/--/resetPassword#access_token=123&expires_in=3600&refresh_token=123&token_type=bearer&type=recovery\"\r\n\r\nMultiple problems here:\r\n\r\n1. As @j4w8n mentioned you need flowtype set to pkce.\r\n2. For non PKCE flow you need to replace the # with ? to be able to extract it from the query.\r\n\r\nAugment this for PKCE flow once you have that enabled. You also need URL polyfill to be installed.\r\n```ts\r\nconst parsedUrl = url_with_code_as_hashtag.replace(\"#\", \"?\");\r\nconst url = new URL(parsedUrl);\r\nconst access_token = url.searchParams.get(\"access_token\");\r\nconst refresh_token = url.searchParams.get(\"refresh_token\");\r\n\r\n// Handle code exchanges\r\n```\r\n\r\nI'm using Supabase without PKCE with success from the above code.",
                    "author": {
                        "login": "sannajammeh"
                    },
                    "createdAt": "2023-09-06T14:16:18Z",
                    "url": "https://github.com/supabase/supabase-js/issues/843#issuecomment-1708460535"
                },
                {
                    "id": "IC_kwDOD79Crs5l1jl-",
                    "body": "> > However, the query parameter looks like this:\n> exp://127.0.0.1:8081/--/resetPassword#access_token=123&expires_in=3600&refresh_token=123&token_type=bearer&type=recovery\"\n> \n> Multiple problems here:\n> \n> 1. As @j4w8n mentioned you need flowtype set to pkce.\n> 2. For non PKCE flow you need to replace the # with ? to be able to extract it from the query.\n> \n> Augment this for PKCE flow once you have that enabled. You also need URL polyfill to be installed.\n> ```ts\n> const parsedUrl = url_with_code_as_hashtag.replace(\"#\", \"?\");\n> const url = new URL(parsedUrl);\n> const access_token = url.searchParams.get(\"access_token\");\n> const refresh_token = url.searchParams.get(\"refresh_token\");\n> \n> // Handle code exchanges\n> ```\n> \n> I'm using Supabase without PKCE with success from the above code.\n\nThat is by design. The supabase client, in non-pkce mode, should be handling that scenario automatically.",
                    "author": {
                        "login": "j4w8n"
                    },
                    "createdAt": "2023-09-06T14:58:29Z",
                    "url": "https://github.com/supabase/supabase-js/issues/843#issuecomment-1708538238"
                },
                {
                    "id": "IC_kwDOD79Crs5l3gju",
                    "body": "> That is by design. The supabase client, in non-pkce mode, should be handling that scenario automatically.\r\n\r\nYes I'm aware. Not Supabase problem I'm mentioning.",
                    "author": {
                        "login": "sannajammeh"
                    },
                    "createdAt": "2023-09-06T20:22:13Z",
                    "url": "https://github.com/supabase/supabase-js/issues/843#issuecomment-1709050094"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5vVC11",
            "number": 845,
            "title": "Error with cross-fetch in postgres-js & supabase-js",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\nI just upgraded to the latest Supabase-js package 2.33.1 when I try to use the api,\r\n\r\nUncaught (in promise) SyntaxError: The requested module '/node_modules/.pnpm/cross-fetch@3.1.8/node_modules/cross-fetch/dist/browser-ponyfill.js?v=bd2992b8' does not provide an export named 'default' (at PostgrestBuilder.ts:1:8)\r\n\r\nI uninstalled node_modules and tried to reinstall them and I still get the error, all when running supabase-js\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Go to '\u2026'\r\n2. Click on '\u2026'\r\n3. Scroll down to '\u2026'\r\n4. See error\r\n\r\n## Expected behavior\r\n\r\nA clear and concise description of what you expected to happen.\r\n\r\n## Screenshots\r\n\r\n<img width=\"568\" alt=\"Captura de pantalla 2023-08-25 a la(s) 6 41 30 p m\" src=\"https://github.com/supabase/supabase-js/assets/42183700/c5c52630-3508-49b1-8e14-1b0c458bb35f\">\r\n\r\n\r\n## System information\r\n\r\nSystem:\r\nOS: macOS 13.5\r\nCPU: (8) arm64 Apple M1 Pro\r\nMemory: 185.33 MB / 16.00 GB\r\nShell: 5.9 - /bin/zsh\r\nBinaries:\r\nNode: 18.14.2 - ~/.nvm/versions/node/v18.14.2/bin/node\r\nnpm: 9.5.0 - ~/.nvm/versions/node/v18.14.2/bin/npm\r\nBrowsers:\r\nBrave Browser: 116.1.57.47\r\nChrome: 116.0.5845.110\r\nSafari: 16.6\r\nnpmPackages:\r\n@builder.io/qwik: ^1.2.8 => 1.2.8\r\n@builder.io/qwik-city: ^1.2.8 => 1.2.8\r\n@supabase/supabase-js: ^2.33.1 => 2.33.1\r\nundici: 5.22.1 => 5.22.1\r\nvite: 4.3.5 => 4.3.5\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "kokecar11"
            },
            "state": "OPEN",
            "createdAt": "2023-08-25T23:42:48Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/845",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5lGEo_",
                    "body": "With nextjs same issue please review and correct possible import errors\r\n<img width=\"987\" alt=\"Captura de pantalla 2023-08-28 a la(s) 12 42 38 p m\" src=\"https://github.com/supabase/supabase-js/assets/42183700/4dba78a0-4544-499a-b0ad-31ebb02cfb9f\">\r\n",
                    "author": {
                        "login": "kokecar11"
                    },
                    "createdAt": "2023-08-28T17:42:48Z",
                    "url": "https://github.com/supabase/supabase-js/issues/845#issuecomment-1696090687"
                },
                {
                    "id": "IC_kwDOD79Crs5lJFqk",
                    "body": "Seems like an issue on cross-fetch: https://github.com/lquixada/cross-fetch/issues/120#issuecomment-1617172860\r\n\r\nCan you run `npm up @supabase/postgrest-js` and see if the error changes? We're about to replace cross-fetch with using node-fetch directly which can possibly fix this.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-08-29T07:01:57Z",
                    "url": "https://github.com/supabase/supabase-js/issues/845#issuecomment-1696881316"
                },
                {
                    "id": "IC_kwDOD79Crs5lJILK",
                    "body": "Also, can you share more of the logs from the Next.js/pnpm build?",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-08-29T07:10:49Z",
                    "url": "https://github.com/supabase/supabase-js/issues/845#issuecomment-1696891594"
                },
                {
                    "id": "IC_kwDOD79Crs5l4R3P",
                    "body": "@soedirgo - I'm also seeing this runtime error with the Vite framework.\r\n\r\nWhat logs do you require exactly? Just a package-lock or something more specific?",
                    "author": {
                        "login": "hash-bang"
                    },
                    "createdAt": "2023-09-06T23:26:02Z",
                    "url": "https://github.com/supabase/supabase-js/issues/845#issuecomment-1709252047"
                },
                {
                    "id": "IC_kwDOD79Crs5l4SYU",
                    "body": "To elaborate - I've got @supabase/supabase-js in a submodule that the main project is importing.\r\nThis submodule works fine when _linked_ instead of _installed_ which may suggest the issue is one of the pre-deps for @supabase/supabase-js not importing the updated version of node-fetch?",
                    "author": {
                        "login": "hash-bang"
                    },
                    "createdAt": "2023-09-06T23:29:19Z",
                    "url": "https://github.com/supabase/supabase-js/issues/845#issuecomment-1709254164"
                },
                {
                    "id": "IC_kwDOD79Crs5l4fWj",
                    "body": "Alright after some hair pulling I got this to play nice with Vite.\r\n\r\nIt looks like some of the modules need explicit aliasing otherwise Vite / ESBuild / Rollup seems to get confused and import the wrong file.\r\n\r\nMerge this into `vite.config.js`:\r\n```javascript\r\nimport { defineConfig } from 'vite';\r\nexport default defineConfig(({mode}) => ({\r\n\t// ... presumably other existing config ... //\r\n\tresolve: {\r\n\t\talias: {\r\n\t\t\t'cross-fetch': 'cross-fetch/dist/browser-ponyfill.js',\r\n\t\t\t'@supabase/node-fetch': '@supabase/node-fetch/lib/index.mjs',\r\n\t\t\t'websocket': 'websocket/index.js'\r\n\t\t},\r\n\t},\r\n}));\r\n```",
                    "author": {
                        "login": "hash-bang"
                    },
                    "createdAt": "2023-09-07T00:50:12Z",
                    "url": "https://github.com/supabase/supabase-js/issues/845#issuecomment-1709307299"
                },
                {
                    "id": "IC_kwDOD79Crs5l5fUU",
                    "body": "@hash-bang I'm referring to the `Import trace for requested module` logs above - the actual error messages should be above it.\r\n\r\nDo you have a repo where I could reproduce this issue? I'd like to make this work OOtB if possible.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-09-07T06:46:50Z",
                    "url": "https://github.com/supabase/supabase-js/issues/845#issuecomment-1709569300"
                },
                {
                    "id": "IC_kwDOD79Crs5mGu6j",
                    "body": "@soedirgo after playing around a bit it looks like this only seems to be a problem when Supabase is a sub-dependency (i.e. project imports NPM which _then_ imports Supabase).\r\n\r\nI've set up a simple demo of us using Supabase [here](https://stackblitz.com/edit/vitejs-vite-eqosjg?file=src%2FApp.vue) its using our in house wrapping NPM [Vitel](https://www.npmjs.com/package/@momsfriendlydevco/vitel) which gives us a thin wrapper around Supabase to handle some company specific things.",
                    "author": {
                        "login": "hash-bang"
                    },
                    "createdAt": "2023-09-11T01:54:20Z",
                    "url": "https://github.com/supabase/supabase-js/issues/845#issuecomment-1713041059"
                },
                {
                    "id": "IC_kwDOD79Crs5mItyn",
                    "body": "I don't see any relevant warnings in that demo. Am I missing a step?\r\n\r\n<img width=\"996\" alt=\"Screenshot 2023-09-11 at 5 54 24 PM\" src=\"https://github.com/supabase/supabase-js/assets/31685197/3ff4b302-3bd6-4da8-9024-e887ea86b359\">\r\n\r\nIn any case, does upgrading to supabase-js v2.33.2 help?",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-09-11T09:55:44Z",
                    "url": "https://github.com/supabase/supabase-js/issues/845#issuecomment-1713560743"
                },
                {
                    "id": "IC_kwDOD79Crs5mNjV_",
                    "body": "I assume you're doing the \"Open in new Tab\" thing then opening the console there?\r\n\r\nIf so that's, odd because its the first error that shows up for me:\r\n\r\n![2023-09-12_11-21](https://github.com/supabase/supabase-js/assets/624527/fed7b05d-716f-4510-8562-e4cc89763380)\r\n\r\nOne question though - if I'm right in assuming that node-fetch is the _backend_ wrapper to ponyfill the `fetch()` API, is there a reason its not just falling back to using the native version for frontend imports if its already present?\r\n\r\n**Edit**: I can also confirm that upping the sub-module to v2.33.2 has the same result - I've updated the demo link to reflect the new package-lock with that version.",
                    "author": {
                        "login": "hash-bang"
                    },
                    "createdAt": "2023-09-12T01:25:26Z",
                    "url": "https://github.com/supabase/supabase-js/issues/845#issuecomment-1714828671"
                },
                {
                    "id": "IC_kwDOD79Crs5m-qPx",
                    "body": "I'm having this problem too, with a Vite build. When we were still on `cross-fetch`, the `alias` hack worked for me. But it no longer does with `@supabase/node-fetch`.",
                    "author": {
                        "login": "mikestopcontinues"
                    },
                    "createdAt": "2023-09-20T13:11:43Z",
                    "url": "https://github.com/supabase/supabase-js/issues/845#issuecomment-1727702001"
                },
                {
                    "id": "IC_kwDOD79Crs5m-xgP",
                    "body": "@mikestopcontinues please provide a GitHub repo with the reproduction of this issue. I tested the one @hash-bang provided above and cannot replicate the issue he is having either. It's also harder to download files off Stackblitz to run them locally to dig into the issue further.",
                    "author": {
                        "login": "silentworks"
                    },
                    "createdAt": "2023-09-20T13:27:34Z",
                    "url": "https://github.com/supabase/supabase-js/issues/845#issuecomment-1727731727"
                },
                {
                    "id": "IC_kwDOD79Crs5nKJsg",
                    "body": "@silentworks - apologies, I didn't know you had issues downloading the project.\r\n\r\nSteps to reproduce:\r\n\r\n1. Download the [Stackblitz export](https://github.com/supabase/supabase-js/files/12696009/vitejs-vite-brr7vq.zip)\r\n2. Run `npm run dev`\r\n3. Navigate to page with the devtools console open to see the above error with node-fetch\r\n\r\n\r\n\r\n",
                    "author": {
                        "login": "hash-bang"
                    },
                    "createdAt": "2023-09-22T02:19:07Z",
                    "url": "https://github.com/supabase/supabase-js/issues/845#issuecomment-1730714400"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5wZesG",
            "number": 848,
            "title": "Table INSERT subscriptions fail with Error 401: Not Unauthorized",
            "body": "## Describe the bug\r\n\r\nI've subscribed to inserts on a table using the supabase api, when I add a row into that same table on the supabase web interface I receive notice that a change has occurred but not the content of the row that was inserted. I've ensured that the table has been added to the supabase-realtime channel just like the guide. I have tried to disable/enable RLS, giving all permissions to both anon and public roles, and also tried to use the api service key. None of these resolved the 401: unauthorized error. \r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\nCode to subscribe to channel, which I copied from the API tab on the web interface.\r\n```\r\nconst { createClient } = require('@supabase/supabase-js')\r\n\r\nconst supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY)\r\n\r\nconst coachMessages = supabase.channel('custom-insert-channel')\r\n  .on(\r\n    'postgres_changes',\r\n    { event: 'INSERT', schema: 'public', table: 'coach_messages' },\r\n    (payload: any) => {\r\n      console.log('Change received!', payload)\r\n    }\r\n  )\r\n  .subscribe()\r\n\r\nconsole.log(coachMessages)\r\n```\r\n\r\nand the error:\r\n\r\n<img width=\"1025\" alt=\"image\" src=\"https://github.com/supabase/supabase/assets/84593802/4bfbdde6-07d1-4759-9b91-ea5d414b8727\">\r\n\r\nRow insertion and database actions are done using the supabase web interface. \r\n\r\n## Expected behavior\r\n\r\nA clear and concise description of what you expected to happen.\r\n\r\nThe payload to contain the row that was just inserted in the payload.new property.\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser: Firefox\r\n- Version of supabase-js: 2.33.1\r\n- Version of Node.js: 18.16.0\r\n",
            "author": {
                "login": "vyknight"
            },
            "state": "OPEN",
            "createdAt": "2023-09-06T20:56:10Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/848",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5mLSG-",
                    "body": "I am experiencing the same problem in 2.33.2. Is there a fallback version I can use until this bug is fixed?\r\n\r\nbtw.. I am using @nuxtjs/supabase and therefore const supabase = useSupabaseClient(); to create the subscription. I assume that it is a wrapper around @supabase/supabase-js.",
                    "author": {
                        "login": "iamgmd"
                    },
                    "createdAt": "2023-09-11T16:40:18Z",
                    "url": "https://github.com/supabase/supabase-js/issues/848#issuecomment-1714233790"
                },
                {
                    "id": "IC_kwDOD79Crs5mMNRf",
                    "body": "I am having the same problem.",
                    "author": {
                        "login": "mfissehaye"
                    },
                    "createdAt": "2023-09-11T19:43:35Z",
                    "url": "https://github.com/supabase/supabase-js/issues/848#issuecomment-1714476127"
                },
                {
                    "id": "IC_kwDOD79Crs5mMgIX",
                    "body": "Ok, I think I got this to work but I am not sure as to why, maybe someone who is advanced in this topic maybe able to shed some light. \r\n\r\nI turned off RLS for the table followed by: \r\n\r\n`grant select on table to anon;` \r\n\r\nas documented in  [Bring your own database](https://supabase.com/docs/guides/realtime/bring-your-own-database )\r\n\r\nafter I did that, I get the payload.\r\n\r\nUPDATE: I needed both anon and authenticated for my shopping cart so:\r\n\r\n`grant select on transactions to anon, authenticated;`",
                    "author": {
                        "login": "iamgmd"
                    },
                    "createdAt": "2023-09-11T20:44:59Z",
                    "url": "https://github.com/supabase/supabase-js/issues/848#issuecomment-1714553367"
                },
                {
                    "id": "IC_kwDOD79Crs5mNc9u",
                    "body": "> Ok, I think I got this to work but I am not sure as to why, maybe someone who is advanced in this topic maybe able to shed some light.\r\n> \r\n> I turned off RLS for the table followed by:\r\n> \r\n> `grant select on table to anon;`\r\n> \r\n> as documented in [Bring your own database](https://supabase.com/docs/guides/realtime/bring-your-own-database)\r\n> \r\n> after I did that, I get the payload.\r\n> \r\n> UPDATE: I needed both anon and authenticated for my shopping cart so:\r\n> \r\n> `grant select on transactions to anon, authenticated;`\r\n\r\nThat makes it work. Thank you.",
                    "author": {
                        "login": "mfissehaye"
                    },
                    "createdAt": "2023-09-12T00:46:07Z",
                    "url": "https://github.com/supabase/supabase-js/issues/848#issuecomment-1714802542"
                },
                {
                    "id": "IC_kwDOD79Crs5mS9J2",
                    "body": "> Ok, I think I got this to work but I am not sure as to why, maybe someone who is advanced in this topic maybe able to shed some light.\r\n> \r\n> I turned off RLS for the table followed by:\r\n> \r\n> `grant select on table to anon;`\r\n> \r\n> as documented in [Bring your own database](https://supabase.com/docs/guides/realtime/bring-your-own-database)\r\n> \r\n> after I did that, I get the payload.\r\n> \r\n> UPDATE: I needed both anon and authenticated for my shopping cart so:\r\n> \r\n> `grant select on transactions to anon, authenticated;`\r\n\r\nThis worked for me as well, thank a lot. ",
                    "author": {
                        "login": "vyknight"
                    },
                    "createdAt": "2023-09-12T18:46:32Z",
                    "url": "https://github.com/supabase/supabase-js/issues/848#issuecomment-1716245110"
                },
                {
                    "id": "IC_kwDOD79Crs5o5VkD",
                    "body": "Make sure you have the Authorization header set on the webhook as well, as that can cause a 401",
                    "author": {
                        "login": "johnsutor"
                    },
                    "createdAt": "2023-10-12T15:32:47Z",
                    "url": "https://github.com/supabase/supabase-js/issues/848#issuecomment-1759860995"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5wggm5",
            "number": 849,
            "title": "Supabase Client with service_role secret - JWSError JWSInvalidSignature",
            "body": "# Bug report\r\n\r\n\r\n## Describe the bug\r\n\r\nCreating a supabase client with the service_role secret returns a PGRST301 error.\r\nAll .env variables have been verified. The correct .env variables are being used in the requests being made. \r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Create a supabase client using the service_role secret instead of the public_anon key.\r\n2. Make a request with that client-server side.\r\n\r\nCode to make client:\r\n```\r\nimport type { Database } from \"$lib/supabase-types\";\r\nimport { createClient } from \"@supabase/supabase-js\";\r\nimport { ENV } from \"./env\";\r\n\r\nexport const supabaseAdmin = createClient<Database>(\r\n\tENV.PUBLIC_SUPABASE_URL,\r\n\tENV.SUPABASE_SERVICE_ROLE_KEY,\r\n\t{auth: {persistSession: false,autoRefreshToken: false,detectSessionInUrl: false,},},\r\n);\r\n\r\n```\r\nServer function\r\n```\r\nexport async function upsertProductRecord(stripeProduct: Stripe.Product) {\r\n  const product = stripeProductSchema.parse(stripeProduct);\r\n  const { error } = await supabaseAdmin.from(\"billing_products\").upsert(product);\r\n\r\n  if (error) {\r\n   \r\n    console.log(\"|| UPSERT ERROR ||\",error);\r\n    throw error;\r\n  }\r\n}\r\n```\r\n\r\n\r\n## Expected behavior\r\n\r\nSuccessful connection to supabase database to perform actions server side.\r\n\r\n\r\n\r\n## System information\r\n\r\n- OS: macOS,\r\n\r\n- Version of supabase-js: 2.21.0\r\n- Version of Node.js: 18,16.0\r\n\r\n## Additional context\r\nUsing sveltekit-auth-helpers: 0.9.4\r\n\r\n\r\n\r\n\r\nError Response:\r\n\r\n```\r\n {\r\n  code: 'PGRST301',\r\n  details: null,\r\n  hint: null,\r\n  message: 'JWSError JWSInvalidSignature'\r\n}\r\n```\r\n\r\n",
            "author": {
                "login": "ethanfox"
            },
            "state": "OPEN",
            "createdAt": "2023-09-07T01:15:19Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/849",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5mBKUW",
                    "body": "Hey @ethanfox \u2014 any rls policies? Do any other actions work? (insert/update/delete)?",
                    "author": {
                        "login": "saltcod"
                    },
                    "createdAt": "2023-09-07T11:36:16Z",
                    "url": "https://github.com/supabase/supabase-js/issues/849#issuecomment-1711580438"
                },
                {
                    "id": "IC_kwDOD79Crs5mBRDA",
                    "body": "It seems like you're encountering an issue with Supabase when creating a client using the service_role secret instead of the public_anon key. The error message you're receiving is 'PGRST301' with the details 'JWSError JWSInvalidSignature'. Let's try to resolve this issue step by step.\r\n\r\nFirst, ensure that you've set up your environment variables correctly in your `.env` file. Double-check that `ENV.PUBLIC_SUPABASE_URL` and `ENV.SUPABASE_SERVICE_ROLE_KEY` contain the correct values.\r\n\r\nNext, let's look at your `createClient` function and server-side code. It appears that you're using the Supabase JavaScript client library (`@supabase/supabase-js`). Ensure that you have installed the correct version of this library (v2.21.0).\r\n\r\nIn your `createClient` function, you are passing the `ENV.SUPABASE_SERVICE_ROLE_KEY` as the second parameter, which should be the service role secret. This seems correct.\r\n\r\nNow, let's focus on the error message 'JWSInvalidSignature.' This error suggests that there might be an issue with the JWT (JSON Web Token) signature. Here are a few steps to investigate and resolve this:\r\n\r\n1. **Regenerate Service Role Secret**: Ensure that the service role secret you are using is valid and hasn't expired. If you suspect any issues with it, regenerate a new one from the Supabase dashboard.\r\n\r\n2. **Check Permissions**: Make sure that the service role has the necessary permissions to perform the `upsert` operation on the `billing_products` table. You can check and modify these permissions in your Supabase dashboard under \"SQL Editor.\"\r\n\r\n3. **Update Supabase Client**: Check if there are any updates to the Supabase client library. It's a good practice to keep your dependencies up-to-date.\r\n\r\n4. **Error Handling**: In your code, you are logging the error message, but you might want to log more details to help with debugging. Modify your error handling to log additional information, such as the response from Supabase.\r\n\r\nHere's an updated version of your server function with improved error logging:\r\n\r\n```javascript\r\nexport async function upsertProductRecord(stripeProduct: Stripe.Product) {\r\n  const product = stripeProductSchema.parse(stripeProduct);\r\n  const { error, data, status } = await supabaseAdmin\r\n    .from(\"billing_products\")\r\n    .upsert(product);\r\n\r\n  if (error) {\r\n    console.error(\"Error during upsert:\", error.message);\r\n    console.error(\"Supabase Status Code:\", status);\r\n    console.error(\"Supabase Error Details:\", error.details);\r\n    throw error;\r\n  }\r\n\r\n  // Handle success or use the data variable if needed.\r\n  return data;\r\n}\r\n```\r\n\r\nBy logging more details about the error, you should be able to get a better understanding of what's causing the 'JWSInvalidSignature' error and take appropriate actions to resolve it.\r\n\r\nRemember to perform these steps and ensure that your environment variables, permissions, and library versions are all correct. If the issue persists, consider reaching out to Supabase support for further assistance, as it could be related to specific configurations in your Supabase project.",
                    "author": {
                        "login": "DevJSter"
                    },
                    "createdAt": "2023-09-08T12:40:46Z",
                    "url": "https://github.com/supabase/supabase-js/issues/849#issuecomment-1711608000"
                },
                {
                    "id": "IC_kwDOD79Crs5mBhTN",
                    "body": "My variables are correct.\r\n\r\n1. Tried that didn't work\r\n2. The service role key bypasses RLS by default.\r\n3. Up to date\r\n4. \r\n```Error during upsert: JWSError JWSInvalidSignature \r\nError during upsert: JWSError JWSInvalidSignature\r\nSupabase Status Code: 401\r\nSupabase Error Details: null\r\n{\r\n  code: 'PGRST301',\r\n  details: null,\r\n  hint: null,\r\n  message: 'JWSError JWSInvalidSignature'\r\n}\r\n```\r\n\r\nAlso, I did reach out to Supabase Support and they said this is out of their \"scope\". \ud83e\udd37\u200d\u2642\ufe0f",
                    "author": {
                        "login": "ethanfox"
                    },
                    "createdAt": "2023-09-08T13:28:30Z",
                    "url": "https://github.com/supabase/supabase-js/issues/849#issuecomment-1711674573"
                },
                {
                    "id": "IC_kwDOD79Crs5mC22u",
                    "body": "Alright!\r\n",
                    "author": {
                        "login": "DevJSter"
                    },
                    "createdAt": "2023-09-08T17:46:32Z",
                    "url": "https://github.com/supabase/supabase-js/issues/849#issuecomment-1712025006"
                },
                {
                    "id": "IC_kwDOD79Crs5mDAxN",
                    "body": "> Alright!\r\n\r\nSo now what? Do you have any other idea why this wouldn't be working?",
                    "author": {
                        "login": "ethanfox"
                    },
                    "createdAt": "2023-09-08T18:24:11Z",
                    "url": "https://github.com/supabase/supabase-js/issues/849#issuecomment-1712065613"
                },
                {
                    "id": "IC_kwDOD79Crs5mEkS3",
                    "body": "ossible Solutions:\r\n\r\nDouble-Check Secret Key: Ensure that the service role secret key you're using matches the one provided by Supabase. Even a small difference in the key can lead to authentication errors.\r\n\r\nJWT Configuration: Verify that your JWT (JSON Web Token) configuration in Supabase is set up correctly. Check the algorithm used for signing and verifying JWTs and make sure it aligns with your code.\r\n\r\nLibrary Compatibility: Ensure that the JWT library or tool you're using in your code (e.g., jsonwebtoken) is compatible with the JWT settings and key format used by Supabase. Make sure you're using the latest version of the library.\r\n\r\nEnvironment Variables: Review your environment variables meticulously. Even a minor typo or special character can cause issues. Recheck that ENV.PUBLIC_SUPABASE_URL and ENV.SUPABASE_SERVICE_ROLE_KEY are correctly set.\r\n\r\nService Role Permissions: While the service role key bypasses Row-Level Security (RLS), confirm that the service role itself has the necessary permissions to access tables and perform the 'upsert' operation.\r\n\r\nSupabase Project Settings: Look into your Supabase project settings and custom security rules. There could be configurations affecting JWT verification.\r\n\r\nSupabase Version: Ensure you are using a compatible version of Supabase. Check for updates or bug fixes related to JWT authentication in newer releases.\r\n\r\nLogging and Debugging: Implement more detailed logging during the JWT verification process. Log the token, headers, payloads, and any error details to gain insights into what's going wrong.\r\n\r\nIf after revisiting these aspects the issue persists, it might be worth reaching out to a security expert or seeking assistance from Supabase's community or support channels. They might offer specific guidance tailored to your Supabase setup to help you resolve this authentication problem.",
                    "author": {
                        "login": "DevJSter"
                    },
                    "createdAt": "2023-09-09T10:00:22Z",
                    "url": "https://github.com/supabase/supabase-js/issues/849#issuecomment-1712473271"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5xTp4p",
            "number": 853,
            "title": "Supabase Google Auth and Magic Links not working on Mobile",
            "body": "### Discussed in https://github.com/orgs/supabase/discussions/13968\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **fdarkaou** April 25, 2023</sup>\r\nHi all,\r\n\r\nI have a VueJS frontend using Supabase for authentication. Users can either log in using Google Auth or through a Magic Link - on desktop all of this works perfectly. On mobile however, neither option seems to work. Users are redirected to the landing page and are not being logged in.\r\n\r\nWhat could be the reason for this? When I simulate a mobile device using Google DevTools it works fine as well, only on an actual mobile device it does not work.\r\n\r\nWould really appreciate your input!!\r\n\r\n</div>",
            "author": {
                "login": "fuaditrockz"
            },
            "state": "OPEN",
            "createdAt": "2023-09-16T23:11:45Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/853",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5muaet",
                    "body": "Can you post a video? And do you have two accounts in gmail in phone? if not most probably gauth auto-logins into the single gmail account. ",
                    "author": {
                        "login": "shashankdaima"
                    },
                    "createdAt": "2023-09-17T19:14:30Z",
                    "url": "https://github.com/supabase/supabase-js/issues/853#issuecomment-1723443117"
                },
                {
                    "id": "IC_kwDOD79Crs5o8ZY4",
                    "body": "@fuaditrockz might be worth trying different mobile browsers to see if it's a browser specific problem ",
                    "author": {
                        "login": "kangmingtay"
                    },
                    "createdAt": "2023-10-13T02:15:48Z",
                    "url": "https://github.com/supabase/supabase-js/issues/853#issuecomment-1760663096"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5x0jsb",
            "number": 860,
            "title": "Compilation errors - is this package actually isomorphic or am I using the wrong package?",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [ ] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nThere is some issue with `@types/phoenix` and since I'm using typescript I get compilation error.\r\n\r\nI realize that CloseEvent exists on browser, and I want to use supabase-js purely on backend. I'm wondering - am I using the wrong package for this? Something like \"admin-sdk\".\r\n\r\nAnd there are a bunch of other issues too:\r\n\r\n```\r\n\r\nnode_modules/@supabase/functions-js/dist/module/types.d.ts(1,36): error TS2304: Cannot find name 'fetch'.\r\nnode_modules/@supabase/functions-js/dist/module/types.d.ts(42,12): error TS2304: Cannot find name 'File'.\r\nnode_modules/@supabase/functions-js/dist/module/types.d.ts(42,40): error TS2304: Cannot find name 'FormData'.\r\nnode_modules/@supabase/functions-js/dist/module/types.d.ts(42,51): error TS2304: Cannot find name 'ReadableStream'.\r\nnode_modules/@supabase/gotrue-js/dist/module/GoTrueClient.d.ts(52,33): error TS2749: 'BroadcastChannel' refers to a value, but is being used as a type here. Did you mean 'typeof BroadcastChannel'?\r\nnode_modules/@supabase/gotrue-js/dist/module/lib/fetch.d.ts(2,36): error TS2304: Cannot find name 'fetch'.\r\nnode_modules/@supabase/gotrue-js/dist/module/lib/fetch.d.ts(30,60): error TS2304: Cannot find name 'Response'.\r\nnode_modules/@supabase/gotrue-js/dist/module/lib/helpers.d.ts(15,29): error TS2304: Cannot find name 'fetch'.\r\nnode_modules/@supabase/gotrue-js/dist/module/lib/helpers.d.ts(17,91): error TS2304: Cannot find name 'Response'.\r\nnode_modules/@supabase/gotrue-js/dist/module/lib/types.d.ts(868,62): error TS2304: Cannot find name 'Storage'.\r\nnode_modules/@supabase/postgrest-js/dist/module/types.d.ts(1,36): error TS2304: Cannot find name 'fetch'.\r\nnode_modules/@supabase/realtime-js/dist/module/RealtimeClient.d.ts(7,17): error TS2304: Cannot find name 'WebSocket'.\r\nnode_modules/@supabase/realtime-js/dist/module/RealtimeClient.d.ts(51,11): error TS2304: Cannot find name 'WebSocket'.\r\nnode_modules/@supabase/realtime-js/dist/module/RealtimePresence.d.ts(1,15): error TS2305: Module '\"phoenix\"' has no exported member 'PresenceOpts'.\r\nnode_modules/@supabase/realtime-js/dist/module/RealtimePresence.d.ts(1,29): error TS2305: Module '\"phoenix\"' has no exported member 'PresenceOnJoinCallback'.\r\nnode_modules/@supabase/realtime-js/dist/module/RealtimePresence.d.ts(1,53): error TS2305: Module '\"phoenix\"' has no exported member 'PresenceOnLeaveCallback'.\r\nnode_modules/@supabase/storage-js/dist/module/lib/fetch.d.ts(2,36): error TS2304: Cannot find name 'fetch'.\r\nnode_modules/@supabase/storage-js/dist/module/packages/StorageFileApi.d.ts(5,73): error TS2304: Cannot find name 'File'.\r\nnode_modules/@supabase/storage-js/dist/module/packages/StorageFileApi.d.ts(5,80): error TS2304: Cannot find name 'FormData'.\r\nnode_modules/@supabase/storage-js/dist/module/packages/StorageFileApi.d.ts(5,115): error TS2304: Cannot find name 'ReadableStream'.\r\nnode_modules/@supabase/storage-js/dist/module/packages/StorageFileApi.d.ts(77,84): error TS2304: Cannot find name 'File'.\r\nnode_modules/@supabase/storage-js/dist/module/packages/StorageFileApi.d.ts(77,91): error TS2304: Cannot find name 'FormData'.\r\nnode_modules/@supabase/storage-js/dist/module/packages/StorageFileApi.d.ts(77,126): error TS2304: Cannot find name 'ReadableStream'.\r\nnode_modules/@supabase/supabase-js/dist/module/lib/types.d.ts(6,36): error TS2304: Cannot find name 'fetch'.\r\nnode_modules/@types/phoenix/index.d.ts(81,29): error TS2304: Cannot find name 'CloseEvent'.\r\n```\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\nInstall latest supabase-js while using typescript and try running it.\r\n\r\n## Expected behavior\r\n\r\nNo compilation error.\r\n\r\n## Screenshots\r\n\r\n\r\n## System information\r\n\r\n- OS: Mac OS \r\n- Version of supabase-js: 2.36.0\r\n- Version of Node.js: 18.15.0\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "lkp-k"
            },
            "state": "OPEN",
            "createdAt": "2023-09-22T22:58:46Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/860",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5pu7hO",
                    "body": "I was following some blog using this library in a nodejs project without TS. I tried the same in my TS nodejs project and getting similar issue as this.\r\n\r\n![Screenshot 2023-10-22 at 1 31 59 AM](https://github.com/supabase/supabase-js/assets/57823363/8d0347ec-6ee7-4d91-b474-f7fbf0649ba2)\r\n![Screenshot 2023-10-22 at 1 32 20 AM](https://github.com/supabase/supabase-js/assets/57823363/578587c4-b4f1-4749-8780-00cc2af5c2c9)\r\n",
                    "author": {
                        "login": "lakshya-dhariwal"
                    },
                    "createdAt": "2023-10-21T20:03:21Z",
                    "url": "https://github.com/supabase/supabase-js/issues/860#issuecomment-1773910094"
                },
                {
                    "id": "IC_kwDOD79Crs5pu7uK",
                    "body": "A quick fix I used avoid the error \r\n```\r\n//tsconfig\r\n{\r\n  \"compilerOptions\": {\r\n    \"skipLibCheck\": true\r\n  },\r\n}\r\n```",
                    "author": {
                        "login": "lakshya-dhariwal"
                    },
                    "createdAt": "2023-10-21T20:07:41Z",
                    "url": "https://github.com/supabase/supabase-js/issues/860#issuecomment-1773910922"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5x6dcT",
            "number": 863,
            "title": "Bigint IDs result in broken queries and incorrect types",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nBoth with Postgrest.js and generated TypeScript types Bigint types such as IDs are not represented well. With the default `number` JS representation of Bigint IDs the queries start breaking because of overflowing numbers. This is especially problematic when using a [ID format](https://instagram-engineering.com/sharding-ids-at-instagram-1cf5a71e5a5c) that very frequently results in numbers larger than `Number.MAX_SAFE_INTEGER`.\r\n\r\nPostgrest supports queries such as `id::text`, however Supabase support for this leaves a lot to be desired. Two issues off the top of my head:\r\n\r\n1. API returns incorrect IDs when Bigint values overflow what JS number type allows. This results in scenarios such as this:\r\n    - Create a row and ask it to return all the fields `*`.\r\n    - Redirect the user to a page such as `/items/<id>`\r\n    - Get 404 because the ID doesn't exists. It was incorrect because of overflowing number value.\r\n   \r\n    This can be sort of worked around using the casting syntax. But unfortunately;\r\n\r\n2. Postgrest.js doesn't support casting syntax such as `id::text`. Neither the issue from nearly a year ago https://github.com/supabase/postgrest-js/issues/370 nor my PR https://github.com/supabase/postgrest-js/pull/429 received a response from Supabase team.\r\n\r\n3. Generated types don't allow inserting Bigint or String values. Postgrest seem to be happy with passing string values however the types are generated like so:\r\n```ts\r\nexport interface Database {\r\n  public: {\r\n    Tables: {\r\n      table_one: {\r\n        Row: {\r\n          id: number;\r\n          foreign_id: number | null;\r\n        };\r\n        Insert: {\r\n          id?: number;\r\n          foreign_id?: number | null;\r\n        };\r\n        Update: {\r\n          id?: number;\r\n          foreign_id?: number | null;\r\n        };\r\n        Relationships: [\r\n          {\r\n            foreignKeyName: \"table_two_id_fkey\";\r\n            columns: [\"foreign_id\"];\r\n            referencedRelation: \"table_two\";\r\n            referencedColumns: [\"id\"];\r\n          },\r\n        ];\r\n      };\r\n    };\r\n  };\r\n}\r\n```\r\n\r\nA query like this results in an error:\r\n```ts\r\n    await this.supabase\r\n      .from(\"table_one\")\r\n      .insert({ foreign_id: \"2193192389123\" });\r\n```\r\n\r\n## To Reproduce\r\n\r\n1. Create a table with Bigint ids, and columns with Bigint references to other tables with Bigint ids. \r\n3. Insert data with larger ID values than `Number.MAX_SAFE_INTEGER`\r\n2. Perform standard CRUD operations with JS SDK using TypeScript.\r\n3. Observe the issues such as wrong IDs being returned (runtime bug) and TypeScript errors (compile time bug)\r\n\r\n\r\n\r\n## Expected behavior\r\n\r\nSupabase detects Bigint values, returns correct responses and generates correct code. Bigints seem to be handled better in Supabase Console with special treatment, however user code is still affected. Some possible fixes:\r\n\r\n- Large Bigint values (or all Bigint values) are detected and returned as strings in query results.\r\n- Generated types are updated to include string and/or JS Bigint types.\r\n- Type casts are supported in generated TypeScript types\r\n- String or JS Bigint values are supported when inserting / updating data.\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser (if applies) Chrome\r\n- Version of supabase-js: 2.36.0\r\n- Version of Node.js: v18.17.1\r\n",
            "author": {
                "login": "ozanmakes"
            },
            "state": "OPEN",
            "createdAt": "2023-09-25T10:13:41Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/863",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs5ydTdS",
            "number": 866,
            "title": "Wrong return data type",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nThe foreign key in select function return an object but the type thinks it's an array\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n```ts\r\nsupabase.from(\"comments\").select(`\r\n  messageId,\r\n  message,\r\n  isEdited,\r\n  created_at,\r\n  updated_at,\r\n  users(userId, username, profileUrl)\r\n`).then(({ data }) => console.log(data))\r\n```\r\n\r\n## Expected behavior\r\n\r\nThe return should be \r\n\r\n```ts\r\ntype ReturnType = {\r\n  messageId: string\r\n  message: string\r\n  isEdited: boolean\r\n  created_at: string\r\n  updated_at: string\r\n  users: {\r\n    userId: string\r\n    username: string\r\n    profileUrl: string\r\n  }\r\n}\r\n```\r\n\r\nbut the supabase type thinks it's\r\n\r\n```ts\r\ntype ReturnType = {\r\n  messageId: string\r\n  message: string\r\n  isEdited: boolean\r\n  created_at: string\r\n  updated_at: string\r\n  users: {\r\n    userId: string\r\n    username: string\r\n    profileUrl: string\r\n  }[]\r\n}\r\n```\r\n\r\n## Screenshots\r\n[https://cdn.discordapp.com/attachments/1157503006447775785/1157503007064346624/image.png](Image1)\r\n[https://cdn.discordapp.com/attachments/1157503006447775785/1157503007446007848/image.png](Image2)\r\n\r\n## System information\r\n\r\n- OS: `Windows`\r\n- Browser: `Firefox`\r\n- Version of supabase-js: `v2.37.0`\r\n- Version of Node.js: `v18.16.0`\r\n",
            "author": {
                "login": "KuroXI"
            },
            "state": "CLOSED",
            "createdAt": "2023-09-30T14:45:38Z",
            "closedAt": "2023-10-01T14:23:21Z",
            "url": "https://github.com/supabase/supabase-js/issues/866",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5n1kzb",
                    "body": "Solution: https://github.com/supabase/postgrest-js/pull/345",
                    "author": {
                        "login": "KuroXI"
                    },
                    "createdAt": "2023-10-01T14:23:04Z",
                    "url": "https://github.com/supabase/supabase-js/issues/866#issuecomment-1742097627"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5yejPO",
            "number": 867,
            "title": "Bug Report: Trailing \"00\" at the End of Fetched IDs",
            "body": "## Description\r\nWhen fetching IDs from the Supabase database, a trailing \"00\" appears at the end of each ID, which is not part of the original data. This behavior is inconsistent and unexpected.\r\n\r\n## Steps to Reproduce\r\n\r\n1. Create a junction table.\r\n```\r\ncreate table\r\n  public.junc_orgs_discord_channels (\r\n    org_id bigint not null,\r\n    channel_id bigint not null,\r\n    constraint orgs_discord_channels_pkey primary key (org_id, channel_id),\r\n    constraint orgs_discord_channels_channel_id_fkey foreign key (channel_id) references discord_channels (id),\r\n    constraint orgs_discord_channels_org_id_fkey foreign key (org_id) references orgs (id)\r\n  ) tablespace pg_default;\r\n  ```\r\n2. Set up a Supabase database with entries containing unique IDs.\r\n3. Use the supabase-js client to fetch entries from the database.\r\n4. Inspect the returned IDs.\r\n5. Observe that each ID has an unexpected trailing \"00\".\r\n\r\n## Expected Behavior\r\nShould return the actually id. \r\n## Screenshots\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\n![image](https://github.com/supabase/supabase-js/assets/33297016/40895861-2a97-44b3-ac65-a4b50dd7cd61)\r\n![image](https://github.com/supabase/supabase-js/assets/33297016/c80f358b-53c8-4d0b-8564-9571fc6daf3e)\r\n![image](https://github.com/supabase/supabase-js/assets/33297016/3d6a66b7-0dab-4bee-9094-fa5f824783fd)\r\n\r\n\r\n## System Information\r\nOS: (Please fill in your OS, e.g., macOS, Windows)\r\nBrowser: (If applicable, e.g., Chrome, Safari)\r\nVersion of supabase-js: 6.0.2\r\nVersion of Node.js: 10.10.0\r\n## Additional Context\r\nThis issue is impacting the integrity of the data being fetched from the database, leading to potential mismatches and errors in subsequent operations.\r\n\r\n\r\n",
            "author": {
                "login": "Slyracoon23"
            },
            "state": "CLOSED",
            "createdAt": "2023-10-01T07:15:52Z",
            "closedAt": "2023-10-08T15:12:40Z",
            "url": "https://github.com/supabase/supabase-js/issues/867",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5obi62",
                    "body": "I've managed to identify the root cause of the issue with the trailing \"00\" at the end of the fetched IDs. It turns out this issue is not directly related to Supabase but rather a limitation within JavaScript itself when handling large integers.\r\n\r\nBy default, JavaScript's `Number` type can only safely represent integers up to \\(2^{53} - 1\\) (i.e., `Number.MAX_SAFE_INTEGER`, which equals `9007199254740991`). When an integer exceeds this limit, JavaScript may not represent it accurately, which was the reason behind the trailing \"00\".\r\n\r\n## Solution\r\n\r\nThe solution is to use JavaScript's `BigInt` type for handling large integer IDs:\r\n\r\n```javascript\r\nconst bigNumber = BigInt(data[0].id);\r\nconsole.log(bigNumber);\r\nBy using BigInt, we can ensure that the IDs fetched from the database are represented accurately, thus preserving data integrity.\r\n```\r\n## Conclusion\r\nIf you're facing a similar issue, consider switching to BigInt for large integer values.\r\n\r\nI'm closing this issue as it's been resolved. Feel free to reopen if you have any more questions or need further clarification.",
                    "author": {
                        "login": "Slyracoon23"
                    },
                    "createdAt": "2023-10-08T15:12:40Z",
                    "url": "https://github.com/supabase/supabase-js/issues/867#issuecomment-1752051382"
                },
                {
                    "id": "IC_kwDOD79Crs5olDR8",
                    "body": "Thanks @Slyracoon23! FYI this is being tracked on https://github.com/supabase/postgrest-js/issues/319",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-10-10T07:03:12Z",
                    "url": "https://github.com/supabase/supabase-js/issues/867#issuecomment-1754543228"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5yzK1x",
            "number": 870,
            "title": "Supabase client in Expo on Web is just crashing (window is not defined)",
            "body": "# Bug report\r\nHi, following [this tutorial](https://supabase.com/docs/guides/getting-started/tutorials/with-expo-react-native?database-method=dashboard), I try to run supabase js client in expo and this crashes the app on web:\r\n\r\n```\r\n// ./lib/supabase.ts\r\nimport \"react-native-url-polyfill/auto\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport { createClient } from \"@supabase/supabase-js\";\r\n\r\n...\r\n\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\r\n  auth: {\r\n    storage: AsyncStorage,\r\n    autoRefreshToken: true,\r\n    persistSession: true,\r\n    detectSessionInUrl: false,\r\n  },\r\n});\r\n```\r\n\r\ngives me:\r\n\r\n```\r\nReferenceError: window is not defined\r\n    at http://localhost:8081/node_modules/expo-router/node/render.bundle//&platform=web&dev=true&minify=false&resolver.environment=node&transform.environment=node:141156:9\r\n    at http://localhost:8081/node_modules/expo-router/node/render.bundle//&platform=web&dev=true&minify=false&resolver.environment=node&transform.environment=node:141130:21\r\n    at new Promise (<anonymous>)\r\n    at createPromise (http://localhost:8081/node_modules/expo-router/node/render.bundle//&platform=web&dev=true&minify=false&resolver.environment=node&transform.environment=node:141128:12)\r\n    at Object.getItem (http://localhost:8081/node_modules/expo-router/node/render.bundle//&platform=web&dev=true&minify=false&resolver.environment=node&transform.environment=node:141155:14)\r\n    at http://localhost:8081/node_modules/expo-router/node/render.bundle//&platform=web&dev=true&minify=false&resolver.environment=node&transform.environment=node:155465:33\r\n    at Generator.next (<anonymous>)\r\n    at asyncGeneratorStep (http://localhost:8081/node_modules/expo-router/node/render.bundle//&platform=web&dev=true&minify=false&resolver.environment=node&transform.environment=node:2463:26)\r\n    at _next (http://localhost:8081/node_modules/expo-router/node/render.bundle//&platform=web&dev=true&minify=false&resolver.environment=node&transform.environment=node:2482:11)\r\n    at http://localhost:8081/node_modules/expo-router/node/render.bundle//&platform=web&dev=true&minify=false&resolver.environment=node&transform.environment=node:2487:9\r\nhttp://localhost:8081/node_modules/expo-router/node/render.bundle//&platform=web&dev=true&minify=false&resolver.environment=node&transform.environment=node:141156\r\n        return window.localStorage.getItem(key);\r\n```\r\n\r\nWhen running the web application on Chrome. It does work in the Android native app tho\u2019\r\n\r\nThank you!\r\n",
            "author": {
                "login": "ThibaultJanBeyer"
            },
            "state": "CLOSED",
            "createdAt": "2023-10-04T11:36:49Z",
            "closedAt": "2023-10-04T11:39:45Z",
            "url": "https://github.com/supabase/supabase-js/issues/870",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5oHIWQ",
                    "body": "Nevermind, it seems to be a bug in the async storage not being compatible with the web. `import AsyncStorage from \"@react-native-async-storage/async-storage\";`\r\n\r\nSo adding `...(Platform.OS !== \"web\" ? { storage: AsyncStorage } : {}),` in the `createClient` solves the issue:\r\n\r\n```\r\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\r\n  auth: {\r\n    ...(Platform.OS !== \"web\" ? { storage: AsyncStorage } : {}),\r\n    autoRefreshToken: true,\r\n    persistSession: true,\r\n    detectSessionInUrl: false,\r\n  },\r\n});\r\n```\r\n\r\nClosed. Sorry.",
                    "author": {
                        "login": "ThibaultJanBeyer"
                    },
                    "createdAt": "2023-10-04T11:39:45Z",
                    "url": "https://github.com/supabase/supabase-js/issues/870#issuecomment-1746699664"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5y2QRN",
            "number": 871,
            "title": "When sending a forget redirect_to a subdomain.example.com failed to receive the correct domain ",
            "body": "# Bug report\r\n\r\nWhen sending an email to a main domain works correctly but when sending an email to a subdomain not work and redirecting correctly. \r\n\r\n await supabase.auth.resetPasswordForEmail(email, {\r\n        // redirectTo: 'https://exact.arfoon.com/forget/new/'  //(not working meaning redirecting)\r\n        // redirectTo: 'https://exact-website.vercel.app/forget/new' //(not working meaning redirecting)\r\n        redirectTo: \"https://exactbanking.com/forget/new/\" // (Working)\r\n    });\r\n}\r\n\r\nWe have changed our app domain to our company subdomain. please fix this issue so we able to change our subdomain in all places. \r\n",
            "author": {
                "login": "iampopal"
            },
            "state": "CLOSED",
            "createdAt": "2023-10-04T19:14:32Z",
            "closedAt": "2023-10-11T12:37:25Z",
            "url": "https://github.com/supabase/supabase-js/issues/871",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5oMQi0",
                    "body": "https://exactbanking.com/forget/new/\r\n--\r\nOnly the above redirect works correctly, using another redirect redirects to: https://exactbanking.com. \r\n\r\nI think we once did set redirectTo from admin dashboard of supaabse and now we cannot find the place to change the redirect to link. ",
                    "author": {
                        "login": "iampopal"
                    },
                    "createdAt": "2023-10-05T05:13:23Z",
                    "url": "https://github.com/supabase/supabase-js/issues/871#issuecomment-1748043956"
                },
                {
                    "id": "IC_kwDOD79Crs5oZ9gf",
                    "body": "Waiting for a solution for this?",
                    "author": {
                        "login": "iampopal"
                    },
                    "createdAt": "2023-10-07T07:29:09Z",
                    "url": "https://github.com/supabase/supabase-js/issues/871#issuecomment-1751635999"
                },
                {
                    "id": "IC_kwDOD79Crs5owsUv",
                    "body": "Solved as change website domain url from auth of dashboard",
                    "author": {
                        "login": "iampopal"
                    },
                    "createdAt": "2023-10-11T12:37:25Z",
                    "url": "https://github.com/supabase/supabase-js/issues/871#issuecomment-1757594927"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5zCUsV",
            "number": 872,
            "title": "Many-to-many not working with self-referencing table",
            "body": "## Describe the bug\r\n\r\nMany-to-many relationship doesn't work with self-referencing tables.\r\n\r\nA bit more detail. I've been following this [post](https://supabase.com/docs/guides/api/joins-and-nesting), the docs [here](https://supabase.com/docs/reference/javascript/select?example=query-foreign-tables-through-a-join-table) and discussions [#14000](https://github.com/orgs/supabase/discussions/14000), [#14006](https://github.com/supabase/supabase/pull/14006) [#710](https://github.com/orgs/supabase/discussions/710) [#1681](https://github.com/orgs/supabase/discussions/1681)\r\n\r\nI want to implement a many-to-many relationship between rows of the same table. Imagine I have a `books` table and I want each book to have a list of related books to be queried and displayed on my site.\r\n\r\nFollowing the instructions from the resources above won't work. It result in the following error message:\r\n\r\n```\r\nerror: {\r\n  code: 'PGRST200',\r\n  details: \"Searched for a foreign key relationship between 'books' and 'books' in the schema 'public', but no matches were found.\",\r\n  hint: null,\r\n  message: \"Could not find a relationship between 'books' and 'books' in the schema cache\"\r\n}\r\n```\r\n\r\n## To Reproduce\r\n\r\nCreate the following tables:\r\n\r\n```sql\r\ncreate table books (\r\n  \"id\" serial primary key,\r\n  \"title\" text\r\n);\r\n\r\ncreate table related (\r\n  \"book_id\" int references books,\r\n  \"related_id\" int references books,\r\n  primary key (book_id, related_id)\r\n);\r\n```\r\n\r\nPopulate the tables with some books and create the relations between them in the 'related' table.\r\n\r\nQuery as suggested in the docs:\r\n\r\n```\r\nconst { data, error } = await supabase.from('books').select(`\r\n  id, \r\n  title, \r\n  books ( id, title )\r\n`)\r\n```\r\n\r\nYou should get the following error:\r\n\r\n```\r\nerror: {\r\n  code: 'PGRST200',\r\n  details: \"Searched for a foreign key relationship between 'books' and 'books' in the schema 'public', but no matches were found.\",\r\n  hint: null,\r\n  message: \"Could not find a relationship between 'books' and 'books' in the schema cache\"\r\n}\r\n```\r\n\r\n## Expected behavior\r\n\r\nI'd expect a list of books with their related books as ",
            "author": {
                "login": "gusvd"
            },
            "state": "CLOSED",
            "createdAt": "2023-10-06T11:37:26Z",
            "closedAt": "2023-10-09T11:36:54Z",
            "url": "https://github.com/supabase/supabase-js/issues/872",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5oW_DJ",
                    "body": "You can do a recursive many-to-many with computed relationships, see: https://postgrest.org/en/stable/references/api/resource_embedding.html#recursive-many-to-many\r\n\r\nYou can do without computed rel as well, but this approach is no longer recommended (complicated syntax): https://postgrest.org/en/v11.0/references/api/resource_embedding.html#recursive-many-to-many-disambiguation",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-10-06T15:08:32Z",
                    "url": "https://github.com/supabase/supabase-js/issues/872#issuecomment-1750855881"
                },
                {
                    "id": "IC_kwDOD79Crs5oXNlZ",
                    "body": "Thanks @steve-chavez. I was looking at exact this page trying to get my head around the recursive many-to-many relationship.\r\n\r\nIs there a way to query the recursive many-to-many relationship with the JS library?\r\nOr does the only way would be creating an RPC function?\r\n\r\nFollowing the example above the function would be something like:\r\n\r\n```\r\ncreate or replace function related(books) returns setof books as $$\r\n  select b.*\r\n  from books b, related r\r\n  where r.related_id = b.id and\r\n             r.book_id = $1.id\r\n$$ stable language sql;\r\n```\r\n\r\nIs there a way to write something like this with the JS library:\r\n```\r\n select b.*\r\n  from books b, related r\r\n  where r.related_id = b.id and\r\n             r.book_id = '1'\r\n```\r\n",
                    "author": {
                        "login": "gusvd"
                    },
                    "createdAt": "2023-10-06T15:31:24Z",
                    "url": "https://github.com/supabase/supabase-js/issues/872#issuecomment-1750915417"
                },
                {
                    "id": "IC_kwDOD79Crs5oekIq",
                    "body": "Hi, I managed to get it working and will update here for future reference.\r\nAlso, this is not a bug. So if there's a way to remove the bug tag I'd appreciate it.\r\n\r\n```\r\nconst { data, error } = await supabase\r\n   .from(\"books\")\r\n   .select(\"id, title, related!book_id(books!related(id))\")\r\n```\r\n\r\nQuite convoluted, but it works.",
                    "author": {
                        "login": "gusvd"
                    },
                    "createdAt": "2023-10-09T11:36:54Z",
                    "url": "https://github.com/supabase/supabase-js/issues/872#issuecomment-1752842794"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5zNe33",
            "number": 873,
            "title": "Filter manipulates rows in the response instead of filtering (many-to-many)",
            "body": "## Describe the bug\r\n\r\nI found a weird behaviour with the Supabase JS library when trying to filter by a relationship table.\r\n\r\nI have an emojis and a related_emojis tables establishing a many-to-many recursive relationship.\r\nSo for each emoji I can have a list of related emojis.\r\n\r\n```sql\r\ncreate table emojis (\r\n  \"id\" serial primary key,\r\n  \"symbol\" text\r\n);\r\n\r\ncreate table related_emojis (\r\n  \"source_emoji\" int references books,\r\n  \"related_emoji\" int references books,\r\n  primary key (book_id, related_id)\r\n);\r\n```\r\n\r\nI'm trying to query all the emojis that don't have a related emoji assigned to them. Essentially all emojis that don't have reference in the related_emojis table.\r\n\r\nIf I ran the query bellow I get all emojis and their related ones correctly:\r\n\r\n```sql\r\n .from(\"emojis\")\r\n  .select(\"id, symbol, name, related_emojis!source_emoji(source_emoji)\")\r\n\r\n/*response example:\r\n\r\ndata [\r\n  {\r\n    id: '9606dcb8-8b45-4fb9-8295-a7f05301262f',\r\n    symbol: '\ud83d\ude07',\r\n    name: 'Angel',\r\n    related_emojis: [ [Object] ]\r\n  }\r\n] \r\n*/\r\n```\r\n\r\nThe problem occurs when I try to filter the query to only get the emojis **without** related ones.\r\nEssentially, get all the emojis that are not linked in the `related_emojis` table:\r\n\r\n```sql\r\n  .from(\"emojis\")\r\n  .select(\"id, symbol, name, related_emojis!source_emoji(source_emoji)\")\r\n  .is(\"related_emojis.source_emoji(source_emoji)\", null)\r\n  \r\n  /*response with the unexpected behaviour:\r\ndata [\r\n  {\r\n    id: '9606dcb8-8b45-4fb9-8295-a7f05301262f',\r\n    symbol: '\ud83d\ude07',\r\n    name: 'Angel',\r\n    related_emojis: [] // <<-- Object was removed from the response\r\n  }\r\n] \r\n```\r\nInstead of filtering the query Supabase is removing the `related_emojis` Object from the response.\r\nIt seems like the filter is manipulating the response instead of filtering.\r\n\r\nI've tried other queries and they all produce the same unexpected behaviour, for example:\r\n\r\n```sql\r\n  .from(\"emojis\")\r\n  .select(\"symbol, name, related_emojis!source_emoji(emojis!related_emoji(id))\")\r\n  .is(\"related_emojis.emojis.id\", null)\r\n\r\n/* this one is particularly interesting because it adds null to the response explicitly \r\n\r\ndata [\r\n  {\r\n    id: '9606dcb8-8b45-4fb9-8295-a7f05301262f',\r\n    symbol: '\ud83d\ude07',\r\n    name: 'Angel',\r\n    related_emojis: [ { emojis: null } ] // <<-- here\r\n  }\r\n] \r\n\r\n```\r\n\r\n## To Reproduce\r\n\r\nCreate a recursive many-to-many relationship (ref: https://postgrest.org/en/stable/references/api/resource_embedding.html#recursive-many-to-many)\r\n\r\nAnd try to query in a way to get all the rows that are not linked in the junction table.\r\n\r\nHere's a good reference for what I'm trying to do. Please scroll to \"Null conditions for anti-joins\"\r\nhttps://catjam.fi/articles/postgrest-joins\r\n\r\n## Expected behavior\r\n\r\nI'd expect the filter to return all the Emojis that are not contained in the related_emojis table.",
            "author": {
                "login": "gusvd"
            },
            "state": "OPEN",
            "createdAt": "2023-10-09T12:03:10Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/873",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5ohE6A",
                    "body": ">   .is(\"related_emojis.source_emoji(source_emoji)\", null)\r\n\r\nThis part should be:\r\n\r\n```js\r\n  .is(\"related_emojis\", null)\r\n```",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-10-09T18:59:11Z",
                    "url": "https://github.com/supabase/supabase-js/issues/873#issuecomment-1753501312"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5z5lFM",
            "number": 879,
            "title": "TypeError: Network request failed on sign up / sign in on Android",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nSigning in or up on Android emulator locally results in `TypeError: Network request failed`. This error only shows up on the Android emulator and not the iOS one\r\n\r\n## To Reproduce\r\n\r\nMinimal reproducible example: https://github.com/maxwowo/sbrepro\r\n\r\nEnvironment:\r\n* Java: `openjdk 11.0.19 2023-04-18 LTS`\r\n* Node: `v16.20.2`\r\n\r\n1. Clone repo\r\n2. `supabase start`\r\n3. `yarn install`\r\n4. `yarn android`\r\n5. Click on either `Sign up` or `Sign in`\r\n\r\n## Expected behavior\r\n\r\nShould sign up or sign in without error\r\n\r\n## Screenshots\r\n\r\nhttps://github.com/supabase/supabase-js/assets/40416283/b85f24b7-3c1f-4f0a-ad56-484ce0fd4964\r\n\r\n## System information\r\n\r\n- OS: macOS Sonoma 14.0\r\n- Browser (if applies) N/A\r\n- Version of supabase-js: `2.38.1`\r\n- Version of Node.js: `v16.20.2`\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "maxwowo"
            },
            "state": "OPEN",
            "createdAt": "2023-10-16T06:33:18Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/879",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5pVHoh",
                    "body": "Started happening to me too once locally running supabase, since last year i changed nothing but only running supabase locally instead of having it hosted online and it keeps giving me network request failed aswell.",
                    "author": {
                        "login": "Killbyfire"
                    },
                    "createdAt": "2023-10-17T20:43:07Z",
                    "url": "https://github.com/supabase/supabase-js/issues/879#issuecomment-1767143969"
                },
                {
                    "id": "IC_kwDOD79Crs5pjd43",
                    "body": "+1 on this. I also get the `Network request failed` on Android Emulator and additionally, the session is not available after login. No such issues with ios simulator",
                    "author": {
                        "login": "atanaskanchev"
                    },
                    "createdAt": "2023-10-19T12:41:00Z",
                    "url": "https://github.com/supabase/supabase-js/issues/879#issuecomment-1770905143"
                },
                {
                    "id": "IC_kwDOD79Crs5pjiQq",
                    "body": "Here some debug logging from auth\r\n\r\n```ts\r\nexport const supabase = createClient<Database>(config.supabaseUrl, config.supabaseAnonKey, {\r\n  auth: {\r\n   storage: AsyncStorage,\r\n    autoRefreshToken: true,\r\n    persistSession: true,\r\n    detectSessionInUrl: false,\r\n    debug: true\r\n  }\r\n})\r\n```\r\n\r\n```\r\n ERROR  [TypeError: Network request failed]\r\n LOG  {\"error\": null, \"isLoading\": false, \"session\": null}\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:46:27.628Z #_autoRefreshTokenTick() begin\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:46:27.630Z #_acquireLock begin 0\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:46:27.631Z #_acquireLock lock acquired for storage key sb-localhost-auth-token\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:46:27.631Z #_useSession begin\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:46:27.631Z #__loadSession() begin\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:46:27.632Z #getSession() session from storage null\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:46:27.633Z #__loadSession() end\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:46:27.634Z #_autoRefreshTokenTick() no session\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:46:27.634Z #_useSession end\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:46:27.634Z #_autoRefreshTokenTick() end\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:46:27.634Z #_acquireLock lock released for storage key sb-localhost-auth-token\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:46:27.635Z #_acquireLock end\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:46:57.646Z #_autoRefreshTokenTick() begin\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:46:57.647Z #_acquireLock begin 0\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:46:57.647Z #_acquireLock lock acquired for storage key sb-localhost-auth-token\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:46:57.648Z #_useSession begin\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:46:57.648Z #__loadSession() begin\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:46:57.650Z #getSession() session from storage null\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:46:57.650Z #__loadSession() end\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:46:57.651Z #_autoRefreshTokenTick() no session\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:46:57.653Z #_useSession end\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:46:57.654Z #_autoRefreshTokenTick() end\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:46:57.654Z #_acquireLock lock released for storage key sb-localhost-auth-token\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:46:57.655Z #_acquireLock end\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:47:27.662Z #_autoRefreshTokenTick() begin\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:47:27.663Z #_acquireLock begin 0\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:47:27.664Z #_acquireLock lock acquired for storage key sb-localhost-auth-token\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:47:27.664Z #_useSession begin\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:47:27.664Z #__loadSession() begin\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:47:27.664Z #getSession() session from storage null\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:47:27.665Z #__loadSession() end\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:47:27.665Z #_autoRefreshTokenTick() no session\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:47:27.665Z #_useSession end\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:47:27.665Z #_autoRefreshTokenTick() end\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:47:27.665Z #_acquireLock lock released for storage key sb-localhost-auth-token\r\n LOG  GoTrueClient@0 (2.56.0) 2023-10-19T12:47:27.665Z #_acquireLock end\r\n```",
                    "author": {
                        "login": "atanaskanchev"
                    },
                    "createdAt": "2023-10-19T12:49:12Z",
                    "url": "https://github.com/supabase/supabase-js/issues/879#issuecomment-1770923050"
                },
                {
                    "id": "IC_kwDOD79Crs5pji-a",
                    "body": "Tried downgrading to `\"@supabase/supabase-js\": \"2.33.2\"` but the issue is still there. I wonder if it's related to Sonoma",
                    "author": {
                        "login": "atanaskanchev"
                    },
                    "createdAt": "2023-10-19T12:51:05Z",
                    "url": "https://github.com/supabase/supabase-js/issues/879#issuecomment-1770925978"
                },
                {
                    "id": "IC_kwDOD79Crs5pkRE1",
                    "body": "Will make a PlayStore build to see if this is only local and report back\r\n",
                    "author": {
                        "login": "atanaskanchev"
                    },
                    "createdAt": "2023-10-19T14:31:57Z",
                    "url": "https://github.com/supabase/supabase-js/issues/879#issuecomment-1771114805"
                },
                {
                    "id": "IC_kwDOD79Crs5pvKD8",
                    "body": "I've since then switched to developing with Supabase Cloud. No such problems whatsoever. Haven't exceeded the limits on the free tier either so far. Would suggest the same if you've been blocked by this for a while",
                    "author": {
                        "login": "maxwowo"
                    },
                    "createdAt": "2023-10-22T01:56:15Z",
                    "url": "https://github.com/supabase/supabase-js/issues/879#issuecomment-1773969660"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs5z_xSq",
            "number": 881,
            "title": "PostgrestError type has 'code' field but returns 'statusCode'",
            "body": "# Bug report\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nHere is the type definition for a `PostgrestError`:\r\n\r\n```typescript\r\nexport type PostgrestError = {\r\n  message: string;\r\n  details: string;\r\n  hint: string;\r\n  code: string;\r\n};\r\n```\r\n\r\nHowever, the error object returned for this example:\r\n\r\n```typescript\r\nconst { error } = await supabase\r\n  .from(\"organizations\")\r\n  .update({\r\n    contract: bucketData?.path,\r\n  })\r\n  .eq(\"id\", updatedOrganization.id);\r\n```\r\n\r\nis:\r\n\r\n```json\r\n{\r\n  \"statusCode\": \"409\",\r\n  \"error\": \"Duplicate\",\r\n  \"message\": \"The resource already exists\"\r\n}\r\n```\r\n\r\n## To Reproduce\r\n\r\n1. Use `\"@supabase/supabase-js\": \"^2.38.1\"`.\r\n2. Go ahead and upload your document to a bucket that already has a matching path.\r\n3. Check the error object returned (statusCode: 409).\r\n\r\n## Expected behavior\r\n\r\nThe object returned should match the type, or vice versa.\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Version of supabase-js: 2.38.1\r\n- Version of Node.js: 18.13.0\r\n\r\n## Additional context\r\n\r\nI would be happy to contribute the PR if someone could confirm the issue.\r\n",
            "author": {
                "login": "zeekrey"
            },
            "state": "OPEN",
            "createdAt": "2023-10-16T21:06:51Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/881",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs50GNrV",
            "number": 882,
            "title": "SvelteKit authentication with static adapter",
            "body": "The client-side auth flow requires writing server-side hooks according to the docs, but it's not available with the static adapter. Is it possible to somehow solve authentication in a static site?",
            "author": {
                "login": "notramo"
            },
            "state": "OPEN",
            "createdAt": "2023-10-17T16:13:36Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/882",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5qudmy",
                    "body": "You would do the same as for pure Svelte: https://supabase.com/docs/guides/getting-started/tutorials/with-svelte",
                    "author": {
                        "login": "petrsiegl"
                    },
                    "createdAt": "2023-11-02T11:39:06Z",
                    "url": "https://github.com/supabase/supabase-js/issues/882#issuecomment-1790564786"
                },
                {
                    "id": "IC_kwDOD79Crs5q3aJa",
                    "body": "Could you explain how? As I previously mentioned, the static adapter does not support server-side hooks.",
                    "author": {
                        "login": "notramo"
                    },
                    "createdAt": "2023-11-03T18:09:34Z",
                    "url": "https://github.com/supabase/supabase-js/issues/882#issuecomment-1792909914"
                },
                {
                    "id": "IC_kwDOD79Crs5q3g4b",
                    "body": "The tutorial doesn't use any server-side hooks, as it's tutorial for svelte therefore no hooks exists. Just go from top to bottom of the linked tutorial and you will have working auth flow.",
                    "author": {
                        "login": "petrsiegl"
                    },
                    "createdAt": "2023-11-03T18:27:32Z",
                    "url": "https://github.com/supabase/supabase-js/issues/882#issuecomment-1792937499"
                },
                {
                    "id": "IC_kwDOD79Crs5rzPDr",
                    "body": "Sorry for the confusion, I haven't notice there are separate pages for pure Svelte and SvelteKit.\r\nHowever, SvelteKit does not use `window.fetch` but `event.fetch`, so it's not compatible with the SvelteKit tutorial. #889 ",
                    "author": {
                        "login": "notramo"
                    },
                    "createdAt": "2023-11-13T17:02:50Z",
                    "url": "https://github.com/supabase/supabase-js/issues/882#issuecomment-1808593131"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs50Y3_Q",
            "number": 885,
            "title": "Proposal: throwOnError should be default behavior",
            "body": "# Bug report\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nAdmittedly this is not a bug, but i wanted this issue to end up in the `supabase-js` repo as that is where the decision would need to be made.\r\n\r\nAs a new user of the `supabase-js` library, i was caught off guard by the API not throwing errors by default. Instead you need to remember to invoke `throwOnError()` after every query. This change was previously made and discussed here: https://github.com/supabase/supabase-js/issues/32, and it seems others share my same concern.\r\n\r\nThis is (IMO) an unusual behavior for an API where errors are silent by default. `.update()` mutations that fail can easily go unnoticed for example. \r\n\r\nOther popular libraries i use on a regular basis such as Prisma, Zod, etc. instead throw by default, and you either have to catch the error, or opt into the API that doesn't throw and returns an error object (see [Zod docs for example](https://zod.dev/?id=safeparse)).\r\n\r\ncc @n-sviridenko, @rienheuver\r\n",
            "author": {
                "login": "ianschmitz"
            },
            "state": "OPEN",
            "createdAt": "2023-10-19T16:44:15Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/885",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5plYwc",
                    "body": "Fully agree, the proposal for setting this as default or as an option on `createClient` got upvoted a couple times in #32. Please do consider this supabase team \ud83d\ude04 ",
                    "author": {
                        "login": "rienheuver"
                    },
                    "createdAt": "2023-10-19T17:18:25Z",
                    "url": "https://github.com/supabase/supabase-js/issues/885#issuecomment-1771408412"
                },
                {
                    "id": "IC_kwDOD79Crs5p9qyC",
                    "body": "Actually just came to create this issue, then saw it here.\r\n\r\nStorage doesn't even have this as option yet https://github.com/supabase/storage-js/issues/150.\r\n\r\nIt'd be a breaking change to make this default, so this should just be an option when creating a client. Just `throwOnError: true` would be fantastic. \r\n\r\nPlus, if this feature is enabled globally, any call should automatically return `response.data` instead of the encapsulated `{ data }` object. Right now, my code is littered with `.throwOnError().then(res => res.data)` for every call to Supabase. \r\n\r\nMany new Supabase users make the mistake of not handling errors from the sdk correctly, and end up wasting time figuring out issues because of that. Giving a `throwOnError: true` option would be a sane default.",
                    "author": {
                        "login": "ConProgramming"
                    },
                    "createdAt": "2023-10-24T18:13:27Z",
                    "url": "https://github.com/supabase/supabase-js/issues/885#issuecomment-1777773698"
                },
                {
                    "id": "IC_kwDOD79Crs5p9reV",
                    "body": "Completely agree @ConProgramming. Thanks for the suggestions!",
                    "author": {
                        "login": "ianschmitz"
                    },
                    "createdAt": "2023-10-24T18:14:46Z",
                    "url": "https://github.com/supabase/supabase-js/issues/885#issuecomment-1777776533"
                },
                {
                    "id": "IC_kwDOD79Crs5qjPKP",
                    "body": "Alternatively, let us set `throwOnErrors` when creating the client. Most users are/should be using a wrapper anyway:\r\n\r\n```ts\r\nimport { createClient } from '@supabase/supabase-js'\r\n\r\nexport const createSupabase = async () => {\r\n  return createClient('https://xyzcompany.supabase.co', 'public-anon-key', {\r\n    throwOnErrors: true\r\n  })\r\n}\r\n```\r\n\r\nThis, along with a fix for #801, would cut out loads of boilerplate. @kiwicopple @w3b6x9 @filipecabaco would you accept a PR for this?",
                    "author": {
                        "login": "mmkal"
                    },
                    "createdAt": "2023-10-31T17:01:22Z",
                    "url": "https://github.com/supabase/supabase-js/issues/885#issuecomment-1787622031"
                },
                {
                    "id": "IC_kwDOD79Crs5sVEWB",
                    "body": "I wholeheartedly support this proposal. I would go so far as to say that going with the result pattern by default was a bold design choice but also a highly questionable one. Throwing on errors should be the default in any library. Returning result objects is useful in certain scenarios but should be implemented in the application instead of in a library. For our project it is cumbersome to integrate with supabase for the reasons mentioned in this thread.\r\n\r\nDownsides of the Result pattern:\r\n\r\n - There is no universal convention on how a result object is suppposed to look like, especially the error object. \r\n - You either have to opt into this pattern for the rest of the application or employ nasty workarounds to get the usual throwing-behavior (`throwOnError`).\r\n - Libraries should not make design choices on that level. Rather, employ the standard error handling behavior and have consumers of the library wrap the API calls if they want to use the result pattern.\r\n - Constructs like Promise.all don't work with the result pattern.\r\n - It interferes with certain centralized error-handling strategies.\r\n - The client code gets nasty as soon as you make more than one request in a single scope, as `data` and `error` need to be renamed for every request.\r\n\r\nThere is nothin wrong with having an option for using result objects instead of standard error handling, but it should be opt-in and not the default.\r\n\r\nI'd like to ask you to at least consider changing this in the next major release.\r\n",
                    "author": {
                        "login": "juni0r"
                    },
                    "createdAt": "2023-11-18T09:50:20Z",
                    "url": "https://github.com/supabase/supabase-js/issues/885#issuecomment-1817462145"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs50bts-",
            "number": 886,
            "title": "Supabase Error verifying OTP: Error confirming user",
            "body": "# Bug report\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nI'm having an issue with verifying OTP for mobile number sign up. I'm using Twilio. This code path was previously working as of 2 days ago, and with no code changes, new users are unable to sign up. \r\n\r\n**Currently**\r\n1. Users are able to sign up, and a row for them is created in the auth.users table. \r\n2. They also receive the OTP via Twilio\r\n3. After entering the OTP, we get a 500 internal server error from supabase saying \"Error confirming user\".\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\nThe snippet for signing the user up. I've verified the phone and password are working correctly.\r\n```\r\nconst { data, error } = await supabaseClient.auth.signUp({\r\n            phone,\r\n            password\r\n        });\r\n```\r\nThe response of this call is successful. Then I make the following call once the user enters their OTP\r\n```\r\nconst { data, error } = await supabaseClient.auth.verifyOtp({\r\n            phone,\r\n            token: otp,\r\n            type: 'sms'\r\n        });\r\nif (error) {\r\n            console.error('Error verifying OTP:', error.message);\r\n        }\r\n```\r\nThis logs: Error verifying OTP: Error confirming user. The supabase /auth/v1/verify posts with a 500 as well.\r\n\r\n\r\n## Expected behavior\r\n\r\nI expect the OTP code to successfully verify the user and the verifyOtp() call to succeed (as it was doing a few days ago).\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser: N/A (electron + react app) \r\n- Version of supabase-js: 2.38.2, 2.38.1, 2.38.0\r\n- Version of Node.js: 18.16.1\r\n\r\n## Additional context\r\n\r\nSign up was fully working for me a few days ago with the same exact code (I was on version 2.38.0). I'm not sure what has changed to cause this to happen. I couldn't find this error anywhere on the docs or issues or posts. Given that I'm the first to report this, I'm sure I'm doing something wrong somewhere. Perhaps there's some twilio setting that has been changed -- but it seems unlikely as I haven't touched my twilio, and the codes are being sent. \r\n\r\nNote: when I pass the code in again (verify it again) the next call fails w/ a 401 Error verifying OTP: Token has expired or is invalid. Which means supabase is doing something.",
            "author": {
                "login": "sumersao"
            },
            "state": "CLOSED",
            "createdAt": "2023-10-20T03:06:05Z",
            "closedAt": "2023-10-22T19:23:14Z",
            "url": "https://github.com/supabase/supabase-js/issues/886",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5pv67E",
                    "body": "Still having this issue! If anyone has any ideas on how or what to debug, that would be really helpful too",
                    "author": {
                        "login": "sumersao"
                    },
                    "createdAt": "2023-10-22T18:48:35Z",
                    "url": "https://github.com/supabase/supabase-js/issues/886#issuecomment-1774169796"
                },
                {
                    "id": "IC_kwDOD79Crs5pv81b",
                    "body": "This was happening as a result of an event trigger function I had written after signup. Sorry for the confusion!",
                    "author": {
                        "login": "sumersao"
                    },
                    "createdAt": "2023-10-22T19:23:15Z",
                    "url": "https://github.com/supabase/supabase-js/issues/886#issuecomment-1774177627"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs50gPSs",
            "number": 888,
            "title": "{\"error\":\"a.replace is not a function\"}",
            "body": "Please everytime i test my api endpoint from the edge functions i created, i get \"a.replace is not a function\".\r\n\r\nThis is the Event message\r\n\r\nEvent message\r\nError: TypeError: a.replace is not a function\r\n    at b (https://esm.sh/v133/@supabase/supabase-js@2.38.2/deno/supabase-js.mjs:2:1387)\r\n    at new f (https://esm.sh/v133/@supabase/supabase-js@2.38.2/deno/supabase-js.mjs:2:2429)\r\n    at ie (https://esm.sh/v133/@supabase/supabase-js@2.38.2/deno/supabase-js.mjs:2:5377)\r\n    at Server.<anonymous> (file:///C:/Users/Administrator/supabase/functions/transfer-funds/index.ts:14:32)\r\n    at Server.#respond (https://deno.land/std@0.182.0/http/server.ts:220:43)\r\n    at Server.#serveHttp (https://deno.land/std@0.182.0/http/server.ts:258:26)\r\n    at eventLoopTick (ext:core/01_core.js:183:11)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nA clear and concise description of what the bug is.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Go to '\u2026'\r\n2. Click on '\u2026'\r\n3. Scroll down to '\u2026'\r\n4. See error\r\n\r\n## Expected behavior\r\n\r\nA clear and concise description of what you expected to happen.\r\n\r\n## Screenshots\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n## System information\r\n\r\n- OS: [e.g. macOS, Windows]\r\n- Browser (if applies) [e.g. chrome, safari]\r\n- Version of supabase-js: [e.g. 6.0.2]\r\n- Version of Node.js: [e.g. 10.10.0]\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "Yemidatadev"
            },
            "state": "CLOSED",
            "createdAt": "2023-10-20T16:08:42Z",
            "closedAt": "2023-10-20T17:21:38Z",
            "url": "https://github.com/supabase/supabase-js/issues/888",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5prkFI",
                    "body": "This error is originating from https://github.com/supabase/supabase-js/blob/86fdf6174836f4211c756a8f4780f908e4e2e536/src/SupabaseClient.ts#L91C26-L91C44 and effectively from https://github.com/supabase/supabase-js/blob/86fdf6174836f4211c756a8f4780f908e4e2e536/src/lib/helpers.ts#L12\r\n\r\nWhich basically means that you are calling `createClient` or `new SupabaseClient` with an object as the first argument. It should be `url, key, options` instead.",
                    "author": {
                        "login": "kamilogorek"
                    },
                    "createdAt": "2023-10-20T16:17:40Z",
                    "url": "https://github.com/supabase/supabase-js/issues/888#issuecomment-1773027656"
                },
                {
                    "id": "IC_kwDOD79Crs5prs-K",
                    "body": "How do i correct this please? Do i need to open up the fie on my pc and correct it?",
                    "author": {
                        "login": "Yemidatadev"
                    },
                    "createdAt": "2023-10-20T16:44:37Z",
                    "url": "https://github.com/supabase/supabase-js/issues/888#issuecomment-1773064074"
                },
                {
                    "id": "IC_kwDOD79Crs5prvFG",
                    "body": "Yes, it lives inside `supabase/functions/transfer-funds/index.ts`, just like the stacktrace tells.",
                    "author": {
                        "login": "kamilogorek"
                    },
                    "createdAt": "2023-10-20T16:51:36Z",
                    "url": "https://github.com/supabase/supabase-js/issues/888#issuecomment-1773072710"
                },
                {
                    "id": "IC_kwDOD79Crs5prwNX",
                    "body": "This is the code: \r\n\r\n // Create a Supabase client for database interaction\r\n    const supabaseClient = createClient({\r\n      url: Deno.env.get('SUPABASE_URL') ?? '',\r\n      key: Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '',\r\n    }, { headers: { Authorization: request.headers.get('Authorization') || '' } });\r\n\r\nWhat do i need to correct here please?",
                    "author": {
                        "login": "Yemidatadev"
                    },
                    "createdAt": "2023-10-20T16:55:13Z",
                    "url": "https://github.com/supabase/supabase-js/issues/888#issuecomment-1773077335"
                },
                {
                    "id": "IC_kwDOD79Crs5pryO1",
                    "body": "```js\r\nconst supabaseClient = createClient(Deno.env.get('SUPABASE_URL'), Deno.env.get('SUPABASE_SERVICE_ROLE_KEY'));\r\n```\r\n\r\nor\r\n\r\n```js\r\nconst supabaseClient = createClient(\r\n  Deno.env.get('SUPABASE_URL'),\r\n  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY'),\r\n  global: {\r\n    headers: {\r\n      Authorization: request.headers.get('Authorization')\r\n    }\r\n  }\r\n);\r\n```\r\n\r\nI don't know your codebase to answer exactly.",
                    "author": {
                        "login": "kamilogorek"
                    },
                    "createdAt": "2023-10-20T17:00:26Z",
                    "url": "https://github.com/supabase/supabase-js/issues/888#issuecomment-1773085621"
                },
                {
                    "id": "IC_kwDOD79Crs5pr0ZG",
                    "body": "Here is the whole code:\r\n\r\n```js\r\nimport { serve } from \"https://deno.land/std@0.182.0/http/server.ts\";\r\nimport { createClient } from \"https://esm.sh/@supabase/supabase-js@2.38.2\";\r\nimport { corsHeaders } from \"../_shared/cors2.ts\";\r\n\r\nconsole.log(\"Transfer Funds Function\");\r\n\r\nserve(async (request) => {\r\n  if (request.method === \"OPTIONS\") {\r\n    // Handle preflight CORS requests\r\n    return new Response(\"ok\", { headers: corsHeaders });\r\n  }\r\n\r\n  try {\r\n    // Create a Supabase client for database interaction\r\n    const supabaseClient = createClient({\r\n      url: Deno.env.get(\"SUPABASE_URL\") ?? \"\",\r\n      key: Deno.env.get(\"SUPABASE_SERVICE_ROLE_KEY\") ?? \"\",\r\n    }, {\r\n      headers: { Authorization: request.headers.get(\"Authorization\") || \"\" },\r\n    });\r\n\r\n    // Parse the JSON request body to get senderUserId, receiverUserId, and transferAmount\r\n    const requestBody = await request.json();\r\n    const senderUserId = requestBody.senderUserId;\r\n    const receiverUserId = requestBody.receiverUserId;\r\n    const transferAmount = requestBody.transferAmount;\r\n\r\n    console.log(\"Request Body:\", requestBody);\r\n\r\n    // Check if the sender has enough balance to perform the transfer\r\n    const { data: senderData } = await supabaseClient\r\n      .from(\"users\")\r\n      .select(\"balance\")\r\n      .eq(\"id\", senderUserId)\r\n      .single();\r\n\r\n    console.log(\"Sender User Data:\", senderData);\r\n\r\n    if (!senderData) {\r\n      throw new Error(\"Sender not found\");\r\n    }\r\n\r\n    if (typeof senderData.balance !== \"number\" || isNaN(senderData.balance)) {\r\n      throw new Error(\"Invalid balance for the sender\");\r\n    }\r\n\r\n    if (typeof transferAmount !== \"number\" || isNaN(transferAmount)) {\r\n      throw new Error(\"Invalid transfer amount\");\r\n    }\r\n\r\n    if (senderData.balance < transferAmount) {\r\n      throw new Error(\"Insufficient balance for the transfer\");\r\n    }\r\n\r\n    // Retrieve receiver's balance\r\n    const receiverData = await supabaseClient\r\n      .from(\"users\")\r\n      .select(\"balance\")\r\n      .eq(\"id\", receiverUserId)\r\n      .single();\r\n\r\n    console.log(\"Receiver User Data:\", receiverData);\r\n\r\n    if (!receiverData) {\r\n      throw new Error(\"Receiver not found\");\r\n    }\r\n\r\n    if (\r\n      typeof receiverData.balance !== \"number\" || isNaN(receiverData.balance)\r\n    ) {\r\n      throw new Error(\"Invalid balance for the receiver\");\r\n    }\r\n\r\n    // Proceed with the transfer by updating sender and receiver balances\r\n    const senderNewBalance = senderData.balance - transferAmount;\r\n    const receiverNewBalance = receiverData.balance + transferAmount;\r\n\r\n    await supabaseClient\r\n      .from(\"users\")\r\n      .update({ balance: senderNewBalance })\r\n      .eq(\"id\", senderUserId);\r\n\r\n    await supabaseClient\r\n      .from(\"users\")\r\n      .update({ balance: receiverNewBalance })\r\n      .eq(\"id\", receiverUserId);\r\n\r\n    return new Response(\"Funds transferred successfully\", {\r\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\r\n      status: 200,\r\n    });\r\n  } catch (error) {\r\n    // Handle errors and return an appropriate response with an error message\r\n    console.error(\"Error:\", error);\r\n    return new Response(JSON.stringify({ error: error.message }), {\r\n      headers: { ...corsHeaders, \"Content-Type\": \"application/json\" },\r\n      status: 400,\r\n    });\r\n  }\r\n});\r\n```\r\n\r\nSo whenever i implement the one you sent, Supabase will throw this error whenever i try to deploy it\r\n\r\nerror: Uncaught (in promise) Error: The module's source code could not be parsed: Expected ',', got ':' at file:///C:/Users/Administrator/supabase/functions/transfer-funds/index.ts:17:13\r\n\r\nBut when i leave it as is, it will deploy but i will throw the error \r\n\"error\": \"a.replace is not a function\"\r\n\r\nwhenever i want to test the endpoint.",
                    "author": {
                        "login": "Yemidatadev"
                    },
                    "createdAt": "2023-10-20T17:07:10Z",
                    "url": "https://github.com/supabase/supabase-js/issues/888#issuecomment-1773094470"
                },
                {
                    "id": "IC_kwDOD79Crs5pr3u8",
                    "body": "I had missing brackets there, it should be:\r\n\r\n\r\n```js\r\n    // Create a Supabase client with the Auth context of the logged in user.\r\n    const supabaseClient = createClient(\r\n      // Supabase API URL - env var exported by default.\r\n      Deno.env.get('SUPABASE_URL') ?? '',\r\n      // Supabase API ANON KEY - env var exported by default.\r\n      Deno.env.get('SUPABASE_ANON_KEY') ?? '',\r\n      // Create client with Auth context of the user that called the function.\r\n      // This way your row-level-security (RLS) policies are applied.\r\n      { global: { headers: { Authorization: req.headers.get('Authorization')! } } }\r\n    )\r\n```\r\n\r\nJust follow docs here https://supabase.com/docs/guides/functions/auth and you should be good.",
                    "author": {
                        "login": "kamilogorek"
                    },
                    "createdAt": "2023-10-20T17:15:27Z",
                    "url": "https://github.com/supabase/supabase-js/issues/888#issuecomment-1773108156"
                },
                {
                    "id": "IC_kwDOD79Crs5pr4ny",
                    "body": "Thanks a lot. The req is not defined but I'll figure it out. Thanks you've helped immensely.",
                    "author": {
                        "login": "Yemidatadev"
                    },
                    "createdAt": "2023-10-20T17:18:30Z",
                    "url": "https://github.com/supabase/supabase-js/issues/888#issuecomment-1773111794"
                },
                {
                    "id": "IC_kwDOD79Crs5pr5qF",
                    "body": "For you it's just `request.headers` instead :)",
                    "author": {
                        "login": "kamilogorek"
                    },
                    "createdAt": "2023-10-20T17:22:06Z",
                    "url": "https://github.com/supabase/supabase-js/issues/888#issuecomment-1773116037"
                },
                {
                    "id": "IC_kwDOD79Crs5pr6uc",
                    "body": "Please kindly do me a favor, everything worked fine but now when i test the endpoint, i get the error \"Sender not found\" even though i've supply all data needed to run it. What do you think might be the problem?",
                    "author": {
                        "login": "Yemidatadev"
                    },
                    "createdAt": "2023-10-20T17:25:29Z",
                    "url": "https://github.com/supabase/supabase-js/issues/888#issuecomment-1773120412"
                },
                {
                    "id": "IC_kwDOD79Crs5pr7_c",
                    "body": "It literally cannot find a database entry you asked for. It's right there in your code.\r\n\r\n```\r\n    if (!senderData) {\r\n      throw new Error(\"Sender not found\");\r\n    }\r\n```",
                    "author": {
                        "login": "kamilogorek"
                    },
                    "createdAt": "2023-10-20T17:29:40Z",
                    "url": "https://github.com/supabase/supabase-js/issues/888#issuecomment-1773125596"
                },
                {
                    "id": "IC_kwDOD79Crs5psANC",
                    "body": "Honesty that's what I've been giving me headache, i supply the data which is right there in the database but keep returning that error. Anyways thanks for your time, you've been so so helpful. I appreciate you.",
                    "author": {
                        "login": "Yemidatadev"
                    },
                    "createdAt": "2023-10-20T17:41:39Z",
                    "url": "https://github.com/supabase/supabase-js/issues/888#issuecomment-1773142850"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs50kCHT",
            "number": 889,
            "title": "SvelteKit adapter saves outdated `fetch` function",
            "body": "The SvelteKit adapter has a `createSupabaseLoadClient`, which caches the client when running in the browser. The only problem is that the SvelteKit-provided `fetch` function does a lot more under the hood, and saving it on the first run causes Supabase to use an outdated `fetch`, despite `createSupabaseLoadClient` being called with a different `fetch` on each subsequent run.\r\n\r\nThis does not seem like a big issue for basic `load()` functions, but it causes very difficult-to-debug situations when using advanced features of the SvelteKit router.\r\n\r\nThe above described problem is the biggest one in the caching mechanism, but it actually ignores any different value passed in the parameters when running subsequently.\r\n\r\nThe #438 issue describes a solution for the `fetch` problem.",
            "author": {
                "login": "notramo"
            },
            "state": "OPEN",
            "createdAt": "2023-10-21T17:58:01Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/889",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs5006E8",
            "number": 891,
            "title": "How to get UUID `id` of a file?",
            "body": "Using the JS client, is there any way to get the UUID of a file, given the `bucket_id` and filename?",
            "author": {
                "login": "notramo"
            },
            "state": "OPEN",
            "createdAt": "2023-10-24T20:30:11Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/891",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs50_K-y",
            "number": 892,
            "title": "\"This endpoint requires a Bearer token\" on auth.admin.signOut",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nI'm using Hono and Deno, so I create a router `/logout` in order to sign out the logged user, but when I access the route, I receive a error from `auth.admin.signOut` with this message:\r\n\r\n```json\r\n{\r\n    \"name\": \"AuthApiError\",\r\n    \"message\": \"This endpoint requires a Bearer token\",\r\n    \"status\": 401\r\n}\r\n```\r\n\r\nThis is the code that I'm using:\r\n\r\n```ts\r\nauth.get(\"/logout\", async (c) => {\r\n  const Authorization = c.req.header(\"Authorization\")!;\r\n  const supabaseClient = createClient(SUPABASE_URL ?? \"\", SUPABASE_KEY ?? \"\", {\r\n    global: { headers: { Authorization } },\r\n  });\r\n  const { error } = await supabaseClient.auth.admin.signOut(Authorization);\r\n  if (error) {\r\n    c.status(error.status ?? 500);\r\n    return c.json(error);\r\n  }\r\n  return c.json({ success: true });\r\n});\r\n```\r\n\r\nI checked if the `c.req.header(\"Authorization\")` returns the Bearer token, and yes, returns correctly.\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Version of supabase-js: 2.38.3\r\n- Version of hono: 3.8.3\r\n- Version of deno: 1.37.2\r\n",
            "author": {
                "login": "emersonlaurentino"
            },
            "state": "CLOSED",
            "createdAt": "2023-10-26T05:11:36Z",
            "closedAt": "2023-10-26T05:33:54Z",
            "url": "https://github.com/supabase/supabase-js/issues/892",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs51KXK-",
            "number": 894,
            "title": "Error on update()",
            "body": "Version  : \"@supabase/supabase-js\": \"2.38.4\",\r\n\r\nThe error object return by the update function is empty  => making error identification difficult.\r\n\r\n\r\n-To reproduce you can for example try to update an non-existent id, or update a database without having the policy right to do it.\r\n\r\nconst { error } = await supabase.from('countries').update({ name: 'Australia' }).eq('id', 9999)\r\n\r\n\r\n\r\n\r\n\r\n",
            "author": {
                "login": "ohrrkan"
            },
            "state": "OPEN",
            "createdAt": "2023-10-27T14:27:12Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/894",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs51Oi2l",
            "number": 895,
            "title": "Setting emailRedirectTo should set {{ .SiteURL }} in email template when using signInWithOtp",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nAssuming the `Redirect URLs` have properly been configured in Supabase configuration settings, when the `emailRedirectTo` parameter is specified, that URL should be represented in the email template via `{{ .SiteURL }}`\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Make sure relevant URLs are correctly added to Supabase's `Redirect URLs` list\r\n2. Send a `signInWithOtp` with the `emailRedirectTo` as an option. Example:\r\n\r\n```js\r\nsupabase.auth.signInWithOtp({\r\n  email: email,\r\n  options: {\r\n    emailRedirectTo: 'http://localhost:5173',\r\n  },\r\n});\r\n```\r\n\r\n## Expected behavior\r\n\r\nThe value of  `{{ .SiteURL }}` should match the value passed via `emailRedirectTo`. Instead, the default Site URL (as defined in the Supabase configuration) is set.\r\n\r\n## Additional context\r\n\r\n- When authenticating via OAUTH, and defining `redirectTo`, the `{{ .SiteURL }}` value is properly overridden. However, the `signInWithOtp` requires a `emailRedirectTo` option and this option does not override `{{ .SiteURL }}`.\r\n- The `{{ .ConfirmationURL }}` value is properly updated when setting `emailRedirectTo`. However,  `{{ .SiteURL }}` should also be set accordingly.\r\n\r\n`emailRedirectTo` should override  `{{ .SiteURL }}` as that is what is expected and is necessary to have properly functioning email templates across different environments.",
            "author": {
                "login": "danhstevens"
            },
            "state": "OPEN",
            "createdAt": "2023-10-28T21:36:59Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/895",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5q0Kwy",
                    "body": "I made a turn around by create an edge function to do the redirection. It is inspired by MS Defender safe link [auth-email-templates#email-prefetching](https://supabase.com/docs/guides/auth/auth-email-templates#email-prefetching).\r\n\r\n```typescript\r\nDeno.serve(async (req: Request) => {\r\n  if (req.method !== 'GET') {\r\n    return new Response({}, { status: 405 });\r\n  }\r\n\r\n  try {\r\n    const origin = new URL(req.url);\r\n\r\n    const confirmationUrl = new URL(origin.searchParams.get('confirmation_url'));\r\n    const redirectUrl = new URL(confirmationUrl.searchParams.get('redirect_to'));\r\n\r\n    redirectUrl.searchParams.set('token_hash', confirmationUrl.searchParams.get('token'));\r\n    redirectUrl.searchParams.set('type', confirmationUrl.searchParams.get('type'));\r\n\r\n    return Response.redirect(redirectUrl.toString(), 301);\r\n  } catch (err) {\r\n    return new Response({ error: err }, { status: 500 });\r\n  }\r\n});\r\n```\r\n\r\nAfter deploying this function you'll get an Endpoint URL and set SiteURL with the Endpoint URL. Also modify email template to pass the `{{ .ConfirmationURL }}` as query parameters `confirmation_url` as stated in [auth-email-templates#email-prefetching](https://supabase.com/docs/guides/auth/auth-email-templates#email-prefetching). Here is an example for the email templates:\r\n\r\n```html\r\n<h2>Magic Link</h2>\r\n\r\n<p>Follow this link to login:</p>\r\n<p><a href=\"{{ .SiteURL }}?confirmation_url={{ .ConfirmationURL }}\">Log In</a></p>\r\n```",
                    "author": {
                        "login": "alfarih31"
                    },
                    "createdAt": "2023-11-03T08:46:26Z",
                    "url": "https://github.com/supabase/supabase-js/issues/895#issuecomment-1792060466"
                },
                {
                    "id": "IC_kwDOD79Crs5sB0da",
                    "body": "I also ran into a similar issue, but I don't think the fix should be to override `{{ .SiteURL }}` as a redirect URL is not related to the Site URL.\r\n\r\nInstead, the root cause is the fact `{{ .RedirectURL }}` does not appear to work in the email templates, although the docs state it should be supported for `signInWithOtp`.\r\n\r\nThe redirect URLs are configured correctly because I can see the parameter in the `{{ .ConfirmationURL }}`.\r\n\r\nhttps://supabase.com/docs/guides/auth/auth-email-templates#terminology",
                    "author": {
                        "login": "ShinyObjectLabs"
                    },
                    "createdAt": "2023-11-15T12:01:48Z",
                    "url": "https://github.com/supabase/supabase-js/issues/895#issuecomment-1812416346"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs51YrXi",
            "number": 896,
            "title": "Doc Question:  How do we filter a vector with another column?",
            "body": "# Improve documentation\r\nI'm having a hard time figuring out how filtering a vector with another column is done and how it works with the js client.\r\n\r\n- There's no example with any complex filtering.  \r\n- Additionally i'm not sure if the filtering is post filtering, cross filtering or pre filtering\r\n\r\n## Link \r\n\r\nhttps://supabase.com/docs/guides/ai/vector-indexes/hnsw-indexes\r\n\r\n## Describe the improvement\r\n\r\nIt would be great to have more details on how filtering works and how to use it with the js client.  \r\n\r\n",
            "author": {
                "login": "ShravanSunder"
            },
            "state": "OPEN",
            "createdAt": "2023-10-30T23:56:19Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/896",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs51hfi8",
            "number": 897,
            "title": "Failing build with the latest version at 2.38.4",
            "body": "# Bug report\r\n\r\nQwik's build fails with the latest version of Supabase. \r\nEarlier running v2.33.2 was fine.\r\n\r\n## Describe the bug\r\n\r\nOn running `npm run build`, getting the following error:\r\n```\r\nRollupError: Cannot bundle Node.js built-in \"stream\" imported from \"node_modules/@supabase/node-fetch/lib/index.js\". Consider disabling ssr.noExternal or remove the built-in dependency.\r\n```\r\n\r\n## To Reproduce\r\n\r\nThis does not happen in a new project. In my own project I've various Supabase client calls within `Promise.all`. I think that's the culprit.\r\n\r\n## Expected behavior\r\n\r\nThe build should work.\r\n\r\n## Screenshots\r\n<img width=\"1463\" alt=\"Screenshot 2023-11-01 at 10 39 41\u202fAM\" src=\"https://github.com/supabase/supabase-js/assets/2056046/7c618d43-578f-4a0b-85a8-4169ba237014\">\r\n\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser: NA\r\n- Version of supabase-js: 2.38.4\r\n- Version of Node.js: v18.16.0\r\n\r\n## Additional context\r\n\r\nThis didn't happen in a new project I tried to create to reproduce the problem, where I didn't use the `Promise.all` with supabase queries in it. \r\n",
            "author": {
                "login": "y471n"
            },
            "state": "OPEN",
            "createdAt": "2023-11-01T05:11:32Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/897",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs51jhwZ",
            "number": 898,
            "title": "fetch failed on Storage functions outside of browser",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nStorage functions (download, list files) fail using local dev and an Express server. Other functions related to auth and Postgres seem to work fine. I've also tried switching from Node 18 to 20, no difference. \r\n\r\nStorage functions via browser work OK. \r\n\r\n```\r\nconst { data: pdfData, error } = await supabase.storage\r\n      .from(\"example\")\r\n      .list(\"demo\", {});\r\n```\r\n\r\n```\r\nai-server-ai_server-1    | [1] Error: StorageUnknownError: fetch failed\r\nai-server-ai_server-1    | [1]     at /app/node_modules/@supabase/storage-js/dist/main/lib/fetch.js:29:16\r\nai-server-ai_server-1    | [1]     at Generator.next (<anonymous>)\r\nai-server-ai_server-1    | [1]     at fulfilled (/app/node_modules/@supabase/storage-js/dist/main/lib/fetch.js:5:58)\r\nai-server-ai_server-1    | [1]     at process.processTicksAndRejections (node:internal/process/task_queues:95:5) {\r\nai-server-ai_server-1    | [1]   __isStorageError: true,\r\nai-server-ai_server-1    | [1]   originalError: TypeError: fetch failed\r\nai-server-ai_server-1    | [1]       at Object.fetch (node:internal/deps/undici/undici:11372:11)\r\nai-server-ai_server-1    | [1]       at process.processTicksAndRejections (node:internal/process/task_queues:95:5) {\r\nai-server-ai_server-1    | [1]     cause: _ConnectTimeoutError: Connect Timeout Error\r\nai-server-ai_server-1    | [1]         at onConnectTimeout (node:internal/deps/undici/undici:6616:28)\r\nai-server-ai_server-1    | [1]         at node:internal/deps/undici/undici:6574:50\r\nai-server-ai_server-1    | [1]         at Immediate._onImmediate (node:internal/deps/undici/undici:6605:13)\r\nai-server-ai_server-1    | [1]         at process.processImmediate (node:internal/timers:478:21) {\r\nai-server-ai_server-1    | [1]       code: 'UND_ERR_CONNECT_TIMEOUT'\r\nai-server-ai_server-1    | [1]     }\r\nai-server-ai_server-1    | [1]   }\r\nai-server-ai_server-1    | [1] }\r\n```\r\n\r\n## To Reproduce\r\n\r\nIn a NodeJS environment, use Storage features:\r\n\r\n```\r\nconst { data: pdfData, error } = await supabase.storage\r\n      .from(\"example\")\r\n      .list(\"demo\", {});\r\n```\r\n\r\n\r\n## Expected behavior\r\n\r\nA returned list of file info.\r\n\r\n## Screenshots\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n## System information\r\n\r\n- OS: MacOS\r\n- Environment: ExpressJS\r\n- Version of supabase-js: \"2.38.4\"\r\n- Version of Node.js: 18, 20\r\n\r\n## Additional context\r\n\r\nRunning the Express server within a docker compose setup w/ Redis, etc. \r\n",
            "author": {
                "login": "allpwrfulroot"
            },
            "state": "OPEN",
            "createdAt": "2023-11-01T12:07:19Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/898",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs51qKW-",
            "number": 899,
            "title": "Full Name not stored in Database when Using Apple Sign-In in React Native",
            "body": "## Description\r\n\r\nWhen using Apple's native sign-in with React Native and the signInWithIdToken method, the raw_user_meta_data in the auth.users table doesn't include the newly created user's full name. Even though AppleAuthentication.signInAsync provides both the email and full name, only the email is stored in the database.\r\n\r\nCode:\r\n```\r\nconst credential = await AppleAuthentication.signInAsync({\r\n  requestedScopes: [\r\n\tAppleAuthentication.AppleAuthenticationScope.FULL_NAME,\r\n\tAppleAuthentication.AppleAuthenticationScope.EMAIL,\r\n  ],\r\n});\r\n\r\nconsole.log(credential);\r\n\r\nif (credential.identityToken) {\r\n  const { error } = await supabase.auth.signInWithIdToken({\r\n\t  provider: \"apple\",\r\n\t  token: credential.identityToken,\r\n  });\r\n}\r\n```\r\n\r\nConsole log:\r\n```\r\n{\r\n  authorizationCode: \"**********\",\r\n  email: \"**********\",\r\n  fullName: {\r\n  familyName: \"Druon\",\r\n  givenName: \"Victorien\",\r\n  middleName: null,\r\n  namePrefix: null,\r\n  nameSuffix: null,\r\n  nickname: null,\r\n  },\r\n  identityToken: \"**********\",\r\n  realUserStatus: 2,\r\n  state: null,\r\n  user: \"**********\",\r\n}\r\n```\r\n\r\nSupabase auth.users.raw_user_meta_data:\r\n```\r\n{\r\n  \"iss\": \"https://appleid.apple.com\",\r\n  \"sub\": \"**********\",\r\n  \"email\": \"**********\",\r\n  \"provider_id\": \"**********\",\r\n  \"custom_claims\": {\r\n    \"auth_time\": 1698918001\r\n  },\r\n  \"email_verified\": true\r\n}\r\n```\r\n\r\n## To Reproduce\r\n\r\nFollow the Supabase login with Apple with Expo React Native documentation: https://supabase.com/docs/guides/auth/social-login/auth-apple?platform=react-native\r\n\r\n## Expected behavior\r\n\r\nThe user's full name should be added to raw_user_meta_data.\r\n\r\n## System information\r\n```\r\n\"dependencies\": {\r\n  ...\r\n  \"@supabase/supabase-js\": \"^2.31.0\",\r\n  \"expo\": \"~49.0.5\",\r\n  \"expo-apple-authentication\": \"~6.1.0\",\r\n  \"expo-auth-session\": \"~5.0.2\",\r\n  \"expo-router\": \"2.0.0\",\r\n  \"react\": \"18.2.0\",\r\n  \"react-native\": \"0.72.6\",\r\n  \"supabase\": \"^1.82.2\",\r\n  ...\r\n},\r\n```\r\n\r\n## Additional context\r\n- Apple only returns the requested information on the very first authentication. The log above is what you get for the first auth.\r\n- There is a similar issue in supabase-flutter: https://github.com/supabase/supabase-flutter/issues/545\r\n",
            "author": {
                "login": "VictorienDruon"
            },
            "state": "OPEN",
            "createdAt": "2023-11-02T10:51:01Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/899",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5rTCLn",
                    "body": "I have the same problem with auth.users not including the name of the user upon sign up. However by maintaining users in a public tabel like proposed by supabase: https://supabase.com/docs/guides/auth/managing-user-data and creating a trigger to create a profile, you can do a work around to upsert or update the profiles table when signup is successful like: \r\n\r\n`await supabase.from(\"profiles\").upsert({id: user?.id, first_name: credential.fullName?.givenName, last_name: credential.fullName?.familyName}).eq(\"id\", user?.id);`",
                    "author": {
                        "login": "aalmho"
                    },
                    "createdAt": "2023-11-07T21:17:58Z",
                    "url": "https://github.com/supabase/supabase-js/issues/899#issuecomment-1800151783"
                },
                {
                    "id": "IC_kwDOD79Crs5rafmS",
                    "body": "Yeah, that would work, but it would be better if we didn't have to do this workaround. Because of that, we can't use supabase.auth.getUser() and have up-to-date user information. I wish signInWithIdToken would handle this automatically or at least allow us to pass additional user metadata, similar to how it works with supabase.auth.signUp()",
                    "author": {
                        "login": "VictorienDruon"
                    },
                    "createdAt": "2023-11-08T15:20:58Z",
                    "url": "https://github.com/supabase/supabase-js/issues/899#issuecomment-1802107282"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs510Z79",
            "number": 900,
            "title": "Deno edge function encounters unexpected bug with supabase-js client in local deployment",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Description\r\n\r\nI'm able to deploy a deno edge function locally and run a test without problems using `supabase functions serve --env-file ./supabase/functions/.env.local`. The supabase-js client library loads fine when I run `deno test --allow-all ./tests/jl-call-test.ts --env=./functions/.env.local`. However, the functions server shuts down with the following error:\r\n\r\n```\r\nSegmentation fault (core dumped)\r\nerror running container: exit 139\r\n```\r\n\r\nwhich happens at\r\n\r\n```\r\nconst client = createClient(\r\n      supabaseUrl, \r\n      supabaseKey, {\r\n        auth: {\r\n          autoRefreshToken: false,\r\n          persistSession: false,\r\n          detectSessionInUrl: false,\r\n        },\r\n        db: {\r\n          schema: 'custom_schema_name'\r\n        }\r\n      })\r\n```\r\n\r\nAs I said the above snippet runs perfectly well in my unit test. Running with the --debug flag outputs no extra information. \r\n\r\nWeirdly, if I remove the supabase-js client logic, my function is responsive in local development and works as expected. Any idea what might be going on here? Thanks \ud83e\udef6\r\n\r\n## System information\r\n\r\n- OS: Linux Ubuntu 22.04\r\n- Version of supabase-js: 2.38.4, but same error occurs in older versions\r\n- Version of Deno: 0.192.0, but same error occurs in older versions\r\n- Version of Docker: 24.0.4\r\n- Version of Supabase 1.110.1\r\n\r\n",
            "author": {
                "login": "JungeWerther"
            },
            "state": "OPEN",
            "createdAt": "2023-11-03T14:42:02Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/900",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5rfHST",
                    "body": "supabase cli\r\n\r\nthe same error occurs during local development\r\n\r\n![image](https://github.com/supabase/supabase-js/assets/62594983/fe793ef4-35c2-4ad5-aded-7c9f03430202)\r\n\r\n\r\nworks in 1.108.3\r\n\r\n![image](https://github.com/supabase/supabase-js/assets/62594983/0f9cead1-4140-48cb-a7dd-ea9ec30fe638)\r\n\r\n",
                    "author": {
                        "login": "teleskop150750"
                    },
                    "createdAt": "2023-11-09T07:53:19Z",
                    "url": "https://github.com/supabase/supabase-js/issues/900#issuecomment-1803318419"
                },
                {
                    "id": "IC_kwDOD79Crs5rpukX",
                    "body": "Same here\r\n\r\n![Screenshot 2023-11-10 at 18 08 01](https://github.com/supabase/supabase-js/assets/41895689/2843d42c-e054-4ed3-8f57-5c3c69b5726a)\r\n\r\nmaybe on mac i don't know",
                    "author": {
                        "login": "psemsari"
                    },
                    "createdAt": "2023-11-10T17:08:51Z",
                    "url": "https://github.com/supabase/supabase-js/issues/900#issuecomment-1806100759"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs513v24",
            "number": 901,
            "title": "An error occurred while fetching data: Property proficiencySkills from database is not a JSON string.",
            "body": "# Bug report\r\n\r\n- [x ] I confirm this is a bug with Supabase, not with my own application. \r\n- [ x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nI changed the fields in my table from varchar to JSONB and now fetching throws the following error:\r\n\r\n\"An error occurred while fetching data: Property proficiencySkills from database is not a JSON string.\"\r\n\r\nThe string has to be valid JSON because I edited in the supabase webpage and still get the same error. I tried also changing to JSON format and got the same issue.\r\n\r\n## To Reproduce\r\n\r\n```\r\nuseEffect(() => {\r\n    // Perform the initial data fetch\r\n    const fetchData = async () => {\r\n      try {\r\n        let query = supabaseConnection.from(tableName).select(\"*\");\r\n        if (tableName === \"messages\") {\r\n          query = query.order(\"created_at\", { ascending: false }).limit(100);\r\n        }\r\n        const { data, error } = await query;\r\n        if (error) {\r\n          console.error(\"Error fetching data from Supabase:\", error);\r\n        } else {\r\n          if (enableLog) console.log(\"Fetched initial data:\", data)\r\n          if (tableName === \"messages\") {\r\n            setObjects(data.reverse());\r\n          } else setObjects(data ? data.map(obj => fromDBActual(obj as TypeInDB)) : []);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"An error occurred while fetching data:\", error);\r\n      }\r\n    };\r\n```\r\n\r\nOutputs: \"An error occurred while fetching data: Property proficiencySkills from database is not a JSON string.\"\r\n\r\n## System information\r\n\r\n- OS: Ubuntu\r\n- Browser: Firefox\r\n- Version of supabase-js: 2.38.4\r\n- Version of Node.js: 20.9.0",
            "author": {
                "login": "david-campos"
            },
            "state": "CLOSED",
            "createdAt": "2023-11-04T23:13:40Z",
            "closedAt": "2023-11-04T23:14:49Z",
            "url": "https://github.com/supabase/supabase-js/issues/901",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5q59Pi",
                    "body": "Wait maybe I am stupid.",
                    "author": {
                        "login": "david-campos"
                    },
                    "createdAt": "2023-11-04T23:15:11Z",
                    "url": "https://github.com/supabase/supabase-js/issues/901#issuecomment-1793577954"
                },
                {
                    "id": "IC_kwDOD79Crs5q59xc",
                    "body": "Yes, I am, nevermind.",
                    "author": {
                        "login": "david-campos"
                    },
                    "createdAt": "2023-11-04T23:28:45Z",
                    "url": "https://github.com/supabase/supabase-js/issues/901#issuecomment-1793580124"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs514Mp0",
            "number": 902,
            "title": "error is always null if delete is not successful due to RLS policy",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\n### There are 2 scenarios to reproduce the bug:\r\n- either you do not have a RLS policy to allow delete at all\r\n- either you do have a RLS policy to disable delete when some condition is met (mine is when a column value is true)\r\n\r\nin both scenarios, the delete is not successful, and the error is always null.\r\n\r\n**It's very easy to reproduce the bug.**\r\n\r\n```javascript\r\n\r\n const { error } = await supabase\r\n              .from(\"my_table\")\r\n              .delete()\r\n              .eq(\"id\", id);\r\n\r\nconsole.log(error);// the value is always null\r\n\r\n```\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Go to '\u2026'\r\n2. Click on '\u2026'\r\n3. Scroll down to '\u2026'\r\n4. See error\r\n\r\n## Expected behavior\r\n\r\nA clear and concise description of what you expected to happen.\r\n\r\n## Screenshots\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n## System information\r\n\r\n- OS: [e.g. macOS, Windows]\r\n- Browser (if applies) [e.g. chrome, safari]\r\n- Version of supabase-js: [e.g. 6.0.2]\r\n- Version of Node.js: [e.g. 10.10.0]\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "danaoairuike"
            },
            "state": "OPEN",
            "createdAt": "2023-11-05T07:12:28Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/902",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5q8fer",
                    "body": "Can you try logging the error inside a then() callback? issue might be on postgrest-js's end\r\nEdit: Checking the return status might also be helpful, some responses from postgrest will return a null error",
                    "author": {
                        "login": "jonshung"
                    },
                    "createdAt": "2023-11-06T07:44:57Z",
                    "url": "https://github.com/supabase/supabase-js/issues/902#issuecomment-1794242475"
                },
                {
                    "id": "IC_kwDOD79Crs5rs1ED",
                    "body": "> Can you try logging the error inside a then() callback? issue might be on postgrest-js's end Edit: Checking the return status might also be helpful, some responses from postgrest will return a null error\r\n\r\nthe status is always 200",
                    "author": {
                        "login": "danaoairuike"
                    },
                    "createdAt": "2023-11-11T20:48:34Z",
                    "url": "https://github.com/supabase/supabase-js/issues/902#issuecomment-1806913795"
                },
                {
                    "id": "IC_kwDOD79Crs5swsEP",
                    "body": "Postgres does not return errors when you don't meet select/using policies.  It is like a filter was not matched which also does not error.  Delete does not error for not finding rows to delete.\r\n```\r\nUsing DELETE for a policy means that it will apply to DELETE commands. Only rows that pass this policy will be seen by a DELETE command. There can be rows that are visible through a SELECT that are not available for deletion, if they do not pass the USING expression for the DELETE policy.\r\n\r\nIn most cases a DELETE command also needs to read data from columns in the relation that it is deleting from (e.g., in a WHERE clause or a RETURNING clause). In this case, SELECT rights are also required on the relation, and the appropriate SELECT or ALL policies will be applied in addition to the DELETE policies. Thus the user must have access to the row(s) being deleted through a SELECT or ALL policy in addition to being granted permission to delete the row(s) via a DELETE or ALL policy.\r\n```\r\nhttps://www.postgresql.org/docs/current/sql-createpolicy.html\r\n",
                    "author": {
                        "login": "GaryAustin1"
                    },
                    "createdAt": "2023-11-23T16:34:45Z",
                    "url": "https://github.com/supabase/supabase-js/issues/902#issuecomment-1824702735"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs52dZWn",
            "number": 911,
            "title": "Example on \"upsert into tables with constraint\" is wrong",
            "body": "# Improve documentation\r\n\r\n## Link \r\nhttps://supabase.com/docs/reference/javascript/upsert?example=upserting-into-tables-with-constraints\r\n\r\n## Describe the problem\r\n\r\nThe example says that an error will be thrown. But the operation would actually successfully update the row to `(42, 'saoirse', 'Saoirse')`. Because  `ignoreDuplicates` defaults to false. and the example operation specifies `{ onConflict: 'handle' }`. Therefore it should find row  `(1, 'saoirse', null)` and merge into it.\r\n\r\n## Describe the improvement\r\nUpdate the example. I think the example was meant to refer to the case when `{ onConflict: 'handle' }` is NOT specified. \r\nAlso the doc currently doesn't say what the optional parameters default to.\r\n\r\n## P.S\r\nI hope I am right about this - otherwise I would be very confused about how `upsert` works with the client!\r\n\r\n\r\n",
            "author": {
                "login": "wecessary"
            },
            "state": "OPEN",
            "createdAt": "2023-11-10T11:09:20Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/911",
            "comments": []
        },
        {
            "id": "I_kwDOD79Crs52lcV3",
            "number": 912,
            "title": "storage functions not working when upgrading to NextJS 13.4, 13.5 or 14",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nWhen upgrading to NextJS 13.4, 13.5 or 14, from version 13.2.4, occassionally, storage functions like list and update will not work. list will return no data even though the file being searched exists, and update with not perform an update on an existing file\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Upgrade NextJS to Next14\r\n2. Run code like the following:\r\n```\r\nconst files = await supabase.storage.from(BUCKET).list('', {\r\n    search: 'searchTerm',\r\n})\r\n```\r\n\r\nOcassionally (not always, very weird) `files` will be empty even though I am sure a file exists with the `'searchTerm'` in my `BUCKET` in the root path\r\n\r\nAlso running code like \r\n```\r\nsupabase.storage.from(BUCKET).update(data)\r\n```\r\nwill not actually perform an update.\r\n\r\nI made no changes to this code in my codebase, I just upgraded to NextJS 14\r\n\r\n## Expected behavior\r\n\r\nI would expect `list` to return something for a file that exists, and `update` to actually perform an update on the file that exists\r\n\r\n## Screenshots\r\n\r\nN/A\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser (chrome\r\n- Version of supabase-js: Tried with 2.15.0 and with 2.38.4\r\n- Version of Node.js: 18\r\n\r\n## Additional context\r\n\r\nThis only happens when I upgrade to NextJS 14 from NextJS 13. Also not sure but possible related to this other issue: https://github.com/supabase/supabase-js/issues/898\r\n",
            "author": {
                "login": "gascenciom1998"
            },
            "state": "OPEN",
            "createdAt": "2023-11-12T18:59:28Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/912",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5ruHeZ",
                    "body": "Not sure but could this PR in the storage-api fix it? https://github.com/supabase/storage-api/pull/394",
                    "author": {
                        "login": "gascenciom1998"
                    },
                    "createdAt": "2023-11-12T21:53:48Z",
                    "url": "https://github.com/supabase/supabase-js/issues/912#issuecomment-1807251353"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs520q6s",
            "number": 913,
            "title": "Cookie exceed 4096 characters and too big to save if it is a merged account",
            "body": "\r\n\r\n## Describe the bug\r\n\r\nI have sign-in flow working, but with 1 account I could not login.\r\n After short investigation I saw that I have 2 auth providers enabled (google and email) an I registered for same email for both provider. And after login it tries to set cookie, contains all info about both identities merged and `user_metadata ` filled.\r\nThat's why object that tries to store in cookies are exceeded 4096 characters.\r\n\r\n\r\n\r\n<img width=\"404\" alt=\"Screenshot 2023-11-14 at 21 14 37\" src=\"https://github.com/supabase/supabase-js/assets/2970001/74a0ed17-e4f7-483f-a476-0f127053d6eb\">\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Enable 2 auth providers\r\n2. Register in both with the same email\r\n3. Try to login with email\r\n4. See browser error\r\n\r\n\r\n## Screenshots\r\n\r\n\r\n## System information\r\n\r\n- OS: macOS Sonoma 14\r\n- Browser: Chrome 118.0.5993.88 (Official Build) (arm64)\r\n- Version of supabase-js: 2.38.4, supabase/ssr: 0.0.5, @supabase/gotrue-js: 2.57.0\r\n- Version of Node.js: 20.5.1\r\n\r\n",
            "author": {
                "login": "n10ty"
            },
            "state": "CLOSED",
            "createdAt": "2023-11-14T20:30:38Z",
            "closedAt": "2023-11-14T22:10:03Z",
            "url": "https://github.com/supabase/supabase-js/issues/913",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5r-EEJ",
                    "body": "It also reproduces just during Oauth flow. Here some code:\r\n\r\n`src/app/(auth)/signin/page.tsx` :\r\n\r\n\r\n```typescript\r\n'use client';\r\n\r\n...\r\n    export default function SignIn() {\r\n  const [isErrorShow, setIsErrorShow] = useState(true)\r\n  const searchParams = useSearchParams()\r\n  const error = searchParams.get('error')\r\n  async function onGoogleAuth() {\r\n        const supabase = supabaseClient()\r\n        const { data, error } = await supabase.auth.signInWithOAuth({\r\n            provider: 'google',\r\n            options: {\r\n                queryParams: {\r\n                    access_type: 'offline',\r\n                    prompt: 'consent',\r\n                },\r\n                redirectTo: BASE_PATH+'/auth/callback',\r\n            },\r\n        })\r\n        console.log(data, error)\r\n    }\r\n...\r\n```\r\n\r\nsrc/app/(auth)/auth/callback/route.ts\r\n```typescript\r\nimport { NextResponse } from 'next/server'\r\nimport {supabaseRouter} from \"@/lib/supabase/router\";\r\n\r\nexport async function GET(request: Request) {\r\n    const requestUrl = new URL(request.url)\r\n    const code = requestUrl.searchParams.get('code')\r\n\r\n    if (code) {\r\n        const supabase = supabaseRouter()\r\n        await supabase.auth.exchangeCodeForSession(code)\r\n    }\r\n\r\n    // URL to redirect to after sign in process completes\r\n    return NextResponse.redirect(requestUrl.origin)\r\n}\r\n```\r\n\r\nsupbase router client\r\n```typescript\r\nimport { createServerClient, type CookieOptions } from '@supabase/ssr'\r\nimport { cookies } from 'next/headers'\r\n\r\nexport function supabaseRouter() {\r\n    const cookieStore = cookies()\r\n\r\n    const supabase = createServerClient(\r\n        process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n        {\r\n            cookies: {\r\n                get(name: string) {\r\n                    return cookieStore.get(name)?.value\r\n                },\r\n                set(name: string, value: string, options: CookieOptions) {\r\n                    cookieStore.set({ name, value, ...options })\r\n                },\r\n                remove(name: string, options: CookieOptions) {\r\n                    cookieStore.set({ name, value: '', ...options })\r\n                },\r\n            },\r\n        }\r\n    )\r\n\r\n    return supabase\r\n}\r\n```\r\n\r\nsupbase auth browser client\r\n```typescript\r\n\"use client\";\r\n\r\nimport {createBrowserClient} from '@supabase/ssr'\r\n\r\nexport function supabaseClient() {\r\n    return createBrowserClient(\r\n        process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n    )\r\n}\r\n```\r\n\r\nFlow is next:\r\n1 . https://accounts.google.com/signin/oauth/consent user authenticate and redirects to supbases ->\r\n2. https://project.supabase.co/auth/v1/callback?state=eyJhbGciOiJIUzI1NiIsInR5c...  redirects to -> \r\n3. http://localhost:3000/auth/callback?code=54510a6a... which try to set big cookie\r\n<img width=\"970\" alt=\"Screenshot 2023-11-14 at 22 47 42\" src=\"https://github.com/supabase/supabase-js/assets/2970001/32342980-0b1f-4386-8ddd-fd048d470ca8\">\r\n\r\n\r\nAnd the cookie data contains: \r\n```\r\n{\r\n  \"access_token\": \"[ACCESS_TOKEN]\",\r\n  \"token_type\": \"bearer\",\r\n  \"expires_in\": 3600,\r\n  \"expires_at\": 1699999328,\r\n  \"refresh_token\": \"[REFRESH_TOKEN]\",\r\n  \"user\": {\r\n    \"id\": \"[USER_ID]\",\r\n    \"aud\": \"authenticated\",\r\n    \"role\": \"authenticated\",\r\n    \"email\": \"[USER_EMAIL]\",\r\n    \"email_confirmed_at\": \"2023-11-14T20:45:05.321695Z\",\r\n    \"phone\": \"\",\r\n    \"confirmed_at\": \"2023-11-14T20:45:05.321695Z\",\r\n    \"last_sign_in_at\": \"2023-11-14T21:02:08.194794238Z\",\r\n    \"app_metadata\": {\r\n      \"provider\": \"google\",\r\n      \"providers\": [\"google\"]\r\n    },\r\n    \"user_metadata\": {\r\n      \"avatar_url\": \"[AVATAR_URL]\",\r\n      \"email\": \"[USER_EMAIL]\",\r\n      \"email_verified\": true,\r\n      \"full_name\": \"[FULL_NAME]\",\r\n      \"iss\": \"https://accounts.google.com\",\r\n      \"name\": \"[NAME]\",\r\n      \"phone_verified\": false,\r\n      \"picture\": \"[PICTURE_URL]\",\r\n      \"provider_id\": \"[PROVIDER_ID]\",\r\n      \"sub\": \"[SUB_ID]\"\r\n    },\r\n    \"identities\": [\r\n      {\r\n        \"id\": \"[IDENTITY_ID]\",\r\n        \"user_id\": \"[USER_ID]\",\r\n        \"identity_data\": {\r\n          \"avatar_url\": \"[AVATAR_URL]\",\r\n          \"email\": \"[USER_EMAIL]\",\r\n          \"email_verified\": true,\r\n          \"full_name\": \"[FULL_NAME]\",\r\n          \"iss\": \"https://accounts.google.com\",\r\n          \"name\": \"[NAME]\",\r\n          \"phone_verified\": false,\r\n          \"picture\": \"[PICTURE_URL]\",\r\n          \"provider_id\": \"[PROVIDER_ID]\",\r\n          \"sub\": \"[SUB_ID]\"\r\n        },\r\n        \"provider\": \"google\",\r\n        \"last_sign_in_at\": \"2023-11-14T20:45:05.318703Z\",\r\n        \"created_at\": \"2023-11-14T20:45:05.31875Z\",\r\n        \"updated_at\": \"2023-11-14T21:02:07.650699Z\"\r\n      }\r\n    ],\r\n    \"created_at\": \"2023-11-14T20:45:05.313925Z\",\r\n    \"updated_at\": \"2023-11-14T21:02:08.19785Z\"\r\n  },\r\n  \"provider_token\": \"[PROVIDER_TOKEN]\",\r\n  \"provider_refresh_token\": \"[PROVIDER_REFRESH_TOKEN]\"\r\n}\r\n```",
                    "author": {
                        "login": "n10ty"
                    },
                    "createdAt": "2023-11-14T22:01:11Z",
                    "url": "https://github.com/supabase/supabase-js/issues/913#issuecomment-1811431689"
                },
                {
                    "id": "IC_kwDOD79Crs5r-GjX",
                    "body": "Ok, update ssr to latest 0.0.10 solved this ",
                    "author": {
                        "login": "n10ty"
                    },
                    "createdAt": "2023-11-14T22:09:50Z",
                    "url": "https://github.com/supabase/supabase-js/issues/913#issuecomment-1811441879"
                },
                {
                    "id": "IC_kwDOD79Crs5r-Gnh",
                    "body": "https://github.com/supabase/supabase/issues/18564",
                    "author": {
                        "login": "n10ty"
                    },
                    "createdAt": "2023-11-14T22:10:03Z",
                    "url": "https://github.com/supabase/supabase-js/issues/913#issuecomment-1811442145"
                },
                {
                    "id": "IC_kwDOD79Crs5seUdW",
                    "body": "Same issue still\r\n\r\n`\"supabase\": \"^1.115.0\"`",
                    "author": {
                        "login": "nikitastryuk"
                    },
                    "createdAt": "2023-11-20T22:12:07Z",
                    "url": "https://github.com/supabase/supabase-js/issues/913#issuecomment-1819887446"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs52-BH7",
            "number": 914,
            "title": "DeprecationWarning: The `punycode` module is deprecated. Please use a userland alternative instead.",
            "body": "# Bug report\r\n\r\n\r\n- [x ] I confirm this is a bug with Supabase, not with my own application. \r\n- [x ] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nWhen using Supabase-JS, I get an error about the punycode module being deprecated.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. npm install @supabase/supabase-js\r\n2. node .\r\n3. Error: DeprecationWarning: The `punycode` module is deprecated. Please use a userland alternative instead.\r\n4. npm ls whatwg-url\r\n5. Response: @supabase/supabase-js@2.38.4\r\n\u2502 \u2514\u2500\u252c @supabase/node-fetch@2.6.14\r\n\u2502   \u2514\u2500\u2500 whatwg-url@5.0.0\r\n\r\n## Expected behavior\r\n\r\nNo deprecation. \r\n\r\n## System information\r\n\r\n- OS: WSL2 on Windows 10\r\n- Version of supabase-js: ^2.38.4\r\n- Version of Node.js: v21.1.0",
            "author": {
                "login": "mathiasfoster"
            },
            "state": "OPEN",
            "createdAt": "2023-11-16T03:15:03Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/914",
            "comments": [
                {
                    "id": "IC_kwDOD79Crs5sWbrA",
                    "body": "I got similar error when I upgraded my node version to `v21`.  This is due to older version of [whatswg-url](https://github.com/supabase/node-fetch/blob/bd8f50a4ae647e56cda296b8301d7dff01d4a87b/package.json#L37) used inside [@supabase/node-fetch](https://github.com/supabase/node-fetch).\r\n\r\nOne quick workaround till the team upgrades this dependency is to override the version in your package.json. Since I use `pnpm` as a package manager. I am using following snippet inside my `package.json`\r\n\r\n```json\r\n\t\"pnpm\": {\r\n\t\t\"overrides\": {\r\n\t\t\t\"whatwg-url\": \"13.0.0\"\r\n\t\t}\r\n\t}\r\n```",
                    "author": {
                        "login": "bhvngt"
                    },
                    "createdAt": "2023-11-19T10:59:47Z",
                    "url": "https://github.com/supabase/supabase-js/issues/914#issuecomment-1817819840"
                }
            ]
        },
        {
            "id": "I_kwDOD79Crs53lA7f",
            "number": 917,
            "title": "`fetch` override does not go well with Next.js' caching",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nTo assign [cache tags](https://nextjs.org/docs/app/api-reference/functions/fetch#optionsnexttags) to control Next.js' data caching, Supabase's custom fetch override should be used. Referred https://github.com/supabase/supabase-js/issues/725#issuecomment-1578811299\r\n\r\nHowever there seems to be some incompatibility present; Next.js [patched `fetch` API](https://nextjs.org/docs/app/api-reference/functions/fetch) does not seem to be applied to Supabase's fetch, resulting data cache completely not to work.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\nThere is a [sample project](https://github.com/susemeee/next-get-ip) for reproduction.\r\n\r\n1. Build and deploy sample project\r\n    - *A supabase project and deployment target should've set up; I used CloudFlare*\r\n3. Data caching and API such as `revalidateTag` from Next.js does not work properly, compared to [direct usage of `fetch` API](https://github.com/susemeee/next-get-ip/blob/ca3a9b89798b1d69cf448efc52e73bc30fdd6046/app/page.tsx#L10) in the test code\r\n\r\n## Expected behavior\r\n\r\nWhether `fetch` is used directly or via Supabase API the data cache should be used.\r\n\r\n## Screenshots\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n## System information\r\n\r\n- Version of supabase-js: 2.38.4\r\n- Version of Node.js: v20.2.0\r\n- Version of Next.js: v13.5.4\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "susemeee"
            },
            "state": "OPEN",
            "createdAt": "2023-11-22T12:01:03Z",
            "closedAt": null,
            "url": "https://github.com/supabase/supabase-js/issues/917",
            "comments": []
        }
    ]
}