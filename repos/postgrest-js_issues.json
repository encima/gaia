{
    "issues": [
        {
            "id": "MDU6SXNzdWU1NTYyMTc4MDI=",
            "number": 1,
            "title": "MIT license",
            "body": "@dragarcia let's make this one an MIT license. The community over at postgrest have made theirs MIT so it seems more than fair to do the same",
            "author": {
                "login": "kiwicopple"
            },
            "state": "CLOSED",
            "createdAt": "2020-01-28T13:42:39Z",
            "closedAt": "2020-02-01T05:24:15Z",
            "url": "https://github.com/supabase/postgrest-js/issues/1",
            "comments": []
        },
        {
            "id": "MDU6SXNzdWU1NTk0NTIwODE=",
            "number": 2,
            "title": "Inserts should accept an object",
            "body": "At the moment they only accept an array, which is a bit confusing",
            "author": {
                "login": "kiwicopple"
            },
            "state": "CLOSED",
            "createdAt": "2020-02-04T02:40:26Z",
            "closedAt": "2020-02-11T09:45:07Z",
            "url": "https://github.com/supabase/postgrest-js/issues/2",
            "comments": []
        },
        {
            "id": "MDU6SXNzdWU1NTk0NTIzMzU=",
            "number": 3,
            "title": "single() should only return a single JSON element",
            "body": "This could be working, but we should write a test to prove it and fix it if not",
            "author": {
                "login": "kiwicopple"
            },
            "state": "CLOSED",
            "createdAt": "2020-02-04T02:41:22Z",
            "closedAt": "2020-02-11T09:44:58Z",
            "url": "https://github.com/supabase/postgrest-js/issues/3",
            "comments": []
        },
        {
            "id": "MDU6SXNzdWU1NTk0NTMwMjQ=",
            "number": 4,
            "title": "Insert & Update should return the ID of the new elements",
            "body": "Possible implementation:\r\n\r\n- Return an object with ID if there is only a single element inserted/updated\r\n- Return and array of objects with IDs if there is bulk insert/update\r\n- Allow the user to pass some options to return the whole record that was created",
            "author": {
                "login": "kiwicopple"
            },
            "state": "CLOSED",
            "createdAt": "2020-02-04T02:43:53Z",
            "closedAt": "2020-02-12T02:58:44Z",
            "url": "https://github.com/supabase/postgrest-js/issues/4",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDU4MTgzNDQ3Ng==",
                    "body": "When doing an insert, id of the inserted object is located on the Location header but agree for others :)",
                    "author": {
                        "login": "Laplo"
                    },
                    "createdAt": "2020-02-04T10:08:40Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/4#issuecomment-581834476"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDU4NDU2MTk3MA==",
                    "body": "See: postgrest.org/en/v6.0/api.html?highlight=inserts#insertions-updates\r\n\r\nadd header: \r\n\r\n```\r\nPrefer: return=representation\r\n```",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-02-11T10:13:19Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/4#issuecomment-584561970"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDU4NDk5NzIxNw==",
                    "body": "fixed in 0.5.0",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2020-02-12T02:58:44Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/4#issuecomment-584997217"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDU4NTAwNzI0MA==",
                    "body": "note: the change I made adds the representation header to every insert and update, we may want to add the ability to remove or even add `Prefer: return=minimal` instead in a future release",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2020-02-12T03:23:54Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/4#issuecomment-585007240"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU1NTk2MDY3NjQ=",
            "number": 5,
            "title": "Update method doesn't work with React",
            "body": "Hi, I was trying your solution earlier this morning but I can't figure out why the update method doesn't work with React.\r\nWhen trying the update method, OPTIONS pass and return a 200 but PATCH is never called (can't see it in my network tab) and the error which is shown is : \"Cross-Origin Request Blocked: The Same Origin Policy disallows reading the remote resource at http://localhost:4000/omega?id=eq.15f65a8a-3d84-4a64-add6-d00bb1b698c4. (Reason: CORS request did not succeed).\"",
            "author": {
                "login": "Laplo"
            },
            "state": "CLOSED",
            "createdAt": "2020-02-04T09:57:13Z",
            "closedAt": "2020-02-05T07:59:18Z",
            "url": "https://github.com/supabase/postgrest-js/issues/5",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDU4MTg0MDk5Nw==",
                    "body": "Hey @Laplo, CORS is always a bit tricky. Can you let me know:\r\n\r\n- What is your server URL?\r\n- What is your client URL? \r\n- What is the content of `access-control-allow-origin` header in the OPTIONS response?\r\n- Is there any other error logged on your server?\r\n\r\nIf you have a repo somewhere online I can also spin it up and have a look - just let me know where it is\r\n",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-02-04T10:25:11Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/5#issuecomment-581840997"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDU4MTg0NjUwNA==",
                    "body": "Hey @kiwicopple \r\n- My server url is http://localhost:4000/\r\n- My client url is http://localhost:3002/\r\n- It's *\r\n- On my server side I don't have any error\r\n\r\nI uploaded a repo here : https://github.com/Laplo/react_postgrest",
                    "author": {
                        "login": "Laplo"
                    },
                    "createdAt": "2020-02-04T10:39:30Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/5#issuecomment-581846504"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDU4MjI4NDgzNA==",
                    "body": "OK found it. tldr: we need to send `PATCH` instead of `patch` to PostgREST for the preflight to succeed.\r\n\r\nSee the ALLOW header here, which is obviously case sensitive (TIL).\r\n\r\n<img width=\"284\" alt=\"image\" src=\"https://user-images.githubusercontent.com/10214025/73819215-094ba480-482a-11ea-8ca5-ea71deca5410.png\">\r\n\r\nI'll fix now and close. Thanks for the feedback @Laplo !",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-02-05T07:56:00Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/5#issuecomment-582284834"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU1NjM2OTgwMzQ=",
            "number": 6,
            "title": "Delete should not be done if there are no filters applied",
            "body": "At the moment, just doing a .delete() will delete everything in the table. This could lead to accidental deletion of all content in a table.\r\n- What could be done would be to restrict delete to only work if any of the filters are present.",
            "author": {
                "login": "dragarcia"
            },
            "state": "CLOSED",
            "createdAt": "2020-02-12T02:33:34Z",
            "closedAt": "2020-02-17T04:27:50Z",
            "url": "https://github.com/supabase/postgrest-js/issues/6",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDU4NjgwNTE1Ng==",
                    "body": "@dragarcia can you add a test for this one too?",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-02-17T03:44:59Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/6#issuecomment-586805156"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDU4NjgwNTUwNQ==",
                    "body": "I have one commit with new tests otw. Will push that up in a while.",
                    "author": {
                        "login": "dragarcia"
                    },
                    "createdAt": "2020-02-17T03:46:57Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/6#issuecomment-586805505"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDU4NjgxMjEzNQ==",
                    "body": "Test for the above and other new tests have been pushed via 03aad8d.",
                    "author": {
                        "login": "dragarcia"
                    },
                    "createdAt": "2020-02-17T04:27:50Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/6#issuecomment-586812135"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU1NjM4NzI3NzE=",
            "number": 7,
            "title": "Bulk Inserts is not working as expected",
            "body": "Instead of having multiple inserts, only the last insert is actually posted.",
            "author": {
                "login": "dragarcia"
            },
            "state": "CLOSED",
            "createdAt": "2020-02-12T09:41:40Z",
            "closedAt": "2020-02-12T09:43:50Z",
            "url": "https://github.com/supabase/postgrest-js/issues/7",
            "comments": []
        },
        {
            "id": "MDU6SXNzdWU1Njc0MDcwOTE=",
            "number": 8,
            "title": "Arrays not getting encoded correctly for `in()`",
            "body": "```javascript\r\n    const response = await supabase\r\n      .from('users')\r\n      .filter('id', 'lt', 3)\r\n      .filter('username', 'in', [\"awalias\",\"supabot\"])\r\n      .select('*')\r\n```\r\nand \r\n```javascript\r\n    const response = await supabase\r\n      .from('users')\r\n      .in('id', ['2', '3'])\r\n      .select('*')\r\n```\r\nboth return similar\r\n```bash\r\n      text: '{\"details\":\"unexpected \\\\\"2\\\\\" expecting \\\\\"(\\\\\"\",\"message\":\"\\\\\"failed to parse filter (in.2,3)\\\\\" (line 1, column 4)\"}',\r\n      method: 'GET',\r\n      path: '/rest/v1/users?apikey=examplekey&id=in.2,3&select=%2A'\r\n```",
            "author": {
                "login": "awalias"
            },
            "state": "CLOSED",
            "createdAt": "2020-02-19T08:46:38Z",
            "closedAt": "2020-02-20T04:03:15Z",
            "url": "https://github.com/supabase/postgrest-js/issues/8",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDU4ODU5NjM5NA==",
                    "body": "linked to https://github.com/supabase/supabase/issues/22",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2020-02-20T03:53:21Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/8#issuecomment-588596394"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU1NzEzNDYzODQ=",
            "number": 9,
            "title": "Abort a request",
            "body": "Hi, I didn't see any docs on how it is possible to abort a request for example when we switch of component and so the request of the first one is not needed anymore.\r\n\r\nDid you plan to add something like this or is it already possible?",
            "author": {
                "login": "Laplo"
            },
            "state": "CLOSED",
            "createdAt": "2020-02-26T13:08:07Z",
            "closedAt": "2020-02-27T10:40:19Z",
            "url": "https://github.com/supabase/postgrest-js/issues/9",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDU5MTQyNjI5Mw==",
                    "body": "Hi @Laplo , the request object returned from `.select` etc. is just a [https://github.com/visionmedia/superagent](https://github.com/visionmedia/superagent) object, I had a quick glance at their functionality and couldn't see anything relevant but you may want to dig a bit digger.\r\n\r\nIt may also be possible to handle this in the code that handles the response, perhaps by checking whether the component is still active. If you want to provide a code example we may be able to dig a little deeper",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2020-02-26T13:30:16Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/9#issuecomment-591426293"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDU5MTY4MDU2Mg==",
                    "body": "Looks like it may be handled in the baseAgent here:\r\nhttps://github.com/visionmedia/superagent/blob/56ce51728083392132505218c05edd5cf9f60c58/src/request-base.js#L452\r\n\r\nAnd test here: \r\nhttps://github.com/visionmedia/superagent/blob/477f3c5141cb0f80e593baf477e4b5a172ac1839/test/basic.js#L581\r\n\r\nI imagine you may be able to do something like:\r\n\r\n```js\r\nlet req = await client\r\n    .from('countries')\r\n    .select('*')\r\n\r\n// ...\r\nreq.abort()\r\n```\r\n\r\nI'm yet to test, but perhaps you can try that out @Laplo and then let us know? I'll add a test for it at some point",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-02-26T22:37:20Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/9#issuecomment-591680562"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDU5MTg4MTE2Nw==",
                    "body": "Great I\u2019ll try it out and let you know !",
                    "author": {
                        "login": "Laplo"
                    },
                    "createdAt": "2020-02-27T09:52:36Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/9#issuecomment-591881167"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDU5MTkwMTU5NQ==",
                    "body": "It works like that (example in React) :\r\n```js\r\n    const loadUsers = () => {\r\n        request = client\r\n            .from(\"address_data\")\r\n            .select(\"*\")\r\n        request.then(resolve => {\r\n           console.log(resolve);\r\n        });\r\n    };\r\n\r\n    useEffect(() =>{\r\n        return () => {\r\n            console.log(request);\r\n            request.abort();\r\n        };\r\n    }, []);\r\n```\r\n\r\nThanks for your help !",
                    "author": {
                        "login": "Laplo"
                    },
                    "createdAt": "2020-02-27T10:40:19Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/9#issuecomment-591901595"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU1NzkwODU4NjA=",
            "number": 10,
            "title": "RPC calls: int arguments being passed as text type",
            "body": "```javascript\r\nawait supabase.rpc('is_project_owner', { user_id_arg: 2, project_id_arg: 2})\r\n```\r\n\r\ngives\r\n\r\n```json\r\n'{\"hint\":\"No function matches the given name and argument types. You might need to add explicit type casts.\",\"details\":null,\"code\":\"42883\",\"message\":\"function public.is_project_owner(project_id_arg => text, user_id_arg => text) does not exist\"}'\r\n```\r\n\r\non db function:\r\n```sql\r\nCREATE OR REPLACE FUNCTION is_project_owner(user_id_arg int, project_id_arg int)...\r\n```",
            "author": {
                "login": "awalias"
            },
            "state": "CLOSED",
            "createdAt": "2020-03-11T08:21:44Z",
            "closedAt": "2020-03-16T08:34:25Z",
            "url": "https://github.com/supabase/postgrest-js/issues/10",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDU5OTQwODU0Ng==",
                    "body": "as pointed out by @dragarcia , the solution is to refetch the schema through restart",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2020-03-16T08:34:25Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/10#issuecomment-599408546"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU1ODIxMTE3ODI=",
            "number": 23,
            "title": "Chaining filters throws error",
            "body": "```javascript\r\n  supabase\r\n    .from('services')\r\n    .filter('infrastructure_id', 'eq', infra_id)\r\n    .filter('status', 'neq', SERVICE_STATUS.COMING_UP)\r\n    .update({ status: status })\r\n    .then(console.log)\r\n    .catch(console.error)\r\n```\r\n\r\nthrows \r\n```\r\n[16/03/2020 08:41:45.102] [ERROR]  (node:19027) UnhandledPromiseRejectionWarning: TypeError: Filters[\"_\".concat(...)] is not a function\r\n    at b.filter (/root/infrastructure/monitoring/node_modules/@supabase/postgrest-js/lib/Request.js:1:3249)\r\n    at /root/infrastructure/monitoring/node_modules/@supabase/postgrest-js/lib/Builder.js:1:1017\r\n    at Array.forEach (<anonymous>)\r\n    at addFilters (/root/infrastructure/monitoring/node_modules/@supabase/postgrest-js/lib/Builder.js:1:965)\r\n    at a.update (/root/infrastructure/monitoring/node_modules/@supabase/postgrest-js/lib/Builder.js:1:2663)\r\n    at a.update (/root/infrastructure/monitoring/node_modules/@supabase/supabase-js/lib/Supabase.js:1:3833)\r\n    ...\r\n```\r\n\r\nWill create a test to try and reproduce in isolation ",
            "author": {
                "login": "awalias"
            },
            "state": "CLOSED",
            "createdAt": "2020-03-16T08:50:08Z",
            "closedAt": "2020-04-08T02:43:15Z",
            "url": "https://github.com/supabase/postgrest-js/issues/23",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDU5OTQyMDM5NA==",
                    "body": "@dragarcia can you advise",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2020-03-16T09:01:33Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/23#issuecomment-599420394"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDU5OTk2NTgzMw==",
                    "body": "We do not support the `neq` filter at the moment. The current workaround for this situation would be:\r\n`.not('status', SERVICE_STATUS.COMING_UP)`\r\nor\r\n`.filter('status', 'not', SERVICE_STATUS.COMING_UP)`\r\ninstead of \r\n`.filter('status', 'neq', SERVICE_STATUS.COMING_UP)`",
                    "author": {
                        "login": "dragarcia"
                    },
                    "createdAt": "2020-03-17T09:23:00Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/23#issuecomment-599965833"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDYxMDcyMDU3NQ==",
                    "body": "Closing this, the filter `neq` and its accompanying funcion `.neq()` now exists.",
                    "author": {
                        "login": "dragarcia"
                    },
                    "createdAt": "2020-04-08T02:43:15Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/23#issuecomment-610720575"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU1OTIyOTI4MTI=",
            "number": 34,
            "title": "Github actions are failing",
            "body": "Looks like the github test action is failing (not the tests themselves). ",
            "author": {
                "login": "kiwicopple"
            },
            "state": "CLOSED",
            "createdAt": "2020-04-02T01:12:35Z",
            "closedAt": "2020-04-28T06:08:36Z",
            "url": "https://github.com/supabase/postgrest-js/issues/34",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDYyMDQwMDg4OQ==",
                    "body": "\ud83c\udf89 ",
                    "author": {
                        "login": "dragarcia"
                    },
                    "createdAt": "2020-04-28T06:08:36Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/34#issuecomment-620400889"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU2MTE1ODUzNjk=",
            "number": 44,
            "title": "Implement and() & or()",
            "body": "[Reference](http://postgrest.org/en/v7.0.0/api.html#horizontal-filtering-rows).\r\n- `and()` & `or()` directly refer to the conditional statements AND & OR respectively.\r\n- Although functionality for `and()` already exists through chaining functions, the use case for it would be to allow complex chaining of both `and()` and `or()` together.",
            "author": {
                "login": "dragarcia"
            },
            "state": "CLOSED",
            "createdAt": "2020-05-04T03:42:19Z",
            "closedAt": "2020-07-27T07:05:28Z",
            "url": "https://github.com/supabase/postgrest-js/issues/44",
            "comments": []
        },
        {
            "id": "MDU6SXNzdWU2MTE1ODY1MDE=",
            "number": 45,
            "title": "Implement Support for Reserved Characters & Spaces",
            "body": "- [x] [Reference](http://postgrest.org/en/v7.0.0/api.html#table-columns-with-spaces). ~~Spaces should be encoded with `%20`~~. _Nothing needed to be done. SuperAgent handles this._\r\n- [x] [Reference](http://postgrest.org/en/v7.0.0/api.html#reserved-characters). Values with postgREST reserved characters should be wrapped with `%22` or `\"`.",
            "author": {
                "login": "dragarcia"
            },
            "state": "CLOSED",
            "createdAt": "2020-05-04T03:47:31Z",
            "closedAt": "2020-05-04T13:16:30Z",
            "url": "https://github.com/supabase/postgrest-js/issues/45",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDYyMzI2MDcyMw==",
                    "body": "When to wrap with `%22` or `\"`:\r\n## Table Names\r\n- [x] ~~When the character `.` is present~~. Scratch this. This will clash horribly with #46. Between the two, #46 is way more likely to happen instead of a table name with the character `.` present.\r\n\r\n## Filter Values\r\n- [x] When the character `,` is present and either the filters `in`, `cs`, `cd` or `ova` are used.\r\n- [x] When the characters `(` and `)` are present and the filter `in` is used.\r\n- For simplicity sake, a single function is introduced wherein it simply checks for either `,`, `(` or `)` and wraps the filter with `\"` when the either the functions `in`, `cs`, `cd` or `ova` are invoked.",
                    "author": {
                        "login": "dragarcia"
                    },
                    "createdAt": "2020-05-04T05:13:06Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/45#issuecomment-623260723"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU2MTE1ODY3MzU=",
            "number": 46,
            "title": "Implement Support for Embedded Tables",
            "body": "[Reference](http://postgrest.org/en/v7.0.0/api.html#embedding-through-join-tables).",
            "author": {
                "login": "dragarcia"
            },
            "state": "CLOSED",
            "createdAt": "2020-05-04T03:48:34Z",
            "closedAt": "2020-05-04T13:16:35Z",
            "url": "https://github.com/supabase/postgrest-js/issues/46",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDYyMzI0NjIwOQ==",
                    "body": "wow. that's awesome",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-05-04T04:00:34Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/46#issuecomment-623246209"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDYyMzMwMTQ2NQ==",
                    "body": "Main use cases for Embedded Tables\r\n- [x] Using columns from the foreign tables as filters. Already supported \r\n- [x] Ordering of query based on foreign table columns. Will be implemented through `.order()`\r\n- [x] Limiting and using offset for data coming from foreign tables. The functionality of `.range()` is unable to cover this. `.limit()` and `.offset()` will be introduced as alternatives to `.range()` that can cover this use case at the same time. ",
                    "author": {
                        "login": "dragarcia"
                    },
                    "createdAt": "2020-05-04T07:24:39Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/46#issuecomment-623301465"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU2MTE4NjcyMjE=",
            "number": 47,
            "title": "supabase/postgrest-js 0.15.0",
            "body": "## Changes\r\n- #45 Implement Support for Reserved Characters & Spaces.\r\n- #46 Implement Support for Embedded Tables.\r\n\r\n## todo\r\n\r\n- [x] Bump to 0.15.0\r\n- [x] Update README.md",
            "author": {
                "login": "dragarcia"
            },
            "state": "CLOSED",
            "createdAt": "2020-05-04T13:16:15Z",
            "closedAt": "2020-05-04T14:19:51Z",
            "url": "https://github.com/supabase/postgrest-js/issues/47",
            "comments": []
        },
        {
            "id": "MDU6SXNzdWU2MTY2MjgyNzI=",
            "number": 48,
            "title": "Support for Full-Text Search Filters",
            "body": "[Reference 1](http://postgrest.org/en/v7.0.0/api.html#full-text-search)\r\n[Reference 2](http://postgrest.org/en/v7.0.0/api.html#operators)\r\n\r\n- [x] `.fts()`\r\n- [x] `.plfts()`\r\n- [x] `.phfts()`\r\n- [x] `.wfts()`\r\n",
            "author": {
                "login": "dragarcia"
            },
            "state": "CLOSED",
            "createdAt": "2020-05-12T12:47:20Z",
            "closedAt": "2020-05-14T08:36:34Z",
            "url": "https://github.com/supabase/postgrest-js/issues/48",
            "comments": []
        },
        {
            "id": "MDU6SXNzdWU2MTg3MTMxMDE=",
            "number": 49,
            "title": "second parameter for .range() is not optional as expected.",
            "body": "According to the [documentation](https://supabase.io/docs/library/get#range), the second parameter for .range() should be optional. However doing something like `.range(1)` will return an error.\r\n\r\n## todo\r\n- [x] Make amendments\r\n- [x] Write appropriate tests",
            "author": {
                "login": "dragarcia"
            },
            "state": "CLOSED",
            "createdAt": "2020-05-15T05:42:21Z",
            "closedAt": "2020-05-15T12:45:35Z",
            "url": "https://github.com/supabase/postgrest-js/issues/49",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDYyOTE5Nzk4NQ==",
                    "body": "## Update\r\nUpon testing, the code does actually account for it but in a different way as compared to normal (Instead of assigning a default value of null to the optional parameters). Will standardise it to have a default value of null and introduce additional tests for it.",
                    "author": {
                        "login": "dragarcia"
                    },
                    "createdAt": "2020-05-15T12:06:46Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/49#issuecomment-629197985"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU2MTg3MTUzMDI=",
            "number": 50,
            "title": "Invoking .offset() or .limit() before .select() returns an error.",
            "body": "This is because:\r\n- parameters are switched.\r\n- default parameters are not set.\r\n\r\n## todo\r\n- [x] Make amendments\r\n- [x] Write appropriate tests",
            "author": {
                "login": "dragarcia"
            },
            "state": "CLOSED",
            "createdAt": "2020-05-15T05:48:25Z",
            "closedAt": "2020-05-15T12:45:29Z",
            "url": "https://github.com/supabase/postgrest-js/issues/50",
            "comments": []
        },
        {
            "id": "MDU6SXNzdWU2MTg3NjY1OTU=",
            "number": 51,
            "title": "Inaccurate documentation for bulk inserts & deletes",
            "body": "_Not so much of an issue, just an FYI._\r\n\r\n[Documentation](https://supabase.io/docs/library/delete) states that to prevent accidental bulk changes, setting the option `bulk`  to `false` will prevent against bulk changes in terms of `PATCH` or `DELETE`. ~~There is however no implementation of this at the moment.~~ This is not functional however.\r\n\r\nUpon further investigation as well, there does not seem to be a header either that can prevent such accidental changes. Looking at the [postgREST documentation](), the suggested way to prevent accidental bulk changes would be through the use of a postgreSQL extension called [pg-safeupdate](https://bitbucket.org/eradman/pg-safeupdate/). As such, this is beyond the scope of this package.\r\n\r\n## todo\r\n- [x] Tidy up on `Builder.js` to remove redundancies brought by this discovery.\r\n- [x] Update supabase & wiki documentation to provide the suggested way of minimising the risk of accidental bulk changes. ([reference](https://github.com/supabase/supabase/commit/f5862a242200d72f3ab8631e0dbe96dd61c54867))",
            "author": {
                "login": "dragarcia"
            },
            "state": "CLOSED",
            "createdAt": "2020-05-15T07:41:02Z",
            "closedAt": "2020-06-22T04:24:09Z",
            "url": "https://github.com/supabase/postgrest-js/issues/51",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDYyOTA4Njc1OA==",
                    "body": "## Update\r\nI actually did put a check to prevent any bulk `PATCH` or `DELETE` if no filter is invoked. Nevertheless, the option `bulk` is still irrelevant and there is still the need to update the documentation.",
                    "author": {
                        "login": "dragarcia"
                    },
                    "createdAt": "2020-05-15T07:48:02Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/51#issuecomment-629086758"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU2NjEzODk1ODQ=",
            "number": 78,
            "title": "Implement `on_conflict` ",
            "body": "Implement `on_conflict` option on inserts\r\n\r\nfrom: [http://postgrest.org/en/latest/api.html#on-conflict](http://postgrest.org/en/latest/api.html#on-conflict)\r\n\r\nThe user should be able to upsert on UNIQUE columns (that may not be the primary key)",
            "author": {
                "login": "awalias"
            },
            "state": "CLOSED",
            "createdAt": "2020-07-20T05:22:22Z",
            "closedAt": "2020-10-02T14:34:19Z",
            "url": "https://github.com/supabase/postgrest-js/issues/78",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY5ODc2MTMxOA==",
                    "body": "@soedirgo is this one still relevant after all your changes? If so, perhaps we label it for Hacktoberfest and see if the community want to contribute?",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-09-25T07:04:09Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/78#issuecomment-698761318"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY5ODc3MDI3OA==",
                    "body": "\ud83d\udc4d Sounds good, `insert` is currently missing this feature. This can be an [option](https://github.com/supabase/postgrest-js/blob/d2f944a347a86f79397ca26876effb39d356241c/src/builder.ts#L122) alongside `upsert` that gets used when `upsert` is `true`.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2020-09-25T07:25:53Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/78#issuecomment-698770278"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU2NzI1OTAzNTU=",
            "number": 84,
            "title": "some filters can't be called pre-select",
            "body": "```javascript\r\n  let response = await supabase\r\n      .from('countries')\r\n      .limit(1)\r\n      .select('*')\r\n```\r\nreturns\r\n```bash\r\n(node:66330) UnhandledPromiseRejectionWarning: TypeError: supabase.from(...).limit is not a function\r\n    at main (/Users/supabase/Documents/projects/supabase/supabase_upgrade_scripts/test_supabase.js:12:8)\r\n    at Object.<anonymous> (/Users/supabase/Documents/projects/supabase/supabase_upgrade_scripts/test_supabase.js:18:1)\r\n    at Module._compile (internal/modules/cjs/loader.js:1200:30)\r\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1220:10)\r\n    at Module.load (internal/modules/cjs/loader.js:1049:32)\r\n    at Function.Module._load (internal/modules/cjs/loader.js:937:14)\r\n    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:71:12)\r\n    at internal/main/run_main_module.js:17:47\r\n```\r\n\r\nbut\r\n\r\n```javascript\r\n  let response = await supabase\r\n      .from('countries')\r\n      .select('*')\r\n      .limit(1)\r\n```\r\n\r\nis ok\r\n\r\nsame for `offset` and `or` but others like `order` are ok ",
            "author": {
                "login": "awalias"
            },
            "state": "CLOSED",
            "createdAt": "2020-08-04T08:00:00Z",
            "closedAt": "2020-09-19T22:46:29Z",
            "url": "https://github.com/supabase/postgrest-js/issues/84",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY2OTY3MDM0Mg==",
                    "body": "Found the culprit: supabase-js is relying on its own implementation for `order`, `limit`, filters, etc. if we use them before `select`. Working on a fix \ud83d\udee0.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2020-08-06T04:04:02Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/84#issuecomment-669670342"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY2OTc0ODAyOQ==",
                    "body": "good find @soedirgo \r\n",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2020-08-06T07:06:45Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/84#issuecomment-669748029"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU2OTQ5MzE4NDY=",
            "number": 94,
            "title": "feat: Support COUNT of relevant rows",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nI'd like to perform `COUNT(*)` on relevant rows.\r\n\r\n## Describe the solution you'd like\r\n\r\nA `PostgrestTransformBuilder` method. PostgREST [supports this](https://postgrest.org/en/stable/api.html#exact-count).",
            "author": {
                "login": "soedirgo"
            },
            "state": "CLOSED",
            "createdAt": "2020-09-07T09:57:15Z",
            "closedAt": "2021-01-15T11:04:08Z",
            "url": "https://github.com/supabase/postgrest-js/issues/94",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDcwNDc4NTg3MA==",
                    "body": "Postgrest reports counts in the `Content-Range` header. This has to be requested by setting `Prefer: count={strategy}` where `{strategy}` is one of `exact`, `planned` or `estimated`.\r\n\r\n`range()` could be modified to accept a `count` option as this is useful for displaying search results with a paginator. \r\n\r\n```ts\r\nrange(\r\n        from: number,\r\n        to: number,\r\n        {\r\n            count,\r\n            foreignTable,\r\n        }: {\r\n            foreignTable?: string\r\n            count?: \"exact\" | \"estimated\" | \"planned\"\r\n        } = {},\r\n    ): PostgrestTransformBuilder<T> {\r\n        const keyOffset =\r\n            typeof foreignTable === \"undefined\"\r\n                ? \"offset\"\r\n                : `\"${foreignTable}\".offset`\r\n        const keyLimit =\r\n            typeof foreignTable === \"undefined\"\r\n                ? \"limit\"\r\n                : `\"${foreignTable}\".limit`\r\n        this.url.searchParams.set(keyOffset, `${from}`)\r\n        // Range is inclusive, so add 1\r\n        this.url.searchParams.set(keyLimit, `${to - from + 1}`)\r\n        if (count) {\r\n            this.headers[\"Prefer\"] = `count=${count}`\r\n        }\r\n        return this\r\n    }\r\n```\r\n\r\nThen in the fetch promise could return this as part of the response:\r\n\r\n```ts\r\nconst contentRange = res.headers.get(\"Content-Range\")\r\nif (contentRange) {\r\n    const parts = contentRange.split(/[-\\/]/)\r\n    // Note: this doesn't not handle responses like `0/*`\r\n    range = {\r\n        from: parseInt(parts[0], 10) + 1, // zero-based index\r\n        to: parseInt(parts[1], 10) + 1, // zero-based index\r\n        total: parseInt(parts[2], 10),\r\n    }\r\n}\r\n\r\nreturn {\r\n    range,\r\n    data,\r\n    status,\r\n    ...etc\r\n}\r\n```\r\n\r\nThis would involve modifying the [response format](https://github.com/supabase/supabase-js/issues/32#issuecomment-704059049)",
                    "author": {
                        "login": "stupidawesome"
                    },
                    "createdAt": "2020-10-07T08:39:40Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-704785870"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDcwNTk4NDA1Nw==",
                    "body": "Hey @stupidawesome! This issue is for getting just the `COUNT` using a `HEAD` request, as laid out [here](http://postgrest.org/en/v7.0.0/api.html#exact-count).\r\n\r\nI'd like to keep the library simple, so we don't plan to expose the HTTP response headers.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2020-10-09T05:55:05Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-705984057"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1MzQ2NDI2Mg==",
                    "body": "Hi! First of all, thank you for creating such an amazing product. Supabase is what exactly I was looking for. \r\n\r\nIs this issue moving forward? I would like to have a count feature in Supabase. If it's pending right now, I was thinking I could tackle this issue. ",
                    "author": {
                        "login": "dshukertjr"
                    },
                    "createdAt": "2021-01-02T11:48:37Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-753464262"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1NTAzNjUyNw==",
                    "body": "Thanks for hopping in @dshukertjr, this feature is long overdue...\r\n\r\nI'm starting to think that it might be worth modifying the response format, adding a `count` field. I can't see any way of supporting this otherwise. \r\n\r\nThere are two problems here:\r\n1. getting a `COUNT(*)` with a `HEAD` request (no data), and\r\n2. getting a count of the selected/modified set of rows.\r\n\r\nThe solution I'm thinking of is similar to how we now handle `select`: (1) is done in `PostgrestQueryBuilder` (i.e. like `select()`, `insert()`, ...), while (2) is done in `PostgrestTransformBuilder` (i.e. like `order()`, `range()`, ...). So to do PostgREST's `HEAD` request we do:\r\n\r\n```js\r\nconst { count } = await postgrest\r\n    .from('table')\r\n    .count('exact') // or 'planned', or 'estimated'. What should be the default here?\r\n    .gt('id', 10)\r\n```\r\n\r\nAnd to get a count of the selected/modified rows (this is useful for our table editor pagination) we do:\r\n\r\n```js\r\nconst { error, data, count } = await postgrest\r\n    .from('table')\r\n    .select()\r\n    .gt('id', 10)\r\n    .count('exact')\r\n```\r\n\r\nI'm not sure if we need `from` and `to`, I can't think of a case when these can't be easily computed with `count` and `from` (that the user specifies in `range()`).\r\n\r\nWould love to hear your thoughts @kiwicopple @steve-chavez @thorwebdev",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-01-06T02:31:30Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-755036527"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1NTQxMTQ1NA==",
                    "body": "Just checking - the `count()` function is simply going to pluck the value out of the header right?",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-01-06T16:34:27Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-755411454"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1NTQxNzMwNQ==",
                    "body": "Yup, it just uses `Content-Range`, no additional query done.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-01-06T16:43:38Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-755417305"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1NTQzMTc1MA==",
                    "body": "OK cool. IMO it seems redundant to add a whole function when it's still fetching the results from the database just for the headers. This one seems a natural extension of `select()`\r\n\r\n```js\r\nconst { data, error, range, count } = supabase\r\n  .from('table')\r\n  .select('*', { count: 'exact' })\r\n\r\nconsole.log(range) // [0, 24] (?)\r\nconsole.log(count) // 1000\r\n```\r\n\r\nDoes that work?\r\n\r\n> // or 'planned', or 'estimated'. What should be the default here?\r\n\r\nIt's a good question. We're seeing a lot of people confused by our \"row counts\" in the dashboard becuase they are estimates on the tuples. Even though it's slower, I think the principle of least surprise applies here - we should use `exact` as a default.\r\n\r\nOnce again this is breaking the PostgREST defaults, but we are seeing that people are coming in with small databases, then growing. In the time that it takes for them to grow their database, they can learn about performance optimizations like using `planned`. We could also add it as a param in the constructor which can be overridden.\r\n\r\nwdyt?",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-01-06T17:06:43Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-755431750"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1NTQzNDA1Ng==",
                    "body": "> const { error, data, count } = await postgrest\r\n    .from('table')\r\n    .select()\r\n    .gt('id', 10)\r\n    .count('exact')\r\n\r\nI like the extra `count` field in the response since it would work for every operation.\r\n\r\nExact count is supported for insert/delete/update/rpc. And `planned` plus `estimated` might come to RPC. So the interface seems fit.\r\n\r\n> const { count } = await postgrest\r\n    .from('table')\r\n    .count('exact') // or 'planned', or 'estimated'. What should be the default here?\r\n    .gt('id', 10)\r\n\r\nThe problem with that interface is that it doesn't specify the operation. It assumes count only works for GET.\r\n\r\nFor HEAD, how about having an extra modifier that nulls the `data` and `error` fields?\r\n\r\n```js\r\nconst { error, data, count } = await postgrest\r\n    .from('table')\r\n    .select()\r\n    .gt('id', 10)\r\n    .count('exact')\r\n    .head()\r\n\r\nconsole.log(error, data, count) // null null 100\r\n```",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-01-06T17:10:59Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-755434056"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1NTQ0MDQwOQ==",
                    "body": "> For HEAD, how about having an extra modifier that nulls the data and error fields?\r\n\r\nActually scratch that, HEAD only makes sense for `select` and `rpc`.\r\n\r\nHow about having `head` as parameters of both:\r\n\r\n```js\r\n// for select\r\nconst { data, error, count } = postgrest\r\n  .from('table')\r\n  .select('*', { head: true })\r\n\r\n// for rpc\r\nconst {data, error, count} = postgrest\r\n  .rpc('get_status', { name_param: 'supabot' }, {head: true})\r\n```\r\n\r\nBoth would null the data and error fields.\r\n\r\n> we should use exact as a default.\r\n\r\nAgree with `exact` as default.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-01-06T17:22:17Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-755440409"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1NTQ4NTYxNA==",
                    "body": "> This one seems a natural extension of select()\r\n\r\nMakes sense, since we already have a bunch of `Prefer`-related stuff in each respective CRUD method. Though with that approach, if we want `exact` to be the default, maybe we should also allow `null` for if we don't need the count? If the count is not very expensive this might be OK.\r\n\r\n> HEAD only makes sense for select and rpc.\r\n\r\nDidn't know you can do `HEAD` on rpc. Sounds good to me.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-01-06T18:32:21Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-755485614"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1NTczMzUyNQ==",
                    "body": "yeah `head` is cool! Agree with [this](https://github.com/supabase/postgrest-js/issues/94#issuecomment-755440409) approach \ud83d\udc4d ",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-01-06T21:46:42Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-755733525"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1NjA1MzcyOA==",
                    "body": "Correct me if I am talking gibberish, but with this method, would you be able to query count value of joined table? \r\n\r\nFor example, let's say you are developing a twitter clone, and you want to retrieve a users profile as well as the tweet count of the user to display them on a profile page. Something along the line of \r\n\r\n```typescript\r\nconst { data, error } = await postgrest\r\n    .from('users')\r\n    .select(`\r\n        name,\r\n        tweets (\r\n          count(*) as count\r\n        )\r\n  `)\r\n```\r\n\r\nI guess I would have to send two request to achieve this huh? One to get the user profile, and one to get the tweet count. ",
                    "author": {
                        "login": "dshukertjr"
                    },
                    "createdAt": "2021-01-07T11:16:06Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-756053728"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1NjA3ODIxMA==",
                    "body": "Ignoring what I am saying about counts from foreign table, to summarize the discussion in this thread, it will look like this.\r\n\r\nGetting count along with table data:\r\n```typescript\r\nconst { data, error, count } = await postgrest\r\n    .from('table')\r\n    .select('*')  \r\n    .gt('id', 10)\r\n    .count() // 'exact' by default. 'estimate', 'planned' and null are also accepted\r\n```\r\n\r\nOnly getting the count:\r\n```typescript\r\nconst { data, error, count } = await postgrest\r\n    .from('table')\r\n    .select('*', {head: true})  \r\n    .gt('id', 10)\r\n    .count() // 'exact' by default. 'estimate', 'planned' and null are also accepted\r\n\r\nconsole.log(data, error, count) // data and error are null. count contains row count. \r\n```\r\n\r\nDo I understand it correctly?",
                    "author": {
                        "login": "dshukertjr"
                    },
                    "createdAt": "2021-01-07T12:09:12Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-756078210"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1NjIyNDM0Mg==",
                    "body": "> Correct me if I am talking gibberish, but with this method, would you be able to query count value of joined table?\r\n\r\n@dshukertjr  No, this interface is just for counting the root table.\r\n\r\n> I guess I would have to send two request to achieve this huh?\r\n\r\nNot necessarily, you can always create a VIEW or FUNCTION that has the aggregate to do it in one request.\r\n\r\nThere's also another option, that is currently undocumented in postgrest since it's not complete. Basically:\r\n\r\n```js\r\nconst { data, error } = await postgrest\r\n    .from('users')\r\n    .select(`\r\n        name,\r\n        tweets (\r\n          count\r\n        )\r\n  `)\r\n```\r\n\r\nThat will get the tweets `count` as you'd expect. However if you add more attributes(like `tweets(content,date,count)`) it will fail.\r\n\r\nCalling other aggregate functions with `group by` is a future enhancement.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-01-07T16:28:59Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-756224342"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1NjQ0MDQzNQ==",
                    "body": "Thanks @steve-chavez for pointing me to the right direction. \r\n\r\nRegarding [this](https://github.com/supabase/postgrest-js/issues/94#issuecomment-756078210) post, does this look like what everyone had in mind? I could try to write a pull request for this.",
                    "author": {
                        "login": "dshukertjr"
                    },
                    "createdAt": "2021-01-07T23:05:55Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-756440435"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1NjQ2NTM5MA==",
                    "body": "That'd be awesome @dshukertjr! \ud83d\udc4d\r\n\r\nThe only change is to make `count` an option on `select()`, `insert()`, `update()`, `delete()`, and `rpc()` instead of a function, mostly because other similar stuff are also done as options (`returning`, `onConflict`).",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-01-08T00:14:08Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-756465390"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1NjQ2OTkyMA==",
                    "body": "> I could try to write a pull request for this.\r\n\r\n@dshukertjr Great! Go ahead!\r\n\r\nIn case it helps, here's an example of joining both the `head` and `count` ideas:\r\n\r\n```js\r\nconst { data, error, count } = postgrest\r\n  .from('table')\r\n  .select('*', { head: true, count: 'exact' })\r\n```\r\n\r\nAlso agree with soedirgo's [idea](https://github.com/supabase/postgrest-js/issues/94#issuecomment-755485614) about `count` being null by default. There's a perf loss(16% loss in throughput with this [setup](https://github.com/supabase/benchmarks/issues/2#issuecomment-700051893)) when adding `count= exact`. It would be wasteful to have it by default.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-01-08T00:28:05Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-756469920"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1NjQ3MjU2Ng==",
                    "body": "Thanks @soedirgo and @steve-chavez.  I will add this feature and create a pull request. ",
                    "author": {
                        "login": "dshukertjr"
                    },
                    "createdAt": "2021-01-08T00:36:15Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-756472566"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1NzE0OTI3MQ==",
                    "body": "@steve-chavez I guess I am a bit confused with what the `head` option does.\r\n\r\nI do understand that it will turn `data` and `error` null, but how would it look like behind the scenes? Would postgrest-js still fetch the data and just not return the response body as data, or is there a flag or something to not get the response body to begin with?",
                    "author": {
                        "login": "dshukertjr"
                    },
                    "createdAt": "2021-01-09T12:45:43Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-757149271"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1NzMzMTQ0MQ==",
                    "body": "@dshukertjr No, it would execute an HTTP [HEAD](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/HEAD) request.\r\n\r\nSee how a GET method is specified [here](https://github.com/supabase/postgrest-js/blob/master/src/lib/PostgrestQueryBuilder.ts#L22). You'd have to change that to `HEAD` conditionally.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-01-09T16:31:59Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-757331441"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1NzM3ODE4Mw==",
                    "body": "@steve-chavez Got it! Thank you!",
                    "author": {
                        "login": "dshukertjr"
                    },
                    "createdAt": "2021-01-09T22:40:34Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-757378183"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1Nzg0MDMwNA==",
                    "body": "I may have a question regarding [this](https://github.com/supabase/postgrest-js/issues/94#issuecomment-756465390). \r\n\r\nHaving head and count as an option for select makes sense to me, but having those options for all the other methods listed do not make sense to me. Could you provide a simple example situation of when you would want to use `head` or `count` options for method other than `select()`?",
                    "author": {
                        "login": "dshukertjr"
                    },
                    "createdAt": "2021-01-11T09:59:48Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-757840304"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1ODAyOTkxMQ==",
                    "body": "@dshukertjr For RPC, there are set returning functions(return multiple rows) that can be called. A simple one:\r\n\r\n```sql\r\ncreate function getallprojects() returns setof projects as $$\r\nselect * from test.projects;\r\n$$ language sql;\r\n```\r\n\r\nUsing `count` there makes the same sense as using it for a `select`. Also `head` serves the same need(only interested in the count and not the body).\r\n\r\nFor POST(insert), you'd be interested in the `count` when bulk inserting many rows.\r\n\r\nFor UPDATE/DELETE, the `count` is useful for knowing how many rows you updated/deleted in one request.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-01-11T15:38:35Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-758029911"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1ODI3NzAyMg==",
                    "body": "@steve-chavez  Thanks for the clarification! I will start implementing `count` and `head` to other methods once I implement the tests for `select()` in the pull request! ",
                    "author": {
                        "login": "dshukertjr"
                    },
                    "createdAt": "2021-01-11T22:57:03Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-758277022"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1ODMxMDgxNA==",
                    "body": "@steve-chavez `head` is only for `select()` and `rpc()` though right? For the others you'd use `returning: minimal` instead.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-01-12T00:26:26Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-758310814"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1ODMyNDE3OA==",
                    "body": "@soedirgo Yes. Now that you mention it, `returning:minimal` is like HEAD for insert/update/delete.\r\n\r\n>  I will start implementing count and head to other methods\r\n\r\n@dshukertjr `head` only for `select` and `rpc` :-)",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-01-12T01:03:53Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-758324178"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1ODM2MjQ4Mw==",
                    "body": "Okay, to summarize, it sounds like `head` for `select` and `rpc`, `count` for everything. I will get to it!",
                    "author": {
                        "login": "dshukertjr"
                    },
                    "createdAt": "2021-01-12T03:00:32Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-758362483"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc2MDg3NTI3Ng==",
                    "body": "Closed by #147 \ud83d\ude80",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-01-15T11:04:08Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-760875276"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc2MjE5OTkzNQ==",
                    "body": "Amazing job @dshukertjr \ud83d\ude80 ",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-01-18T11:51:15Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-762199935"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc2MjIwMDU1NQ==",
                    "body": "@kiwicopple \r\nThank you so much! I'm glad that I was able to contribute!",
                    "author": {
                        "login": "dshukertjr"
                    },
                    "createdAt": "2021-01-18T11:52:29Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-762200555"
                },
                {
                    "id": "IC_kwDODheSms5BHkgR",
                    "body": "https://supabase.com/docs/reference/javascript/select\r\n\r\n```typescript\r\nconst { data, error, count } = await supabase\r\n  .from('cities')\r\n  .select('name', { count: 'exact' }) \r\n```",
                    "author": {
                        "login": "johndpope"
                    },
                    "createdAt": "2022-04-08T06:54:49Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-1092503569"
                },
                {
                    "id": "IC_kwDODheSms5O2HWL",
                    "body": "is there a way to use this with filtering? eg. only counting rows that have a specific user id",
                    "author": {
                        "login": "lauridskern"
                    },
                    "createdAt": "2022-11-21T23:47:28Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-1322808715"
                },
                {
                    "id": "IC_kwDODheSms5O2MKA",
                    "body": "should be fine. just tack on .eq(\"user_id\",1) at the end ",
                    "author": {
                        "login": "johndpope"
                    },
                    "createdAt": "2022-11-22T00:19:13Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/94#issuecomment-1322828416"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU3MDUwMTAwODQ=",
            "number": 101,
            "title": "The automated release is failing \ud83d\udea8",
            "body": "## :rotating_light: The automated release from the `master` branch failed. :rotating_light:\n\nI recommend you give this issue a high priority, so other packages depending on you could benefit from your bug fixes and new features.\n\nYou can find below the list of errors reported by **semantic-release**. Each one of them has to be resolved in order to automatically publish your package. I\u2019m sure you can resolve this \ud83d\udcaa.\n\nErrors are usually caused by a misconfiguration or an authentication problem. With each error reported below you will find explanation and guidance to help you to resolve it.\n\nOnce all the errors are resolved, **semantic-release** will release your package the next time you push a commit to the `master` branch. You can also manually restart the failed CI job that runs **semantic-release**.\n\nIf you are not sure how to resolve this, here is some links that can help you:\n- [Usage documentation](https://github.com/semantic-release/semantic-release/blob/caribou/docs/usage/README.md)\n- [Frequently Asked Questions](https://github.com/semantic-release/semantic-release/blob/caribou/docs/support/FAQ.md)\n- [Support channels](https://github.com/semantic-release/semantic-release#get-help)\n\nIf those don\u2019t help, or if this issue is reporting something you think isn\u2019t right, you can always ask the humans behind **[semantic-release](https://github.com/semantic-release/semantic-release/issues/new)**.\n\n---\n\n### No npm token specified.\n\nAn [npm token](https://github.com/semantic-release/npm/blob/master/README.md#npm-registry-authentication) must be created and set in the `NPM_TOKEN` environment variable on your CI environment.\n\nPlease make sure to create an [npm token](https://docs.npmjs.com/getting-started/working_with_tokens#how-to-create-new-tokens) and to set it in the `NPM_TOKEN` environment variable on your CI environment. The token must allow to publish to the registry `https://registry.npmjs.org/`.\n\n---\n\nGood luck with your project \u2728\n\nYour **[semantic-release](https://github.com/semantic-release/semantic-release)** bot :package::rocket:\n\n<!-- semantic-release:github -->",
            "author": {
                "login": "github-actions"
            },
            "state": "CLOSED",
            "createdAt": "2020-09-19T22:47:26Z",
            "closedAt": "2020-09-20T03:18:29Z",
            "url": "https://github.com/supabase/postgrest-js/issues/101",
            "comments": []
        },
        {
            "id": "MDU6SXNzdWU3MTI0MjIxODY=",
            "number": 111,
            "title": "Improve Doc comments",
            "body": "This is a Hacktoberfest task! \r\nYou can read more about Hacktoberfest [on our blog](https://supabase.io/blog/2020/09/11/supabase-hacktoberfest-2020) and see all tasks on our [Hacktoberfest Project Board](https://github.com/orgs/supabase/projects/5).\r\n\r\n## Summary\r\n\r\nWe need help with checking and improving the inline comments for this library using [JSDoc](https://jsdoc.app/). \r\n\r\n## Details\r\n\r\nIf you've never see JSDoc before, it's the comment that go above functions. For example:\r\n\r\n```js\r\n/**\r\n   * Creates a new user.\r\n   * \r\n   * Some longer description can go here.\r\n   * \r\n   * @param {object} credentials The user login details.\r\n   * @param {string} credentials.email The user's email address.\r\n   * @param {string} credentials.password The user's password.\r\n   */\r\n  async signUp(credentials: { email: string; password: string }) {\r\n    // ...\r\n  }\r\n```\r\n \r\n",
            "author": {
                "login": "kiwicopple"
            },
            "state": "CLOSED",
            "createdAt": "2020-10-01T02:29:03Z",
            "closedAt": "2020-11-02T09:04:20Z",
            "url": "https://github.com/supabase/postgrest-js/issues/111",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDcwMTk5MTAxOA==",
                    "body": "Hi @kiwicopple is this still available? I'd like to offer a hand with this :-) ",
                    "author": {
                        "login": "fatmali"
                    },
                    "createdAt": "2020-10-01T08:52:45Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/111#issuecomment-701991018"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDcwMjAwMjU5Mg==",
                    "body": "thanks for the interest @fatmali , assigning you now \ud83d\udc4d ",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2020-10-01T09:14:04Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/111#issuecomment-702002592"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDcwMjA0NTAzMg==",
                    "body": "Thanks @awalias , could you guide me on which specific files need to have jsdoc comments? I can see some inline comments in the files in the `src` directory with external links? What would the js doc comments look like for such files?",
                    "author": {
                        "login": "fatmali"
                    },
                    "createdAt": "2020-10-01T10:34:07Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/111#issuecomment-702045032"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDcwMjIzNDgzNA==",
                    "body": "it looks like this one might actually already be complete, I couldn't find any methods missing JSDocs at the moment - will wait for @kiwicopple to confirm",
                    "author": {
                        "login": "awalias"
                    },
                    "createdAt": "2020-10-01T16:00:46Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/111#issuecomment-702234834"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDcwMjUxMjc3NA==",
                    "body": "HI @fatmali , you could look into the Builder file: https://github.com/supabase/postgrest-js/blob/master/src/builder.ts\r\n\r\nFor example: \r\n\r\n```js\r\n /**\r\n * description\r\n */\r\ninterface PostgrestError {\r\n   /**\r\n   * description\r\n   */\r\n  message: string\r\n\r\n   /**\r\n   * description\r\n   */\r\n  details: string\r\n}\r\n```\r\n\r\nand on the `class` and on the `constructor` :) \r\n\r\nIf you do even a small one of the `interface PostgrestError`, I can merge it \ud83d\udc4d \r\n",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-10-02T03:57:50Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/111#issuecomment-702512774"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU3MzM2NTI2MTM=",
            "number": 127,
            "title": "Allow return=minimal for INSERT",
            "body": "## Feature request\r\n\r\nAllow specifying [return=minimal](http://postgrest.org/en/v7.0.0/api.html#insertions-updates) for `insert`. Right now `return=representation` is the default.\r\n\r\nSee: https://github.com/supabase/postgrest-js/blob/master/src/lib/PostgrestQueryBuilder.ts#L58\r\n\r\n## Context\r\n\r\nWhen `return=representation` is specified, PostgREST generates a `INSERT INTO ... RETURNING`.\r\nThe `RETURNING` part requires `SELECT` privileges, which sometimes a user might not have.\r\n\r\n`return=minimal` doesn't generate a `RETURNING`.\r\n\r\nRelated discussion: https://github.com/supabase/supabase/discussions/270",
            "author": {
                "login": "steve-chavez"
            },
            "state": "CLOSED",
            "createdAt": "2020-10-31T06:53:17Z",
            "closedAt": "2020-12-11T09:15:21Z",
            "url": "https://github.com/supabase/postgrest-js/issues/127",
            "comments": []
        },
        {
            "id": "MDU6SXNzdWU3NDEyNzcyMTE=",
            "number": 131,
            "title": "Ordering JSON column not working",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nThis is failing \r\n\r\n```\r\nconst { data: products, error } = await supabase\r\n        .from('products')\r\n        .select('*')\r\n        .order('metadata->index'\r\n```\r\n\r\nCaused by this: \r\n\r\nhttps://github.com/supabase/postgrest-js/blob/43b093d7eaab1c36b76b11cbcb1cfc2b3605c4a2/src/lib/PostgrestTransformBuilder.ts#L27\r\n\r\nIf we remove the quotes from the `\"${column}\"` then it works.\r\n",
            "author": {
                "login": "kiwicopple"
            },
            "state": "CLOSED",
            "createdAt": "2020-11-12T04:51:39Z",
            "closedAt": "2020-11-12T09:46:17Z",
            "url": "https://github.com/supabase/postgrest-js/issues/131",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDcyNTgzNTc4NQ==",
                    "body": "@soedirgo - just need to get an understanding of the `\"${column}\"`. Is there a requirement for it to be wrapped in quotes? \r\n\r\nPerhaps we can just `encodeURIComponent(${column})`?",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-11-12T04:52:28Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/131#issuecomment-725835785"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDcyNTgzNzUwOA==",
                    "body": "To give an example, this is my supabase-js query:\r\n\r\n```js\r\nconst { data: products, error } = await supabase\r\n        .from('products')\r\n        .select('*, prices(*)')\r\n        .eq('active', true)\r\n        .order('metadata->index')\r\n        .order('unit_amount', { foreignTable: 'prices' });\r\n```\r\n\r\nThis is what postgrest-js currently generates:\r\n\r\nhttps://jhomlobmvyuadfdnpnkb.supabase.co/rest/v1/products?select=*%2Cprices%28*%29&active=eq.true&order=%22metadata-%3Eindex%22.asc.nullslast&%22prices%22.order=%22unit_amount%22.asc.nullslast&apikey=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlhdCI6MTYwNTA3MTUwNSwiZXhwIjoxOTIwNjQ3NTA1fQ.FZJkLOldXfPWN7Gtq7J4zFIh5cmnzSzBh_U3Jb0fjhY\r\n\r\nWhich errors with \r\n\r\n```json\r\n{\r\n  \"hint\": null,\r\n  \"details\": null,\r\n  \"code\": \"42703\", \r\n  \"message\": \"column products.metadata->index does not exist\"\r\n}\r\n```\r\n\r\nwhen I remove the quotes from all order parts it works:\r\n\r\nhttps://jhomlobmvyuadfdnpnkb.supabase.co/rest/v1/products?select=*%2Cprices%28*%29&active=eq.true&order=metadata-%3Eindex.asc.nullslast&%22prices%22.order=unit_amount.asc.nullslast&apikey=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlhdCI6MTYwNTA3MTUwNSwiZXhwIjoxOTIwNjQ3NTA1fQ.FZJkLOldXfPWN7Gtq7J4zFIh5cmnzSzBh_U3Jb0fjhY",
                    "author": {
                        "login": "thorwebdev"
                    },
                    "createdAt": "2020-11-12T04:58:19Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/131#issuecomment-725837508"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDcyNTk0Mzk3NQ==",
                    "body": "> Is there a requirement for it to be wrapped in quotes?\r\n\r\nThis was to anticipate column names like `player.name` which you'd need to wrap in quotes, but breaking JSONB columns makes this a nonstarter. Will push a fix soon \ud83d\udc4d.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2020-11-12T09:05:10Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/131#issuecomment-725943975"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDcyNTk1NTI4NA==",
                    "body": "~Also, I don't think postgrest-js supports ordering on multiple columns, doing multiple `order`s will ignore the previous ones. Will try to make this work as well.~\r\n\r\nJust realized you were doing the second `order` on a foreign table, which should still work. Will put off multiple `order` columns for now...",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2020-11-12T09:24:57Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/131#issuecomment-725955284"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDcyNTk2NzgyNw==",
                    "body": ":tada: This issue has been resolved in version 0.21.2 :tada:\n\nThe release is available on:\n- [npm package (@latest dist-tag)](https://www.npmjs.com/package/@supabase/postgrest-js/v/0.21.2)\n- [GitHub release](https://github.com/supabase/postgrest-js/releases/tag/v0.21.2)\n\nYour **[semantic-release](https://github.com/semantic-release/semantic-release)** bot :package::rocket:",
                    "author": {
                        "login": "github-actions"
                    },
                    "createdAt": "2020-11-12T09:47:56Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/131#issuecomment-725967827"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU3NjI2NTIzNTA=",
            "number": 143,
            "title": "select columns from an insert",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\nI need a way to perform an upsert, and know if I performed an update or an insert afterwards. Postgrest has an open issue to support this via 200 and 201 status codes https://github.com/PostgREST/postgrest/issues/1070. For the time being though, I can infer this on the client side using the `xmax` column. E.g.\r\n```\r\nPOST http://<supabase-db-url>.supabase.co/rest/v1/items?select=id,xmax\r\n```\r\nIf `xmax === \"0\"` then the row was inserted, otherwise an update occurred. Unfortunately, there is no way to write this kind of query with the supabase client.\r\n\r\n## Describe the solution you'd like\r\n```js\r\nconst result = await supabase\r\n  .from('items')\r\n  .insert([row], { onConflict: 'unique_field', upsert: true })\r\n  .select('id,xmax')\r\nif (result.data[0].xmax === \"0\") {\r\n  console.log('insert')\r\n} else {\r\n  console.log('update')\r\n}\r\n```\r\n\r\n## Describe alternatives you've considered\r\nwrite an rpc function to wrap this logic\r\n\r\n## Additional context\r\nan issue on the PostgREST repo discussing possible solutions here: https://github.com/PostgREST/postgrest/issues/1683\r\n\r\nselects on insert is valuable for multiple reasons outside of my outlined use case. Any performant client will be interested in returning the minimal rows necessary after an update/insert, rather than all of them all the time. I feel like I saw an issue or discussion around the default behavior around the `RETURNING` clause but for the life of me I cannot find it.",
            "author": {
                "login": "andykais"
            },
            "state": "CLOSED",
            "createdAt": "2020-12-11T16:24:54Z",
            "closedAt": "2021-01-05T18:42:23Z",
            "url": "https://github.com/supabase/postgrest-js/issues/143",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc0MzMyMTQ5Nw==",
                    "body": "Yes, I think it should be supported. I'll move this to postgrest-js(which supabase-js uses underlyingly).",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2020-12-11T17:21:16Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/143#issuecomment-743321497"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1MDAwNzE5OQ==",
                    "body": "We now have `returning=minimal|representation` - https://github.com/supabase/postgrest-js/issues/127 - but it isn't going to solve `xmax`.\r\n\r\nTo support this, it [looks like](https://github.com/PostgREST/postgrest/issues/1683#issuecomment-740661858) we just need to append a `select` onto the POST request. \r\n\r\nIt might be tricky to support this syntax:\r\n\r\n```js\r\nawait supabase\r\n  .from('items')\r\n  .insert([row], { onConflict: 'unique_field', upsert: true })\r\n  .select('id,xmax')\r\n```\r\n\r\nbecause the promise fires after the `insert()`, but I think we could do something like this:\r\n\r\n```js\r\nawait supabase\r\n  .from('items')\r\n  .insert([row], { \r\n    onConflict: 'unique_field', \r\n    upsert: true,\r\n    returning: 'id,xmax'\r\n  })\r\n```\r\n\r\nThis would extend the work we have done on https://github.com/supabase/postgrest-js/issues/127. If it's `minimal | representation` then we pass it as a header, but if it's anything else, then we append the `select=...` onto the URL. Would that work @steve-chavez, @soedirgo  ?\r\n",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-12-23T08:31:10Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/143#issuecomment-750007199"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1MDAzNzk3NQ==",
                    "body": "I thought I could just do `select()` after `insert()`, but that would overwrite `method` to `GET`, so that's a no go.\r\n\r\nI'm not too comfortable with overloading `returning` with the columns, I prefer something like `returnedColumns: ...`. But if we do use `returning`, maybe it's better for it to be an array instead, so we can disambiguate whether `'minimal'` means don't do `RETURNING` or if it's a column named `minimal`.\r\n\r\nEdit: Or we could check `this.method` in `select()` so we don't overwrite it if it's already set. This is the cleanest option IMO",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2020-12-23T09:32:19Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/143#issuecomment-750037975"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1MDM0NDIxOQ==",
                    "body": "> Edit: Or we could check this.method in select() so we don't overwrite it if it's already set. This is the cleanest option IMO\r\n\r\n@soedirgo I agree. It'd be better to support `select` because PostgREST can also embed after [insertions/updates/deletes](https://postgrest.org/en/v7.0.0/api.html#embedding-after-insertions-updates-deletions). And it can also [embed on rpc](https://postgrest.org/en/v7.0.0/api.html#embedding-on-stored-procedures).\r\n\r\nSo supporting `select` as a modifier would make all of that functionality more consistent:\r\n\r\n```js\r\nawait supabase\r\n  .from('items')\r\n  .insert(\"{...}\")\r\n  .select('id,other,parent(id,name)')\r\n\r\nawait supabase\r\n  .from('items')\r\n  .update(\"{...}\")\r\n  .select('id,other,parent(id,name)')\r\n\r\nawait supabase\r\n  .from('items')\r\n  .delete(\"{...}\")\r\n  .select('id,other,parent(id,name)')\r\n\r\nawait supabase\r\n  .rpc(\"myrpc\", \"{..}\")\r\n  .select('id,other,parent(id,name)')",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2020-12-23T15:14:43Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/143#issuecomment-750344219"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1MDM1MDI4MQ==",
                    "body": "> minimal | representation \r\n\r\nOne thing about `minimal` is that doing a `select` after a mutation won't give an error(according to [RFC](https://tools.ietf.org/html/rfc7240), `Prefer` headers can't err). So we could err on `postgrest-js` if `minimal` is used with a `select`.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2020-12-23T15:30:03Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/143#issuecomment-750350281"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1MDM2MTM0MQ==",
                    "body": "OK cool, Steve's [examples](https://github.com/supabase/postgrest-js/issues/143#issuecomment-750344219) look like a very nice DX, and (importantly) since PostgREST supports embedding on things like `rpc` (TIL!), then we should definitely support it in `postgrest-js` too \ud83d\udc4d \r\n\r\nLet's aim for \r\n\r\n```js\r\nawait supabase\r\n  .from('items')\r\n  .update(\"{...}\")\r\n  .select('id,other,parent(id,name)')\r\n```\r\n",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-12-23T15:54:14Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/143#issuecomment-750361341"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc1NDgyNTE1OA==",
                    "body": ":tada: This issue has been resolved in version 0.23.0 :tada:\n\nThe release is available on:\n- [npm package (@latest dist-tag)](https://www.npmjs.com/package/@supabase/postgrest-js/v/0.23.0)\n- [GitHub release](https://github.com/supabase/postgrest-js/releases/tag/v0.23.0)\n\nYour **[semantic-release](https://github.com/semantic-release/semantic-release)** bot :package::rocket:",
                    "author": {
                        "login": "github-actions"
                    },
                    "createdAt": "2021-01-05T18:43:52Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/143#issuecomment-754825158"
                },
                {
                    "id": "IC_kwDODheSms5VWEOc",
                    "body": "@soedirgo sorry to comment on an old issue, but does this also exist on `upsert` - From looking at the code base I don't think it does?",
                    "author": {
                        "login": "SteveChurch"
                    },
                    "createdAt": "2023-02-15T18:48:43Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/143#issuecomment-1431847836"
                },
                {
                    "id": "IC_kwDODheSms5VYVS8",
                    "body": "No probs! Yes, it should work on `upsert`: https://supabase.com/docs/reference/javascript/upsert.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-02-16T03:21:58Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/143#issuecomment-1432442044"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU3NzA1ODE3ODc=",
            "number": 144,
            "title": "Trouble handling Unicode",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nInserting Unicode gives garbled characters.\r\n\r\n## To Reproduce\r\n\r\nhttps://github.com/supabase/supabase/discussions/408#discussioncomment-220983\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser: Safari\r\n- Version of supabase-js: [1.1.2]",
            "author": {
                "login": "soedirgo"
            },
            "state": "CLOSED",
            "createdAt": "2020-12-18T05:34:06Z",
            "closedAt": "2020-12-22T12:08:01Z",
            "url": "https://github.com/supabase/postgrest-js/issues/144",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc0OTUwODkwOA==",
                    "body": "Not a bug: this only happens in the browser when HTML `charset` isn't specified to be `utf-8`.\r\n\r\n***internal screaming intensifies***",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2020-12-22T12:08:01Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/144#issuecomment-749508908"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU3ODgzODI3NjQ=",
            "number": 148,
            "title": "Rename filters",
            "body": "Some of the filter names are very short. Names like `.sl()`, `.sr()`, `.adj()` can be hard to remember what to they do. I think it would lead to clearer and more declarative code if the function names were a bit longer.\r\n\r\nCurrent list of filters: https://supabase.io/docs/client/using-filters\r\n\r\n## Rename suggestions:\r\n\r\n- `.cs()` -> `.contains()` or add a `json: true` option to `.in()`\r\n- `.cd()` -> `.within()`\r\n- `.sl()` -> `.rangeLt()` or add a `range` option to `.lt(column, value, {range: true})`\r\n- `.sr()` -> `.rangeGt()` or add a `range` option to `.gt(column, value, {range: true})`\r\n- `.nxl()` -> `rangeGte()` or add a `range` option to `.gte(column, value, {range: true})`\r\n- `.nxr()` -> `rangeLte()` or add a `range` option to `.lte(column, value, {range: true})`\r\n- `.adj()` -> `.adjacent()`\r\n- `.ova()` -> `.within()`\r\n- `.fts()` -> `.textSearch(column, search, {type: 'tsvector'})`\r\n- `.plfts()` -> `.textSearch(column, search, {type: 'plainto'})`\r\n- `.phfts()` -> `.textSearch(column, search, {type: 'phraseto'})`\r\n- `.wfts()` -> `.textSearch(column, search, {type: 'websearch'})`\r\n\r\n_Originally posted by @joshnuss in https://github.com/supabase/supabase/discussions/534_",
            "author": {
                "login": "kiwicopple"
            },
            "state": "CLOSED",
            "createdAt": "2021-01-18T16:00:12Z",
            "closedAt": "2021-03-22T10:53:49Z",
            "url": "https://github.com/supabase/postgrest-js/issues/148",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgwMDM3OTk2NQ==",
                    "body": "maybe just aliases should be fine since it won't break anything.",
                    "author": {
                        "login": "eunjae-lee"
                    },
                    "createdAt": "2021-03-16T15:49:04Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/148#issuecomment-800379965"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgwMzk3MDA5Ng==",
                    "body": ":tada: This issue has been resolved in version 0.28.0 :tada:\n\nThe release is available on:\n- [npm package (@latest dist-tag)](https://www.npmjs.com/package/@supabase/postgrest-js/v/0.28.0)\n- [GitHub release](https://github.com/supabase/postgrest-js/releases/tag/v0.28.0)\n\nYour **[semantic-release](https://github.com/semantic-release/semantic-release)** bot :package::rocket:",
                    "author": {
                        "login": "github-actions"
                    },
                    "createdAt": "2021-03-22T10:55:10Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/148#issuecomment-803970096"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU3OTA1MTg2NzU=",
            "number": 149,
            "title": "Ordering nested tables doesn't work for more than 1 level",
            "body": "# Bug report\r\n\r\n`order()` only works if joined table is one level deep. \r\n\r\n## To Reproduce\r\n\r\nRun a query with multiple levels of joins:\r\n\r\nMy schema: `boards` -> has many `lists` -> has many `cards`.\r\nEach table has a `position` column.\r\n\r\n```javascript\r\nsupabase\r\n  .from('boards')\r\n  .select('id, title, lists ( id, title, position, cards ( id, description, position ))') // 2-levels of nesting\r\n  .order('position') // this works\r\n  .order('position', {foreignTable: 'lists'}) // this works\r\n  .order('position', {foreignTable: 'lists.cards'}) // this doesn't work\r\n```\r\n\r\n## Expected behavior\r\n\r\nSorting should work on any level of nesting.\r\n\r\n# Research\r\n\r\nPostgREST [does support this](https://github.com/PostgREST/postgrest/blob/cc54135bf0b1e635f2ff56c6899401c653b6281a/test/Feature/QuerySpec.hs#L661), the issue is due to quoting of the `foreignTable` param here: \r\n\r\nhttps://github.com/supabase/postgrest-js/blob/8cf6e0020a4a04f326fcaed704239db1dee9853d/src/lib/PostgrestTransformBuilder.ts#L48\r\n\r\nWhen I remove the quoting locally, the sorting works correctly.",
            "author": {
                "login": "joshnuss"
            },
            "state": "CLOSED",
            "createdAt": "2021-01-21T00:37:07Z",
            "closedAt": "2021-02-14T01:36:17Z",
            "url": "https://github.com/supabase/postgrest-js/issues/149",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc2NTI5MzI4Nw==",
                    "body": "@soedirgo was there any reason you added the quotes here?",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-01-22T10:05:49Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/149#issuecomment-765293287"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc2NTMyODcyMA==",
                    "body": "Seems like a continuation of #131. Same reason for quoting: to handle special characters.\r\n\r\nI think we can just assume that 95% of table/column names don't have special characters, and just let users quote the names manually. It's leaky, but should stop issues like this from happening.\r\n\r\nPlaces to update: `order`, `limit`, `range`, `cleanFilterArray`.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-01-22T11:10:24Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/149#issuecomment-765328720"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc3ODcwNjA2NA==",
                    "body": ":tada: This issue has been resolved in version 0.24.3 :tada:\n\nThe release is available on:\n- [npm package (@latest dist-tag)](https://www.npmjs.com/package/@supabase/postgrest-js/v/0.24.3)\n- [GitHub release](https://github.com/supabase/postgrest-js/releases/tag/v0.24.3)\n\nYour **[semantic-release](https://github.com/semantic-release/semantic-release)** bot :package::rocket:",
                    "author": {
                        "login": "github-actions"
                    },
                    "createdAt": "2021-02-14T01:37:34Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/149#issuecomment-778706064"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4MDQzNzQ2ODY=",
            "number": 153,
            "title": "Wiki link is broken",
            "body": "The readme is pointing to a broken link for documentation: https://github.com/supabase/postgrest-js/wiki",
            "author": {
                "login": "puckey"
            },
            "state": "CLOSED",
            "createdAt": "2021-02-09T09:34:01Z",
            "closedAt": "2021-02-09T10:51:24Z",
            "url": "https://github.com/supabase/postgrest-js/issues/153",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc3NTg1MTU3Mw==",
                    "body": "Thanks @puckey! We moved them all to our website as we were maintaining 2 versions. Looks like we forgot to update the readme",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-02-09T10:52:15Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/153#issuecomment-775851573"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc3NTg1MTc5Ng==",
                    "body": ":tada: This issue has been resolved in version 0.24.2 :tada:\n\nThe release is available on:\n- [npm package (@latest dist-tag)](https://www.npmjs.com/package/@supabase/postgrest-js/v/0.24.2)\n- [GitHub release](https://github.com/supabase/postgrest-js/releases/tag/v0.24.2)\n\nYour **[semantic-release](https://github.com/semantic-release/semantic-release)** bot :package::rocket:",
                    "author": {
                        "login": "github-actions"
                    },
                    "createdAt": "2021-02-09T10:52:40Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/153#issuecomment-775851796"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4MDUwODg0NDU=",
            "number": 154,
            "title": "\"JSON Parse error: Unexpected EOF\" in React Native",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\nFollowing the repro steps below with version 0.16.1, everything works and the response is parsed as expected.\r\n(Version 0.18.0 gives me some error about not being able to resolve the module - likely unrelated to this)\r\nThen version 0.18.1 as well as the most recent 0.24.2 gives me the following error:\r\n```\r\nJSON Parse error: Unexpected EOF\r\n* [native code]:null in parse\r\n- node_modules/react-native/node_modules/promise/setimmediate/core.js:37:13 in tryCallOne\r\n- node_modules/react-native/node_modules/promise/setimmediate/core.js:123:24 in setImmediate$argument_0\r\n- node_modules/react-native/Libraries/Core/Timers/JSTimers.js:130:14 in _callTimer\r\n- node_modules/react-native/Libraries/Core/Timers/JSTimers.js:181:14 in _callImmediatesPass\r\n- node_modules/react-native/Libraries/Core/Timers/JSTimers.js:441:30 in callImmediates\r\n- node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js:387:6 in __callImmediates\r\n- node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js:135:6 in __guard$argument_0\r\n- node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js:364:10 in __guard\r\n- node_modules/react-native/Libraries/BatchedBridge/MessageQueue.js:134:4 in flushedQueue\r\n* [native code]:null in flushedQueue\r\n* [native code]:null in invokeCallbackAndReturnFlushedQueue\r\n```\r\n\r\n## To Reproduce\r\n\r\n`expo init my-repro-app`\r\n(I chose blank (Typescript))\r\n`cd my-repro-app`\r\n`npm install @supabase/postgrest-js`\r\nAdd the following code to `App.tsx`\r\n```tsx\r\nconst supabaseRestUrl = '<supabase-url>' + '/rest/v1'\r\nconst supabaseKey = '<supabase-key>'\r\nconst client = new PostgrestClient(supabaseRestUrl, {\r\n  headers: { apikey: supabaseKey },\r\n  schema: 'public',\r\n})\r\n\r\nasync function insertSomething() {\r\n  try {\r\n    const res = await client.from('cities').insert([{ name: 'Berlin' }])\r\n    console.log(res)\r\n  } catch (e) {\r\n    console.error(e)\r\n  }\r\n}\r\n\r\ninsertSomething()\r\n```\r\n`npm start`, open the app in Expo on your phone and you should see the error. Happens on both ios and android.\r\n\r\nAfter doing some poking around, I changed line 67 of `my-repro-app/node_modules/@supabase/postgrest-js/dist/main/lib/types.js`\r\nfrom: `error = yield res.json();`\r\nto: `error = yield JSON.parse(JSON.stringify(res));`\r\nAnd that seemed to fix the issue?\r\n\r\n## Expected behavior\r\nResponse should be parsed without error.\r\n\r\n## System information\r\n\r\n- OS: maxOS 11.1\r\n- Version of supabase-js: 0.18.1 and 0.24.2\r\n- Version of Node.js: 15.3.0\r\n",
            "author": {
                "login": "hey-hank"
            },
            "state": "CLOSED",
            "createdAt": "2021-02-10T02:05:30Z",
            "closedAt": "2021-02-14T07:31:35Z",
            "url": "https://github.com/supabase/postgrest-js/issues/154",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc3NjM5NDg1NQ==",
                    "body": "Good catch @hey-hank, likely the error being returned isn't a JSON object:\r\n\r\nhttps://github.com/supabase/postgrest-js/blob/eacc4f789551058bdf50bfe9aaabc4b435cd7d99/src/lib/types.ts#L108\r\n\r\nWe will need to put guards on it like we do here:\r\n\r\nhttps://github.com/supabase/gotrue-js/blob/3501d62e4a8435a1bd749ca39cb01dc5e14efbfa/src/lib/fetch.ts#L15\r\n\r\n",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-02-10T02:31:23Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/154#issuecomment-776394855"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc3ODYyODE1MA==",
                    "body": "Yet another victim to react-native's URL polyfill \ud83d\ude02 (see https://github.com/supabase/supabase/issues/353, https://github.com/facebook/react-native/pull/30188). The problem was the polyfill [appends](https://github.com/facebook/react-native/blob/1e9f63fe277c42d812ef007ced7eff1688602b62/Libraries/Blob/URL.js#L131-L133) `/` automatically at the end of the url. Can you see if [this](https://github.com/facebook/react-native/issues/23922#issuecomment-648096619) fixes the issue?\r\n\r\n> likely the error being returned isn't a JSON object\r\n\r\nI don't think we need to do a check here. In the case of a non-2XX like above, PostgREST should return an error object along with 4/5XX status code. If it's a 4/5XX and the body isn't JSON, that might indicate another problem (as is the case here).",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-02-13T14:37:17Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/154#issuecomment-778628150"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc3ODczNzkyOA==",
                    "body": "That worked! After `npm install react-native-url-polyfill` and adding to App.tsx: `import \"react-native-url-polyfill/auto\"`the error is no longer there and the response comes back correctly :)",
                    "author": {
                        "login": "hey-hank"
                    },
                    "createdAt": "2021-02-14T07:03:10Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/154#issuecomment-778737928"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc3ODc0MDI0OA==",
                    "body": "Great to hear that! Closing this for now - let us know if you have other issues \ud83d\ude09",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-02-14T07:31:35Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/154#issuecomment-778740248"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4MjA5NjQ2NDA=",
            "number": 158,
            "title": "Consider using types instead of interfaces",
            "body": "Currently PostgrestError is [an interface](https://github.com/supabase/postgrest-js/blob/4c1b2278256095c952a99aad01ab7446f9598a1c/src/lib/types.ts#L8). \r\n\r\nI can't pass a PostgrestError into a function which the following signature` (obj: Record<string, unknown>): void; ` and I get an error saying \r\n```\r\nArgument of type 'PostgrestError' is not assignable to parameter of type 'Record<string, unknown>'.\r\n      Index signature is missing in type 'PostgrestError'.ts\r\n```\r\n\r\nThis is due to a long open [typescript issue](https://github.com/microsoft/TypeScript/issues/15300) which looks like it is a working-as-intended issue. \r\n\r\nThe [suggested workout](https://github.com/microsoft/TypeScript/issues/15300#issuecomment-436793742) is spread the error object before passing it into a function which is messy.\r\n\r\nWDYT?",
            "author": {
                "login": "inian"
            },
            "state": "CLOSED",
            "createdAt": "2021-03-03T10:18:34Z",
            "closedAt": "2021-03-05T04:27:37Z",
            "url": "https://github.com/supabase/postgrest-js/issues/158",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc5MTE0Mzc3Ng==",
                    "body": "Idiomatic TypeScript [prefers interfaces](https://www.typescriptlang.org/docs/handbook/advanced-types.html#interfaces-vs-type-aliases) unless it's problematic, which in this case it is. The only thing we're missing is [merged declarations](https://stackoverflow.com/a/37233777), which is probably not needed for an error type, so +1",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-03-05T04:27:16Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/158#issuecomment-791143776"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4MjQxMTcyOTE=",
            "number": 161,
            "title": "Make upsert it's own function",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nCurrently `insert()` has a parameter for upserting. There are several fringe cases for upserting however, like [handling surrogates](https://github.com/PostgREST/postgrest/issues/1118), and handling conflicts with [unique contraints](https://postgrest.org/en/v7.0.0/api.html#on-conflict)\r\n\r\n## Describe the solution you'd like\r\n\r\nI think it would be cleaner to have an `upsert()` function, and move the upsert-specific parameters out of the `insert()` function. This would make it a better DX, especially around the documentation, where we will need to add a few different examples.\r\n\r\n## Describe alternatives you've considered\r\n\r\nAlternatively, we improve the docs for `insert()` with all the various `upsert` scenarios.\r\n\r\n## Additional context\r\n\r\nWe had a few devs request this already (I can only remember swyx), although it was a while ago so I can't find all the conversations. One here:\r\n\r\n![image](https://user-images.githubusercontent.com/10214025/110268678-0ad33780-7ffd-11eb-8464-c198daa1aad9.png)\r\n\r\n",
            "author": {
                "login": "kiwicopple"
            },
            "state": "CLOSED",
            "createdAt": "2021-03-08T02:56:28Z",
            "closedAt": "2021-03-22T10:52:48Z",
            "url": "https://github.com/supabase/postgrest-js/issues/161",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgwMzk2OTM0MQ==",
                    "body": ":tada: This issue has been resolved in version 0.27.0 :tada:\n\nThe release is available on:\n- [npm package (@latest dist-tag)](https://www.npmjs.com/package/@supabase/postgrest-js/v/0.27.0)\n- [GitHub release](https://github.com/supabase/postgrest-js/releases/tag/v0.27.0)\n\nYour **[semantic-release](https://github.com/semantic-release/semantic-release)** bot :package::rocket:",
                    "author": {
                        "login": "github-actions"
                    },
                    "createdAt": "2021-03-22T10:53:59Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/161#issuecomment-803969341"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4MjcwMTg0MDM=",
            "number": 163,
            "title": "client.order only supports a single column",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nPostgrest ordering support a list of columns and directions. [Link](https://postgrest.org/en/v7.0.0/api.html?highlight=order#ordering)\r\n`/people?order=age.desc,height.asc`\r\n\r\nHowever `postgrest-js` only support a single column ordering\r\n```js\r\nclient.order('id', { ascending: false }).order('name', { ascending: false }) \r\n// this will result in &order=name.asc.nullslast\r\n```\r\n",
            "author": {
                "login": "phamhieu"
            },
            "state": "CLOSED",
            "createdAt": "2021-03-10T03:21:00Z",
            "closedAt": "2021-03-10T04:30:40Z",
            "url": "https://github.com/supabase/postgrest-js/issues/163",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc5NDg1MzA4Ng==",
                    "body": "This was just implemented yesterday https://github.com/supabase/postgrest-js/pull/162\r\nCan you check with the latest version Hieu? ",
                    "author": {
                        "login": "inian"
                    },
                    "createdAt": "2021-03-10T04:23:58Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/163#issuecomment-794853086"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc5NDg2MDU2Ng==",
                    "body": "I use this lib from `supabase-js`. Will wait for that to update with the latest `postgrest-js`. Thanks @inian ",
                    "author": {
                        "login": "phamhieu"
                    },
                    "createdAt": "2021-03-10T04:33:10Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/163#issuecomment-794860566"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc5NTA2NzM0Nw==",
                    "body": "I'll update supabase-js once I resolve https://github.com/supabase/postgrest-js/issues/148 and https://github.com/supabase/postgrest-js/issues/161 \ud83d\ude4f",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-03-10T08:18:01Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/163#issuecomment-795067347"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4MjgyMjg5Nzg=",
            "number": 164,
            "title": "Handle Postgrest special characters",
            "body": "Postgrest defines the [some special characters which](https://postgrest.org/en/v7.0.0/api.html#reserved-characters) need to be handled separately. \r\n\r\nThis doesn't work\r\n```js\r\nawait postgrest\r\n.from('table')\r\n.select('*')\r\n.where('name', 'file (1).jpg')\r\n```\r\n\r\nbut double quoting the filter works. \r\n\r\n```js\r\nawait postgrest\r\n.from('table')\r\n.select('*')\r\n.where('name', '\"file (1).jpg\"')\r\n```\r\n\r\nIt would be better if the library checks if filters have special characters and automatically adds the double quotes. It seems cleaner than handling it at an application level. \r\nWDYT?",
            "author": {
                "login": "inian"
            },
            "state": "CLOSED",
            "createdAt": "2021-03-10T19:26:28Z",
            "closedAt": "2021-03-11T15:44:10Z",
            "url": "https://github.com/supabase/postgrest-js/issues/164",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc5NjQ4OTMyNQ==",
                    "body": "That's odd, I tried to reproduce this with:\r\n```sh\r\n$ npm run test:db\r\n$ curl -s 'http://localhost:3000/users' -H 'Content-Type: application/json' -d '{\"username\":\"file (1).jpg\"}'\r\n```\r\nAnd then:\r\n```ts\r\nimport { PostgrestClient } from '@supabase/postgrest-js'\r\nconst postgrest = new PostgrestClient('http://localhost:3000')\r\npostgrest\r\n  .from('users')\r\n  .select()\r\n  .eq('username', 'file (1).jpg')\r\n  .then(({ data, error }) => console.log(data, error))\r\n// prints:\r\n// [\r\n//   {\r\n//     username: 'file (1).jpg',\r\n//     data: null,\r\n//     age_range: null,\r\n//     status: 'ONLINE',\r\n//     catchphrase: null\r\n//   }\r\n// ] null\r\n```\r\nMaybe the field actually has `\"` in it?\r\n\r\nMore generally re: quoting, there has been some problems when automatically escaping on special characters: https://github.com/supabase/postgrest-js/issues/131, https://github.com/supabase/postgrest-js/issues/149, though these are on column names rather than values. I suspect there are certain filters for which it's safe to automatically escape special characters for values, but I haven't found an obvious one yet. Another problem is `.eq('username', 'supabot')` is incompatible with `.eq('username', '\"supabot\"')`.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-03-11T06:16:29Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/164#issuecomment-796489325"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc5NjU3ODQ1Mg==",
                    "body": "Field does not have `\"` in it. \r\n\r\n`eq` works but `in` doesn't. Can you try this?\r\n```\r\nconst body = await supabase\r\n      .from(\"objects\")\r\n      .select(\"*\")\r\n      .in(\"name\", [\"authenticated/test-image-001 (1).png\"]);\r\n```\r\n\r\nAlso this seems to be a regression. A previous version of postgrest-js handled this without issues. I can find out which version the regression happened if it helps. \r\n\r\nEdit: this was working in postgrest v0.22.0 and stopped working in v0.24.0",
                    "author": {
                        "login": "inian"
                    },
                    "createdAt": "2021-03-11T08:57:28Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/164#issuecomment-796578452"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc5NjYxMDQ3NQ==",
                    "body": "I see. I remember I removed quoting on `in` on https://github.com/supabase/postgrest-js/pull/155.\r\n\r\nI did some tests and it seems like always quoting makes it not match values that have `\"` in it, i.e. if I do:\r\n```sh\r\n$ curl -s 'http://localhost:3000/users' -H 'Content-Type: application/json' -d '{\"username\":\"(\\\")\"}'\r\n```\r\nThen there's no way to match it.\r\n\r\n@steve-chavez any way to get around this? Niche case though... either way, I think it's acceptable to `\"` automatically for values.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-03-11T09:48:59Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/164#issuecomment-796610475"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc5Njc2NTg0Mw==",
                    "body": "> Then there's no way to match it.\r\n\r\n@soedirgo I can match a `(\")` value with `eq`:\r\n\r\n```bash\r\ncurl 'l:3000/projects?name=eq.(\")'\r\n[{\"id\":3432423,\"name\":\"(\\\")\",\"client_id\":null,\"earnings\":100}]\r\n\r\n-- or\r\n\r\ncurl \"l:3000/projects?name=eq.(%22)\"\r\n[{\"id\":3432423,\"name\":\"(\\\")\",\"client_id\":null,\"earnings\":100}]\r\n```\r\n\r\nNot with `in` though.\r\n```\r\ncurl 'l:3000/projects?name=in.(%22(%22%22)%22)'\r\n[]\r\n```\r\n\r\nRare case, but it can be filed as bug in the postgrest repo.\r\n\r\n(Won't work inside the `or`/`and` filters as well)",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-03-11T14:13:26Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/164#issuecomment-796765843"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4MzMxODU3MDQ=",
            "number": 168,
            "title": "No function matches Levenshtein stored procedure",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWorking with Supabase and on a Nuxt.js project, so far things are going very well, very enjoyable and getting a new found love for SQL again. \r\n\r\nI've started getting to some interesting points of Supabase with stored procedures to perform fuzzysearches. \r\n\r\nI have a resemblance of a search query that joins a table creates a concatenated string to compare to a given string to calculate the `LEVENSHTEIN` distance for search results that return something useful for user. \r\n\r\nThis procedure works well in the SQL explorer. (seen below)\r\n\r\nI can't seem to get my Supabase.js to perform the query, instead, it returns the below error message. \r\n\r\nI have included as much information to help debug this. \r\n\r\nstored procedure \r\n```sql\r\nCREATE OR REPLACE FUNCTION public.search_tracks(query text)\r\nRETURNS TABLE(id text, artist text, title text, full_name text, distance int) AS $$\r\n  SELECT tracks.id, artists.title AS artist, tracks.title, concat(artists.title, ' - ', tracks.title) AS full_name, LEVENSHTEIN(LOWER(CONCAT(artists.title, ' - ', tracks.title)), LOWER(query)) AS distance \r\n    FROM tracks \r\n  LEFT JOIN artists ON artists.id = tracks.artist\r\n  ORDER BY distance ASC\r\n  LIMIT 20;\r\n$$ LANGUAGE SQL immutable;\r\n```\r\n\r\n```javascript\r\n{\r\n  error: {\r\n    hint: 'No function matches the given name and argument types. You might need to add explicit type casts.',\r\n    details: null,\r\n    code: '42883',\r\n    message: 'function levenshtein(text, text) does not exist'\r\n  },\r\n  data: null,\r\n  count: null,\r\n  status: 404,\r\n  statusText: 'Not Found',\r\n  body: null\r\n}\r\n```\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n```javascript\r\nconst resp = await $supabase\r\n  .rpc('search_tracks', { query: 'test' })\r\n  .select('*')\r\n```\r\n\r\n## Expected behaviour\r\n\r\nA clear and concise description of what you expected to happen.\r\n\r\n## Screenshots\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n## System information\r\n\r\n- OS: `macos`\r\n- Browser (if applies) `chrome`\r\n- Version of supabase-js: \r\n  - `@supabase/postgrest-js@^0.26.1`\r\n  - `@supabase/supabase-js@^1.3.4`\r\n- Version of Node.js: `v14.16.0`\r\n\r\n## Additional context\r\n\r\n```sql\r\nCREATE EXTENSION IF NOT EXISTS fuzzystrmatch WITH SCHEMA extensions;\r\nCREATE TABLE public.artists (\r\n    id character varying NOT NULL,\r\n    title character varying NOT NULL,\r\n);\r\nCREATE TABLE public.tracks (\r\n    id character varying NOT NULL,\r\n    title character varying NOT NULL,\r\n    artist character varying NOT NULL,\r\n);\r\nINSERT INTO artists (id, title) VALUES ('art_1', 'Daft Punk');\r\nINSERT INTO tracks (id, title, artist) VALUES ('trk_1', 'Harder Faster Stronger', 'art_1');\r\n```\r\n\r\nRun the procedure\r\n\r\n```sql\r\nSELECT search_tracks('Daft Punk - hard fast strong');\r\n```",
            "author": {
                "login": "kylewelsby"
            },
            "state": "CLOSED",
            "createdAt": "2021-03-16T20:50:20Z",
            "closedAt": "2022-09-26T08:36:30Z",
            "url": "https://github.com/supabase/postgrest-js/issues/168",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgwMDY0NTQ5Mg==",
                    "body": "Hey @kylewelsby,\r\n\r\nTo fix this, try the following:\r\n\r\n- On the web UI. Go to `settings/api`(click on cog-> then API)\r\n- On `EXTRA SEARCH PATH`. Add `public, extensions`. Then hit `Save`.\r\n\r\nLet me know if that works.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-03-16T22:07:32Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/168#issuecomment-800645492"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgwMDY1ODMwMA==",
                    "body": "HI @steve-chavez, \r\n\r\nI added that and retried the request,  unfortunately, it did not work. \r\n\r\nDo I need to refresh authorization sessions or something for the changes to take hold?\r\n\r\nMore debugging if it helps. \r\n\r\n```bash\r\ncurl 'https://REDACTED.supabase.co/rest/v1/rpc/search_tracks' \\\r\n  -H 'authority: REDACTED.supabase.co' \\\r\n  -H 'pragma: no-cache' \\\r\n  -H 'cache-control: no-cache' \\\r\n  -H 'sec-ch-ua: \"Google Chrome\";v=\"89\", \"Chromium\";v=\"89\", \";Not A Brand\";v=\"99\"' \\\r\n  -H 'dnt: 1' \\\r\n  -H 'sec-ch-ua-mobile: ?0' \\\r\n  -H 'authorization: Bearer REDACTED' \\\r\n  -H 'content-type: application/json' \\\r\n  -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.82 Safari/537.36' \\\r\n  -H 'content-profile: public' \\\r\n  -H 'apikey: REDACTED' \\\r\n  -H 'accept: */*' \\\r\n  -H 'origin: http://localhost:3000' \\\r\n  -H 'sec-fetch-site: cross-site' \\\r\n  -H 'sec-fetch-mode: cors' \\\r\n  -H 'sec-fetch-dest: empty' \\\r\n  -H 'referer: http://localhost:3000/' \\\r\n  -H 'accept-language: en-GB,en;q=0.9,en-US;q=0.8' \\\r\n  --data-raw '{\"query\":\"test\"}' \\\r\n  --compressed\r\n```\r\n\r\n\r\n```json\r\n{\r\n  \"hint\":\"No function matches the given name and argument types. You might need to add explicit type casts.\",\r\n  \"details\":null,\r\n  \"code\":\"42883\",\r\n  \"message\":\"function levenshtein(text, text) does not exist\"\r\n}\r\n```\r\n",
                    "author": {
                        "login": "kylewelsby"
                    },
                    "createdAt": "2021-03-16T22:34:56Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/168#issuecomment-800658300"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgwMDY3ODI4OQ==",
                    "body": "Another option is to add a search path to the function. Like this:\r\n\r\n```sql\r\nCREATE OR REPLACE FUNCTION public.search_tracks(query text)\r\nRETURNS TABLE(id text, artist text, title text, full_name text, distance int) AS $$\r\n  SELECT tracks.id, artists.title AS artist, tracks.title, concat(artists.title, ' - ', tracks.title) AS full_name, LEVENSHTEIN(LOWER(CONCAT(artists.title, ' - ', tracks.title)), LOWER(query)) AS distance \r\n    FROM tracks \r\n  LEFT JOIN artists ON artists.id = tracks.artist\r\n  ORDER BY distance ASC\r\n  LIMIT 20;\r\n$$ LANGUAGE SQL immutable set search_path = 'public, extensions';\r\n```",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-03-16T23:25:20Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/168#issuecomment-800678289"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgwMDk4OTA4OA==",
                    "body": "Hey @steve-chavez \r\n\r\nUnfortunately even this hasn't worked, calling the function in the SQL tab works as expected. \r\n<img width=\"929\" alt=\"Screenshot 2021-03-17 at 10 56 50\" src=\"https://user-images.githubusercontent.com/110469/111456950-7d37cc00-870f-11eb-855e-4271c4a90356.png\">\r\n\r\n\r\nJust doesn't seem to work through Postrest-js / Supabase.js. \r\n\r\n```\r\nfunction levenshtein(text, text) does not exist\r\n```\r\n\r\nAre there any more suggestions?\r\n\r\n```diff\r\nDROP FUNCTION search_tracks;\r\nCREATE OR REPLACE FUNCTION public.search_tracks(query text)\r\nRETURNS TABLE(id text, artist text, title text, full_name text, distance int) AS $$\r\n  SELECT tracks.id, artists.title AS artist, tracks.title, concat(artists.title, ' - ', tracks.title) AS full_name, LEVENSHTEIN(LOWER(CONCAT(artists.title, ' - ', tracks.title)), LOWER(query)) AS distance \r\n    FROM tracks \r\n  LEFT JOIN artists ON artists.id = tracks.artist\r\n  ORDER BY distance ASC\r\n  LIMIT 20;\r\n- $$ LANGUAGE SQL immutable set search_path = 'public, extensions';\r\n+ $$ LANGUAGE SQL immutable SET search_path = public, extensions;\r\n```\r\n\r\n\r\n",
                    "author": {
                        "login": "kylewelsby"
                    },
                    "createdAt": "2021-03-17T10:57:32Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/168#issuecomment-800989088"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgwMTE2NjIzMw==",
                    "body": "@kylewelsby Try this one:\r\n\r\n```diff\r\nCREATE OR REPLACE FUNCTION public.search_tracks(query text)\r\nRETURNS TABLE(id text, artist text, title text, full_name text, distance int) AS $$\r\n  SELECT tracks.id, artists.title AS artist, tracks.title, concat(artists.title, ' - ', tracks.title) AS full_name,\r\n- LEVENSHTEIN(LOWER(CONCAT(artists.title, ' - ', tracks.title)), LOWER(query)) AS distance \r\n+ extensions.LEVENSHTEIN(LOWER(CONCAT(artists.title, ' - ', tracks.title)), LOWER(query)) AS distance \r\n    FROM tracks \r\n  LEFT JOIN artists ON artists.id = tracks.artist\r\n  ORDER BY distance ASC\r\n  LIMIT 20;\r\n$$ LANGUAGE SQL immutable;\r\n```\r\n\r\n(Namespace LEVENSHTEIN with `extensions.LEVENSHTEIN`)",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-03-17T15:14:43Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/168#issuecomment-801166233"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgwMTE2ODE4MQ==",
                    "body": "Depending on the role you use to make the call, you might also need to add a grant usage:\r\n\r\n```sql\r\ngrant usage on schema extensions to anon;\r\ngrant usage on schema extensions to authenticated;\r\n```",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-03-17T15:17:23Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/168#issuecomment-801168181"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgwMTE5Mjg0NA==",
                    "body": "Hey @steve-chavez \r\n\r\nThanks for helping out on this one.\r\n\r\nNamespacing the `LEVENSHTEIN` moved us closer with the following error message\r\n\r\n```\r\n{\r\n  error: {\r\n    hint: null,\r\n    details: null,\r\n    code: '42501',\r\n    message: 'permission denied for schema extensions'\r\n  },\r\n  data: null,\r\n  count: null,\r\n  status: 403,\r\n  statusText: 'Forbidden',\r\n  body: null\r\n}\r\n```\r\n\r\nBoth grants for `anon` or `authenticated` did not work, however granting for `service_role` did.\r\n\r\n\ud83d\udc47 Did you google the error and want a quick solution?\r\n\r\n> namespace `LEVENSHTEIN` with `extensions.LEVENSHTEIN` and grant permissions\r\n\r\n```SQL\r\nGRANT USAGE ON SCHEMA extensions TO service_role;\r\n```\r\n\r\n\ud83d\udc46\r\n\r\nI'm learning a bunch about how Postgres via Supabase, Thank You. \ud83e\udd17\r\n\r\nMy specific issue is resolved now, I'm not sure if there's something that could be done on the project to provide some feedback for those new to the workings to understand and resolve the issue themselves, or enabling the `extensions` role in a configuration somewhere on supabase.io. \r\n\r\nPerhaps an update like such.  \r\n\r\n```diff\r\n{\r\n-  \"hint\":\"No function matches the given name and argument types. You might need to add explicit type casts.\",\r\n+  \"hint\":\"No function matches the given name and argument types. You might need to add explicit type casts. Extensions will need to be namespaced and permissions granted. See https://supabase.io/docs/client/rpc#with-extension for details.\",\r\n\r\n  \"details\":null,\r\n  \"code\":\"42883\",\r\n  \"message\":\"function levenshtein(text, text) does not exist\"\r\n}\r\n```\r\n\r\n```diff\r\n{\r\n  error: {\r\n-    hint: null,\r\n+    hint: \"Extensions will need to be namespaced and permissions granted. See https://supabase.io/docs/client/rpc#with-extension for details.\",\r\n    details: null,\r\n    code: '42501',\r\n    message: 'permission denied for schema extensions'\r\n  },\r\n  data: null,\r\n  count: null,\r\n  status: 403,\r\n  statusText: 'Forbidden',\r\n  body: null\r\n}\r\n```\r\n\r\nBut I guess it's beyond the scope of this project as its nested deep in [PostgREST/postgrest](https://github.com/PostgREST/postgrest/blob/cc54135bf0b1e635f2ff56c6899401c653b6281a/test/Feature/JsonOperatorSpec.hs#L66)",
                    "author": {
                        "login": "kylewelsby"
                    },
                    "createdAt": "2021-03-17T15:48:26Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/168#issuecomment-801192844"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgwMTIzMzgyMg==",
                    "body": "@kylewelsby Cool! Glad to know it worked.\r\n\r\n> But I guess it's beyond the scope of this project as its nested deep in PostgREST/postgrest\r\n\r\nYes, this one should be fixed in Supabase. We want extensions to be used the same on the SQL Editor and supabase-js. \r\n\r\nTwo things that should be fixed:\r\n\r\n- `EXTRA SEARCH PATH` on the UI is not working now. This should default to `public, extensions`. With this you wouldn't need to namespace `LEVENSHTEIN` on the function.\r\n- `grant usage on schema extensions` should be added to the roles by default.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-03-17T16:38:37Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/168#issuecomment-801233822"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxMjgyMzA4OQ==",
                    "body": "For anyone running into this issue, I was able to resolve this by running [these SQL commands](https://github.com/supabase/postgrest-js/issues/168#issuecomment-801168181) in my SQL editor. ",
                    "author": {
                        "login": "dshukertjr"
                    },
                    "createdAt": "2021-04-03T06:49:55Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/168#issuecomment-812823089"
                },
                {
                    "id": "IC_kwDODheSms5K9tGT",
                    "body": "Am able to resolve the permission error with grants, so closing the issue.\r\n\r\n```sql\r\ncreate or replace function public.test_function() returns int as $$\r\n  select extensions.levenshtein('a', 'b');\r\n$$ language sql;\r\ngrant execute on function extensions.levenshtein(text, text) to anon, authenticated, service_role;\r\n```",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-26T08:36:30Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/168#issuecomment-1257689491"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4NDM4MTA4NTE=",
            "number": 169,
            "title": "Typing is incorrect when filtering by embedded attributes",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nPostgrest allows [filtering by attributes on embedded resources](https://postgrest.org/en/v7.0.0/api.html#embedded-filters), but the typings on the filter functions only support attributes on the selected table.\r\n\r\n## To Reproduce\r\n\r\nThis [recreation](https://codesandbox.io/s/hungry-tdd-vy3xb?file=/src/index.ts) would work when run with valid credentials, but the typings fail and cause a build error.\r\n\r\n## Expected behavior\r\n\r\nIdeally, the function signatures would support type-safe paths in dot-notation, but it should at least not cause a build error.\r\n\r\nType safe paths are in theory possible with Typescript 4.1 (so would include a minor version bump for this project) as demonstrated [here](https://www.typescriptlang.org/play?ts=4.1.0-pr-40336-88#code/FAFwngDgpgBACgQxACwJIFsIBsA8AVAGhgGkowYoAPEKAOwBMBnGAazIHsAzGPAPhgC8wGCTIVqdJjEYgATgEtaAc2EwA-DwDapMAF1xNBswBKUAMbtZ9HDIXKiCWmF6qRGgD4wABgBIA3joAvgB0-ogoGNj42mS6RACilGZYAK70UDhsYFxaOnGsHNyOYJq6vPwAZNJyikqBXq4iMJ6+AWQh-onJaRlZOXgxekR9RU6lldV2dQ1NMABcMLRQAG5QsqoLS6uyANzAoJCw4WiYWABM+PwC8EgnUYQF2dx8zY-9ewfQNyiXgt9351+VEMUlstVeIx46n+kUBLwWkLwH3AX2OADUEKkMg84AZJMxjpcrqpccD8d5-IpOGtRGAOn4qTTTDJ6qoNDo8UY3s9GhpmSBOVJCQM8i5Zm5-hisdE8kR+WLxZsVmtGkrtht4ILmIjeVo4LpVYtlbt9ulkghZLBOClaGYQPJ2LQYEooCB8ERSRIucLygAKdgAIwAVgsHhBbgs4ABKSO3KUpbEe3gfCy0GQwQNB8wC65+VSceSyGQAOQQ6CgCwARAAReRQJTsSsEVRYBAlssVmCVgASCAAXk3VAgXQsAMwABmbIggsnYWbtjAWmkafkWHarpgQLHkICbMFTNQDKRAlkXMAAbAAOGCBKdNVe0dddgDCjpkSCge4PCiPJ6LCwARjOG87wNQIYDbfc3xAD4XRAf1g2zIhKxnOds0YYJx2Cb95F-U9KyjHYgA) (broken down [here](https://dev.to/phenomnominal/i-need-to-learn-about-typescript-template-literal-types-51po)). \r\n\r\nI had a very brief go trying this but it didn't immediately work. Happy to give it more of a go if this is a desired approach by the team here.\r\n\r\n## Screenshots\r\n\r\n<img width=\"639\" alt=\"image\" src=\"https://user-images.githubusercontent.com/6242344/112899399-01a82880-90da-11eb-9e80-bac1bc35bf4f.png\">\r\n\r\n\r\n## System information\r\n\r\n_Not relevant_",
            "author": {
                "login": "samtgarson"
            },
            "state": "OPEN",
            "createdAt": "2021-03-29T21:07:02Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/169",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxMDg1MTIyOQ==",
                    "body": "Thanks for opening the issue @samtgarson!\r\n\r\n> Type safe paths are in theory possible with Typescript 4.1\r\n\r\nThat looks pretty neat! We're currently swamped with the launch, but I'd be happy to get this in.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-03-31T07:42:55Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/169#issuecomment-810851229"
                },
                {
                    "id": "IC_kwDODheSms5K9ujn",
                    "body": "Just to update this for `v2`, this is still not implemented, although in the meantime we do fall back to generic `string` instead of giving a type error.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-26T08:41:35Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/169#issuecomment-1257695463"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4NDcyNDAyOTg=",
            "number": 171,
            "title": "upsert array returning 50 records",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nupsert with an array length of more than 50 is returning only 50 records of the array.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Create a table with a field\r\n2. Run below command\r\n```sh\r\nconst array = [{field: value}]      // add object 100 times\r\nsupabaseClient.from<definitions['table']>('table').upsert([array], { onConflict: 'field' }).select('id')\r\n```\r\n3. All 100 records are inserted into the table but it will return an array with only 50 records\r\n```sh\r\n[{ id: UUID }]              // this array will contain only 50 records\r\n```\r\n\r\n## Expected behavior\r\n\r\nIt should return all the 100 records with selected fields\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Version of supabase-js: 1.7.6\r\n- Version of Node.js: 14.15.5\r\n",
            "author": {
                "login": "thakkaryash94"
            },
            "state": "CLOSED",
            "createdAt": "2021-03-31T20:00:57Z",
            "closedAt": "2021-04-01T03:18:08Z",
            "url": "https://github.com/supabase/postgrest-js/issues/171",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxMTYwNDg4NA==",
                    "body": "Hey @thakkaryash94 can I confirm if you have a [max-rows](https://postgrest.org/en/v7.0.0/configuration.html#max-rows) set on your PostgREST instance?\r\n\r\n(if you're using Supabase, this is under Settings > API)",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-04-01T03:08:34Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/171#issuecomment-811604884"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxMTYwNzg1MQ==",
                    "body": "Oh, I knew it must somewhere in config, I tried to search on dashboard and docs but couldn't find out. \n\nThank you and sorry for creating the issue. Is this somewhere documented? It's really important I believe.",
                    "author": {
                        "login": "thakkaryash94"
                    },
                    "createdAt": "2021-04-01T03:18:03Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/171#issuecomment-811607851"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxMTYyMTc3MQ==",
                    "body": "Looks like we're lacking some docs for this one. I'll add an item to my (long list) of docs updates!",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-04-01T04:03:55Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/171#issuecomment-811621771"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4NTc3Mjc3MjY=",
            "number": 172,
            "title": "[Feature request] Improve syntax for using typescript \"from\" function",
            "body": "# Feature request\r\n\r\nFirst off, it's great that I can use TypeScript to statically type check everything. I think the syntax could be improved, though.\r\n\r\nRight now, you need to add the definitions to every database operation:\r\n\r\n```ts\r\nsupabase.from<definitions['table']>('table').select('*')\r\n```\r\n\r\nThis works, but isn't optimal for a few reasons:\r\n\r\n- Need to declare the type for each `from` call\r\n- Need to declare the table name multiple times (prone to mistyping the table name)\r\n- The input to `from` is not checked (e.g., you could time `from('tables')` for the above snippet and it would not fail linting)\r\n\r\nBut what if the definitions were added to the supabase client instead?\r\n\r\n```ts\r\n// lib file to create the client\r\nimport { createClient } from '@supabase/supabase-js'\r\n\r\nexport const supabase = createClient<definitions>(supabaseUrl, supabaseKey)\r\n\r\n// file where you use the client\r\nsupabase.from('table').select('*')\r\n```\r\n\r\nThen, you could be confident in your static type checking:\r\n\r\n- No need to duplicate the table name in the `from` function\r\n- It's guaranteed that all database calls are type checked\r\n- The `from` input could be type-checked (i.e., it's just the `keyof definitions`)\r\n- Cleaner code syntax all around\r\n- Added benefit that in VS Code, you get autocomplete on the table names, making the code more self-documenting",
            "author": {
                "login": "Nick-Mazuk"
            },
            "state": "CLOSED",
            "createdAt": "2021-03-08T18:12:58Z",
            "closedAt": "2022-09-26T08:16:25Z",
            "url": "https://github.com/supabase/postgrest-js/issues/172",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxOTM5MDkwMw==",
                    "body": "This is actually a lot cleaner - but I might need a TS expert to investigate how difficult it is to implement. I'll transfer this one to our `postgrest-js` repo for now \ud83d\udc4d ",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-04-14T09:51:45Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/172#issuecomment-819390903"
                },
                {
                    "id": "IC_kwDODheSms5H7XOu",
                    "body": "This is still open, right? \r\nBecause I thought about exacly the same.",
                    "author": {
                        "login": "baba43"
                    },
                    "createdAt": "2022-08-05T18:35:19Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/172#issuecomment-1206743982"
                },
                {
                    "id": "IC_kwDODheSms5K9nHe",
                    "body": "This is resolved in https://github.com/supabase/postgrest-js/pull/279. It's still a prerelease right now, but will be released as v2 in a few weeks.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-26T08:16:25Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/172#issuecomment-1257664990"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4NTc3NjAwODk=",
            "number": 173,
            "title": "Error 'All object keys must match'",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\nWhen trying to insert an array of objects, where in some objects the key `field2` is present, and in others isn't, the JS API client errors to: 'All object keys must match'. The `field2` is not mandatory.\r\n\r\n```\r\nconst { data, error } = await supabase\r\n  .from('mytable')\r\n  .insert([\r\n    {\r\n      field1: 'something'     \r\n    },\r\n    {\r\n      field1: 'something',\r\n      field2: 'something'        \r\n    }      \r\n])\r\n```\r\n\r\n## Desired behavior\r\nThe JS client / Supabase should default the mismatching fields to `null` or whatever is translated to NULL in Postgres. (As workaround I set the fields to `null` and it looks OK in my case.)",
            "author": {
                "login": "peachp"
            },
            "state": "CLOSED",
            "createdAt": "2021-01-22T09:35:04Z",
            "closedAt": "2023-04-18T07:25:36Z",
            "url": "https://github.com/supabase/postgrest-js/issues/173",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc2NTU0ODIyNg==",
                    "body": "Hello @peachp,\r\n\r\nWe can treat this as a **bug**, but it must be said that in SQL this expression is also not valid.\r\n\r\n```sql\r\nINSERT INTO TABLE_NAME (column_a,\r\n                        column_b)\r\nVALUES ('aaa'),\r\n       ('aaa', 'bbb');\r\n```\r\n\r\n> Error: Run query failed (INSERT has more target columns than expressions)",
                    "author": {
                        "login": "ftonato"
                    },
                    "createdAt": "2021-01-22T16:52:04Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/173#issuecomment-765548226"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc2NTY0MDQyMA==",
                    "body": "@ftonato yep, I know that the equivalent SQL wouldn't work, but that's kind of is the point of Supabase for me: an API wrapper around Postgres, which simplifies the hosting, design, as well as querying the DB.\r\n\r\nI don't see any disadvantages to default missing / mismatching keys to `null`, except a tiny performance penalty due to checking all objects' keys before sending to server. I'm sure that something like Sequelize allow it.\r\n\r\nIf you still think there is some negative side effect or tradeoff, maybe you could at least make the error message more descriptive.",
                    "author": {
                        "login": "peachp"
                    },
                    "createdAt": "2021-01-22T19:38:13Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/173#issuecomment-765640420"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc2NTY5MDAwMQ==",
                    "body": "I agree with you! It would be good if it worked, maybe it would make things easier in some scenarios (like perhaps the current one you are facing).\r\n\r\nOn the other hand, I wonder the operation cost to check if the missing fields accept empty values, if you have defined default values to use or if they have not, then should use `null`.\r\n\r\nAnyway, I think you are right to open the discussion as a whole, but my comment above was more for treating as a \"bug\", something that is not described in the documentation.",
                    "author": {
                        "login": "ftonato"
                    },
                    "createdAt": "2021-01-22T21:19:53Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/173#issuecomment-765690001"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc2NTg0MjM0NA==",
                    "body": "> I don't see any disadvantages to default missing / mismatching keys to null\r\n\r\nUnfortunately setting it to null will try to explicitly insert a `NULL` value into the database (vs no value, which would let the database use a DEFAULT value. \r\n\r\nPerhaps `undefined`, but I still don't think that would work. @peachp can you try adding `field2: undefined` to your code?\r\n\r\nIf that doesn't work we'd have to map over all the values, then run the inserts in batches of matching keys - but this is a bit of a fringe case so I know if it's worth the added complexity (perf loss) for our library",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-01-23T03:10:21Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/173#issuecomment-765842344"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc2NTkwNDMwNw==",
                    "body": "@ftonato I was not sure if it is a bug, so feel free to change it to enhancement / feature request.\r\n\r\n@kiwicopple \r\n> Unfortunately setting it to null will try to explicitly insert a NULL value into the database (vs no value, which would let the database use a DEFAULT value.\r\n\r\nIs it bad to to explicitly insert a NULL value?\r\nAnd for DEFAULT values, does it mean that I always need to define a default value for each field, when creating a table, right?\r\n\r\nI don't know the details of NULL vs Default vs \"empty\" in Postgres. For example with the ERP system I worked with, there were never NULL values in the DB - it made sure to write some default values like empty string or 0. \r\n\r\n> Perhaps undefined, but I still don't think that would work. @peachp can you try adding field2: undefined to your code?\r\n\r\nIt was a one-off migration task I already finished. However, my understanding is that `field2` is already undefined. So if you have an object / record like this:\r\n```\r\nvar obj = {\r\n   field1: 'something'     \r\n}\r\n```\r\nthen `obj.field2` already returns `undefined` and there is no point setting it to `undefined`. But let me know if you still want me to try it. Maybe there is a difference between initial `undefined` and explicitly set `undefined` in JS.\r\n\r\nSo currently I understand I have only these options then:\r\n- Set mismatching keys to `null` in JS code\r\n- Set mismatching keys to some default values in JS code (like '')\r\n- Define DEFAULT values for all my fields (not sure I can even define \"empty string\" when creating tables via Supbase Dashboard)\r\n\r\nOr am I missing something?\r\nIt just sounds very tedious to always set default / null to each of the eventually missing keys every time I update or create records. Would be great to solve it once of everyone somehow - in JS client or server-side, I don't mind.\r\n\r\nBut again, I'm happy to be educated why it is good to always make the developer decide each time if it should be NULL or some default value.",
                    "author": {
                        "login": "peachp"
                    },
                    "createdAt": "2021-01-23T10:49:58Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/173#issuecomment-765904307"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyNDk5MTI1Ng==",
                    "body": "I would like to know about this myself since I'm trying to upsert.\r\n \r\nIn my situation I can have references to the ids of the rows but  in the same operation I also need to add new rows of which I do not have an identifier.\r\n\r\n![image](https://user-images.githubusercontent.com/16295552/115749950-ead2ba00-a397-11eb-8380-ac7877e82f08.png)\r\n\r\nThis returns `{\"message\":\"All object keys must match\"}`\r\n\r\nsumming up the upsert does not do what I expect that is to add new rows and update those already in db in the same operation. \r\n\r\nthis forces me to have to make two separate api calls for insert and update",
                    "author": {
                        "login": "Polyterative"
                    },
                    "createdAt": "2021-04-22T16:25:06Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/173#issuecomment-824991256"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyNTEyNDU1MA==",
                    "body": ">  I also need to add new rows of which I do not have an identifier.\r\n\r\nA workaround for making null identifiers work is to create a trigger that converts the null to the default id. Like:\r\n\r\n```sql\r\n-- Change items and its sequence according to your table\r\nCREATE OR REPLACE FUNCTION items_null_id_is_default() RETURNS TRIGGER AS $$\r\nBEGIN\r\n  NEW.id = coalesce(NEW.id, nextval('items_id_seq'));\r\n  RETURN NEW;\r\nEND;\r\n$$ LANGUAGE plpgsql;\r\nCREATE TRIGGER items_null_id_is_default \r\nBEFORE INSERT ON items FOR EACH ROW EXECUTE PROCEDURE items_null_id_is_default();\r\n```\r\n\r\nThen you can avoid the `All object keys must match` error by adding a null id on the rows for which you don't have an identifier:\r\n\r\n```js\r\n[\r\n    {\r\n      id: null,\r\n      name: 'a name'\r\n    },\r\n    {\r\n      id: 123,\r\n      name: 'another name'        \r\n    }\r\n]\r\n```\r\n\r\n(`upsert` should work then).\r\n\r\nOnce https://github.com/PostgREST/postgrest/issues/1567 is cleared out then the library will allow this out-of-the-box.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-04-22T19:25:52Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/173#issuecomment-825124550"
                },
                {
                    "id": "IC_kwDODheSms40iPls",
                    "body": "> \r\n> \r\n> > I also need to add new rows of which I do not have an identifier.\r\n> \r\n> A workaround for making null identifiers work is to create a trigger that converts the null to the default id. Like:\r\n> \r\n> ```sql\r\n> -- Change items and its sequence according to your table\r\n> CREATE OR REPLACE FUNCTION items_null_id_is_default() RETURNS TRIGGER AS $$\r\n> BEGIN\r\n>   NEW.id = coalesce(NEW.id, nextval('items_id_seq'));\r\n>   RETURN NEW;\r\n> END;\r\n> $$ LANGUAGE plpgsql;\r\n> CREATE TRIGGER items_null_id_is_default \r\n> BEFORE INSERT ON items FOR EACH ROW EXECUTE PROCEDURE items_null_id_is_default();\r\n> ```\r\n> \r\n> Then you can avoid the `All object keys must match` error by adding a null id on the rows for which you don't have an identifier:\r\n> \r\n> ```js\r\n> [\r\n>     {\r\n>       id: null,\r\n>       name: 'a name'\r\n>     },\r\n>     {\r\n>       id: 123,\r\n>       name: 'another name'        \r\n>     }\r\n> ]\r\n> ```\r\n> \r\n> (`upsert` should work then).\r\n> \r\n> Once [PostgREST/postgrest#1567](https://github.com/PostgREST/postgrest/issues/1567) is cleared out then the library will allow this out-of-the-box.\r\n\r\nDo I have to create the sequence ('items_id_seq') manually or is it automatically created by supabase?",
                    "author": {
                        "login": "JVariance"
                    },
                    "createdAt": "2021-07-16T11:54:31Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/173#issuecomment-881391980"
                },
                {
                    "id": "IC_kwDODheSms40kBud",
                    "body": "> \r\n> \r\n> > > I also need to add new rows of which I do not have an identifier.\r\n> > \r\n> > \r\n> > A workaround for making null identifiers work is to create a trigger that converts the null to the default id. Like:\r\n> > ```sql\r\n> > -- Change items and its sequence according to your table\r\n> > CREATE OR REPLACE FUNCTION items_null_id_is_default() RETURNS TRIGGER AS $$\r\n> > BEGIN\r\n> >   NEW.id = coalesce(NEW.id, nextval('items_id_seq'));\r\n> >   RETURN NEW;\r\n> > END;\r\n> > $$ LANGUAGE plpgsql;\r\n> > CREATE TRIGGER items_null_id_is_default \r\n> > BEFORE INSERT ON items FOR EACH ROW EXECUTE PROCEDURE items_null_id_is_default();\r\n> > ```\r\n> > \r\n> > \r\n> >     \r\n> >       \r\n> >     \r\n> > \r\n> >       \r\n> >     \r\n> > \r\n> >     \r\n> >   \r\n> > Then you can avoid the `All object keys must match` error by adding a null id on the rows for which you don't have an identifier:\r\n> > ```js\r\n> > [\r\n> >     {\r\n> >       id: null,\r\n> >       name: 'a name'\r\n> >     },\r\n> >     {\r\n> >       id: 123,\r\n> >       name: 'another name'        \r\n> >     }\r\n> > ]\r\n> > ```\r\n> > \r\n> > \r\n> >     \r\n> >       \r\n> >     \r\n> > \r\n> >       \r\n> >     \r\n> > \r\n> >     \r\n> >   \r\n> > (`upsert` should work then).\r\n> > Once [PostgREST/postgrest#1567](https://github.com/PostgREST/postgrest/issues/1567) is cleared out then the library will allow this out-of-the-box.\r\n> \r\n> Do I have to create the sequence ('items_id_seq') manually or is it automatically created by supabase?\r\n\r\nI found the answer here: https://stackoverflow.com/a/10332015.\r\nThe 'items_id_seq' is automatically created on table 'items' for 'items.id'.",
                    "author": {
                        "login": "JVariance"
                    },
                    "createdAt": "2021-07-17T08:47:59Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/173#issuecomment-881859485"
                },
                {
                    "id": "IC_kwDODheSms49hQJL",
                    "body": "> I would like to know about this myself since I'm trying to upsert.\r\n> \r\n> In my situation I can have references to the ids of the rows but in the same operation I also need to add new rows of which I do not have an identifier.\r\n> \r\n> ![image](https://user-images.githubusercontent.com/16295552/115749950-ead2ba00-a397-11eb-8380-ac7877e82f08.png)\r\n> \r\n> This returns `{\"message\":\"All object keys must match\"}`\r\n> \r\n> summing up the upsert does not do what I expect that is to add new rows and update those already in db in the same operation.\r\n> \r\n> this forces me to have to make two separate api calls for insert and update\r\n\r\n+1 for allowing this pattern",
                    "author": {
                        "login": "shopsideau"
                    },
                    "createdAt": "2022-02-08T01:46:49Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/173#issuecomment-1032127051"
                },
                {
                    "id": "IC_kwDODheSms4-oH2A",
                    "body": "It feels like it should at least allow the upsert with missmatching keys when a default value is provided for the missmatched keys in the table.\r\n\r\nSo that upsert like this is possible:\r\n`{\r\n      field1: 'something'\r\n      field2: 'something'\r\n    },\r\n    {\r\n      field1: 'something',\r\n      field2: undefined // default value provided or null authorised on table.\r\n }`",
                    "author": {
                        "login": "UngererFabien"
                    },
                    "createdAt": "2022-02-25T09:56:16Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/173#issuecomment-1050705280"
                },
                {
                    "id": "IC_kwDODheSms5BjVqU",
                    "body": "+1 for this.  I mean, I thought that is what upsert is for.\r\n\r\nI have multiple rows...if I add a new one, it doesn't have an ID yet...so, I would expect existing items get updated, while the new one, gets inserted.",
                    "author": {
                        "login": "travisanderson"
                    },
                    "createdAt": "2022-04-15T02:03:08Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/173#issuecomment-1099782804"
                },
                {
                    "id": "IC_kwDODheSms5CGC08",
                    "body": "+1 for this as well. trigger only feels like a workaround and not expected behavior. ",
                    "author": {
                        "login": "noeleom"
                    },
                    "createdAt": "2022-04-25T18:07:06Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/173#issuecomment-1108880700"
                },
                {
                    "id": "IC_kwDODheSms5PkJA5",
                    "body": "any update for this?\r\n\r\nbeen quite for a while now.",
                    "author": {
                        "login": "ScarVite"
                    },
                    "createdAt": "2022-12-02T07:55:24Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/173#issuecomment-1334874169"
                },
                {
                    "id": "IC_kwDODheSms5USHNl",
                    "body": "..bumped into this error, you guys saved my day. \r\nI can add the so-called missing fields into my table of objects to send for upsert, but.. doesnt seem intuitive. \r\nI hope this gets fixed anytime soon",
                    "author": {
                        "login": "stevemk42"
                    },
                    "createdAt": "2023-02-02T16:37:42Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/173#issuecomment-1414034277"
                },
                {
                    "id": "IC_kwDODheSms5WY9EE",
                    "body": "FYI, this is being worked at https://github.com/PostgREST/postgrest/pull/2672.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-03-01T05:40:55Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/173#issuecomment-1449382148"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4NjU2NTUzMTg=",
            "number": 174,
            "title": "Update multiple rows with different data at once",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nI'd love to have the ability to update multiple rows at once, with different data for each row. It seems that right now update only accepts one filter and updates all the rows that match that filter with the same data. For my use case, I'd like to update different rows with different data in one query. The only way that I can do that right now is to make multiple network requests, but that doesn't seem very efficient (especially if I need to potentially update dozens of rows).\r\n\r\n## Describe the solution you'd like\r\n\r\nA way to update multiple rows with different data for each row in one network request.\r\n\r\n## Describe alternatives you've considered\r\n\r\nIt seems like it's possible to do this using raw SQL (https://stackoverflow.com/a/18799497), or you can make multiple network requests, as I mentioned earlier. Unfortunately, both are non-ideal solutions. It would be great to have this functionality be supported directly in supabase-js.",
            "author": {
                "login": "churichard"
            },
            "state": "OPEN",
            "createdAt": "2021-04-14T22:33:16Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/174",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgxOTkxOTc0Mg==",
                    "body": "Interesting feature @churichard, thanks a lot for proposing it and suggesting a possible implementation.\r\n\r\nWe'll definitely consider supporting it out-of-the-box. But meanwhile, you can create a SQL function that will allow you to use the `update..from` syntax. Example:\r\n\r\n```sql\r\n-- example table\r\ncreate table projects(\r\n  id int\r\n, name text\r\n);\r\n\r\ninsert into projects values(1, 'project-1'), (2, 'project-2');\r\n\r\n-- function that wraps the update..from syntax\r\ncreate or replace function update_many_projects(payload json) returns setof projects as $$\r\n  update projects as p set name = x.name \r\n  from (\r\n    select * from json_populate_recordset(null::projects, payload)\r\n  ) as x(id, name)\r\n  where p.id = x.id\r\n  returning p.*;      \r\n$$ language sql;\r\n```\r\n\r\nAnd then you can use the function through [supabase.rpc](https://supabase.io/docs/client/rpc). It'd be a single request:\r\n\r\n```js\r\nconst { data, error } = await supabase\r\n  .rpc('update_many_projects', \r\n  {payload: [{\"id\": 1, \"name\": \"updated-project-1\"}, {\"id\": 2, \"name\": \"updated-project-2\"}]})\r\n```",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-04-14T23:44:57Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/174#issuecomment-819919742"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyMDAzMTc5Nw==",
                    "body": "@churichard I forgot about this option, but in fact, you can already do what you want with an [upsert](https://supabase.io/docs/reference/javascript/upsert).\r\n\r\n```js\r\nconst { data, error } = await supabase\r\n  .from('projects')\r\n  .upsert([{\"id\": 1, \"name\": \"updated-project-1\"}, {\"id\": 2, \"name\": \"updated-project-2\"}])\r\n```",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-04-15T03:33:31Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/174#issuecomment-820031797"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyMDAzMjg2MQ==",
                    "body": "@churichard The upsert is cleaner IMO. I'll close this for now, but let me know if that doesn't work you.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-04-15T03:37:04Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/174#issuecomment-820032861"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyNTEzMDU4OA==",
                    "body": "I've tried out the upsert, and it seemed to work at first glance. However, because upsert creates a new record if it doesn't exist, it requires me to pass in all of the properties that are needed for the record. This can result in a race condition where if one of the properties is updated elsewhere, then it might be overwritten by the old property. It also requires me to know all of the properties for the particular record that I'm updating, which is not ideal.\r\n\r\nI still think a dedicated update would be better because it would allow me to pass in only the properties that I would need, and it would return an error if the record doesn't exist (rather than creating the record). The race condition, in particular, is a case where update would be strictly better than upsert.",
                    "author": {
                        "login": "churichard"
                    },
                    "createdAt": "2021-04-22T19:35:07Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/174#issuecomment-825130588"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyNTMxNzQ2NQ==",
                    "body": "> I still think a dedicated update would be better because it would allow me to pass in only the properties that I would need, and it would return an error if the record doesn't exist (rather than creating the record). \r\n\r\nAh, that's not true. Nor a regular UPDATE nor your proposed multi-row UPDATE [above](https://stackoverflow.com/a/18799497/4692662) will fail or return an error when the id is not found, it will simply succeed with \"no row updated\"(`UPDATE 0`).\r\n\r\n> also requires me to know all of the properties for the particular record that I'm updating\r\n\r\nI think this one will be lifted once https://github.com/supabase/postgrest-js/issues/173 is solved.\r\n\r\n> This can result in a race condition where if one of the properties is updated elsewhere, then it might be overwritten by the old property.\r\n\r\nTo solve concurrent updates I think we need an etag. But this is a separate issue being tracked at: https://github.com/PostgREST/postgrest/issues/1069.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-04-23T01:24:26Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/174#issuecomment-825317465"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyNTMxOTYwNA==",
                    "body": "> I still think a dedicated update would be better because it would allow me to pass in only the properties that I would need, and it would return an error if the record doesn't exist\r\n\r\nHm, the only way I see we could err is by ensuring that the number of rows updated is the same as the number of rows passed in the payload.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-04-23T01:30:56Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/174#issuecomment-825319604"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyNTMyMTk2Ng==",
                    "body": "> I still think a dedicated update would be better because it would allow me to pass in only the properties that I would need, and it would return an error if the record doesn't exist (rather than creating the record). \r\n\r\nI do agree in that UPSERT will not be of help if you don't want to create another record and instead fail(ideally) or succeed silently ignoring non-matches.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-04-23T01:37:58Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/174#issuecomment-825321966"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyODYxNjQ2MA==",
                    "body": "I think currently upsert doesn't work. this worked for me\r\n`const { data, error } = await supabase\r\n  .from('order_products')\r\n  .insert([{ some_column: 'someValue' },{ some_column: 'someValue' }], { upsert: true })`",
                    "author": {
                        "login": "nasimnow"
                    },
                    "createdAt": "2021-04-28T16:55:36Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/174#issuecomment-828616460"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgyODY0MDcwMA==",
                    "body": "@muhammednasimda Hmm, you might be using an older version of supabase-js. The `upsert` function was added since v1.7.0 and does the same thing as `insert` with `{ upsert: true }`.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-04-28T17:30:05Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/174#issuecomment-828640700"
                },
                {
                    "id": "IC_kwDODheSms43-r7L",
                    "body": "Should be solved when https://github.com/PostgREST/postgrest/issues/1959 is implemented.\r\n\r\nNew requests for this feature:\r\n\r\n- https://github.com/supabase/supabase/discussions/3447",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-10-08T23:38:51Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/174#issuecomment-939179723"
                },
                {
                    "id": "IC_kwDODheSms45ASQo",
                    "body": "How do you `upsert()` when the target table has multiple indices (enforcing some unique constrains)? I started [this discussion](https://github.com/supabase/supabase/discussions/3721), but would love to hear input from this thread too. It seems like there isn't a good way to \"swap\" values that have a unique constraint applied. ",
                    "author": {
                        "login": "tconroy"
                    },
                    "createdAt": "2021-11-01T16:18:39Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/174#issuecomment-956376104"
                },
                {
                    "id": "IC_kwDODheSms46aCFN",
                    "body": "I tried your example @steve-chavez and it works like a charm\r\n\r\nSo I wanted to create my own function:\r\n```sql\r\ncreate or replace function update_blocks_order(payload json) returns setof page_blocks as $$\r\n  update page_blocks as pb set display_order = x.display_order \r\n  from (\r\n    select * from json_populate_recordset(null::page_blocks, payload)\r\n  ) as x(id, display_order)\r\n  where pb.id = x.id\r\n  returning pb.*;\r\n$$ language sql;\r\n```\r\n\r\nbut I had the error `column reference \"display_order\" is ambiguous`. So I changed the function to\r\n```sql\r\ncreate or replace function update_blocks_order(payload json) returns setof page_blocks as $$\r\n  update page_blocks as pb set display_order = x.new_display_order \r\n  from (\r\n    select * from json_populate_recordset(null::page_blocks, payload)\r\n  ) as x(id, new_display_order)\r\n  where pb.id = x.id\r\n  returning pb.*;\r\n$$ language sql;\r\n```\r\nThen called with:\r\n```js\r\nawait supabase.rpc('update_blocks_order', {payload: [{ \"id\": 11, \"new_display_order\": 1 }, { \"id\": 1, \"new_display_order\": 2 }]}));\r\n```\r\n\r\nbut I can't make it work. new_display_order is always NULL. I tried display_order as well with the same NULL result...\r\n\r\nCould you help me? What am I doing wrong?",
                    "author": {
                        "login": "eMeRiKa13"
                    },
                    "createdAt": "2021-11-26T11:24:29Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/174#issuecomment-979902797"
                },
                {
                    "id": "IC_kwDODheSms46aGgt",
                    "body": "Finally I did it, thanks to the function:\r\n\r\n```sql\r\ncreate or replace function update_blocks_order(payload json) returns setof page_blocks as $$\r\n  update page_blocks as p set display_order = x.display_order\r\n  from (\r\n    select id, display_order from json_populate_recordset(null::page_blocks, payload)\r\n  ) as x\r\n  where p.id = x.id\r\n  returning p.*;      \r\n$$ language sql;\r\n```",
                    "author": {
                        "login": "eMeRiKa13"
                    },
                    "createdAt": "2021-11-26T11:49:48Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/174#issuecomment-979920941"
                },
                {
                    "id": "IC_kwDODheSms5Btt9o",
                    "body": "Any update to this topic?\r\n\r\nIs there a difference between projects that are newer or older? I have used upsert to update an order field successfully in newer projects, but in an older one I get this error:\r\nData that I'd like to update\r\n\r\n\r\n\r\n```Javascript\r\nconst toUpsert = [\r\n  { id: 345, order: 0, parent_id: 68 },\r\n  { id: 347, order: 1, parent_id: 68 },\r\n  { id: 353, order: 2, parent_id: 68 },\r\n  { id: 350, order: 3, parent_id: 68 },\r\n  { id: 351, order: 4, parent_id: 68 },\r\n  { id: 346, order: 5, parent_id: 68 },\r\n  { id: 348, order: 6, parent_id: 68 },\r\n  { id: 349, order: 7, parent_id: 68 },\r\n  { id: 352, order: 8, parent_id: 68 },\r\n  { id: 354, order: 9, parent_id: 68 }\r\n];\r\n\r\nconst { error: upsertError } = await dbAdmin\r\n  .from(\"journals_journalitem\")\r\n  .upsert(toUpsert);\r\n```\r\n\r\nError\r\n```Javascript\r\n{\r\n  message: 'null value in column \"name\" violates not-null constraint',\r\n  code: '23502',\r\n  details: 'Failing row contains (345, null, null, null, null, null, null, 68, null, null, null, null, 0).',\r\n  hint: null\r\n}\r\n```\r\n\r\nSo it looks like it tries to insert (?) \r\n\r\n// edit: Ok, it looks like some of my data is indeed violating the not-null constraint (maybe because I have updated the model afterwards) - so I guess, upsert validates this and raises an error\r\n\r\n\r\n",
                    "author": {
                        "login": "wiesson"
                    },
                    "createdAt": "2022-04-19T10:57:46Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/174#issuecomment-1102503784"
                },
                {
                    "id": "IC_kwDODheSms5Ez9N-",
                    "body": "@steve-chavez I still think there is a need for a proper bulk update function. \r\n\r\nWhen I try to `upsert` a number of records, it seems to fire off any `INSERT` database triggers I have on the data, which is not what I want, since I only want an update. This is true even if all the records existed already \u2013 could `upsert` be modified to only update records which already existed?\r\n",
                    "author": {
                        "login": "andrashann"
                    },
                    "createdAt": "2022-06-13T21:46:17Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/174#issuecomment-1154470782"
                },
                {
                    "id": "IC_kwDODheSms5E0QmZ",
                    "body": "> I still think there is a need for a proper bulk update function.\r\n\r\n@andrashann Yes, I agree. We're working on the feature here https://github.com/PostgREST/postgrest/pull/2311.\r\n\r\n**Edit**: Unfortunately we had [an issue](https://github.com/PostgREST/postgrest/pull/2414#issuecomment-1212647377) with [pg-safeupdate](https://github.com/eradman/pg-safeupdate) and [this feature was rolled back](https://github.com/PostgREST/postgrest/pull/2424) for v10. ",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-06-13T23:35:06Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/174#issuecomment-1154550169"
                },
                {
                    "id": "IC_kwDODheSms5KBenc",
                    "body": "As a workaround, one can:\r\n- select the lines matching the criteria (let's say the column `id`)\r\n ```\r\nconst { data: existingRowsIds } = await supabaseClient\r\n\t.from<{ id: string }>('myTable')\r\n\t.select('id')\r\n\t.in('id', ids);\r\n```\r\n- filter out the data absent from the first request result\r\n```\r\nconst existingIdsSet = new Set<string>();\r\nexistingRowsIds?.reduce((prev, { id }) => prev.add(id), existingIdsSet);\r\nconst rowsToUpdate = initialRows.filter((row) => existingIdsSet.has(row.id));\r\n```\r\n- and lastly do an upsert of the `rowsToUpdate` set. It is the initial set stripped of new lines.\r\n```\r\nawait supabaseClient\r\n\t.from('myTable')\r\n\t.upsert(rowsToUpdate, { onConflict: 'myUniqueKey' });\r\n```\r\n\r\nIt's not perfect, still requires to execute 2 requests (but potentially instead of dozens), and might have some side effects with `limit()`, but that's good enough for me for the time being.\r\n\r\n@andrashann but it will not fix your trigger issue as an upsert triggers both the insert and update triggers :/",
                    "author": {
                        "login": "f-gueguen"
                    },
                    "createdAt": "2022-09-09T12:11:29Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/174#issuecomment-1241901532"
                },
                {
                    "id": "IC_kwDODheSms5SCVKo",
                    "body": "Is anything being done here? I would need this functionality, would need to fall back on manual SQL queries only for this as I have the same problem as @andrashann ",
                    "author": {
                        "login": "MaximilianGaedig"
                    },
                    "createdAt": "2023-01-09T21:27:19Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/174#issuecomment-1376342696"
                },
                {
                    "id": "IC_kwDODheSms5SMKu-",
                    "body": "> \r\n\r\ndo you care to share some snippets for manual SQL?\r\nI also stuck on doing 50+ loops for this bulk update issue.",
                    "author": {
                        "login": "evanstinger"
                    },
                    "createdAt": "2023-01-11T15:15:59Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/174#issuecomment-1378921406"
                },
                {
                    "id": "IC_kwDODheSms5STh8J",
                    "body": "> do you care to share some snippets for manual SQL?\r\n> I also stuck on doing 50+ loops for this bulk update issue.\r\n\r\nSorry, I instead switched to Prisma ORM, supabase api was not sophisticated enough for my project",
                    "author": {
                        "login": "MaximilianGaedig"
                    },
                    "createdAt": "2023-01-12T18:38:50Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/174#issuecomment-1380851465"
                },
                {
                    "id": "IC_kwDODheSms5U0qKb",
                    "body": "This would be a great feature, excited to get it :)",
                    "author": {
                        "login": "AronAsmundsson"
                    },
                    "createdAt": "2023-02-08T18:54:24Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/174#issuecomment-1423090331"
                },
                {
                    "id": "IC_kwDODheSms5VPpue",
                    "body": "+1 from me, this is definitely needed as upsert does not do the same job",
                    "author": {
                        "login": "harryyaprakov"
                    },
                    "createdAt": "2023-02-14T18:08:04Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/174#issuecomment-1430166430"
                },
                {
                    "id": "IC_kwDODheSms5gFJ-K",
                    "body": "Where are we at on this with postgrest support? ",
                    "author": {
                        "login": "leerobert"
                    },
                    "createdAt": "2023-06-28T19:20:08Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/174#issuecomment-1611964298"
                },
                {
                    "id": "IC_kwDODheSms5hQMxt",
                    "body": "any updates?",
                    "author": {
                        "login": "TonsiTT"
                    },
                    "createdAt": "2023-07-11T23:33:06Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/174#issuecomment-1631636589"
                },
                {
                    "id": "IC_kwDODheSms5kHWw_",
                    "body": "Shame to see no updates here,\r\ni get a list of 200 records that exists already, that has to be updated each day. i would love to BULK update it instead of doing one at a time",
                    "author": {
                        "login": "Rossvold"
                    },
                    "createdAt": "2023-08-15T21:36:18Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/174#issuecomment-1679649855"
                },
                {
                    "id": "IC_kwDODheSms5kvPy-",
                    "body": "+1 for this feature.\r\n\r\nI need to update some embedding in bulks and doing so 1 by 1 is def not ideal.\r\n\r\nI guess I could try the bulk upsert?\r\n```\r\nconst { data, error } = await supabase\r\n  .from('countries')\r\n  .upsert([\r\n    { id: 1, name: 'Albania' },\r\n    { id: 2, name: 'Algeria' },\r\n  ])\r\n  .select()\r\n```\r\n\r\nEdit: The bulk upsert is working very well!",
                    "author": {
                        "login": "groyGetaway"
                    },
                    "createdAt": "2023-08-23T14:50:32Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/174#issuecomment-1690107070"
                },
                {
                    "id": "IC_kwDODheSms5mpmJJ",
                    "body": "> > I still think there is a need for a proper bulk update function.\r\n> \r\n> @andrashann Yes, I agree. We're working on the feature here [PostgREST/postgrest#2311](https://github.com/PostgREST/postgrest/pull/2311).\r\n> \r\n> **Edit**: Unfortunately we had [an issue](https://github.com/PostgREST/postgrest/pull/2414#issuecomment-1212647377) with [pg-safeupdate](https://github.com/eradman/pg-safeupdate) and [this feature was rolled back](https://github.com/PostgREST/postgrest/pull/2424) for v10.\r\n\r\nIs there a new PR or issue where the feature is being worked on now, since the roll-back? I'm still hoping for a way to bulk update one or two column in many rows without having to fetch and then pass back all of the other values in each row.",
                    "author": {
                        "login": "dmackca"
                    },
                    "createdAt": "2023-09-16T08:50:03Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/174#issuecomment-1722180169"
                },
                {
                    "id": "IC_kwDODheSms5m2fs3",
                    "body": "I need a bulk `UPDATE`, not `UPSERT`.\r\nI need to soft delete multiple resources at the same time.\r\nThis operation should not cause an `INSERT` to be executed.\r\nI don't want to know, and shouldn't know, anything other than the `id` and the current time to go in the `delete_at`.\r\n\r\nIs this the only way to do it via `rpc`?\r\nHopefully there will be an update on anything soon.",
                    "author": {
                        "login": "hwookim"
                    },
                    "createdAt": "2023-09-19T13:33:59Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/174#issuecomment-1725561655"
                },
                {
                    "id": "IC_kwDODheSms5nX9Zx",
                    "body": "> > > I still think there is a need for a proper bulk update function.\r\n> > \r\n> > \r\n> > @andrashann Yes, I agree. We're working on the feature here [PostgREST/postgrest#2311](https://github.com/PostgREST/postgrest/pull/2311).\r\n> > **Edit**: Unfortunately we had [an issue](https://github.com/PostgREST/postgrest/pull/2414#issuecomment-1212647377) with [pg-safeupdate](https://github.com/eradman/pg-safeupdate) and [this feature was rolled back](https://github.com/PostgREST/postgrest/pull/2424) for v10.\r\n> \r\n> Is there a new PR or issue where the feature is being worked on now, since the roll-back? I'm still hoping for a way to bulk update one or two column in many rows without having to fetch and then pass back all of the other values in each row.\r\n\r\nSeems like [this is the one](https://github.com/PostgREST/postgrest/pull/2693). I am waiting for this feature too!",
                    "author": {
                        "login": "skavem"
                    },
                    "createdAt": "2023-09-25T19:24:23Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/174#issuecomment-1734334065"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU4NzA2MDEyODM=",
            "number": 175,
            "title": "Use `columns` query parameter for insert",
            "body": "## Feature request\r\n\r\nWith the [columns query parameter](https://postgrest.org/en/stable/api.html#specifying-columns), the `All object keys must match` error message is avoided. Instead the direct PostgreSQL error is shown, which is more helpful for debugging.\r\n\r\nExample:\r\n\r\n```js\r\n\r\n// When making a bulk insert\r\nconst { data, error } = await supabase\r\n  .from('mytable')\r\n  .insert([\r\n    {\r\n      field: 'val2',\r\n      nonNullableField: 'val3'        \r\n    },\r\n    {\r\n      field: 'val1'     \r\n    }      \r\n])\r\n\r\n// Right now this happens\r\nconsole.log(error);\r\n{message: 'All object keys must match'}\r\n\r\n// If we were to use the columns query param, we'd get a clearer error\r\nconsole.log(error);\r\n{\r\n    \"code\": \"23502\",\r\n    \"details\": \"Failing row contains (val1, null).\",\r\n    \"hint\": null,\r\n    \"message\": \"null value in column \\\"nonNullableField\\\" violates not-null constraint\"\r\n}\r\n```\r\n\r\nNote: This doesn't solve #173 because the default value of the columns won't be applied. It would still clear the error message though.\r\n\r\n### Possible implementation\r\n\r\nIs not necessary to add a new method to the lib. Internally, the body of the bulk insert can be passed through a function that gets the keys and produces the `columns` query param.\r\n\r\nSomething like:\r\n\r\n```js\r\n\r\nlet body = [\r\n    {\r\n      field: 'val2',\r\n      nonNullableField: 'val3'        \r\n    },\r\n    {\r\n      field: 'val1',\r\n      anotherField: 'val4'     \r\n    }      \r\n];\r\n\r\n// Using https://ramdajs.com/\r\nlet columns = R.join(',', R.uniq(R.flatten(R.map(R.keys, body))));\r\n\r\nconsole.log(columns);\r\n\"field,nonNullableField,anotherField\"\r\n// append this to ?columns= in the http request\r\n```",
            "author": {
                "login": "steve-chavez"
            },
            "state": "CLOSED",
            "createdAt": "2021-04-29T04:32:01Z",
            "closedAt": "2021-05-09T01:16:29Z",
            "url": "https://github.com/supabase/postgrest-js/issues/175",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgzNTYxMTY4NA==",
                    "body": ":tada: This issue has been resolved in version 0.28.2 :tada:\n\nThe release is available on:\n- [npm package (@latest dist-tag)](https://www.npmjs.com/package/@supabase/postgrest-js/v/0.28.2)\n- [GitHub release](https://github.com/supabase/postgrest-js/releases/tag/v0.28.2)\n\nYour **[semantic-release](https://github.com/semantic-release/semantic-release)** bot :package::rocket:",
                    "author": {
                        "login": "github-actions"
                    },
                    "createdAt": "2021-05-09T01:17:48Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/175#issuecomment-835611684"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5MDE1ODI3OTU=",
            "number": 182,
            "title": "bulk rpc ",
            "body": "# Bug report\r\nproblem on bulk rpc\r\n## Describe the bug\r\nnot showing the data of each object of array requested\r\n\r\n## To Reproduce\r\n```bash\r\ncurl 'https://dtcoquimlibtwkzuzjgu.supabase.co/rest/v1/rpc/getobjectid3' \\\r\n  -H 'apikey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiYW5vbiIsImlhdCI6MTYyMTg5NjE5MiwiZXhwIjoxOTM3NDcyMTkyfQ.JHLYOdsxVkW62sjwXGMJKdfYDC4YxpcSYKAIb6LQj3E' \\\r\n  -H 'content-type: application/json' \\\r\n  --data-raw '[\r\n  {\r\n    \"user_uuid\": \"42c12e46-426f-4c58-9b49-189ccf41f84f\",\r\n    \"name_object\": \"42c12e46-426f-4c58-9b49-189ccf41f84f/1.png\"\r\n  },\r\n  {\r\n    \"user_uuid\": \"42c12e46-426f-4c58-9b49-189ccf41f84f\",\r\n    \"name_object\": \"42c12e46-426f-4c58-9b49-189ccf41f84f/bom.png\"\r\n  }\r\n]'\r\n```\r\n\r\n## Expected behavior\r\n\r\n[\"60fce85b-ace3-434f-9a86-d36775417c0e\", \"a86d76b7-91a6-4dde-9ffb-a8cb5003e2a9\"]\r\n\r\nbut the response was:\r\n[\"60fce85b-ace3-434f-9a86-d36775417c0e\"]\r\n\r\n## Screenshots\r\n\r\n<img width=\"894\" alt=\"Captura de Tela 2021-05-25 a\u0300s 19 34 18\" src=\"https://user-images.githubusercontent.com/1518223/119577272-ae2c2100-bd90-11eb-97ae-7964413fb518.png\">\r\n<img width=\"901\" alt=\"Captura de Tela 2021-05-25 a\u0300s 19 34 35\" src=\"https://user-images.githubusercontent.com/1518223/119577274-aff5e480-bd90-11eb-97dc-d8e7d9188e2a.png\">\r\n<img width=\"576\" alt=\"Captura de Tela 2021-05-25 a\u0300s 19 38 33\" src=\"https://user-images.githubusercontent.com/1518223/119577339-d6b41b00-bd90-11eb-8756-9b1cdbae0e75.png\">\r\n\r\n\r\n## Additional context\r\nI found this issue because I just like to receive the object_id when I upload a file, but we receive the key of object (bucker + name)\r\n",
            "author": {
                "login": "alexandregiordanelli"
            },
            "state": "CLOSED",
            "createdAt": "2021-05-25T22:40:21Z",
            "closedAt": "2021-08-11T09:24:24Z",
            "url": "https://github.com/supabase/postgrest-js/issues/182",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg0ODMxOTAzNQ==",
                    "body": "Try adding the `Prefer: params=multiple-objects` header.\r\n\r\n```bash\r\ncurl -H 'Prefer: params=multiple-objects'...\r\n```\r\n\r\nMore details at https://postgrest.org/en/stable/api.html#bulk-call",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-05-25T22:49:11Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/182#issuecomment-848319035"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg0ODMyMjM3Mw==",
                    "body": "Wow.. It works, but the supabase js client does not put this header. \r\n<img width=\"519\" alt=\"Captura de Tela 2021-05-25 a\u0300s 19 56 13\" src=\"https://user-images.githubusercontent.com/1518223/119578643-49be9100-bd93-11eb-92cd-060795c50ea3.png\">\r\n\r\nhttps://supabase.io/docs/reference/javascript/rpc#bulk-call\r\n\r\n\r\nversion: \"@supabase/supabase-js\": \"^1.11.15\",",
                    "author": {
                        "login": "alexandregiordanelli"
                    },
                    "createdAt": "2021-05-25T22:57:56Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/182#issuecomment-848322373"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg0ODMyODUxOQ==",
                    "body": "> but the supabase js client does not put this header.\r\n\r\nYeah, true. Could you make your `getobjectid3` function use an array instead of many parameters? That would work with the current `supabase-js`.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-05-25T23:07:16Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/182#issuecomment-848328519"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg0ODM0Mzc0OQ==",
                    "body": "Sure, I created a workaround. Do I close this issue?",
                    "author": {
                        "login": "alexandregiordanelli"
                    },
                    "createdAt": "2021-05-25T23:45:55Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/182#issuecomment-848343749"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg0ODQwNDI0OQ==",
                    "body": "@alexandregiordanelli I think we should add the SQL function array parameter clarification on the [supabase-js bulk call docs](https://supabase.io/docs/reference/javascript/rpc#bulk-call), then we can close.\r\n\r\nThe thing about the `Prefer: params=multiple-objects` header, is that it's not as efficient as mentioned on the [postgrest docs](https://postgrest.org/en/stable/api.html#bulk-call):\r\n\r\n> If you have large payloads to process, it\u2019s preferrable you instead use a function with an array parameter or json parameter, as this will be more efficient.\r\n\r\n(Underlyingly, it uses a lateral query that calls the function N times, each for every parameter)\r\n\r\nSo I don't think it should be supported in `supabase-js`, instead we can recommend the array parameter option.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-05-26T02:15:51Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/182#issuecomment-848404249"
                },
                {
                    "id": "IC_kwDODheSms41ceP8",
                    "body": "The docs has been updated with Steve's recommendation, so closing this.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-08-11T09:24:24Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/182#issuecomment-896656380"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5MDM1OTgxNTM=",
            "number": 183,
            "title": "Create maybeSingle() function",
            "body": "We have a single() function:\r\n\r\n```js\r\nsupabase\r\n.from('table')\r\n.select()\r\n.eq('name', 'xx')\r\n.single()\r\n```\r\n\r\nIf this function returns either 0 rows, or >1 row, then it throws an error\r\n\r\n## RFC\r\n\r\nAdd an option/param to this function `throws` which can have:\r\n\r\n- `always` (default) - current behavior\r\n- `never` - catches the error from PostgREST and just returns `{ data: null, error: null }`\r\n\r\nthis is particularly useful when there are 0 rows. For example in the latest stream: https://youtu.be/p561ogKZ63o?t=2637. In this case I dont really mind if there are no rows - if there was no data it's OK, but it's returning the error too.\r\n\r\nThe one caveat - what if the query fetches multiple rows? Then the data is `null` and it looks like \"no\" rows. I don't know how to circumvent this, because the error from PostgREST is the same for both 0 & >1 row.\r\n\r\n",
            "author": {
                "login": "kiwicopple"
            },
            "state": "CLOSED",
            "createdAt": "2021-05-21T06:13:59Z",
            "closedAt": "2021-06-09T01:24:12Z",
            "url": "https://github.com/supabase/postgrest-js/issues/183",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg0NTcwMDIxNg==",
                    "body": "That's odd - I thought doing `single()` on 0/many rows just returns PostgREST's error response instead of throwing? This is what I get testing locally:\r\n```js\r\n{\r\n  error: {\r\n    details: 'Results contain 0 rows, application/vnd.pgrst.object+json requires 1 row',\r\n    message: 'JSON object requested, multiple (or no) rows returned'\r\n  },\r\n  data: null,\r\n  count: null,\r\n  status: 406,\r\n  statusText: 'Not Acceptable',\r\n  body: null\r\n}\r\n```\r\n\r\nWe can distinguish 0 vs. >1 from `error.details`.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-05-21T06:43:20Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/183#issuecomment-845700216"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg0NTcwNjg1OQ==",
                    "body": "You're right - it does, however for this use-case I don't want an error at all. Currently the code is:\r\n\r\n```js\r\n     let { data, error } = await supabase\r\n        .from('profiles')\r\n        .select(`username, website, avatar_url`)\r\n        .eq('id', user.id)\r\n        .single()\r\n\r\n      if (error) { // --------- this is triggered\r\n        throw error\r\n      }\r\n```\r\n\r\nAnd I would like to let this pass:\r\n\r\n```js\r\n     let { data, error } = await supabase\r\n        .from('profiles')\r\n        .select(`username, website, avatar_url`)\r\n        .eq('id', user.id)\r\n        .single({  throws: 'never' }) // --------- prevent the error being returned\r\n\r\n      if (error) {\r\n        throw error\r\n      }\r\n```\r\n\r\nAlternatively, I guess I can do\r\n\r\n```js\r\n     let { data, error, status } = await supabase\r\n        .from('profiles')\r\n        .select(`username, website, avatar_url`)\r\n        .eq('id', user.id)\r\n        .single()\r\n\r\n      if (error && status !== 406 ) { // --------- could do this\r\n        throw error\r\n      }\r\n```\r\n\r\nAlthough it's a bit harder to grok what's going on. Would love some thoughts. The final option is definitely doable but we will need to document it (wheras the param is essentially self-documenting)",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-05-21T06:55:24Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/183#issuecomment-845706859"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg0NTc0MTYwMg==",
                    "body": "Maybe we should create a new method singleOrEmpty() and leave single() as it is",
                    "author": {
                        "login": "phamhieu"
                    },
                    "createdAt": "2021-05-21T07:55:04Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/183#issuecomment-845741602"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg0NTc0NjQ2Nw==",
                    "body": "\ud83d\udc4d\r\n\r\n[Slonik](https://github.com/gajus/slonik) uses `one()` analogous to `single()` and `maybeOne()` for 0 or 1.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-05-21T08:03:26Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/183#issuecomment-845746467"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg0NTc4NjczNg==",
                    "body": "> 0 or 1\r\n\r\n@steve-chavez - is there any way to determine that it is 0 or 1 (not many) from the PostgREST response?",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-05-21T08:43:17Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/183#issuecomment-845786736"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg0NjA3NjUyOQ==",
                    "body": "Also +1 for leaving single() as it is, users have asked about erring for a non-single row response: https://github.com/supabase/supabase/discussions/1606\r\n\r\n\"I expect an error if authenticated user try to fetch something which is not found\"\r\n\r\n> Is there any way to determine that it is 0 or 1 (not many) from the PostgREST response?\r\n\r\n@kiwicopple Yes, with a combination of the status code + body `error.details`. As Bobbie mentioned [above](https://github.com/supabase/supabase-js/issues/176#issuecomment-845700216), the error message has the number rows in `error.details` as `Results contain <number> rows`. This error message has been stable for some time and it's [tested](https://github.com/PostgREST/postgrest/blob/5c75f0dcc295e6bd847af6d9703fad5b9c3d76c9/test/Feature/SingularSpec.hs#L66-L114).\r\n\r\nSo for 0, the status code is 406 plus `Results contain 0 rows`. For 1, the status code is 200. Many should be 406 plus `Results contain <x> rows`.\r\n\r\nThe above plus some internal logic in the library could make a `maybeSingle()` method give `{ data: null, error: null}` or `{ data: <obj>, error: null}` or `{ data: <obj>, error: <obj>}`.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-05-21T16:18:32Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/183#issuecomment-846076529"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg0NjMzNzUxNQ==",
                    "body": "OK great - a new `maybeSingle()` function sound great. Thanks for the input everyone.\r\n\r\nIt looks like the error in the OP video is returning `multiple (or no) rows` as an error message so I'll dig into the error response and add this function once I have clarity where it's coming from\r\n\r\n![image](https://user-images.githubusercontent.com/10214025/119212256-b878c180-bae9-11eb-8ada-e9e17ea482b2.png)\r\n",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-05-22T02:40:36Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/183#issuecomment-846337515"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg1NzMwMDU1NA==",
                    "body": ":tada: This issue has been resolved in version 0.30.0 :tada:\n\nThe release is available on:\n- [npm package (@latest dist-tag)](https://www.npmjs.com/package/@supabase/postgrest-js/v/0.30.0)\n- [GitHub release](https://github.com/supabase/postgrest-js/releases/tag/v0.30.0)\n\nYour **[semantic-release](https://github.com/semantic-release/semantic-release)** bot :package::rocket:",
                    "author": {
                        "login": "github-actions"
                    },
                    "createdAt": "2021-06-09T01:25:24Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/183#issuecomment-857300554"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5MDY3MDg5ODU=",
            "number": 186,
            "title": "Fetch data as CSV instead of JSON",
            "body": "I would like to download a table or certain rows of a table in CSV format instead of JSON.\r\n\r\nPostgres has support for this here: https://postgrest.org/en/v7.0.0/api.html#response-format\r\n\r\nSo in theory, only the Accept header needs to be made configurable + disable the parsing after getting the response.\r\n\r\n#### Use case\r\nI am building research tools and researchers like their dataframes build upon CSV files.",
            "author": {
                "login": "nstrelow"
            },
            "state": "CLOSED",
            "createdAt": "2021-05-30T10:25:33Z",
            "closedAt": "2021-06-16T14:40:52Z",
            "url": "https://github.com/supabase/postgrest-js/issues/186",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg1MTAxMTM3NQ==",
                    "body": "> So in theory, only the Accept header needs to be made configurable + disable the parsing after getting the response.\r\n\r\nAn built in parser that converts to the same object format as it currently is would also be amazing for those of us who just want to use CSV for response size reasons. In my use case, the JSON overhead makes up for around 75% of the response size, which is pretty common when not storing large strings.",
                    "author": {
                        "login": "andreivreja"
                    },
                    "createdAt": "2021-05-30T14:45:02Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/186#issuecomment-851011375"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg1MTA2MTk4OA==",
                    "body": "Awesome your PR!\r\nWill probably do the same for postgrest-dart, which I am actually using.\r\n\r\nI agree, lower size using csv is probably very great, the parsing could be a bit complicated though.",
                    "author": {
                        "login": "nstrelow"
                    },
                    "createdAt": "2021-05-30T21:11:32Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/186#issuecomment-851061988"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg2MjQzOTE5NA==",
                    "body": "Closed in #187.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-06-16T14:40:51Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/186#issuecomment-862439194"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5MTIyODUxMDQ=",
            "number": 189,
            "title": "Add a `skipDuplicates` option to insert",
            "body": "Requested in https://github.com/supabase/supabase/discussions/1834. PostgREST can skip duplicates by using the `Prefer: resolution=ignore-duplicates` header as documented [here](https://postgrest.org/en/stable/api.html#upsert).\r\n\r\n```js\r\nconst { data, error } = await supabase\r\n  .from('cities')\r\n  .insert(\r\n    [\r\n      { name: 'The Shire', country_id: 554 },\r\n      { name: 'Rohan', country_id: 555 }\r\n    ],\r\n    { skipDuplicates: true })\r\n```\r\n\r\nThe option could also be named `ignoreDuplicates`.",
            "author": {
                "login": "steve-chavez"
            },
            "state": "CLOSED",
            "createdAt": "2021-06-05T14:21:30Z",
            "closedAt": "2021-06-22T02:57:34Z",
            "url": "https://github.com/supabase/postgrest-js/issues/189",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg1NTI0ODQyNA==",
                    "body": "Should this not be on `upsert()` instead? Does `on_conflict` matter with `Prefer: resolution=ignore-duplicates`?",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-06-05T14:30:59Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/189#issuecomment-855248424"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDg1NTI1NTg2MQ==",
                    "body": "> Does on_conflict matter with Prefer: resolution=ignore-duplicates?\r\n\r\nYes, it considers the `on_conflict` constraint for choosing what duplicate column to ignore.\r\n\r\n> Should this not be on upsert() instead? \r\n\r\nYeah, I think it can be included on `upsert` instead.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-06-05T15:29:54Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/189#issuecomment-855255861"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5MTgyMzg5MTk=",
            "number": 190,
            "title": "`count` always runs on the whole table",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nThe `count` field on the response always represents the whole table despite filtering etc. This is because it's retrieved from `Prefer: count={exact|estimated|planned}`. It should instead come from `Content-Range` without the prefer `count` parameter.\r\n\r\n## To Reproduce\r\n\r\n1. Run a `.from().select().limit(1)`\r\n2. Check the `count` (it's not 0 or 1).\r\n\r\n## Expected behavior\r\n\r\nIt should be 0 or 1.\r\n\r\n## Additional context\r\n\r\nFor now we should just let `count` represent the right value\u2014for [supabase-js v2](https://github.com/supabase/supabase-js/issues/170) we should use the `Prefer: count` parameter in a dedicated `count` call and maybe `rpc()`.",
            "author": {
                "login": "soedirgo"
            },
            "state": "CLOSED",
            "createdAt": "2021-06-11T05:16:06Z",
            "closedAt": "2022-07-18T04:52:22Z",
            "url": "https://github.com/supabase/postgrest-js/issues/190",
            "comments": [
                {
                    "id": "IC_kwDODheSms5GtzbL",
                    "body": "I think a typical use case of count is for pagination, so it would make sense to respect filters like `match` or `eq`, but I wonder if `count` should respect modifiers like `limit` or `range`. \r\n\r\nWhen I tested it, count did respect filters, but ignored modifiers, which feels like the desired behavior!",
                    "author": {
                        "login": "dshukertjr"
                    },
                    "createdAt": "2022-07-17T05:56:01Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/190#issuecomment-1186412235"
                },
                {
                    "id": "IC_kwDODheSms5GvKF-",
                    "body": "Yup, I can't repro the issue anymore either. Thanks for looping back in!",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-07-18T04:52:22Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/190#issuecomment-1186767230"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5MzExMzA0NjI=",
            "number": 196,
            "title": "Make `filter` and `not` behave like their per-filter method counterparts",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nRight now `filter` and `not` just takes the operator and value as a string without additional preprocessing. This means e.g. we can't use lists in `NOT IN` (see https://github.com/supabase/supabase/discussions/2055). It also causes some confusion when it comes to filter methods that use a different name to PostgREST, e.g. `cs` vs. `contains`.\r\n\r\n## Describe the solution you'd like\r\n\r\n- Make `not` switch on the operator and basically copy the code for each filter methods,\r\n- make `not` accept e.g. `contains`, `containedBy`, etc.,\r\n- keep `filter` as-is, but repurpose it as some sort of escape hatch.\r\n\r\nThis allows us to make per-filter methods and `not` cover 99% of the cases, and for the 1% we can use `filter`.\r\n\r\nQuestion: what do we do about options like `foreignTable`, textSearch `config` in `not`?\r\n\r\n## Describe alternatives you've considered\r\n\r\nNone.\r\n\r\n## Additional context\r\n\r\nhttps://github.com/supabase/supabase/discussions/2055\r\nhttps://github.com/supabase/postgrest-dart/issues/32\r\n",
            "author": {
                "login": "soedirgo"
            },
            "state": "CLOSED",
            "createdAt": "2021-06-28T03:28:44Z",
            "closedAt": "2022-09-27T07:06:35Z",
            "url": "https://github.com/supabase/postgrest-js/issues/196",
            "comments": [
                {
                    "id": "IC_kwDODheSms5LC_bH",
                    "body": "As per https://github.com/supabase/postgrest-js/pull/279#issuecomment-1147334327, we want to eventually move away from stringly-typed params.\r\n\r\nThe current way these filters work, which requires raw PostgREST syntax, is awkward, but I doubt this proposal would make it that much better, so closing this.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-27T07:06:31Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/196#issuecomment-1259075271"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5MzYzNzE3NDg=",
            "number": 197,
            "title": "Filter source table based on the embedded table(inner join)",
            "body": "This is a common use case. Examples:\r\n\r\n- https://github.com/supabase/supabase/discussions/2207\r\n- https://github.com/supabase/supabase/discussions/1827#discussioncomment-828040\r\n- https://github.com/supabase/supabase/discussions/1682#discussioncomment-775650\r\n- https://github.com/supabase/supabase/discussions/2234#discussioncomment-973547\r\n- https://github.com/supabase/supabase/discussions/1169#discussioncomment-993560 (order by child table)\r\n- https://github.com/supabase/supabase/discussions/2399\r\n- https://github.com/supabase/supabase/discussions/2438\r\n- https://github.com/supabase/supabase/discussions/3155\r\n\r\nFor solving that on the backend, https://github.com/PostgREST/postgrest/issues/1075 needs to be cleared.\r\n\r\nCurrently the users need to work around this on the client side.\r\n\r\n## Alternative\r\n\r\nHowever, an alternative could be doing the filtering on `postgrest-js` itself. When a user does this:\r\n\r\n```js\r\nawait supabase\r\n    .from('messages')\r\n    .select('id, user_id, users(id, username)')\r\n    .filter('users.username', 'eq', 'Calebe')\r\n```\r\n\r\n`postgrest-js` can detect that the embedded table(`users`) filter should also filter the source table(`messages`). So, if a row has the `users` attribute as `null` or `[]`, then the whole row can be filtered. Check the example on https://github.com/supabase/supabase/discussions/2207#discussion-3444423 for sample outputs.\r\n\r\nTo enable this mode, an option to filters could be added. Like:\r\n\r\n```js\r\neq('users.username', 'Calebe', {filterSource: true})\r\n// or perhaps as \"inner\", that would reflect what postgrest would do eventually\r\neq('users.username', 'Calebe', {inner: true})\r\n```\r\n\r\nThis could also be enabled by default, because is what most users would expect. As mentioned on https://github.com/supabase/supabase/discussions/2207:\r\n\r\n> \"I expected more atomic results considering the filter will exclude the result at the primary level.\"\r\n\r\n### Drawback\r\n\r\n> \"I can't use this approach on the table that could lead to big dataset.\"",
            "author": {
                "login": "steve-chavez"
            },
            "state": "CLOSED",
            "createdAt": "2021-07-04T04:03:00Z",
            "closedAt": "2021-12-03T01:50:02Z",
            "url": "https://github.com/supabase/postgrest-js/issues/197",
            "comments": [
                {
                    "id": "IC_kwDODheSms41QFLM",
                    "body": "Hi @steve-chavez, is this schedule to supabase 2.0? It is a real need \ud83d\udc4d\ud83c\udffc \ud83e\udd47 ",
                    "author": {
                        "login": "calebeaires"
                    },
                    "createdAt": "2021-08-05T12:10:18Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-893407948"
                },
                {
                    "id": "IC_kwDODheSms41V8__",
                    "body": "Hey @calebeaires. Yes, I'll work on this for the new postgrest version.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-08-09T04:46:31Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-894947327"
                },
                {
                    "id": "IC_kwDODheSms41in7V",
                    "body": "When can you expect it? @steve-chavez ",
                    "author": {
                        "login": "KULTI1995"
                    },
                    "createdAt": "2021-08-13T08:04:36Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-898268885"
                },
                {
                    "id": "IC_kwDODheSms42bXbf",
                    "body": "+1 - I need this too.",
                    "author": {
                        "login": "zbaloch"
                    },
                    "createdAt": "2021-09-05T12:14:16Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-913143519"
                },
                {
                    "id": "IC_kwDODheSms42_hZ_",
                    "body": "+1",
                    "author": {
                        "login": "edwinquaihoi"
                    },
                    "createdAt": "2021-09-20T04:06:08Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-922621567"
                },
                {
                    "id": "IC_kwDODheSms43FPh_",
                    "body": "+1 I am looking forward for this so it will get support for https://github.com/supabase/supabase-flutter/ too",
                    "author": {
                        "login": "iampopal"
                    },
                    "createdAt": "2021-09-21T15:51:54Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-924121215"
                },
                {
                    "id": "IC_kwDODheSms43I1A9",
                    "body": "+1 deff need ",
                    "author": {
                        "login": "chrisLoPresti"
                    },
                    "createdAt": "2021-09-22T15:55:07Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-925061181"
                },
                {
                    "id": "IC_kwDODheSms43JD1Y",
                    "body": "+1 - Nextjs + getServerSideProps()",
                    "author": {
                        "login": "alexverdaguer"
                    },
                    "createdAt": "2021-09-22T17:12:15Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-925121880"
                },
                {
                    "id": "IC_kwDODheSms43qjG0",
                    "body": "An update here. This one is already solved at the [PostgREST side](https://github.com/PostgREST/postgrest/pull/1949) :tada:\r\n\r\nA new release for PostgREST will be made soon, then all Supabase instances will be upgraded to this release.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-10-04T22:21:30Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-933900724"
                },
                {
                    "id": "IC_kwDODheSms43qrGa",
                    "body": "@steve-chavez you are my hero! \ud83e\udd70",
                    "author": {
                        "login": "mstade"
                    },
                    "createdAt": "2021-10-04T23:30:58Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-933933466"
                },
                {
                    "id": "IC_kwDODheSms43z-oi",
                    "body": "Can we have an estimated release date?",
                    "author": {
                        "login": "rahuldubey093"
                    },
                    "createdAt": "2021-10-06T14:38:08Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-936372770"
                },
                {
                    "id": "IC_kwDODheSms45Po4T",
                    "body": "waiting for this fix.. by when can we expect this feature?",
                    "author": {
                        "login": "meghaboggaram"
                    },
                    "createdAt": "2021-11-04T02:44:58Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-960400915"
                },
                {
                    "id": "IC_kwDODheSms46cfaD",
                    "body": "Hey everyone\r\n\r\nPostgrest has launched the [new stable 9.0.0 version](https://github.com/PostgREST/postgrest/releases/tag/v9.0.0). Has anyone capable to make a request to [update the homebrew](https://formulae.brew.sh/formula/postgrest) formula?",
                    "author": {
                        "login": "calebeaires"
                    },
                    "createdAt": "2021-11-27T11:57:30Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-980547203"
                },
                {
                    "id": "IC_kwDODheSms46uCiy",
                    "body": "All Supabase instances have this feature now!\r\n\r\nhttps://supabase.com/blog/2021/11/28/postgrest-9#resource-embedding-with-inner-joins",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-12-03T01:50:02Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-985147570"
                },
                {
                    "id": "IC_kwDODheSms467K_N",
                    "body": "Thank you for the release!\r\n\r\nHowever, I couldn't figure out how to use the !inner keyword in my query:\r\n\r\n```\r\nfinal response = await supabase\r\n      .from('users')\r\n      .select('*, connection:users_connections!users_connections_otherUserUUID_fkey(*)')\r\n      .eq('connection.userID', currentUserUID)\r\n      .not('connection.beingBlocked', 'eq', true)\r\n      .not('connection.blocking', 'eq', true)\r\n      .execute(count: CountOption.exact);\r\n```\r\n\r\nI have tried something like:\r\n` .select('*, connection:users_connections!inner!users_connections_otherUserUUID_fkey(*)')`\r\nbut it didn't work.",
                    "author": {
                        "login": "rahuldubey093"
                    },
                    "createdAt": "2021-12-08T08:12:49Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-988590029"
                },
                {
                    "id": "IC_kwDODheSms468lRb",
                    "body": "> but it didn't work.\r\n\r\n@rahuldubey093 What's the error message?",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-12-08T16:17:35Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-988959835"
                },
                {
                    "id": "IC_kwDODheSms468pQM",
                    "body": "> What's the error message?\r\n\r\nThis is the response\r\n`response: {data: [], status: 200, error: null, count: 0}\r\n`\r\n\r\n@steve-chavez It isn't returning any data, even if the rows meet the condition\r\n",
                    "author": {
                        "login": "rahuldubey093"
                    },
                    "createdAt": "2021-12-08T16:36:00Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-988976140"
                },
                {
                    "id": "IC_kwDODheSms468t6Z",
                    "body": "@rahuldubey093 What's the result without using the `!inner` keyword?",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-12-08T16:59:00Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-988995225"
                },
                {
                    "id": "IC_kwDODheSms4685vG",
                    "body": ">  What's the result without using the `!inner` keyword?\r\n\r\n@steve-chavez The query returns results but the below conditions don't make any difference:\r\n`.not('connection.beingBlocked', 'eq', true)\r\n      .not('connection.blocking', 'eq', true)`\r\n\r\nI still get rows where 'connection.beingBlocked' == true",
                    "author": {
                        "login": "rahuldubey093"
                    },
                    "createdAt": "2021-12-08T17:58:59Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-989043654"
                },
                {
                    "id": "IC_kwDODheSms469BJX",
                    "body": "Ok, so doing `!inner` doesn't return any rows on:\r\n\r\n```dart\r\nfinal response = await supabase\r\n      .from('users')\r\n      .select('*, connection:users_connections!users_connections_otherUserUUID_fkey!inner(*)')\r\n      .eq('connection.userID', currentUserUID)\r\n      .not('connection.beingBlocked', 'eq', true)\r\n      .not('connection.blocking', 'eq', true)\r\n      .execute(count: CountOption.exact);\r\n```\r\n\r\nAre you sure there are rows that fulfill all the conditions? Try by removing some filters and checking the data returned. ",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-12-08T18:28:07Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-989074007"
                },
                {
                    "id": "IC_kwDODheSms46_ybL",
                    "body": "> Are you sure there are rows that fulfill all the conditions? Try by removing some filters and checking the data returned.\r\n\r\n@steve-chavez You are right! Some rows had null values that's why it wasn't working. Now I have made sure none of the rows have null value on the queried columns and the !inner keyword is working as expected! Without the !inner keyword the query was still returning rows which met the conditions.\r\n\r\nThank you so much \ud83d\udc4d\ud83c\udffb  ",
                    "author": {
                        "login": "rahuldubey093"
                    },
                    "createdAt": "2021-12-09T12:18:01Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-989800139"
                },
                {
                    "id": "IC_kwDODheSms47MMPs",
                    "body": "Is the `contains` modifier supported with this change? Code snippet below showing the issue.\r\n\r\n```\r\nconst query = supabase\r\n    .from<RawSearchResult>('games')\r\n    .select(\r\n      `\r\n    id,\r\n    name,\r\n    cover_url,\r\n    release_date,\r\n    genre_entries!inner(genre_id),\r\n    platform_entries!inner(platform_id)\r\n  `,\r\n    )\r\n    .limit(limit);\r\n\r\n// Works\r\nif (platformFilters.length) {\r\n  query.in('platform_entries.platform_id', platformFilters);\r\n}\r\n\r\n// Doesn't work\r\nif (platformFilters.length) {\r\n  query.contains('platform_entries.platform_id', platformFilters);\r\n}\r\n```\r\nIf I use the `in` operator, the query works but it filters out all of the other platforms. `contains` throws an error:\r\n`{\"message\":\"operator does not exist: smallint @> unknown\",\"code\":\"42883\",\"hint\":\"No operator matches the given name and argument types. You might need to add explicit type casts.\",\"details\":null}`\r\n\r\nFor context, if I don't apply any filters my response looks like this (the JSON in this case doesn't include all of the `platform_entries` due to the issue I described above):\r\n`[{\"id\":81085,\"name\":\"Dark Souls: Remastered\",\"cover_url\":\"co2uro\",\"release_date\":1527033600,\"platform_entries\":[{\"platform_id\":130}],\"genre_entries\":[{\"genre_id\":12}, \r\n {\"genre_id\":25}, \r\n {\"genre_id\":31}]}]\r\n`",
                    "author": {
                        "login": "johnhforrest"
                    },
                    "createdAt": "2021-12-14T00:48:50Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-993051628"
                },
                {
                    "id": "IC_kwDODheSms47PUY3",
                    "body": "@johnhforrest The same `contains` filter fails if you remove the `!inner` keyword right? This problem should be orthogonal to `!inner`.\r\n\r\nFor `contains`(which is translated to `@>` in PostgreSQL) to work both operands should be arrays as defined in\r\nhttps://www.postgresql.org/docs/current/functions-array.html#ARRAY-OPERATORS-TABLE\r\n\r\nAnd `platform_id` is a smallint as mentioned in the error message.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-12-14T18:41:27Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-993871415"
                },
                {
                    "id": "IC_kwDODheSms47QzAy",
                    "body": "Makes sense, I thought it might have something to do with me misunderstanding the `contains` query but I figured I would ask. Appreciate the help!",
                    "author": {
                        "login": "johnhforrest"
                    },
                    "createdAt": "2021-12-15T03:31:00Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-994258994"
                },
                {
                    "id": "IC_kwDODheSms48Vmuw",
                    "body": "Does this work with multiple _.or()_ conditions?\r\n\r\nI have a quite simple (working) SQL query which needs to be \"translated\" to Supabase SDK:\r\n`SELECT * FROM items \r\n   JOIN manufacturers ON items.manufacturer_id = manufacturers.id\r\n   WHERE items.name = 'Apple' OR manufacturers.name = 'Apple'`\r\n\r\nSo by searching for a keyword (e.g. 'Apple') I'd like to query both tables _items_ and _manufacturers_ for their _name_ column.\r\n\r\nMy approach would be something like this, although it doesn't return any value:\r\n```\r\nsupabase\r\n  .from('items')\r\n  .select('*, manufacturers!inner(*)')\r\n  .or('name.eq.Apple') // Removing this returns a value\r\n  .or('name.eq.Apple', { foreignTable: 'manufacturers' })\r\n```\r\n\r\nHowever the SQL query works fine so I'm not sure if I have used the _!inner_ correctly?",
                    "author": {
                        "login": "kheber92"
                    },
                    "createdAt": "2022-01-13T16:25:33Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-1012296624"
                },
                {
                    "id": "IC_kwDODheSms48Wi9j",
                    "body": "> Does this work with multiple .or() conditions?\r\n\r\nNo, you cannot apply `or` across embedded tables(with `!inner` or without). See https://github.com/PostgREST/postgrest/discussions/2014.\r\n\r\nFor that case you'll need a function and call it through rpc.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-01-13T21:50:07Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-1012543331"
                },
                {
                    "id": "IC_kwDODheSms48YKAD",
                    "body": "> > Does this work with multiple .or() conditions?\r\n> \r\n> No, you cannot apply `or` across embedded tables(with `!inner` or without). See [PostgREST/postgrest#2014](https://github.com/PostgREST/postgrest/discussions/2014).\r\n> \r\n> For that case you'll need a function and call it through rpc.\r\n\r\nThanks a lot, I have checked rpc. \r\nUnfortunately, the only suitable return type for Functions is `record` and this returns a single record only. In my case I need to fetch multiple. I know Functions are Alpha Preview so maybe multiple records are possible in the future.\r\n\r\nHowever I'm wondering if this common SQL query (see my previous post) is not possible with Supabase at the moment?\r\n\r\nQuerying two tables (connected by a foreign key) by the conditions with the logical `OR`, like this:\r\n`SELECT * FROM table_a JOIN table_b ON table_a.foreign_key_id = table_b.id WHERE table_a.name = 'abc' OR table_b.name = 'abc'`",
                    "author": {
                        "login": "kheber92"
                    },
                    "createdAt": "2022-01-14T09:48:47Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-1012965379"
                },
                {
                    "id": "IC_kwDODheSms48Zy1c",
                    "body": "> Unfortunately, the only suitable return type for Functions is record and this returns a single record only. In my case I need to fetch multiple.\r\n\r\nYou can do `CREATE FUNCTION ... RETURNS SETOF <table>` to return multiple rows of a table.\r\n\r\n>  (see my previous post) is not possible with Supabase at the moment?\r\n\r\nNo, as I mentioned [above](https://github.com/supabase/postgrest-js/issues/197#issuecomment-1012543331) you can't combine OR conditions of different tables. You'll need RPC for this case.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-01-14T19:24:27Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-1013394780"
                },
                {
                    "id": "IC_kwDODheSms48bWu4",
                    "body": "@steve-chavez  One more issue potentially related to this unless it's just a general limitation on supabase requests. I can also open a separate issue to track this if preferred.\r\n\r\nIn the snippet below, `titleIds` is an array of strings with 386 elements. Each string is a string ID of shape `'2024145056'`.\r\n\r\nThis query generates an HTTP 502 response 100% of the time. Here's the error:\r\n```\r\n{\r\n  error: {\r\n    message: 'An invalid response was received from the upstream server'\r\n  },\r\n  data: null,\r\n  count: null,\r\n  status: 502,\r\n  statusText: 'Bad Gateway',\r\n  body: null\r\n}\r\n```\r\n\r\nIf I slice the array to 150 elements, the query works just fine with no other changes. My hunch is that I'm hitting some sort of undocumented limit but 386 is not a huge array and it's certainly not a large request in terms of bytes.\r\n\r\nCode snippet:\r\n\r\n```\r\ntype JoinedResult = Pick<definitions['games'], 'id' | 'name'> & {\r\n  collection_entries: Pick<definitions['collection_entries'], 'status_id'>[];\r\n  xbox_games: Pick<definitions['xbox_games'], 'title_id'>[];\r\n};\r\n\r\nconst response = await supabase\r\n    .from<JoinedResult>('games')\r\n    .select(\r\n      'id, name, collection_entries (status_id), xbox_games!inner(title_id)',\r\n    )\r\n    // @ts-ignore: inner join types\r\n    .in('xbox_games.title_id', titleIds);\r\n```",
                    "author": {
                        "login": "johnhforrest"
                    },
                    "createdAt": "2022-01-16T03:36:23Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-1013803960"
                },
                {
                    "id": "IC_kwDODheSms48bf01",
                    "body": "> All Supabase instances have this feature now!\r\n> \r\n> https://supabase.com/blog/2021/11/28/postgrest-9#resource-embedding-with-inner-joins\r\n\r\ndoes not work with typescript, because in filter it expect only parameter from current table and not from embedded table.",
                    "author": {
                        "login": "roker15"
                    },
                    "createdAt": "2022-01-16T09:32:38Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-1013841205"
                },
                {
                    "id": "IC_kwDODheSms48iHrA",
                    "body": "@johnhforrest I think that might be the URL length limit. See https://github.com/PostgREST/postgrest-docs/issues/417 for a workaround.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-01-18T16:22:23Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-1015577280"
                },
                {
                    "id": "IC_kwDODheSms48mZWs",
                    "body": "@steve-chavez that was it. Moving to RPC fixed my issue. Thanks!",
                    "author": {
                        "login": "johnhforrest"
                    },
                    "createdAt": "2022-01-19T17:28:52Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-1016698284"
                },
                {
                    "id": "IC_kwDODheSms48wNxn",
                    "body": "How did you do this with RPC?\r\n\r\nI need to return a JSON response using just the HTTP rest api (using AppGyver).\r\nAny idea's how I get RPC to return the below SQL Script as JSON? I should mention that the script runs perfect and returns the correct results when I put it in the SQL Editor page.\r\n\r\nIn the docs I only find this: https://[MYSUB].supabase.co/rest/v1/table1?select=some_column,other_table(foreign_key)\r\n\r\n```\r\nSELECT\r\n  table1.date,\r\n  table1.time,\r\n  table1.vehicle,\r\n  table2.type_name,\r\n  table3.status_name,\r\n  table4.sim_name,\r\n  table5.scenario_name,\r\n  table6.staff_name\r\nFROM table1\r\nINNER JOIN table2 ON table1.type = table2.id\r\nINNER JOIN table3 ON table1.status = table3.id\r\nINNER JOIN table4 ON table1.sim = table4.id\r\nINNER JOIN table5 ON table1.scenario = table5.id\r\nINNER JOIN table6 ON table1.staff = table6.id\r\n```\r\nThank you in advance!\r\n",
                    "author": {
                        "login": "EnzoBitMatrix"
                    },
                    "createdAt": "2022-01-22T13:49:04Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-1019272295"
                },
                {
                    "id": "IC_kwDODheSms48wig-",
                    "body": "@adrianstoker You need to put the query inside a function:\r\n\r\n```sql\r\ncreate or replace function my_func() returns setof table(\"date\" date, \"time\" timestamp/*complete your columns here*/) as $$\r\nSELECT\r\n  table1.date,\r\n  table1.time,\r\n  table1.vehicle\r\n--...\r\n$$ language sql stable;\r\n```\r\n\r\nThen call it like:\r\n\r\n```https\r\nGET https://[MYSUB].supabase.co/rest/v1/rpc/my_func\r\n```\r\n\r\nThe REST API will convert it to json automatically.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-01-22T21:00:33Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/197#issuecomment-1019357246"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5NTIzMzg3MDM=",
            "number": 198,
            "title": "Ordering source table using foreign table",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nOrdering selected rows using `foreignTable` option does not work\r\n\r\n## To Reproduce\r\n\r\n(table1 has fields table1_id and table2_id)\r\n(table2 has fields id, title and others)\r\n\r\n```\r\nconst { data, error } = await this.supabase\r\n    .from('table1')\r\n    .select('table2(*)')\r\n    .eq('table1_id', table1_id)\r\n    .order('title', { foreignTable: 'table2', ascending: true });\r\n```\r\n\r\n## Expected behavior\r\n\r\nChanging the `ascending` option from true to false should invert the order of the results, or if there's any issue with the query I'd expect to get an error. None of those happen, the query returns the same results in the same order, with or without the `order` selection.\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser (if applies) chrome\r\n- Version of supabase-js: 1.20.0\r\n- Version of Node.js: 12.9.0\r\n",
            "author": {
                "login": "andresiggia"
            },
            "state": "CLOSED",
            "createdAt": "2021-07-25T18:36:01Z",
            "closedAt": "2022-12-16T23:45:15Z",
            "url": "https://github.com/supabase/postgrest-js/issues/198",
            "comments": [
                {
                    "id": "IC_kwDODheSms400w10",
                    "body": "Hey @andresiggia,\r\n\r\n> hanging the ascending option from true to false should invert the order of the results, \r\n\r\nDo you expect to order `table1` rows by using a filter on `table2`? Right now ordering on the foreign table only affects its rows - not the source table rows(table1 rows in this case).\r\n\r\n**Edit**: Related:\r\n\r\n- https://github.com/PostgREST/postgrest/issues/1414\r\n- https://github.com/supabase/supabase/discussions/1169\r\n- https://github.com/supabase/supabase/discussions/4549#discussioncomment-2827694",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-07-25T19:26:37Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/198#issuecomment-886246772"
                },
                {
                    "id": "IC_kwDODheSms400w-K",
                    "body": "Hi @steve-chavez thanks for your reply. Would there be a way then to order table1 results by a field in table2?",
                    "author": {
                        "login": "andresiggia"
                    },
                    "createdAt": "2021-07-25T19:31:58Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/198#issuecomment-886247306"
                },
                {
                    "id": "IC_kwDODheSms47yanh",
                    "body": "I'm looking for something similar. Someone with more experience than me that have a suggested workaround in the meantime?\r\n\r\nIn my db I have `items` which can appear in multiple `stores`. Items have a relationship to `store_items` which in turn holds a _price_. I would like to order items based on their cheapest price in any store.\r\n\r\nOrdering client-side is not an option since the database is large and I am limiting the result.\r\n\r\n```\r\nlet { data: items, error } = await supabase\r\n  .from(\"items\")\r\n  .select(\"id, name, store_items (price)\")\r\n  .order(\"price\", { foreignTable: \"store_items\", ascending: true })\r\n  .limit(20)\r\n```",
                    "author": {
                        "login": "oskery"
                    },
                    "createdAt": "2021-12-30T15:16:38Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/198#issuecomment-1003071969"
                },
                {
                    "id": "IC_kwDODheSms47y0Wd",
                    "body": "@oskery For now, a workaround would be doing the SQL directly on a function and calling it through [rpc](https://supabase.com/docs/reference/javascript/rpc).",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-12-30T20:50:42Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/198#issuecomment-1003177373"
                },
                {
                    "id": "IC_kwDODheSms5CXogf",
                    "body": "Bump, still an issue",
                    "author": {
                        "login": "NicolaSpadari"
                    },
                    "createdAt": "2022-04-29T16:13:57Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/198#issuecomment-1113491487"
                },
                {
                    "id": "IC_kwDODheSms5D6s3n",
                    "body": "So sad still can't use this.",
                    "author": {
                        "login": "arclogos132"
                    },
                    "createdAt": "2022-05-27T09:49:24Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/198#issuecomment-1139461607"
                },
                {
                    "id": "IC_kwDODheSms5GwIvH",
                    "body": "I need this feature so much\r\n",
                    "author": {
                        "login": "KiyeopYang"
                    },
                    "createdAt": "2022-07-18T10:21:43Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/198#issuecomment-1187023815"
                },
                {
                    "id": "IC_kwDODheSms5LhLt9",
                    "body": "It's been a year since OP has brought up this issue... can we get an update on this feature?",
                    "author": {
                        "login": "arclogos132"
                    },
                    "createdAt": "2022-10-04T13:21:55Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/198#issuecomment-1266989949"
                },
                {
                    "id": "IC_kwDODheSms5MjPg5",
                    "body": "Well...dang. Still no news? Might as well just do this on the client side.",
                    "author": {
                        "login": "ComputelessComputer"
                    },
                    "createdAt": "2022-10-19T16:54:01Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/198#issuecomment-1284307001"
                },
                {
                    "id": "IC_kwDODheSms5NlB69",
                    "body": "FYI, this one is more or less done on https://github.com/PostgREST/postgrest/pull/2511.\r\n\r\nFor now, the interface will be like\r\n\r\n```js\r\nconst { data, error } = await this.supabase\r\n    .from('clients')\r\n    .select('clients_details(id,address,paycheck)')\r\n    .order('clients_details(paycheck)', { ascending: true })\r\n```\r\n---\r\n\r\nThe infra team will discuss self-serve upgrades this week. This would enable users to upgrade their postgREST version manually and try pre-releases' features.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-11-03T01:40:28Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/198#issuecomment-1301552829"
                },
                {
                    "id": "IC_kwDODheSms5PJ6l3",
                    "body": "Hey @steve-chavez , thanks for the awesome update. Once Supabase users can upgrade their version of Postgrest, will that be enough to start using the supabase client to order by a foreign column? ",
                    "author": {
                        "login": "juanvilladev"
                    },
                    "createdAt": "2022-11-26T07:41:56Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/198#issuecomment-1327999351"
                },
                {
                    "id": "IC_kwDODheSms5Q0HXp",
                    "body": "@juanvilladev Sorry for the late reply here.\r\n\r\n[Ordering by related tables](https://supabase.com/blog/postgrest-11-prerelease#order-by-related-tables) is available on the [Supabase CLI](https://supabase.com/docs/reference/cli/introduction).",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-12-16T23:45:15Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/198#issuecomment-1355838953"
                },
                {
                    "id": "IC_kwDODheSms5RE_o4",
                    "body": "@steve-chavez thank you so much!",
                    "author": {
                        "login": "barbinbrad"
                    },
                    "createdAt": "2022-12-20T21:14:16Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/198#issuecomment-1360263736"
                },
                {
                    "id": "IC_kwDODheSms5fUVA_",
                    "body": "@steve-chavez I am probably missing something but ordering by joined table still doesnt work for me.\r\n\r\n```\r\nawait supabase\r\n        .from('reading_list')\r\n        .select(\r\n          `\r\n          *,\r\n          books(*)\r\n        `\r\n        )\r\n        .eq('userId', user.id)\r\n        .order('title', { foreignTable: 'books', ascending: false });\r\n```\r\nAm I doing something wrong? Thanks!",
                    "author": {
                        "login": "Kamahl19"
                    },
                    "createdAt": "2023-06-20T16:54:13Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/198#issuecomment-1599164479"
                },
                {
                    "id": "IC_kwDODheSms5faLU8",
                    "body": "@steve-chavez , I'm trying your example\r\n```ts\r\nconst { data, error } = await this.supabase\r\n    .from('clients')\r\n    .select('clients_details(id,address,paycheck)')\r\n    .order('clients_details(paycheck)', { ascending: true })\r\n```\r\n\r\nand getting the following error\r\n`unexpected '(' expecting letter, digit, \\\"-\\\", \\\"->>\\\", \\\"->\\\", delimiter (.), \\\",\\\" or end of input`",
                    "author": {
                        "login": "arnoson"
                    },
                    "createdAt": "2023-06-21T11:54:31Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/198#issuecomment-1600697660"
                },
                {
                    "id": "IC_kwDODheSms5faf5r",
                    "body": "Btw, I'm using supabase cloud, as I assumed that by now this would be integrated. Or is this still a fetaure that only works in supabase CLI?",
                    "author": {
                        "login": "arnoson"
                    },
                    "createdAt": "2023-06-21T12:53:56Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/198#issuecomment-1600781931"
                },
                {
                    "id": "IC_kwDODheSms5fbNFS",
                    "body": "I am using CLI for local development only and nothing mentioned in this blog post works for me https://supabase.com/blog/postgrest-11-prerelease . Am I missing something? ",
                    "author": {
                        "login": "Kamahl19"
                    },
                    "createdAt": "2023-06-21T14:40:06Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/198#issuecomment-1600966994"
                },
                {
                    "id": "IC_kwDODheSms5fbZ1H",
                    "body": "Sorry, v11 is still not available on cloud or CLI (https://github.com/supabase/cli/pull/1218).\r\n\r\nPlease subscribe here https://github.com/supabase/postgres/pull/628#issuecomment-1544426059, will notify once v11 is deployed.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-06-21T15:08:16Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/198#issuecomment-1601019207"
                },
                {
                    "id": "IC_kwDODheSms5iGEOr",
                    "body": "@steve-chavez \r\n\r\nI've upgraded to v11 and can now use your sample syntax successfully:\r\n\r\n```\r\nsupabase\r\n    .from('clients')\r\n    .select('clients_details(id,address,paycheck)')\r\n    .order('clients_details(paycheck)', { ascending: true })\r\n```\r\n\r\nHowever, is it possible to have this go more than one level? e.g. if `clients_details` has another FK to `client_type`, can I do something like this: \r\n\r\n```\r\nsupabase\r\n    .from('clients')\r\n    .select('clients_details(id,address,paycheck)')\r\n    .order('clients_details(client_type(name))', { ascending: true })\r\n```",
                    "author": {
                        "login": "turch"
                    },
                    "createdAt": "2023-07-21T15:23:43Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/198#issuecomment-1645757355"
                },
                {
                    "id": "IC_kwDODheSms5iHjFw",
                    "body": "@turch Not possible yet. Can you open an issue?\r\n\r\nhttps://github.com/PostgREST/postgrest/issues/\r\n\r\nhttps://postgrest.org/en/latest/references/api/resource_embedding.html#top-level-ordering",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-07-21T19:21:30Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/198#issuecomment-1646145904"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5NTUwNDI1MzQ=",
            "number": 199,
            "title": "select avg() in query",
            "body": "# Feature request\r\nA way to fetch the average of a given query and field, without the need to create a rcp function to calculate the avg.\r\n\r\n## Describe the solution you'd like\r\nSomething like the count option in the select function at the moment:\r\n`this.supabase.from('table').select('value', { avg: 'value' });`\r\nAnd maybe give the field you want the average of as a parameter for the select properties\r\n\r\n## Describe alternatives you've considered\r\nCreating an rcp which you can call to calculate an average for a field and table",
            "author": {
                "login": "Nielsien"
            },
            "state": "CLOSED",
            "createdAt": "2021-07-28T08:19:14Z",
            "closedAt": "2021-08-11T16:10:08Z",
            "url": "https://github.com/supabase/postgrest-js/issues/199",
            "comments": [
                {
                    "id": "IC_kwDODheSms41dn19",
                    "body": "Closing this as duplicate of https://github.com/supabase/postgrest-js/issues/206",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-08-11T16:10:08Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/199#issuecomment-896957821"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5NTcxNzE4ODM=",
            "number": 200,
            "title": "Aborting requests",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nAfter the migration from Superagent to cross-fetch there doesn't seem to be a way to abort a request.\r\nConsider this usage within React:\r\n\r\n```ts\r\nuseEffect(() => {\r\n  client\r\n    .from(\"users\")\r\n    .select()\r\n    .eq(\"id\", userId)\r\n    .then(({data}) => setUser(data[0]))\r\n\r\n  return () => {\r\n    // Stop in-flight request?\r\n  }\r\n}, [userId]);\r\n```\r\n\r\n\r\n## Describe the solution you'd like\r\n\r\nGiven postgrest-js is built on `cross-fetch` now, support AbortSignal.\r\n\r\n```ts\r\nuseEffect(() => {\r\n  const controller = new AbortController;\r\n  client\r\n    .from(\"users\")\r\n    .select()\r\n    .eq(\"id\", userId)\r\n    .signal(controller.signal)\r\n    .then(({data}) => setUser(data[0]));\r\n\r\n  return () => {\r\n    controller.abort();\r\n  }\r\n}, [userId]);\r\n```\r\n\r\n## Describe alternatives you've considered\r\n\r\nThis could be more generic to support other fetch options instead of strictly signal.\r\n\r\n## Additional context\r\n\r\nI'd be fine implementing this as a PR. Just need to know what direction the maintainers would prefer.",
            "author": {
                "login": "statianzo"
            },
            "state": "CLOSED",
            "createdAt": "2021-07-31T05:06:12Z",
            "closedAt": "2021-09-27T11:21:22Z",
            "url": "https://github.com/supabase/postgrest-js/issues/200",
            "comments": [
                {
                    "id": "IC_kwDODheSms41ZvDd",
                    "body": "+1 for the feature, I'm not sure if we want to expose fetch options as we don't want to leak which HTTP client we're using under the hood, but we likely aren't moving away from fetch anytime soon so this one feature seems OK.\r\n\r\nI'll have to look at how this can be implemented in clients for other languages, though it's no problem if it's JS-only.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-08-10T11:07:37Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/200#issuecomment-895938781"
                },
                {
                    "id": "IC_kwDODheSms43FZ6-",
                    "body": "Is this still being considered? I'd like users to be able to abort file uploads and haven't found a good alternative.",
                    "author": {
                        "login": "kyrelldixon"
                    },
                    "createdAt": "2021-09-21T16:41:55Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/200#issuecomment-924163774"
                },
                {
                    "id": "IC_kwDODheSms43HFab",
                    "body": "My bad, got sidetracked on this - will get back to it this weekend.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-09-22T05:42:57Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/200#issuecomment-924604059"
                },
                {
                    "id": "IC_kwDODheSms43Nfwc",
                    "body": "storage-js [supports this](https://github.com/supabase/storage-js/blob/f650e1a504bd6137bd94880e37c1675c5eb996b7/src/lib/fetch.ts#L11) via AbortSignals, but is not yet documented. We can use the same mechanism for the other services too\r\n\r\n```js\r\nconst abortSignal = new AbortController().signal\r\nconst parameters = { signal:  abortSignal}\r\nconst { data: items, error } = await storage\r\n  .from(this.selectedBucket.name)\r\n  .list(prefix, options, parameters)\r\n\r\n// abort call\r\nabortSignal.abort()\r\n```",
                    "author": {
                        "login": "inian"
                    },
                    "createdAt": "2021-09-24T01:53:58Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/200#issuecomment-926284828"
                },
                {
                    "id": "IC_kwDODheSms43TMp7",
                    "body": ":tada: This issue has been resolved in version 0.34.0 :tada:\n\nThe release is available on:\n- [GitHub release](https://github.com/supabase/postgrest-js/releases/tag/v0.34.0)\n- [npm package (@latest dist-tag)](https://www.npmjs.com/package/@supabase/postgrest-js/v/0.34.0)\n\nYour **[semantic-release](https://github.com/semantic-release/semantic-release)** bot :package::rocket:",
                    "author": {
                        "login": "github-actions"
                    },
                    "createdAt": "2021-09-27T11:22:51Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/200#issuecomment-927779451"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5NTg0NDkxNDU=",
            "number": 201,
            "title": "`timestamptz` cols should be returned as `Date`s",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\n`Date` objects stored in PostgreSQL `timestamptz` columns are returned as ISO strings instead of `Date` objects when fetched using the Supabase JavaScript SDK.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Create a `timestamptz` column, like so:\r\n\r\n```pgsql\r\ncreate table users (\r\n  created timestamptz not null,\r\n  updated timestamptz not null\r\n);\r\n```\r\n2. Create a new record using `Date` objects, like so:\r\n\r\n```typescript\r\nawait supabase.from<User>('users').insert({\r\n  created: new Date(),\r\n  updated: new Date() \r\n});\r\n```\r\n3. Fetch that record:\r\n\r\n```typescript\r\nconst { data } = await supabase.from<User>('users').select();\r\nconsole.log(typeof data[0].created); // Logs \"string\" instead of \"object\"\r\nconsole.log(data[0].created instanceof Date); // Logs \"false\" instead of \"true\"\r\n```\r\n4. See error.\r\n\r\n## Expected behavior\r\n\r\nFields stored as `timestamptz` using `Date` objects should be returned by the Supabase JavaScript SDK as `Date`s instead of ISO strings.\r\n\r\n## Additional context\r\n\r\nChatted with @burggraf about this on the Supabase Discord server earlier today.",
            "author": {
                "login": "nicholaschiang"
            },
            "state": "CLOSED",
            "createdAt": "2021-08-02T19:37:44Z",
            "closedAt": "2021-08-10T10:51:26Z",
            "url": "https://github.com/supabase/postgrest-js/issues/201",
            "comments": [
                {
                    "id": "IC_kwDODheSms41Ix8o",
                    "body": "Discord thread: https://discord.com/channels/839993398554656828/843999948717555735/871833245057155123\r\n\r\nThe reason `timestamptz` columns are returned as strings is because there is no `Date` type in JSON, and PostgREST responses are in JSON (or CSV, if you specify it).\r\n\r\n@steve-chavez any input on this?",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-08-03T03:37:33Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/201#issuecomment-891494184"
                },
                {
                    "id": "IC_kwDODheSms41IyQc",
                    "body": "Ah, that makes total sense.  `Postgrest` returns `JSON`!",
                    "author": {
                        "login": "burggraf"
                    },
                    "createdAt": "2021-08-03T03:40:53Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/201#issuecomment-891495452"
                },
                {
                    "id": "IC_kwDODheSms41Kilk",
                    "body": "@soedirgo @burggraf yup, I realized that. I was just thinking that because the `supabase-js` wrapper around Postgrest accepts `Date`s during `insert` and `update`, it should probably wrap around `Date`s during `select` requests (e.g. just have some regex to test whether or not a string is a date ISO string and, if it is, wrap it).\r\n\r\nOr, an alternative solution, is to prevent users from passing `Date` objects to `insert` and `update` requests and force them to serialize it to a date string themselves (i.e. only allow JSON data types to be passed to the `insert` and `update` methods). That way, they'll realize that what they're getting back from `select` isn't going to be a `Date` but rather a JSON-serialized ISO string. \r\n\r\nWhat you pass into `insert` should be exactly what you get back from `select`.",
                    "author": {
                        "login": "nicholaschiang"
                    },
                    "createdAt": "2021-08-03T15:44:48Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/201#issuecomment-891955556"
                },
                {
                    "id": "IC_kwDODheSms41KoS4",
                    "body": "postgrest-js accepts `Date` in `insert`/`update` only as a consequence of implicit type cast (`JSON.stringify`) - I imagine PostgREST clients for other languages without implicit type casting (e.g. postgrest-rs) force dates to be strings.\r\n\r\nIf you want to compare `insert`d/`update`d data with something from `select`, there's a solution: by default `insert`/`update` returns the inserted/updated data on success (see [here](https://supabase.io/docs/reference/javascript/insert#notes)). You can then compare it with the result from a `select`.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-08-03T16:14:21Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/201#issuecomment-891978936"
                },
                {
                    "id": "IC_kwDODheSms41V3tx",
                    "body": "> @steve-chavez any input on this?\r\n\r\nHm, perhaps the way forward for these conversions is to query the PostgREST's OpenAPI output in `postgrest-js` and refine the types?\r\n\r\nThere's also the case of [bigints being truncated in JS](https://github.com/PostgREST/postgrest/issues/498).",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-08-09T03:19:51Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/201#issuecomment-894925681"
                },
                {
                    "id": "IC_kwDODheSms41V4C2",
                    "body": "I personally don't have a problem returning everything as a string, as long as I know what the types are supposed to be.  I'd rather have a bigint as a string that's accurate than have a truncated numeric value. ",
                    "author": {
                        "login": "burggraf"
                    },
                    "createdAt": "2021-08-09T03:24:23Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/201#issuecomment-894927030"
                },
                {
                    "id": "IC_kwDODheSms41ZspR",
                    "body": "> Hm, perhaps the way forward for these conversions is to query the PostgREST's OpenAPI output in postgrest-js and refine the types?\r\n\r\nThat means we need 2 requests to do an insert/update - write throughput may not be as important as read throughput in most cases but I'd like to avoid that if possible.\r\n\r\nI've given it some thought and decided to close this issue. I think lossy conversion is a dealbreaker - there's the `bigint` being truncated, but Postgres timestamps are *also* truncated since they have a resolution of 1 microsecond ([ref](https://www.postgresql.org/docs/current/datatype-datetime.html)).\r\n\r\nSome other issues with this:\r\n- maintenance burden of mapping of types & parsing logic\r\n- having to unparse after parsing if you *do* want them to be strings",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-08-10T10:51:26Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/201#issuecomment-895928913"
                },
                {
                    "id": "IC_kwDODheSms41admJ",
                    "body": "> That means we need 2 requests to do an insert/update \r\n\r\nHere I was thinking more about doing one request when postgrest-js is initialized(to get OpenAPI).\r\n\r\nAgree nonetheless, parsing it's a lot of work for now.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-08-10T16:28:23Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/201#issuecomment-896129417"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5NTk1MTIxMzU=",
            "number": 202,
            "title": "Error is an empty array when no results",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nThe `error` is an empty array when there are no results for a query while `data` is `null` (which should be an empty array).\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Run a query using `select()` that returns no results.\r\n2. Notice that `data` is `null`.\r\n3. Notice that `error` is an empty array.\r\n\r\n```typescript\r\nconst { data, error, count } = await supabase.from<User>('users').select().eq('name', 'no-user-named-this');\r\nconsole.log(data); // Is `null` instead of an empty array.\r\nconsole.log(error); // Is an empty array instead of `null`.\r\nconsole.log(count); // Is `null` instead of zero.\r\n```\r\n\r\n## Expected behavior\r\n\r\nWhen a `select` doesn't return any data:\r\n- `data` should be an empty array\r\n- `count` should be zero\r\n- `error` should be `null`\r\n\r\n## System information\r\n\r\n- OS: Ubuntu 20.04 LTS\r\n- Version of supabase-js: 1.21.0\r\n- Version of Node.js: 12.18.3",
            "author": {
                "login": "nicholaschiang"
            },
            "state": "CLOSED",
            "createdAt": "2021-08-03T21:10:34Z",
            "closedAt": "2021-11-23T18:07:27Z",
            "url": "https://github.com/supabase/postgrest-js/issues/202",
            "comments": [
                {
                    "id": "IC_kwDODheSms41LXNT",
                    "body": "Current workaround is to detect if `error` is an array like so:\r\n```typescript\r\nconst { data, error, count } = await supabase.from<User>('users').select().eq('name', 'no-user-named-this');\r\nif (error instanceof Array) return { results: [], hits: 0 };\r\nif (error) throw new Error(error.message);\r\nreturn { results: data, hits: count };\r\n```",
                    "author": {
                        "login": "nicholaschiang"
                    },
                    "createdAt": "2021-08-03T21:14:38Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/202#issuecomment-892171091"
                },
                {
                    "id": "IC_kwDODheSms41L8tT",
                    "body": "Hmm, I couldn't reproduce this on my side. I've added a [new test case](https://github.com/supabase/postgrest-js/blob/4de56c2245bb43842f0608f4dde94e9c2db51eb8/test/basic.ts#L281-L293) to cover this - can you run `npm ci && npm t` on this repo and see if it passes? (will need to have the Docker daemon running)",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-08-04T03:06:51Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/202#issuecomment-892324691"
                },
                {
                    "id": "IC_kwDODheSms46OyW2",
                    "body": "Closing for now since we can't reproduce and seems to be working fine. If the issue persists, please reopen.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-11-23T18:07:27Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/202#issuecomment-976954806"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5NjMxNDY3NDM=",
            "number": 203,
            "title": "Authentication sequence support",
            "body": "I was just wondering what is your take on Authentication sequence with postgrest-js?\r\nWith the current setup, is it possible to add it? or how can we achieve it?\r\n\r\nI do see somecode in https://github.com/supabase/postgrest-js/blob/791dc09c92dfcb5a8dd064a1e02ac554a1ad0127/src/PostgrestClient.ts#L31 How can we use it?\r\n\r\ncontext: https://postgrest.org/en/stable/auth.html",
            "author": {
                "login": "subhendukundu"
            },
            "state": "CLOSED",
            "createdAt": "2021-08-07T03:47:15Z",
            "closedAt": "2021-08-12T02:19:42Z",
            "url": "https://github.com/supabase/postgrest-js/issues/203",
            "comments": [
                {
                    "id": "IC_kwDODheSms41V9UF",
                    "body": "Hey @subhendukundu,\r\n\r\n[gotrue](https://github.com/supabase/gotrue/) is the component that produces the JWTs. `postgrest-js` just passes those(through the Authorization header) to the PostgREST server.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-08-09T04:51:28Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/203#issuecomment-894948613"
                },
                {
                    "id": "IC_kwDODheSms41e6Xe",
                    "body": "> How can we use it?\r\n\r\nto use this you would do something like:\r\n\r\n```js\r\nconst { data, error } = postgrest\r\n  .auth('VALID_JWT_TOKEN')\r\n  .from('table_name')\r\n  .select()\r\n```\r\n\r\nThis will set the `Authorization` header (which is needed if you have set up PostgREST with the recommended approach here: https://postgrest.org/en/v7.0.0/auth.html\r\n\r\nI'll close this one for now, but feel free to comment again if I misunderstood anything and I'll reopen \ud83d\udc4d ",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-08-12T02:19:41Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/203#issuecomment-897295838"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5NjM5NjQ1ODI=",
            "number": 204,
            "title": "Camel case to snake case name conversion",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\npostgres column naming conventions suggest using snake_case. Javascript variable naming conventions typically use camelCase. This leads to a few issues when trying to interact with the postgres database using the postgrest-js api.\r\n\r\nI either have to use snake_case for my object keys in my javascript code, but this is then inconsistent with the rest of my code. \r\n\r\nI could also use camelCase for my postgres column names, but then this creates a lot of friction with queries as casing is ignored without \"\".\r\n\r\nOr I could automatically convert the keys from camelCase to snake_case before sending any data, and from snake_case to camelCase when receiving data.\r\n\r\n## Describe the solution you'd like\r\n\r\nA config setting, or option that will automatically convert object keys from camelCase to snake_case when sending data.\r\n\r\nHaving a table with columns: `user_name` and `date_added`. The following would work:\r\n```javascript\r\nconst data = [{userName: \"abc123\", dateAdded: \"2021-01-01\"}]\r\nawait postgrest.select('table').insert(data)\r\n```\r\n\r\nAnd similarly when querying for data, the returned object would have the column names converted from snake_case to camelCase.\r\n\r\n## Describe alternatives you've considered\r\n\r\npg-promise, knex.js, and objection.js provide similar utils to help with this issue.\r\n\r\n## Additional context\r\n\r\nAdd any other context or screenshots about the feature request here.\r\n",
            "author": {
                "login": "joshiain"
            },
            "state": "OPEN",
            "createdAt": "2021-08-09T12:53:19Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/204",
            "comments": [
                {
                    "id": "IC_kwDODheSms48iwZ_",
                    "body": "This would be soooo helpful :)",
                    "author": {
                        "login": "wiesson"
                    },
                    "createdAt": "2022-01-18T19:19:05Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/204#issuecomment-1015744127"
                },
                {
                    "id": "IC_kwDODheSms49fzjL",
                    "body": "[Renaming columns](https://postgrest.org/en/stable/api.html#renaming-columns) on reads is possible, but not on writes(https://github.com/PostgREST/postgrest/issues/1773) - once the latter is solved `postgrest-js` could autogenerate aliases to solve this.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-02-07T17:51:20Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/204#issuecomment-1031747787"
                },
                {
                    "id": "IC_kwDODheSms49gYDw",
                    "body": "I ended up with converting my db to the camel case format and accepted that I have to live with quotes forever",
                    "author": {
                        "login": "wiesson"
                    },
                    "createdAt": "2022-02-07T20:37:41Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/204#issuecomment-1031897328"
                },
                {
                    "id": "IC_kwDODheSms5EUYBY",
                    "body": "Another option for this: https://github.com/supabase/supabase/discussions/7136",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-06-03T17:15:29Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/204#issuecomment-1146191960"
                },
                {
                    "id": "IC_kwDODheSms5m-b2I",
                    "body": "If this helps anyone, I have been using [`ts-case-convert`](https://www.npmjs.com/package/ts-case-convert) and it works like magic. ",
                    "author": {
                        "login": "irohitb"
                    },
                    "createdAt": "2023-09-20T12:38:56Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/204#issuecomment-1727643016"
                },
                {
                    "id": "IC_kwDODheSms5p9npP",
                    "body": "it would be so much easier if postgres can simply ignore casing without quotes, treating select camelcasecol from tbl the same as select camelCaseCol from tbl. then everything is solved. \r\n\r\nnot sure why do they still throw errors when you reference camelCase col in all lower case letters. the reverse actually works. you can reference lower case letters of column names by using uppercase letters",
                    "author": {
                        "login": "devhandler"
                    },
                    "createdAt": "2023-10-24T18:07:30Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/204#issuecomment-1777760847"
                },
                {
                    "id": "IC_kwDODheSms5sMdjI",
                    "body": "This is extremely frustrating. It's a very simple move to add a conversion. Knex does it without sweating. The \"accepted\" option is basically to break encapsulation so that you can tell you have a data object b/c its properties are in snake case. I appreciate \"opinionated\" frameworks as much as the next guy but a typescript/javascript framework (of all things) should have this affordance.",
                    "author": {
                        "login": "weeksie"
                    },
                    "createdAt": "2023-11-16T19:46:34Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/204#issuecomment-1815206088"
                },
                {
                    "id": "IC_kwDODheSms5sMe2R",
                    "body": "Offtopic: I'm also hoping that at some point, it will be added to postgrest. It feels like a feature were I would apply for a job, fix that one thing and leave \ud83d\ude48",
                    "author": {
                        "login": "wiesson"
                    },
                    "createdAt": "2023-11-16T19:49:39Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/204#issuecomment-1815211409"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5NjQwMzc0MDQ=",
            "number": 205,
            "title": "Can't call RPC functions with enum params",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nI can't call a PostgreSQL function that takes a user-defined enum as a parameter. I get this error:\r\n\r\n```\r\nError getting users ([object Object]) in database: \r\nfunction public.met(user_id => text, user_role => text) does not exist.\r\n```\r\n\r\nEven though I'm sure that the `public.met` method does exist BUT it takes an enum for the `user_role` instead of `text`:\r\n\r\n```pgsql\r\ncreate type role as enum(\r\n  'tutor', \r\n  'tutee', \r\n  'mentor', \r\n  'mentee', \r\n  'parent'\r\n);\r\n\r\ncreate or replace function met(user_id text, user_role role)\r\nreturns table (like view_users)\r\nas $$\r\n  select distinct on (view_users.id) view_users.*\r\n  from relation_people relation_people1\r\n  join relation_people relation_people2\r\n  on relation_people1.meeting = relation_people2.meeting\r\n  join view_users\r\n  on relation_people2.user = view_users.id\r\n  where \r\n    user_id = relation_people1.user and\r\n    user_role = any (relation_people2.roles);\r\n$$\r\nlanguage sql stable;\r\n```\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Create a new PostgreSQL function that takes a custom enum as a parameter.\r\n2. Try to call it: `supabase.rpc('met', { user_id: 'asdfklajsdf', user_role: 'tutor' })`\r\n3. See error message.\r\n\r\n## Expected behavior\r\n\r\nSupabase should assume that the `user_role` passed to the `rpc` call is correctly typed to match the user-defined PostreSQL `role` enum type and thus should call the `public.met` function correctly.\r\n\r\n## System information\r\n\r\n- OS: Ubuntu 20.04 LTS (Pop_OS! 20.04 LTS)\r\n- Version of supabase-js: 1.21.0\r\n- Version of Node.js: 12.18.3\r\n \r\n## Additional context\r\n\r\nI'm working on [Tutorbook](https://github.com/tutorbookapp/tutorbook) and our database schema is [defined here](https://github.com/tutorbookapp/tutorbook/blob/develop/db/setup.pgsql).\r\n",
            "author": {
                "login": "nicholaschiang"
            },
            "state": "CLOSED",
            "createdAt": "2021-08-08T22:56:32Z",
            "closedAt": "2021-11-23T18:06:23Z",
            "url": "https://github.com/supabase/postgrest-js/issues/205",
            "comments": [
                {
                    "id": "IC_kwDODheSms41Vpnf",
                    "body": "Current workaround is to define the `public.met` function using `text` parameters and then cast them to the `role` enum:\r\n\r\n```pgsql\r\ncreate or replace function met(user_id text, user_role text)\r\nreturns table (like view_users)\r\nas $$\r\n  select distinct on (view_users.id) view_users.*\r\n  from relation_people relation_people1\r\n  join relation_people relation_people2\r\n  on relation_people1.meeting = relation_people2.meeting\r\n  join view_users\r\n  on relation_people2.user = view_users.id\r\n  where \r\n    user_id = relation_people1.user and\r\n    user_role::role = any (relation_people2.roles);\r\n$$\r\nlanguage sql stable;\r\n```",
                    "author": {
                        "login": "nicholaschiang"
                    },
                    "createdAt": "2021-08-08T22:57:50Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/205#issuecomment-894867935"
                },
                {
                    "id": "IC_kwDODheSms41V8s8",
                    "body": "Can't reproduce. I did the following:\r\n\r\n```sql\r\ncreate type role as enum(\r\n  'tutor', \r\n  'tutee', \r\n  'mentor', \r\n  'mentee', \r\n  'parent'\r\n);\r\n\r\ncreate or replace function met(user_id text, user_role role)\r\nreturns table (user_id text, user_role role) as $$\r\n  select user_id, user_role;\r\n$$ language sql stable;\r\n```\r\n\r\n```js\r\npostgrest\r\n  .rpc('met', {user_id: \"any\", user_role: \"tutor\"})\r\n  .then(x => console.log(x));\r\n\r\n{\r\n  error: null,\r\n  data: [ { user_id: 'any', user_role: 'tutor' } ],\r\n  count: null,\r\n  status: 200,\r\n  statusText: 'OK',\r\n  body: [ { user_id: 'any', user_role: 'tutor' } ]\r\n}\r\n```\r\n\r\n@nicholaschiang Maybe try the above reduced example and double check for typos in the identifiers.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-08-09T04:41:52Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/205#issuecomment-894946108"
                },
                {
                    "id": "IC_kwDODheSms46OyAq",
                    "body": "Closing for now since we can't reproduce and seems to be working fine. If the issue persists, please reopen.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-11-23T18:06:23Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/205#issuecomment-976953386"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5NjcwMDA2ODE=",
            "number": 206,
            "title": "Add support for common aggregate functions(and distinct)",
            "body": "# Feature request\r\n\r\nThere are a bunch of commonly used Postgres methods that should be added:\r\n - `COUNT(*)`\r\n - `AVG(number)`\r\n - `MIN(number)`\r\n - `MAX(number)`",
            "author": {
                "login": "zlwaterfield"
            },
            "state": "OPEN",
            "createdAt": "2020-09-13T21:42:38Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/206",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDY5MTc4ODA2OA==",
                    "body": "Nice one.\r\n\r\nRelated for `COUNT`, which will be coming soon: https://github.com/supabase/postgrest-js/issues/94\r\n\r\n`COUNT` will be simple because it's provided by PostgREST, however `MIN/MAX/AVG` would require some work. We could potentially give developers the ability to query their database through [pg-api](https://github.com/supabase/pg-api), but we'll need to do some work on security if this is going to be exposed on the client.\r\n\r\nLet's use this issue to list options after discussing with the team\r\n",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-09-14T03:20:01Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/206#issuecomment-691788068"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc4NDEwMDY1MA==",
                    "body": "Forgot to mention it here, but `COUNT` is now an option when making request!\r\n\r\nhttps://github.com/supabase/postgrest-js/pull/147",
                    "author": {
                        "login": "dshukertjr"
                    },
                    "createdAt": "2021-02-23T10:31:49Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/206#issuecomment-784100650"
                },
                {
                    "id": "IC_kwDODheSms483RXL",
                    "body": "@kiwicopple what's up with this, is it planned soon?\r\nThanks",
                    "author": {
                        "login": "PH4NTOMiki"
                    },
                    "createdAt": "2022-01-25T12:09:58Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/206#issuecomment-1021121995"
                },
                {
                    "id": "IC_kwDODheSms484voP",
                    "body": "@PH4NTOMiki Progress for this is being tracked at https://github.com/PostgREST/postgrest/issues/915#issuecomment-1002232582",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-01-25T18:57:45Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/206#issuecomment-1021508111"
                },
                {
                    "id": "IC_kwDODheSms5F2BQs",
                    "body": "An example of how this can be done now:\r\n\r\n```sql\r\ncreate or replace function max_value() returns int as $$\r\n  select max(my_column) from my_table;\r\n$$ language sql;\r\n```\r\n\r\n```js\r\nconst { data, error } = await supabase\r\n  .rpc('max_value')\r\n```\r\n\r\nReferences:\r\n\r\n- https://supabase.com/docs/reference/javascript/rpc\r\n- https://stackoverflow.com/questions/72814312/max-aggregate-function-syntax-to-be-called-by-the-supabase-client/72823179#72823179",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-07-01T00:10:28Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/206#issuecomment-1171788844"
                },
                {
                    "id": "IC_kwDODheSms5K_By8",
                    "body": "`Group By` is provided by postgres. Could we add this feature?\r\n\r\n It should be relatively simple.\r\n\r\nThis is also very important because you can't subscribe to Views or Procedures. There is no work around for that.  \r\n\r\nJ",
                    "author": {
                        "login": "jdgamble555"
                    },
                    "createdAt": "2022-09-26T13:23:07Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/206#issuecomment-1258036412"
                },
                {
                    "id": "IC_kwDODheSms5XNvcT",
                    "body": "3 years already and still this is open issue?",
                    "author": {
                        "login": "ckypper"
                    },
                    "createdAt": "2023-03-10T04:01:13Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/206#issuecomment-1463219987"
                },
                {
                    "id": "IC_kwDODheSms5YdAGi",
                    "body": "Looking for this one too. ",
                    "author": {
                        "login": "felixcheruiyot"
                    },
                    "createdAt": "2023-03-26T05:08:29Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/206#issuecomment-1483997602"
                },
                {
                    "id": "IC_kwDODheSms5bH2Bx",
                    "body": "Is there a plan for the 'distinct' function ?",
                    "author": {
                        "login": "JRB-y"
                    },
                    "createdAt": "2023-04-29T13:00:39Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/206#issuecomment-1528782961"
                },
                {
                    "id": "IC_kwDODheSms5bIOer",
                    "body": "+1 for a distinct function. The supabase AI references it when searching docs, but the method doesn't exist.",
                    "author": {
                        "login": "rawestmoreland"
                    },
                    "createdAt": "2023-04-29T22:06:02Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/206#issuecomment-1528883115"
                },
                {
                    "id": "IC_kwDODheSms5bIPt1",
                    "body": "> +1 for a distinct function. The supabase AI references it when searching docs, but the method doesn't exist.\n\nYea the AI confused me too.",
                    "author": {
                        "login": "JRB-y"
                    },
                    "createdAt": "2023-04-29T22:40:14Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/206#issuecomment-1528888181"
                },
                {
                    "id": "IC_kwDODheSms5hBa-A",
                    "body": "+1 for common postgres functions",
                    "author": {
                        "login": "bizrockman"
                    },
                    "createdAt": "2023-07-09T16:16:07Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/206#issuecomment-1627762560"
                },
                {
                    "id": "IC_kwDODheSms5hRX0q",
                    "body": "Any update on this? I came from https://github.com/orgs/supabase/discussions/4549#discussioncomment-3459965",
                    "author": {
                        "login": "laubonghaudoi"
                    },
                    "createdAt": "2023-07-12T06:47:32Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/206#issuecomment-1631943978"
                },
                {
                    "id": "IC_kwDODheSms5r1ltb",
                    "body": "+1 this would be really useful",
                    "author": {
                        "login": "aferrugento"
                    },
                    "createdAt": "2023-11-13T22:05:49Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/206#issuecomment-1809210203"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5NzAxNzk5MTk=",
            "number": 207,
            "title": "Composite type filtering",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nWant to filter on composite type fields: https://github.com/supabase/supabase/discussions/2825\r\n\r\n## Describe the solution you'd like\r\n\r\nWait for https://github.com/PostgREST/postgrest/issues/1543\r\n\r\n## Describe alternatives you've considered\r\n\r\nWorkaround is to use a computed column.",
            "author": {
                "login": "soedirgo"
            },
            "state": "CLOSED",
            "createdAt": "2021-08-13T08:27:26Z",
            "closedAt": "2022-02-06T22:10:47Z",
            "url": "https://github.com/supabase/postgrest-js/issues/207",
            "comments": [
                {
                    "id": "IC_kwDODheSms49Zm_s",
                    "body": "Implemented in https://github.com/PostgREST/postgrest/pull/2145.\r\n\r\nWorks the same as json with arrow operators:\r\n\r\n```js\r\nfinal response = await client\r\n          .from('on_hand')\r\n          .select()\r\n          .filter(\"item->supplier_id\", \"eq\", 1)\r\n          .execute();\r\n```\r\n\r\n(Took the example from https://github.com/supabase/supabase/discussions/2825#discussion-3516077)",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-02-04T16:02:23Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/207#issuecomment-1030123500"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWU5NzY4NzU2ODk=",
            "number": 211,
            "title": "Rpc with parameters not returning count when specified",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nI have an RPC with parameters that when specified {count: 'exact  '} it returns null\r\n## To Reproduce\r\n\r\nThis is my postgres function\r\nparameters:\r\n**brands__in\r\nscooter_type__in\r\nengine_location__in\r\nmax_weight__in\r\nfoldable__in\r\nwheel_size__in**\r\n\r\n```\r\nbegin\r\n\treturn query \r\n\tSELECT products.id, brands.title AS brand_name, models.name AS model_name,\r\nproducts.power, products.autonomy_min, products.autonomy_max, products.max_speed,\r\nproducts.scooter_weight, products.engine_location,\r\nproducts.foldable, products.min_price, products.max_price,\r\nproducts.max_weight,products.scooter_type, products.wheel_size, \r\nmodels.image\r\nFROM products\r\nJOIN brands ON products.brand = brands.id\r\nJOIN models ON products.model = models.id\r\n-- Filters check with the rpc variables\r\nWHERE (brands__in IS null OR products.brand = ANY(brands__in))\r\n  AND (scooter_type__in IS null OR products.scooter_type = ANY(scooter_type__in))\r\n  AND (engine_location__in IS null OR products.engine_location = ANY(engine_location__in))\r\n  AND (max_weight__in IS null OR products.max_weight = ANY(max_weight__in))\r\n  AND (foldable__in IS null OR products.foldable = ANY(foldable__in))\r\n  AND (wheel_size__in IS null OR products.wheel_size = ANY(wheel_size__in))\r\n-- //////// end of filters check\r\n GROUP BY products.id, brands.title, models.name, models.image, products.power, products.autonomy_min, products.autonomy_max;\r\nend;\r\n\r\n```\r\nI am using it with JS as\r\n```\r\nconst {data, error, count} = await supabase.rpc(\r\n'name_of _my_function',\r\n{\r\nbrands__in,\r\nscooter_type__in,\r\nengine_location__in,\r\nmax_weight__in,\r\nfoldable__in,\r\nwheel_size__in,\r\n},\r\n{count: exact})\r\n```\r\nand it gives back the rows with the proper filters, but the count always as null\r\n\r\n## Expected behavior\r\n\r\nrecieved the destructured values data and count as an integer\r\n\r\n## Screenshots\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n## System information\r\n\r\n- OS: MacOS\r\n- Browser (if applies) Chrome\r\n- Version of supabase-js: \"^1.20.0\"\r\n- Version of Node.js: v15.8.0\r\n\r\n## Additional context\r\n\r\n",
            "author": {
                "login": "PatoDeVille"
            },
            "state": "CLOSED",
            "createdAt": "2021-08-23T10:23:30Z",
            "closedAt": "2021-09-09T14:53:02Z",
            "url": "https://github.com/supabase/postgrest-js/issues/211",
            "comments": [
                {
                    "id": "IC_kwDODheSms42m7RV",
                    "body": "Sorry this took a while, turns out this was fixed a while back in https://github.com/supabase/supabase-js/pull/237 (it was a bug in supabase-js). If you update supabase-js this should be resolved.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-09-09T14:53:02Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/211#issuecomment-916173909"
                }
            ]
        },
        {
            "id": "I_kwDODheSms48cHNP",
            "number": 217,
            "title": "Idea: parse `select` queries to give better types",
            "body": "# Feature request/Potential idea\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nWhen selecting columns to return from a request, if there's any complex select query with specific columns selected and resource embedding, you would need to manually specify the return types if you'd like good TypeScript checking. This can lead to a lot of duplication between the columns you're selecting, and the types you specify.\r\n\r\nExample:\r\n```ts\r\ntype WorkspaceWithTeam =\r\n  definition[\"workspaces\"] & {\r\n    team: {\r\n      user: Pick<definition[\"users\"], \"id\" | \"email\">;\r\n    };\r\n  };\r\n\r\nconst { data, error } = await supabase\r\n  .from<WorkspaceWithTeam>(\"workspaces\")\r\n  .select(`\r\n    *,\r\n    team:members(\r\n      user:users(\r\n        id,\r\n        email\r\n      )\r\n    )\r\n  `);\r\n```\r\n\r\n\r\n## Describe the solution you'd like\r\n\r\nI've been experimenting with TypeScript template literals, and managed to implement a parser for simple PostgREST `select` queries: https://github.com/bnjmnt4n/postgrest-query. The project is still incomplete, requires a bit of a rewrite and should only be used with TypeScript 4.5+ due to some complexities with template literals, but I wanted to see if there's any interest in integration with `postgrest-js`.\r\n\r\nHere's a screenshot of the LSP type:\r\n\r\n![image](https://user-images.githubusercontent.com/813865/135711411-6e4368e3-99be-42bb-b652-3332c702a7c4.png)\r\n\r\nThe types can parse the query to see which columns are being selected, as well as which resources are being embedded. Then, assuming `definitions` is a `Record<TableName, Record<ColumnName, ColumnType>`, it can construct the expected output object type.\r\n\r\nAfter integration of something like https://github.com/supabase/postgrest-js/issues/172, here's a potential implementation of a separate type export of a `TypedSupabaseClient` which would be had would be opt-in:\r\n\r\n```ts\r\nconst supabase = createTypedClient<definitions>(URL, API_KEY);\r\n\r\nconst { data, error } = await supabase\r\n  .from(\"workspaces\")\r\n  .select(`\r\n    *,\r\n    team:members(\r\n      user:users(\r\n        id,\r\n        email\r\n      )\r\n    )\r\n  `);\r\n\r\n// data is properly typed.\r\n```\r\n\r\n## Describe alternatives you've considered\r\n\r\nI think this has the potential to be useful, but integrating into `postgrest-js` might also not be required, and I can probably maintain this externally.",
            "author": {
                "login": "bnjmnt4n"
            },
            "state": "CLOSED",
            "createdAt": "2021-10-02T10:10:12Z",
            "closedAt": "2022-09-26T08:46:07Z",
            "url": "https://github.com/supabase/postgrest-js/issues/217",
            "comments": [
                {
                    "id": "IC_kwDODheSms43peN5",
                    "body": "This looks rad - would be great if this could be made to work with type generation: https://github.com/supabase/postgres-meta/issues/103.\r\n\r\nI think the hairy part of implementing this is on the less exercised nooks and crannies of the PostgREST syntax:\r\n- https://postgrest.org/en/v8.0/api.html#computed-cols\r\n- https://postgrest.org/en/v8.0/api.html#hint-disambiguation\r\n- https://github.com/PostgREST/postgrest/issues/1907\r\n- https://github.com/PostgREST/postgrest/pull/1949\r\n\r\nI'd look into how PostgREST itself parses the `select`, but I'd estimate it to be more complex than the rest of postgrest-js (which isn't that complex tbh).",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-10-04T15:50:45Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/217#issuecomment-933618553"
                },
                {
                    "id": "IC_kwDODheSms43pxyH",
                    "body": "> I think the hairy part of implementing this is on the less exercised nooks and crannies of the PostgREST syntax\r\n\r\nThis is not completed, but here's an ABNF for PostgREST syntax: https://github.com/PostgREST/postgrest-docs/issues/228#issuecomment-346981443\r\n\r\nSome parts are outdated, an up-to-date select syntax should be like\r\n\r\n```abnf\r\nselect = [alias] field [cast] / embed / \"*\" / select \",\" select\r\nembed = [alias] identifier [hint] \"(\" select \")\"\r\nhint = \"!\" identifier\r\n```",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-10-04T17:28:39Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/217#issuecomment-933698695"
                },
                {
                    "id": "IC_kwDODheSms43qblK",
                    "body": "Nice! A grammar would def make this a lot easier.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-10-04T21:28:07Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/217#issuecomment-933869898"
                },
                {
                    "id": "IC_kwDODheSms43rYQD",
                    "body": "For the select syntax, I think the only major parts I'm missing are the JSON paths and casts. I think the tough part of making something like this robust is how to handle resource embedding: accurately identifying the kind of relationship and return values (eg. 1-to-1, 1-to-many), and also identifying the correct embedded resource since the target and hint could be a column name, table name or foreign key constraint. If https://github.com/supabase/postgres-meta/issues/103 allows us to export data about this information, I think most of the cases should be able to be handled, and probably the only thing that would need to be tested thoroughly is the TypeScript side.",
                    "author": {
                        "login": "bnjmnt4n"
                    },
                    "createdAt": "2021-10-05T06:51:38Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/217#issuecomment-934118403"
                },
                {
                    "id": "IC_kwDODheSms46g7Ta",
                    "body": "Update: I've made a prototype of what I've discussed in a separate repository here: https://github.com/bnjmnt4n/supabase-client. Perhaps one day (long into the future) this might be upstreamed into a version of supabase-js/postgrest-js, but there is a lot of complexity in the TypeScript code with lots of generic utility types.",
                    "author": {
                        "login": "bnjmnt4n"
                    },
                    "createdAt": "2021-11-29T14:55:16Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/217#issuecomment-981710042"
                },
                {
                    "id": "IC_kwDODheSms460sMH",
                    "body": "> Update: I've made a prototype of what I've discussed in a separate repository here: https://github.com/bnjmnt4n/supabase-client. Perhaps one day (long into the future) this might be upstreamed into a version of supabase-js/postgrest-js, but there is a lot of complexity in the TypeScript code with lots of generic utility types.\n\nNice work, thank you @bnjmnt4n, I'll   check out your repo and see if I can help.\nyou can also check out Nuxt3 repo if you have some spare time, might be helpful to see how they generate implement types for serverless functions and composables for some awesome typescript DX.",
                    "author": {
                        "login": "didavid61202"
                    },
                    "createdAt": "2021-12-06T15:36:41Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/217#issuecomment-986891015"
                },
                {
                    "id": "IC_kwDODheSms5K9v48",
                    "body": "Implemented in https://github.com/supabase/postgrest-js/pull/279.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-26T08:46:07Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/217#issuecomment-1257700924"
                }
            ]
        },
        {
            "id": "I_kwDODheSms4-KeRi",
            "number": 219,
            "title": "Allow long-running transactions at the client side or do relational inserts",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nTransactions are a fundamental concept of all database systems. The essential point of a transaction is that it bundles multiple steps into a single, all-or-nothing operation. The intermediate states between the steps are not visible to other concurrent transactions, and if some failure occurs that prevents the transaction from completing, then none of the steps affect the database at all.\r\n\r\n## Describe the solution you'd like\r\n\r\nImplement an easy way to create transactions. Something like:\r\n\r\n```js\r\ndb.runTransaction(() {\r\n  // run the operations here\r\n})\r\n```\r\n\r\n## Describe alternatives you've considered\r\n\r\nCreate a rpc function that runs the commands. This is suitable for small apps, but wouldn't work for large apps, since multiple functions would be created.\r\n\r\n## Additional context\r\n\r\nhttps://github.com/supabase/supabase-dart/issues/60\r\nhttps://www.postgresql.org/docs/8.3/tutorial-transactions.html\r\nhttps://github.com/supabase/supabase/discussions/526",
            "author": {
                "login": "bdlukaa"
            },
            "state": "OPEN",
            "createdAt": "2021-11-02T14:20:27Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/219",
            "comments": [
                {
                    "id": "IC_kwDODheSms45INfP",
                    "body": "Another alternative might be doing https://github.com/PostgREST/postgrest/issues/818#issuecomment-409981816. \r\n\r\nI've been noticing that most of the transaction needs are because of inserts on tables that are related through foreign keys. Doing it this way would save the need for exposing a generic transaction interface and avoid any potential issues with clients leaving transactions open for too long.\r\n\r\nAn insert + update + update(use case from https://github.com/supabase/supabase-dart/issues/60) could also be solved with a \"relational upsert\" interface.\r\n\r\nRelated:\r\n\r\n- https://github.com/supabase/supabase/discussions/4081\r\n- https://github.com/supabase/postgrest-js/issues/237\r\n- https://github.com/supabase/supabase/discussions/526",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-11-02T23:53:34Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-958453711"
                },
                {
                    "id": "IC_kwDODheSms45PwQC",
                    "body": "> Transactions are a fundamental concept of all database systems. The essential point of a transaction is that it bundles multiple steps into a single, all-or-nothing operation. The intermediate states between the steps are not visible to other concurrent transactions, and if some failure occurs that prevents the transaction from completing, then none of the steps affect the database at all.\r\n> \r\n> ## Describe the solution you'd like\r\n> Implement an easy way to create transactions. Something like:\r\n> \r\n> ```js\r\n> db.runTransaction(() {\r\n>   // run the operations here\r\n> })\r\n> ```\r\n> \r\n> ## Describe alternatives you've considered\r\n> Create a rpc function that runs the commands. This is suitable for small apps, but wouldn't work for large apps, since multiple functions would be created.\r\n\r\n\r\nI totally agree with the viewpoint. \r\nI am developing a big project App and it need lots of database actions for handling the project's demands. The data structure complexities are not easy to handle by rpc for complex arguments which is also hard to maintain. \r\n\r\nSo \r\n\r\n**db.runTransaction(() {\r\n   // run the operations here\r\n})**\r\n\r\nthe above transaction functionality is urgent needed as the standard equipment for supabase.dart. \r\n\r\nI appreciated!!\r\n",
                    "author": {
                        "login": "JasonChiu-dev"
                    },
                    "createdAt": "2021-11-04T03:43:11Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-960431106"
                },
                {
                    "id": "IC_kwDODheSms5Fs-w_",
                    "body": "Hi! What's the status of this issue?",
                    "author": {
                        "login": "dreinon"
                    },
                    "createdAt": "2022-06-29T00:45:35Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1169419327"
                },
                {
                    "id": "IC_kwDODheSms5G1wFk",
                    "body": "Also interested in if there has been any progress made on this? We are deciding on the backend for our stack and the lack of transactions will likely rule out supabase unless it is on the roadmap for this year.",
                    "author": {
                        "login": "cory-weiner"
                    },
                    "createdAt": "2022-07-19T01:28:14Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1188495716"
                },
                {
                    "id": "IC_kwDODheSms5G19Lu",
                    "body": "@dreinon @cory-weiner I'll revisit this one after launch week(August). ",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-07-19T03:19:08Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1188549358"
                },
                {
                    "id": "IC_kwDODheSms5H_1XJ",
                    "body": "@steve-chavez imho this feature is very important. I can't think of any non-trivial RDBMS use-case that can work without transactions - except simple apps without many relationships.\r\nData is relational, so is interaction with data.\r\nHaving to outsource almost everything into Postgres functions is a bit cumbersome.",
                    "author": {
                        "login": "steffenstolze"
                    },
                    "createdAt": "2022-08-08T09:59:27Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1207915977"
                },
                {
                    "id": "IC_kwDODheSms5IVYPD",
                    "body": "Also wanted to agree with the previous comment that supabase without transactions is borderline unusable.\r\nNo app with basic relationships can be reliably ran this way.",
                    "author": {
                        "login": "giladv"
                    },
                    "createdAt": "2022-08-12T22:26:22Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1213563843"
                },
                {
                    "id": "IC_kwDODheSms5JOJuO",
                    "body": "> @dreinon @cory-weiner I'll revisit this one after launch week(August).\r\n\r\nDo you have an update on this? really curious!",
                    "author": {
                        "login": "unknown1337"
                    },
                    "createdAt": "2022-08-26T12:48:03Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1228446606"
                },
                {
                    "id": "IC_kwDODheSms5JPHag",
                    "body": "Yeah, I made a proposal [here](https://github.com/PostgREST/postgrest/issues/286#issuecomment-1225006540) for the API side. \r\n\r\nAs a first step it will only allow doing multiple mutations(update, insert, delete) on a transaction.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-08-26T16:30:21Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1228699296"
                },
                {
                    "id": "IC_kwDODheSms5K_LM2",
                    "body": "dear, one month has passed now, do you have any idea if this great feature is being picked up? :)",
                    "author": {
                        "login": "unknown1337"
                    },
                    "createdAt": "2022-09-26T13:51:15Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1258074934"
                },
                {
                    "id": "IC_kwDODheSms5MO5ep",
                    "body": "> dear, one month has passed now, do you have any idea if this great feature is being picked up? :)\r\n\r\nfriendly reminder, really curious! :)",
                    "author": {
                        "login": "unknown1337"
                    },
                    "createdAt": "2022-10-14T12:57:24Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1278973865"
                },
                {
                    "id": "IC_kwDODheSms5OPlCk",
                    "body": "It's been quite a while since any update, any headway on development and/or direction on this? Been keeping an eye on this as well as https://github.com/PostgREST/postgrest/issues/286 and https://github.com/PostgREST/postgrest/issues/818 (which I believe are all trying to solve the same/similar issue) and haven't seen anything yet.\r\n\r\nHandling relationships in supabase is pretty awful (imo) without this, would love to see this come to being.",
                    "author": {
                        "login": "gitbugr"
                    },
                    "createdAt": "2022-11-13T11:24:56Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1312706724"
                },
                {
                    "id": "IC_kwDODheSms5UGkez",
                    "body": "This is a deal breaker for my project. Everything I have to do, has some sort of transaction use cases. Writing complex bits of logic inside the database is scary and awful. Simple updates as triggers and all are fine, but anything beyond this is just very difficult.",
                    "author": {
                        "login": "arpanpreneur"
                    },
                    "createdAt": "2023-01-31T20:19:51Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1411008435"
                },
                {
                    "id": "IC_kwDODheSms5V_EAy",
                    "body": "This is really important for the backend development experience, we eagerly await this! \ud83d\ude04 ",
                    "author": {
                        "login": "yoont4"
                    },
                    "createdAt": "2023-02-24T00:01:24Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1442594866"
                },
                {
                    "id": "IC_kwDODheSms5WYKdP",
                    "body": "Also throwing my vote in. This might end up being a dealbreaker on a significant project I'm about to embark on, sadly \ud83d\ude22 It's a shame; virtually everything else about supabase would make it a perfect fit",
                    "author": {
                        "login": "KenAKAFrosty"
                    },
                    "createdAt": "2023-03-01T01:22:35Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1449174863"
                },
                {
                    "id": "IC_kwDODheSms5W4xzK",
                    "body": "Supabase Team, you must be out of your mind to not give this issue more attention. A feature that is so integral, so critical to an RDBMS is missing from your stack. And the lack of requisite attention is astonishing.\r\n\r\nFor us, this is a deal breaker. We will be steering clear of Supabase for the foreseeable future when picking a BaaS for any of our projects, until we find that transactions have been added to the client SDKs - especially Javascript.",
                    "author": {
                        "login": "adifyr"
                    },
                    "createdAt": "2023-03-07T08:05:33Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1457724618"
                },
                {
                    "id": "IC_kwDODheSms5W5p_p",
                    "body": "To be fair, you could always use a database function for that and trigger it via client SDK. This is how we did it. So its technically possible, just a bit inconvenient.",
                    "author": {
                        "login": "steffenstolze"
                    },
                    "createdAt": "2023-03-07T10:50:01Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1457954793"
                },
                {
                    "id": "IC_kwDODheSms5XAB0-",
                    "body": "In our particular case, \"bit inconvenient\" is an understatement. For the complex business logic we're currently employing, using database functions is borderline infeasible.",
                    "author": {
                        "login": "adifyr"
                    },
                    "createdAt": "2023-03-08T06:48:04Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1459625278"
                },
                {
                    "id": "IC_kwDODheSms5XAHeq",
                    "body": "> In our particular case, \"bit inconvenient\" is an understatement. For the complex business logic we're currently employing, using database functions is borderline infeasible.\n\nI wanted to be polite. Yes, using transactions from the client SDK would be huge.",
                    "author": {
                        "login": "steffenstolze"
                    },
                    "createdAt": "2023-03-08T07:16:17Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1459648426"
                },
                {
                    "id": "IC_kwDODheSms5XRZR5",
                    "body": "@adifyr Another alternative would be to use a supabase edge function with a different client library such as https://github.com/porsager/postgres which supports transactions. You can keep your complex business logic in JS and use it there. Might be easier than trying to translate to plpgsql.",
                    "author": {
                        "login": "evelant"
                    },
                    "createdAt": "2023-03-10T18:01:42Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1464177785"
                },
                {
                    "id": "IC_kwDODheSms5X9X4Z",
                    "body": "@evelant We recently tried incorporating a third-party library (not the one you linked to), and had a less than ideal experience. Nevertheless, thanks for the link. Will try out your library as well.",
                    "author": {
                        "login": "adifyr"
                    },
                    "createdAt": "2023-03-20T06:48:32Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1475706393"
                },
                {
                    "id": "IC_kwDODheSms5ZeC68",
                    "body": "The Supabase client seems more geared toward exposing the base of Postgres's features (via PostgREST). Hence, requesting client-side transactions is more of a DX issue since one can get `transactions` by defining Postgres SQL functions and calling them via `rpc`.\r\n\r\nFor some context, database transaction handling is **_not_** a trivial feature. Even some full-fledge dedicated ORMs and query builders struggle with this feature and often even define their APIs around the limitations and requirements of transactions. I've used JS/TS ORMs like Prisma, TypeORM, Sequelize, Knex, and believe me; transactions are not easy. Implementation and maintenance of this feature are critical since faulty logic can have very detrimental and even catastrophic consequences to data performance and integrity (DB deadlocks, loss of data, connection pooling issues, etc). I am sure the Supabase team knows this well, and they probably would rather leverage PostgREST if it solves this problem.\r\n\r\nSo here are my suggestions, given the complexity of the feature and unknown timeframe:\r\n\r\n1. If you have business-sensitive or critical logic to the point that you require transactions, I recommend keeping the code in your backend. This makes the issue of UI/FE use moot since you would use the Supabase client `functions` or `rpc` calls anyway. The exceptions could then be some simple inserts done UI side. But for complex transactional logic, I'd use edge functions or DB functions. If not, you risk complicating and completely exposing your proprietary business logic, and I would advise against this.\r\n2. Invest in developing SQL skills. Supabase DB is PostgreSQL at its core, and PostgreSQL is wildly powerful and underestimated. Exposing many of its features (like transactions) via the Supabase client will be difficult and limiting compared to native, pure SQL. Leverage docs, communities, and ChatGPT to help you learn and explain how to implement tough logic. With this route, I recommend defining schema functions in SQL and calling them using `rpc`. You'll have more control and a much more robust solution that uses the full power of SQL. The downsides are the DX is different, the learning curve is steeper, and it takes a bit more time and effort to set up and iterate.\r\n3. If you still want to leverage some JS, you can use JS in Postgres! It's called [PL/v8](https://supabase.com/docs/guides/database/extensions/plv8). I haven't used it myself, but it is possible to combine it. You can also call [HTTP APIs](https://supabase.com/docs/guides/database/extensions/http) from SQL. Like the tip above, you can define functions, implement them in JS, and call them using`rpc`.\r\n4. If SQL is too daunting or you _must_ use JS/TS, another solution is to use edge functions with a DB interface package. Since Supabase is not a full fledge ORM, use a dedicated ORM/query builder library like [Prisma](https://www.prisma.io/docs/concepts/components/prisma-client/transactions) or [Sequelize](https://sequelize.org/docs/v6/other-topics/transactions/) that does support `transactions` (and potentially other DB features while you're at it) to connect to the DB and run custom logic. We've opted to use [Kysely](https://kysely.dev/) and I cannot recommend it enough. The issues here, though, are the DB connection and model setups, potentially the auth, and RLS policies, which are some things to look at.\r\n\r\nTo the Supabase team, if DX is the issue, perhaps dedicating time to ease the pain of developers wanting to leverage PostgreSQL fully can help a lot. \ud83d\ude03 Some ideas that come to mind are:\r\n\r\n1. Auto-generate a DB SQL function for `INSERT` or `UPDATE` that handles the basic logic when a relation is added to a table. This makes the function automatically available from the Supabase client when creating a relationship. Users can then modify them to their needs.\r\n2. Make it easier to use JS in SQL functions by pre-generating the templates for a custom function\r\n3. When creating a relation, the UI could suggest adding a function and creating the scaffolding for the function so people can add their logic.\r\n4. Improving the creation and management of RPC/Edge function",
                    "author": {
                        "login": "bombillazo"
                    },
                    "createdAt": "2023-04-09T05:54:49Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1501048508"
                },
                {
                    "id": "IC_kwDODheSms5Zehlu",
                    "body": "> The Supabase client seems more geared toward exposing the base of Postgres's features (via PostgREST). Hence, requesting client-side transactions is more of a DX issue since one can get `transactions` by defining Postgres SQL functions and calling them via `rpc`.\n\nI would argue that as transactions are a Postgres feature, it's within the scope of Postgrest/Supabase. It's for sure a more complicated feature to implement safely, which has been discussed, but I'd argue the fundamental idea of exposing Postgres features to the client side doesn't exclude this. It's a choice to not support in favour of RPC. If RPC didn't exist, would you make the same arguement?\n\n\n> For some context, database transaction handling is **_not_** a trivial feature.\n> ...\n> \n> So here are my suggestions, given the complexity of the feature and unknown timeframe:\n> \n> [Just use RPC / Write a backend]\n>\n\nI'm sorry, but I disagree completely with this idea. The issue is not that it's scary to use SQL, it's about keeping a consistent workflow and allowing for abstraction. Neither are possible when you're storing queries on RPC. Context switching from JS/TS to SQL is a pain generally, but if you've gotten so far into writing a query, then realised you need to use a transaction, something which should be trivial from a user's perspective, is not a great time to then need to rewrite in SQL. - if that's how we're to do things, why not write everything as an RPC? I imagine you'd experience less pain. It's silly. RPC's are a workaround, not a solution.\n\nAdditionally, Supabase's entire pitch is that it's an open source Firebase alternative, of which Transactions are available.\n\n> 1. Auto-generate a DB SQL function for `INSERT` or `UPDATE` that handles the basic logic when a relation is added to a table. This makes the function automatically available from the Supabase client when creating a relationship. Users can then modify them to their needs.\n\nI think this would be very helpful in the mean time while waiting on transaction support.\n",
                    "author": {
                        "login": "gitbugr"
                    },
                    "createdAt": "2023-04-09T17:17:43Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1501174126"
                },
                {
                    "id": "IC_kwDODheSms5ZeoDv",
                    "body": "> I would argue that as transactions are a Postgres feature, it's within the scope of Postgrest/Supabase. It's for sure a more complicated feature to implement safely, which has been discussed, but I'd argue the fundamental idea of exposing Postgres features to the client side doesn't exclude this. It's a choice to not support in favour of RPC. If RPC didn't exist, would you make the same argument?\r\n\r\nI agree it would be a great feature. Still, my point is that the client isn't built as a full-fledge ORM, but a set of abstractions using other open-source tools made for Supabase, particularly the DB interface uses`PostgREST` for its core DB feature abstractions. Until they solve [missing transactions](https://github.com/PostgREST/postgrest/issues/286), it's unlikely that this feature will come from the Supabase team, and putting the onus on the Supabase client devs is not trivial. RPC is the \"[choice](https://postgrest.org/en/stable/api.html#stored-procedures)\" made by PostgREST to use transactions until they implement some other API.\r\n\r\n> Additionally, Supabase's entire pitch is that it's an open-source Firebase alternative, of which Transactions are available.\r\n\r\nAgain, it's important to clarify `transactions` are possible, just not using the same JS client-side API convenience as Firebase. For some, this is a deal-breaker; for others, it's a different approach required. Hopefully PostgREST can find a solution, or the Supabase team invests the effort to this for full feature parity. ",
                    "author": {
                        "login": "bombillazo"
                    },
                    "createdAt": "2023-04-09T19:49:35Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1501200623"
                },
                {
                    "id": "IC_kwDODheSms5Zes1Q",
                    "body": "> Still, my point is that the client isn't built as a full-fledge ORM, but a set of abstractions using other open-source tools made for Supabase\r\n\r\nI don't think anybody is asking for the js library to be a full-fledged ORM, neither do I believe transaction support would make it so.\r\n\r\n> it's unlikely that this feature will come from the Supabase team\r\n\r\nSteve (the owner/maintainer of postgrest) works at Supabase so it quite literally would. Though admittedly I don't know to what capacity their relationship exists or whether Supabase dictates priority of certain issues/features Steve picks up.\r\n\r\nGiven the previous discussion in this issue and related, it sounds like it's on their todo list, I just don't think it's helpful to downplay the importance of such a feature. \"use RPC\" is not a solution, it's a bite-your-tongue-and-deal-with-it workaround. RPC should ideally be used for times where you need to circumvent row-level permissions, or execute SQL in  a controlled way that you wouldn't want to just expose to the client-side... As an alternative to transactions? That makes real-world usage incredibly painful for even the most basic of relational data. \r\n\r\nAlso just to make it clear, I'm incredibly grateful for the work Steve does, and the Supabase team with developing PostREST and Supabase. I'm very much eagerly waiting in excitement for when I can take advantage of these features which I think are essential to real-world usage, as I said, I just don't want to downplay how important I think they are.\r\n\r\nEdit: @bombillazo After re-reading, just want to apologise if I came across a little hostile, I don't mean to be. Just felt quite strongly.",
                    "author": {
                        "login": "gitbugr"
                    },
                    "createdAt": "2023-04-09T21:45:57Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1501220176"
                },
                {
                    "id": "IC_kwDODheSms5Zgoj5",
                    "body": "@evelant [Postgres.js](https://github.com/porsager/postgres) is working just fine for us in the mean time. Thanks for the link. Awaiting updates from the Supabase Team on the inclusion of transactions natively in PostgREST.",
                    "author": {
                        "login": "adifyr"
                    },
                    "createdAt": "2023-04-10T11:47:42Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1501726969"
                },
                {
                    "id": "IC_kwDODheSms5ZmjcQ",
                    "body": "> Edit: @bombillazo After re-reading, just want to apologise if I came across a little hostile, I don't mean to be. Just felt quite strongly.\r\n\r\nNo worries, no hard feelings \ud83d\ude42  I don't take things personally. I understand the frustration from the lack of this super convenient feature and the desire to get help to move this forward.\r\n\r\nHopefully, they can invest the time in a solution that makes the Supabase client stack up with Firebase and other ORMs alternatives. ",
                    "author": {
                        "login": "bombillazo"
                    },
                    "createdAt": "2023-04-11T12:53:13Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1503278864"
                },
                {
                    "id": "IC_kwDODheSms5aYHAR",
                    "body": "The more I use supabase the more I realize most database operations are better done on the server anyways, so good to know we can still just access the database directly and get transaction support with something like postgres.js.",
                    "author": {
                        "login": "mlynch"
                    },
                    "createdAt": "2023-04-20T12:48:48Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1516269585"
                },
                {
                    "id": "IC_kwDODheSms5ctGZz",
                    "body": "any updates on it ?",
                    "author": {
                        "login": "akarabach"
                    },
                    "createdAt": "2023-05-19T22:19:45Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1555326579"
                },
                {
                    "id": "IC_kwDODheSms5fQEic",
                    "body": "This is very, very, very important to my project.\r\n\r\nAnyone here have time to prompt (ask) AI for a solution...",
                    "author": {
                        "login": "polenvinagre"
                    },
                    "createdAt": "2023-06-20T03:11:03Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1598048412"
                },
                {
                    "id": "IC_kwDODheSms5fd2GI",
                    "body": "would be a very nice feature, dropping a comment later i'll check",
                    "author": {
                        "login": "Logaritma26"
                    },
                    "createdAt": "2023-06-21T20:53:36Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1601659272"
                },
                {
                    "id": "IC_kwDODheSms5jVrGn",
                    "body": "+1 would like to see transactions for Supabase",
                    "author": {
                        "login": "hichana"
                    },
                    "createdAt": "2023-08-05T22:27:10Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1666625959"
                },
                {
                    "id": "IC_kwDODheSms5jVxkL",
                    "body": "@bombillazo Here are my arguments to understand the breadth of this issue further and I do have an inclination towards one solution approach that I would like to suggest here.\r\n\r\n### Reply to your suggestions\r\n\r\n1. **Business Sensitive logic should be a part of your backend**. - 100% agree, but Supabase Edge functions also don't support transactions and the recommended way to interact with the database is via the same JS client API; which IMHO is a wrong design choice. Why would I ever want to interact with my DB using a REST api layer? The core issue is, REST is stateless (HTTP) and DB transactions are a highly stateful affair (reason why every ACID compliant DB uses TCP based stateful protocols). Every query is a REST request which runs in a separate DB connection, so transactions are impossible with PostgREST at least in any clean manner.\r\n2. **Invest in developing SQL skills** - You are misappropiating a design flaw as a DX issue. I have never seen a backend system in my life that talks to its own ACID compliant DB over a REST protocol. The fact is, there are inherent advantages of keeping large code (core business logic with decision making and things like that) within your main codebase and not as DB objects. Also, such business logic is often imperative and hence more readable in a language designed for it like Python/TS instead of a language like PLPGSQL which is built for more declarative logic. You can design better, using SOLID principles and OOP. Not to mention it is heck easier to debug as well. \r\n3. **If you still want to use JS** - Not even a point of discussion here. Also your suggestion in this regard donesn't solve my problem of not wanting to keep core logic inside database instead of application codebase.\r\n4. **Use an ORM library** - At this point why bother using Supabase at all? I could more easily do that in a Node application or a custom backend (even maintain connection pools which we won't be able to do in edge functions). If I am going to make models and stuff in JS, there are ways to get APIs running similar to PostgREST/Supabase without even writing much code with Prisma and libraries like that. And I would use those client libraries in my frontend app instead. Not to mention, it gives more control over multi-tenancy than using RLS policies which are known to have serious scalability problems. And want serverless? I would happily deploy my node app in a Azure Container Apps or similar platforms and scale it in a serverless manner. Oh, those libraries you mentioned probably won't work with Deno platform that supabase edge functions run on.\r\n\r\nSincere apologies if the above come of as rude / too strong.\r\n\r\n### My Solution Proposal\r\n\r\n**TLDR**: Make two implementations of the same sdk interface, one for use in the edge functions and the other for use in the frontend apps.\r\n\r\n1. Take the current interface of the \"client-sdk\" and make package just the dumb interfaces in a JS package.\r\n2. Make two implementations of the same interfaces, same methods. One for the frontend app that uses the PostgREST like it does now (so no change). Another for use in the edge functions where it will actually build queries and submit to the DB instead of relying on PostgREST. Extend these interfaces here with support for transaction control (just like Knex).\r\n3. Make ways to maintain connection pool for reuse connections between edge functions invocations (possibly it already exposes a PgPool endpoint).\r\n4. The suggestion in 2 in this section is very different from point 4 in the perivious section because we are not introducing any extra alien interface like Prisma or Knex which has a lot of overlapping features with Supabase. I am not even sure if Knex or Prisma would work in Deno to say the least. Then there are connection level params that Supabase library automatically sets on the DB connections from PostgREST for RLS to work correctly (read username and all there). Also, I want to write in a syntax more consistent with the UI library just with the perks of being in the backend. \r\n5. Make features to not allow any access to certain tables from the frontend sdk but allow from backend sdk.\r\n6. Backend sdk should also be subject/scoped to the RLS policies given for the tables.\r\n7. Make it easier to set row-level multi-tenancy by auto adding Where clauses in the queries instead of having to do RLS for this. Somewhat like django-multitenant or acts-as-tenant. Most people are trying to build SaaS products probably.\r\nhttps://blog.satoricyber.com/why-maintaining-row-level-security-in-postgres-is-hard/\r\n\r\n#### What would this enable?\r\nThis way we can write code that is in a consistent syntax. Potentially we can move code written in the frontend to the backend when we need to without making any change. Can use full DB power in application code by using Atomic Transactions when in the edge functions. For frontend you can still use the PostgREST endpoints.\r\n\r\n#### Potential pitfalls\r\n1. If we screw up the new implementation in the server, developers relying on Supabase might get surprised when they see the edge functions that were running just fine has started giving issues.\r\n",
                    "author": {
                        "login": "arpanpreneur"
                    },
                    "createdAt": "2023-08-06T00:22:36Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1666652427"
                },
                {
                    "id": "IC_kwDODheSms5jV8UF",
                    "body": "Hey, first, I have no stake in Supabase as a company or technology; ultimately, I have no personal matter in any current position in this issue other than the desire as a developer to get this feature. I may come off as dismissive, but I am being pragmatic and non-optimistic. I fully support resolving this issue to ease the development of transactional logic in my backend. That said, I am not holding my breath that this will be available anytime soon, nor am I architecting my solutions with that expectation.\r\n\r\nMy observation was a raw, objective assessment of the technology, how it stands, and how it's been managed since this issue was created. It's been four months since my original post, with the issue nearing two years, and I still see no signs of it being resolved anytime soon. My points are the practical alternatives ( given Supabase's approach to its client lib) while transactions are resolved. \r\n\r\nYour suggestions on point 4 sound idealistic; the Supabase client should become (or behave like) an ORM. However, that goes back to one of my initial points: I don't think Supabase ever set out to build a custom ORM that incorporates all the advanced features. The Supabase team consciously decided to leverage PostgREST with its virtues and flaws to provide a solution. As I mentioned before, changing or adding the ORM paradigm in parallel is a lot of work. It's the ideal solution, but it's probably years off. As soon as I see any signs from Supabase that they are working on an ORM-like solution or PostgREST somehow resolves the transactional limitations, my sentiment about the delivery of this feature will change (hopefully, the Supabase team is secretly refactoring the whole client/approach and introducing another architecture apart from PostgREST).\r\n\r\nSo, after using Supabase for months now, I've come to the following conclusions:\r\n\r\n- Custom, secure client-side transactions are nearly impossible since it requires keeping a direct connection to the DB open and managed (unless there is a secure way to connect to the DB from the client that I need to learn of).\r\n- Even then, if we use the client on the backend only, adding support for full transaction management means abandoning/replacing (fully or in parallel) PostgREST, which is a big part of the Supabase architecture.\r\n- Until that happens, I don't expect support for transactions with the Supabase client, and if you need transactions in the JS space of your logic, you **_WILL_** need to use a true ORM/DB library that supports that.\r\n- In the case of edge functions, I completely agree. It's [another](https://github.com/orgs/supabase/discussions/8779#discussioncomment-5888399) [issue](https://github.com/orgs/supabase/discussions/7742#discussioncomment-6311086) I've taken issue with some of Supabase's tech decisions, so they've kinda shot themselves in the foot in some ways; I agree setting up another ORM is very tedious, even more so when you use Deno functions + redundancy of the Supabase client.\r\n\r\nIf these are deal breakers, then yeah, Supabase made technological choices that do not provide the features you require to have the DX/programming experience you desire, and adding those features could be years away. While we wait for this feature, you can program around it with the alternatives I've shared or not use Supabase. Not the ideal state we want, but it's where we are now.",
                    "author": {
                        "login": "bombillazo"
                    },
                    "createdAt": "2023-08-06T03:30:03Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1666696453"
                },
                {
                    "id": "IC_kwDODheSms5kYZ1w",
                    "body": "> Auto-generate a DB SQL function for INSERT or UPDATE that handles the basic logic when a relation is added to a table. This makes the function automatically available from the Supabase client when creating a relationship. Users can then modify them to their needs.\r\n\r\n@bombillazo @gitbugr @arpanpreneur What if we instead allow creating database objects from javascript? \r\n\r\n```js\r\n// create a function\r\nlet { status } = await meta\r\n  .from('function')\r\n  .insert({\r\n    schema_name: 'public', name : 'subtract',\r\n    parameters: ['a integer', 'b integer'],\r\n    return_type: 'integer', language: 'sql',\r\n    definition: 'select a - b'\r\n  })\r\n\r\nlet { body, error } = await pub\r\n  .rpc('subtract', {a: 63, b: 13})\r\n\r\nconsole.log(body);\r\n50\r\n```\r\n\r\nFor more details, see https://gist.github.com/steve-chavez/c7e99bc5d8e7acba7166dbf108f7e18f (this is an old idea that was never executed).\r\n\r\nThis would only be possible with the `service_role` role and the JS wouldn't be exposed to clients.\r\n\r\n## Advantages\r\n\r\n- Business logic still part of the backend.\r\n- Get full SQL flexibility (transactions, multiple statements). \r\n\r\n## Disadvantages\r\n\r\n- Conflicts with pure SQL migrations. Most users would likely manage all their db objects with JS.\r\n- service_role or JS snippets leaking. Nowadays you also have to be careful with `service_role` though. This could also be prevented with the CLI providing a structure for the \"database JS\" files.\r\n- Any others?\r\n\r\n## Further possibilities\r\n\r\n- better integration with plv8.\r\n- shortcuts for creating functions with json parameters/return type. ",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-08-18T15:56:54Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1684118896"
                },
                {
                    "id": "IC_kwDODheSms5kYipS",
                    "body": "On the ORM/db library point, I chose to use [Kysely](https://kysely.dev/) for all our Deno backend logic, and it's been a great experience, what I initially expected from the Supabase client.\r\n\r\nIs it \"clean\" to have to manage two clients in tandem? No, but hey, it works and is a practical alternative given the options and \"solves\" this while we get native support from a Supabase client.",
                    "author": {
                        "login": "bombillazo"
                    },
                    "createdAt": "2023-08-18T16:26:35Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1684154962"
                },
                {
                    "id": "IC_kwDODheSms5nz3Kr",
                    "body": "I would love to pay if the feature is on.\r\n\r\n",
                    "author": {
                        "login": "danaoairuike"
                    },
                    "createdAt": "2023-09-30T03:46:59Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/219#issuecomment-1741648555"
                }
            ]
        },
        {
            "id": "I_kwDODheSms4-OJdg",
            "number": 220,
            "title": "Update non-public schema",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nI can't seem to be able to update non-public schema tables (e.g. `auth.users`):\r\n\r\n```javascript\r\nawait supabase.from('auth.users').update({ phone: user.phone }).eq('id', user.id);\r\n```\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Try to update a table not in the `public` PostgreSQL schema.\r\n2. See a 404 error (e.g. table `public.auth.users` could not be found).\r\n\r\n## Expected behavior\r\n\r\nI should be able to update non-public schemas without PostgREST adding that `public` prefix (e.g. `auth.users` should update `auth.users` not `public.auth.users` which doesn't exist).\r\n\r\n## Screenshots\r\n\r\nHere's the error response from Supabase's PostgREST API:\r\n\r\n<img width=\"553\" alt=\"image\" src=\"https://user-images.githubusercontent.com/20798889/140164006-6792a9c2-971d-4e07-a287-d8693862160f.png\">\r\n\r\n## System information\r\n\r\n- OS: macOS Big Sur\r\n- Version of supabase-js: 1.25.2\r\n- Version of Node.js: 16.13.0\r\n\r\n## Additional context\r\n\r\nThis would be fixed by supabase/gotrue-js#154.\r\n",
            "author": {
                "login": "nicholaschiang"
            },
            "state": "CLOSED",
            "createdAt": "2021-11-03T17:47:35Z",
            "closedAt": "2022-09-26T09:01:42Z",
            "url": "https://github.com/supabase/postgrest-js/issues/220",
            "comments": [
                {
                    "id": "IC_kwDODheSms45VXL6",
                    "body": "The postgrest constructor actually accepts the `schema` option to configure which schema requests are sent to (https://supabase.github.io/postgrest-js/classes/postgrestclient.html#constructor). However, this requires the PostgREST to be configured with `db-schema` (https://postgrest.org/en/v8.0/api.html#switching-schemas), which is not available in Supabase platform right now. Additionally, I think the Postgres roles used by PostgREST right now do not have access to the `auth` schema (correct me if I'm wrong).",
                    "author": {
                        "login": "bnjmnt4n"
                    },
                    "createdAt": "2021-11-05T13:37:43Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/220#issuecomment-961901306"
                },
                {
                    "id": "IC_kwDODheSms45Vesi",
                    "body": "Edit: looks like the `db-schema` property was recently made available for access in Supabase platform: https://github.com/supabase/supabase/pull/2683.",
                    "author": {
                        "login": "bnjmnt4n"
                    },
                    "createdAt": "2021-11-05T14:17:20Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/220#issuecomment-961932066"
                },
                {
                    "id": "IC_kwDODheSms5K90a-",
                    "body": "As mentioned above, you can configure the [setting](https://app.supabase.com/project/_/settings/api) (API settings > Exposed schemas) and set the `schema` property when initializing the client lib.\r\n\r\nYou also need to apply `GRANT`s for each custom schema. For a user-facing schema meant to be accessed via the `anon` key:\r\n\r\n```sql\r\ncreate schema my_schema;\r\ngrant usage on schema my_schema to postgres, anon, authenticated, service_role;\r\n\r\ngrant all on all tables in schema my_schema to postgres, anon, authenticated, service_role;\r\ngrant all on all functions in schema my_schema to postgres, anon, authenticated, service_role;\r\ngrant all on all sequences in schema my_schema to postgres, anon, authenticated, service_role;\r\n\r\nalter default privileges for role postgres in schema my_schema grant all on tables to anon, authenticated, service_role;\r\nalter default privileges for role postgres in schema my_schema grant all on functions to anon, authenticated, service_role;\r\nalter default privileges for role postgres in schema my_schema grant all on sequences to anon, authenticated, service_role;\r\n```\r\n\r\nFor an internal schema only meant to be accessed via the `service_role` key:\r\n\r\n```sql\r\ncreate schema my_schema;\r\ngrant usage on schema my_schema to service_role;\r\n\r\ngrant all on all tables in schema my_schema to postgres, service_role;\r\ngrant all on all functions in schema my_schema to postgres, service_role;\r\ngrant all on all sequences in schema my_schema to postgres, service_role;\r\n\r\nalter default privileges for role postgres in schema my_schema grant all on tables to service_role;\r\nalter default privileges for role postgres in schema my_schema grant all on functions to service_role;\r\nalter default privileges for role postgres in schema my_schema grant all on sequences to service_role;\r\n```\r\n\r\n(This should be put in our docs at some point)",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-26T09:01:42Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/220#issuecomment-1257719486"
                }
            ]
        },
        {
            "id": "I_kwDODheSms4-VH_q",
            "number": 221,
            "title": "URLSearchParamSet in react-native not implemented error",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen performing a select query on a supabase database in an expo reactnative project, it calls the URL module from React-Native which isn't implemented.\r\n\r\n## To Reproduce\r\n\r\nSetup an expo project and add a simple select query. Run the project on Android.\r\n\r\n## Expected behavior\r\n\r\nQuery is executed normally.\r\n\r\n## Screenshots\r\n\r\n![afbeelding](https://user-images.githubusercontent.com/9497296/140503068-05f0ca19-681c-444f-9d40-be4d2a83c589.png)\r\n\r\n## System information\r\n\r\n- OS: Windows WSL\r\n- Version of supabase-js: 1.25.2\r\n- Version of Node.js: v14.17\r\n\r\n## Additional context\r\n\r\nWhen googling I stumbled upon [this blog post](https://justinnoel.dev/2020/12/08/react-native-urlsearchparams-error-not-implemented/) which provides a workaround, but would be great if it got supported out of the box. \r\n",
            "author": {
                "login": "theking465"
            },
            "state": "CLOSED",
            "createdAt": "2021-11-05T11:22:36Z",
            "closedAt": "2021-11-08T06:11:54Z",
            "url": "https://github.com/supabase/postgrest-js/issues/221",
            "comments": [
                {
                    "id": "IC_kwDODheSms45Y82g",
                    "body": "Looks similar to https://github.com/supabase/supabase/issues/353. The URL API exists on the browser, web workers, and Node.js, so the workaround is necessary for now until RN fixes it.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-11-08T06:11:54Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/221#issuecomment-962842016"
                }
            ]
        },
        {
            "id": "I_kwDODheSms4-Y74E",
            "number": 223,
            "title": "Apply \"single()\" to foreign keys that only one match can be achieved. Automatically or Manually as option.",
            "body": "# Feature request\r\nWhen requesting data to a foreign table that is related to the current one by an intermediate table with 2 primary keys, the result should be either an object or nothing, instead of an array.\r\n\r\n\r\n\r\n## Is your feature request related to a problem? Please describe.\r\nCurrently I have a small DB relationship to manage role permissions in a manual way for the users.\r\nRandom tables belong to a Project and those projects has several member and roles to manage their projects.\r\nExample for the tables needed here:\r\n<img width=\"935\" alt=\"Screenshot 2021-11-07 at 11 57 28\" src=\"https://user-images.githubusercontent.com/8260475/140642753-d67012ec-e3e8-4971-8c7c-2234a26c9c44.png\">\r\n**Since projectMembers has 2 primary keys, the relation between a projects and a users is unique and so as well with the role between them**.\r\nHowever a query like this:\r\n```javascript\r\nconst { data, error } = await supabase\r\n    .from(\"users\")\r\n    .select(\"name, project:projects(name, role:roles(name))\")\r\n    .eq(\"id\", 1) // id of the user\r\n    .eq(\"project.id\", 2) // id of the project\r\n    .single();\r\n```\r\nreturns:\r\n```jsonc\r\n{\r\n  \"name\": \"John\",\r\n  \"project\": [ // it is a list, but only one could ever match\r\n    { \r\n       \"name\": \"ACME\",\r\n       \"role\": [ // it is a list, but only one could ever match\r\n         { \"name\": \"project_admin\" }\r\n       ] \r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n\r\n\r\nA clear and concise description of what you want and what your use case is.\r\n\r\n## Describe the solution you'd like\r\n**If this feature cannot be added automatically for whatever reason, a manual approach should be available to tell that a given foreign table should return single**.\r\nsomething like:\r\n```javascript\r\nawait supabase.from('users').select(\"name, project:projects(name, role:roles(name))\")\r\n.eq(\"id\", 1) // user fixed\r\n.eq(\"project.id\", 1) // project fixed\r\n.single(\r\n    true, // referring to current table\r\n    [{foreignTable: \"projects\"},{foreignTable: \"roles\"}] // list of foreign tables that should be single. Could be also a single object for only one foreign table\r\n);\r\n```\r\nWith a response of:\r\n```jsonc\r\n{\r\n  \"name\": \"John\",\r\n  \"project\": { \r\n    \"name\": \"ACME\",\r\n    \"role\": {\r\n      \"name\": \"project_admin\" \r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## Describe alternatives you've considered\r\n\r\nCurrently I only use a simple JS post script like \r\n```javascript\r\ndata = {\r\n  ...data,\r\n  project: {\r\n    ...data.project[0],\r\n    role: data.project[0].role[0]\r\n  }\r\n```\r\nBut this is a big overhead for the many 2 Primary Key relationships I have between the tables.\r\n\r\nI was considering creating a Recursive Function for all responses to always return 1 object when only 1 item is in an array, but this does not apply to all the cases and sometimes I do want to keep the array of a single item.\r\n\r\n",
            "author": {
                "login": "Egnus"
            },
            "state": "CLOSED",
            "createdAt": "2021-11-07T11:37:30Z",
            "closedAt": "2022-11-30T23:43:47Z",
            "url": "https://github.com/supabase/postgrest-js/issues/223",
            "comments": [
                {
                    "id": "IC_kwDODheSms5CkKQS",
                    "body": "Related to https://github.com/PostgREST/postgrest/issues/1984\r\n\r\nDiscussions:\r\n\r\n- https://github.com/supabase/supabase/discussions/7610",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-05-04T00:07:18Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/223#issuecomment-1116775442"
                },
                {
                    "id": "IC_kwDODheSms5Iu6x8",
                    "body": "Now this is patched in postgrest does supabase just need a version bump?",
                    "author": {
                        "login": "madeleineostoja"
                    },
                    "createdAt": "2022-08-19T05:10:07Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/223#issuecomment-1220258940"
                },
                {
                    "id": "IC_kwDODheSms5I-LgE",
                    "body": "@madeleineostoja we'll upgrade the PostgREST version on the Supabase platform [soon](https://supabase.com/blog/postgrest-v10) - no need to update postgrest-js or supabase-js.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-08-23T15:47:27Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/223#issuecomment-1224259588"
                },
                {
                    "id": "IC_kwDODheSms5O7hM3",
                    "body": "Is this a thing yet?  Running into this issue currently.",
                    "author": {
                        "login": "N00nDay"
                    },
                    "createdAt": "2022-11-22T20:51:41Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/223#issuecomment-1324225335"
                },
                {
                    "id": "IC_kwDODheSms5PcnhQ",
                    "body": "@N00nDay Yes, new projects are coming with PostgREST v10.1.1, which contain this change.\r\n\r\nWill close this now.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-11-30T23:43:44Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/223#issuecomment-1332901968"
                },
                {
                    "id": "IC_kwDODheSms5PcwVP",
                    "body": "If you had to restart your Supabase server and got this PostgREST v10.1.1 upgrade to your project, you'll have to fix your code that have queries with foreign keys to adapt to this breaking changes.\r\n\r\nwhat I did was searching (ctrl+shift+f) in the entire solution for \"[0]\" and removing when applicable.\r\n\r\nFor example:\r\n\r\n`organisation.rules[0].reasons`\r\n\r\nnow should be:\r\n\r\n`organisation.rules.reasons`\r\n\r\n\r\nI took 4 hours from midnight until 4am to fix this in 200+ places in my solution. \r\n",
                    "author": {
                        "login": "gabrielsestrem"
                    },
                    "createdAt": "2022-12-01T00:30:40Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/223#issuecomment-1332938063"
                },
                {
                    "id": "IC_kwDODheSms5Pc8xx",
                    "body": "> @N00nDay Yes, new projects are coming with PostgREST v10.1.1, which contain this change.\r\n> \r\n> Will close this now.\r\n\r\nThis may be a silly question but how can I tell which version of PostgREST I am using? I am using app.supabase for hosting.",
                    "author": {
                        "login": "N00nDay"
                    },
                    "createdAt": "2022-12-01T00:57:40Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/223#issuecomment-1332989041"
                },
                {
                    "id": "IC_kwDODheSms5PdJJS",
                    "body": "Seconding the potentially silly question \u2014 how do I restart my postgres instance to get this update on an existing project (again using hosted supabase)",
                    "author": {
                        "login": "madeleineostoja"
                    },
                    "createdAt": "2022-12-01T01:55:07Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/223#issuecomment-1333039698"
                },
                {
                    "id": "IC_kwDODheSms5Pdg_3",
                    "body": "> This may be a silly question but how can I tell which version of PostgREST I am using? \r\n\r\nYou can go to your \"API docs\", get the sample `curl` request with the API keys and do:\r\n\r\n```bash\r\ncurl 'https://<your_project_ref>.supabase.co/rest/v1/' \\\r\n-H \"apikey: SUPABASE_KEY\" \\\r\n-H \"Authorization: Bearer SUPABASE_KEY\"\r\n```\r\n\r\nThis will give you the OpenAPI which also shows the version:\r\n\r\n```json\r\n{\"swagger\":\"2.0\",\"info\":{\"description\":\"This is a dynamic API generated by PostgREST\",\"title\":\"PostgREST API\",\r\n\"version\":\"9.0.1.20220717 (pre-release) (d2df289)\"}\r\n```",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-12-01T04:06:35Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/223#issuecomment-1333137399"
                },
                {
                    "id": "IC_kwDODheSms5PdiM5",
                    "body": "> If you had to restart your Supabase server and got this PostgREST v10.1.1 upgrade to your project\r\n\r\n> Seconding the potentially silly question \u2014 how do I restart my postgres instance to get this update on an existing project (again using hosted supabase)\r\n\r\n@madeleineostoja Actually \"restart\" will not upgrade your postgrest but a \"pause\" + \"restore\" will",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-12-01T04:12:03Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/223#issuecomment-1333142329"
                },
                {
                    "id": "IC_kwDODheSms5QNOig",
                    "body": "Any idea when this will make it into the CLI? I've using the CLI to run the development of my app & then using the hosted environment for both staging & production. I just updated to CLI version: `1.22.3` and am still getting version `9.0.1.20220717 (pre-release)` of `PostgREST API`",
                    "author": {
                        "login": "edmondso006"
                    },
                    "createdAt": "2022-12-11T20:07:45Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/223#issuecomment-1345644704"
                },
                {
                    "id": "IC_kwDODheSms5QN9iU",
                    "body": "@edmondso006 can you create an issue on https://github.com/supabase/cli? I think the version got reverted at some point",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-12-12T04:04:32Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/223#issuecomment-1345837204"
                },
                {
                    "id": "IC_kwDODheSms5RZaZp",
                    "body": "> Actually \"restart\" will not upgrade your postgrest but a \"pause\" + \"restore\" will\r\n\r\n\"pause\" + \"restore\"  => This is work. Happy.\r\n\r\nThe Supabase Reference: \r\nhttps://supabase.com/docs/guides/platform/migrating-and-upgrading-projects#:~:text=Upgrade%20your%20project,restoration%20is%20complete.",
                    "author": {
                        "login": "JasonChiu-dev"
                    },
                    "createdAt": "2022-12-27T05:09:22Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/223#issuecomment-1365616233"
                },
                {
                    "id": "IC_kwDODheSms5T1R5-",
                    "body": "Just for anyone who is still running into this issue in the future:\r\n\r\n- I had the correct `PostgREST API` version but was still getting an array instead of just an object for what I thought was a 1:1 relationship. \r\n- The problem was that I had not set an **unique key constraint for the FK col**\r\n<img width=\"777\" alt=\"image\" src=\"https://user-images.githubusercontent.com/25060960/215092260-5f508a53-9e81-4941-b4a5-f780859a0c78.png\">\r\n",
                    "author": {
                        "login": "edmondso006"
                    },
                    "createdAt": "2023-01-27T12:57:01Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/223#issuecomment-1406475902"
                },
                {
                    "id": "IC_kwDODheSms5XVWUJ",
                    "body": "> Just for anyone who is still running into this issue in the future:\r\n> \r\n> * I had the correct `PostgREST API` version but was still getting an array instead of just an object for what I thought was a 1:1 relationship.\r\n> * The problem was that I had not set an **unique key constraint for the FK col**\r\n> \r\n> <img alt=\"image\" width=\"777\" src=\"https://user-images.githubusercontent.com/25060960/215092260-5f508a53-9e81-4941-b4a5-f780859a0c78.png\">\r\n\r\n@edmondso006 where can config this?",
                    "author": {
                        "login": "EryouHao"
                    },
                    "createdAt": "2023-03-12T14:29:26Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/223#issuecomment-1465214217"
                },
                {
                    "id": "IC_kwDODheSms5XXidq",
                    "body": "@EryouHao this is under https://app.supabase.com/project/_/database/tables > columns > edit button.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-03-13T09:27:00Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/223#issuecomment-1465788266"
                },
                {
                    "id": "IC_kwDODheSms5aOXRH",
                    "body": "With this change do joins for one-to-many relationships always return array type or null in Typescript definitions? I am still seeing `single item | array | null` type.",
                    "author": {
                        "login": "lananelson"
                    },
                    "createdAt": "2023-04-18T19:51:49Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/223#issuecomment-1513714759"
                },
                {
                    "id": "IC_kwDODheSms5aX1K2",
                    "body": "I've upgraded my postgrest version. My table is slightly more complicated in that there are multiple joins. \r\nIt's an application for working with schools so I've got a class_group table which links to an assessment table\r\nThen there is a class_assessment_relationship table that contains the date the class took that assessment\r\n\r\n![ERD-supabase](https://user-images.githubusercontent.com/2428096/233356133-14ea4366-d558-4976-b22a-03c6d8713ccc.png)\r\n\r\nI want to get the information about a particular class_group. I need to know what assessments they have been assigned and what date they took the assessment (if they have taken it)\r\n\r\nMy select therefore looks a bit like this \r\n```\r\nsupabaseClient\r\n\t\t.from('class_group')\r\n\t\t.select(\r\n\t\t\t`id,\r\n\t\t\tassessments:assessment!class_assessment_relationship(id, name, meta_data:class_assessment_relationship(date_taken))`\r\n\t\t)\r\n\t\t.eq('id', classId)\r\n\t\t.eq('assessments.meta_data.class_group_id', classId)\r\n\t\t.single();\r\n```\r\n\r\n\r\nIs there a better/easier way to do this request? Currently it works perfectly except for the fact that postgrest doesn't identify that meta_data is always going to be a single item and therefore returns a list. Is there a way I could do this nicely with Views that would be simpler?",
                    "author": {
                        "login": "jmarks-joshua"
                    },
                    "createdAt": "2023-04-20T11:53:14Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/223#issuecomment-1516196534"
                },
                {
                    "id": "IC_kwDODheSms5af0V0",
                    "body": "@jmarks-joshua Besides views, you can always override a detected relationship with [computed relationships](https://postgrest.org/en/stable/api.html#computed-relationships). You have the chance to label the rel as to-one with `ROWS 1` on the function.\r\n\r\nAlso, a new issue would be better for discussing this.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-04-21T20:12:48Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/223#issuecomment-1518290292"
                },
                {
                    "id": "IC_kwDODheSms5ag6SY",
                    "body": "I have a `reviews` table, with a non-null foreign key relationship to a unique primary key in the `orders` table. If I do a query on the reviews table that joins to the orders table, should I expect to return a single item from the orders table? \r\n\r\nCurrently it's still returning the `single item | array | null` type. I was expecting it would just return the `single item` type.\r\n\r\nIn the `reviews` table the foreign key is not listed as unique (because multiple reviews can reference a single order), however there will only ever be one order with a given `order_id` as it's a unique primary key.\r\n\r\n<img width=\"553\" alt=\"image\" src=\"https://user-images.githubusercontent.com/3267684/233775741-ff74113d-0572-4062-bbe1-eb53d9fc51f2.png\">\r\n\r\n\r\nI've updated the PostgREST API to version 10.1.2 (f56bed2).",
                    "author": {
                        "login": "tomelliot"
                    },
                    "createdAt": "2023-04-22T09:25:54Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/223#issuecomment-1518576792"
                },
                {
                    "id": "IC_kwDODheSms5ahemv",
                    "body": "@tomelliot Typescript types are discussed on https://github.com/supabase/postgrest-js/issues/408",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-04-22T18:44:10Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/223#issuecomment-1518725551"
                }
            ]
        },
        {
            "id": "I_kwDODheSms4-jHxg",
            "number": 224,
            "title": "Redesign API to cleanse all `values`",
            "body": "https://github.com/supabase/supabase/discussions/3843\r\n\r\nNeeds https://github.com/PostgREST/postgrest/issues/1943",
            "author": {
                "login": "soedirgo"
            },
            "state": "OPEN",
            "createdAt": "2021-11-10T04:37:38Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/224",
            "comments": []
        },
        {
            "id": "I_kwDODheSms4_ReB7",
            "number": 227,
            "title": "Cloudflare workers issues with cross-fetch (xmlhttprequest is not defined)",
            "body": "This library uses cross-fetch, which makes running in Cloudflare workers impossible. \r\n\r\nReference:\r\nhttps://community.cloudflare.com/t/xmlhttprequest-is-not-defined/133866/4\r\n\r\nSolution: \r\nNot using cross-fetch and let users polyfill via node-fetch/cross-fetch/isomorphic-fetch themselves. Obviously this will be super duper breaking. Not sure if there is any other way though.",
            "author": {
                "login": "bkniffler"
            },
            "state": "CLOSED",
            "createdAt": "2021-11-23T17:29:58Z",
            "closedAt": "2022-09-27T07:18:21Z",
            "url": "https://github.com/supabase/postgrest-js/issues/227",
            "comments": [
                {
                    "id": "IC_kwDODheSms46OlM5",
                    "body": "See https://github.com/supabase/supabase-js/pull/297 and https://github.com/supabase/postgrest-js/pull/222. Passing a custom `fetch` looks like it should be fully supported without bugs in supabase-js `1.28.1`.",
                    "author": {
                        "login": "bnjmnt4n"
                    },
                    "createdAt": "2021-11-23T17:33:11Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/227#issuecomment-976900921"
                },
                {
                    "id": "IC_kwDODheSms46OmSg",
                    "body": "Oh wow, great, thanks @bnjmnt4n. Just found https://github.com/lquixada/cross-fetch/issues/69 by coincidence and the username @kiwicopple seemed familiar :) \r\n\r\nI'll try the suggested solution and close this issue.",
                    "author": {
                        "login": "bkniffler"
                    },
                    "createdAt": "2021-11-23T17:35:23Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/227#issuecomment-976905376"
                },
                {
                    "id": "IC_kwDODheSms5LDCUg",
                    "body": "This should be resolved now afaik. Custom fetch is not needed - the lib now uses the global fetch if available, and otherwise falls back to cross-fetch (previously it always uses cross-fetch, which caused issues).",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-27T07:18:21Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/227#issuecomment-1259087136"
                }
            ]
        },
        {
            "id": "I_kwDODheSms4_2kAr",
            "number": 229,
            "title": "Foreign Key ambiguity on views",
            "body": "I see a ciritical issue in making query with supabase is **`ambiguity`** when i have to refer foreign kyes. Even if you don't touch your current tables and Just create a **`view`**. It might break all your api call in your application. Never faced this kind of problem when was using hibernate in java. What u people doing about this. This is i think most critical thing for u guys. Just one change in database and everything is borken.",
            "author": {
                "login": "roker15"
            },
            "state": "CLOSED",
            "createdAt": "2021-12-04T05:36:07Z",
            "closedAt": "2022-06-08T00:33:45Z",
            "url": "https://github.com/supabase/postgrest-js/issues/229",
            "comments": [
                {
                    "id": "IC_kwDODheSms46xMMK",
                    "body": "@roker15 can you give an example schema and the sort of change/breakage you're referring to?",
                    "author": {
                        "login": "darora"
                    },
                    "createdAt": "2021-12-04T05:43:28Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/229#issuecomment-985973514"
                },
                {
                    "id": "IC_kwDODheSms46xkcG",
                    "body": "Moving to postgrest-js because it seems related to https://postgrest.org/en/v9.0/api.html#embedding-disambiguation.\r\n\r\n> Even if you don't touch your current tables and Just create a view.\r\n\r\nDo you have a reproducible example(DDL) we can try?\r\n\r\n- https://discord.com/channels/839993398554656828/935298705781821470/935981363742535831",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-12-04T18:32:31Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/229#issuecomment-986072838"
                },
                {
                    "id": "IC_kwDODheSms5BhFmx",
                    "body": "Relating this to https://github.com/supabase/supabase/discussions/6274#discussioncomment-2517906",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-04-14T13:34:15Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/229#issuecomment-1099192753"
                },
                {
                    "id": "IC_kwDODheSms5EgSO3",
                    "body": "This was solved in https://github.com/PostgREST/postgrest/issues/2277. New views won't break previous requests.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-06-08T00:33:45Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/229#issuecomment-1149313975"
                }
            ]
        },
        {
            "id": "I_kwDODheSms4_4oWY",
            "number": 230,
            "title": "`Count` will not return same value counted as in `data.length` when filtered by nested `!inner` criteria.",
            "body": "# Bug report\r\nI think I found a bug when counting `!inner` joined tables with foreign filters.\r\n\r\n## Describe the bug\r\nWhen a table is filtered by properties of the same table, `count` and `data.length` will match (considering no limit and count to be 'exact').\r\nWhen a table is filtered by `!inner` properties of other tables, `data.length` returns correct number of results, but `count` still return the correct one considering there are no foreign filters.\r\n\r\n\r\n## To Reproduce\r\n\r\nGiven 2 tables, `Users` and `Roles` for instance. If I activate count and filter by a **Correct filter of User_id** but **an Inexistent Incorrect role inner filter**  the count will return 1 but with no data in the array. \r\n```javascript\r\n  const {data, error, count} = await supabase.from('users')\r\n   .select('*, role:roles!inner(*)', {count: 'exact'})\r\n   .eq('user_id', 123) // This is a matching correct user\r\n   .eq('role.name', 'whatever') // This will never be true.\r\n  data.length === 0 // true (This is correct since roles will never match here)\r\n  count === 0 // false (This should be true, count should be 0)\r\n  count === 1 // true (This should be false, but returns 1 because the filter by user still is valid)\r\n```\r\n\r\n## Expected behavior\r\n\r\n1. Given a no limited query, `data.length` and `count` should match in all the cases (when using `{count: 'exact'}`).\r\n2. Filtering inner joined tables should also affect the count of the query.\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser (if applies) node.js\r\n- Version of supabase-js: 1.28.5\r\n- Version of Node.js: 14.18.1\r\n",
            "author": {
                "login": "Egnus"
            },
            "state": "CLOSED",
            "createdAt": "2021-12-05T16:54:53Z",
            "closedAt": "2021-12-08T16:50:26Z",
            "url": "https://github.com/supabase/postgrest-js/issues/230",
            "comments": [
                {
                    "id": "IC_kwDODheSms461Lj-",
                    "body": "> Filtering inner joined tables should also affect the count of the query.\r\n\r\nThis sounds like a bug which was already fixed on https://github.com/PostgREST/postgrest/issues/2009.\r\n\r\nCan you try checking your PostgREST version as mentioned in https://github.com/supabase/supabase/issues/4170#issuecomment-983077684?\r\n\r\n(Related https://github.com/supabase/supabase/discussions/4264)",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-12-06T18:01:35Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/230#issuecomment-987019518"
                },
                {
                    "id": "IC_kwDODheSms464rh2",
                    "body": "Yes, tested so it is probably that, I should be in an old `PostgREST  < v.9.0` so this is why I have wrong counters.\r\nCan I restart the DB to enforce the new version?\r\n\r\nPS: I highly suggest to add to the Supabase Studio (aka the dashboard) the indication of the postgREST version inside the settings.",
                    "author": {
                        "login": "Egnus"
                    },
                    "createdAt": "2021-12-07T13:41:52Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/230#issuecomment-987936886"
                },
                {
                    "id": "IC_kwDODheSms465JWG",
                    "body": "@Egnus Could you send your project ref to support@supabase.com? It could be a bug on our side since the ops process was to upgrade all instances to postgREST 9.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-12-07T15:58:00Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/230#issuecomment-988059014"
                },
                {
                    "id": "IC_kwDODheSms465PRR",
                    "body": "Done, with support ticket `3838`, and also, to add more info to the test I did.\r\n\r\nI executed: \r\n```\r\nGET https://__.supabase.co/rest/v1/trips?id=is.anything\r\n```\r\nDespite that `trips` is not existent for me, the answer to this query should be (and was) similar (if not the same) than with `<9.0 versions`  with this response:\r\n```\r\n{\r\n    \"message\": \"syntax error at or near \\\"'anything'\\\"\",\r\n    \"code\": \"42601\",\r\n    \"hint\": null,\r\n    \"details\": null\r\n}\r\n```\r\nI hope you have all you need (together with the email) to check this issue deeper.",
                    "author": {
                        "login": "Egnus"
                    },
                    "createdAt": "2021-12-07T16:28:00Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/230#issuecomment-988083281"
                },
                {
                    "id": "IC_kwDODheSms468sLE",
                    "body": "The Support team managed to upgrade me to PostgREST 9 and now the test query returns the commented correct response in [#4170](https://github.com/supabase/supabase/issues/4170#issuecomment-983077684).\r\nAnd of course, the count now matches the expected results for all the cases I had already a test case implemented.\r\n\r\nThanks and closing issue.",
                    "author": {
                        "login": "Egnus"
                    },
                    "createdAt": "2021-12-08T16:50:25Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/230#issuecomment-988988100"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5AO9x4",
            "number": 231,
            "title": "!inner join not working: \"Could not find a relationship between TABLE1 and TABLE2 in the schema cache\"",
            "body": "I've got exactly the same issue as described in the original post, but different from https://github.com/supabase/supabase/issues/4170#issuecomment-983084077 I can confirm I'm already on PostgREST 9:\r\n```json\r\n\"info\": {\r\n    \"title\": \"PostgREST API\",\r\n    \"description\": \"This is a dynamic API generated by PostgREST\",\r\n    \"version\": \"9.0.0 (c9f017c)\"\r\n  },\r\n```\r\n\r\nMy query is: `https://__.supabase.co/rest/v1/course?select=age_category!inner(id)`\r\n\r\nThe error is:\r\n```json\r\n  \"error\": {\r\n    \"message\": \"Could not find a relationship between course and age_category in the schema cache\",\r\n    \"hint\": \"If a new foreign key between these entities was created in the database, try reloading the schema cache.\"\r\n  },\r\n```\r\n\r\nThe same query, but without the explicit inner join does work as expected: `https://__.supabase.co/rest/v1/course?select=age_category(id)`\r\n\r\nRunning the code suggested in https://github.com/supabase/supabase/discussions/2579#discussioncomment-1060046 returned\r\n```mysql\r\nSELECT\r\n    tc.table_schema, \r\n    tc.constraint_name, \r\n    tc.table_name, \r\n    kcu.column_name, \r\n    ccu.table_schema AS foreign_table_schema,\r\n    ccu.table_name AS foreign_table_name,\r\n    ccu.column_name AS foreign_column_name \r\nFROM \r\n    information_schema.table_constraints AS tc \r\n    JOIN information_schema.key_column_usage AS kcu\r\n      ON tc.constraint_name = kcu.constraint_name\r\n      AND tc.table_schema = kcu.table_schema\r\n    JOIN information_schema.constraint_column_usage AS ccu\r\n      ON ccu.constraint_name = tc.constraint_name\r\n      AND ccu.table_schema = tc.table_schema\r\nWHERE tc.constraint_type = 'FOREIGN KEY' AND tc.table_name IN ('course', 'age_category');\r\n```\r\n```markdown\r\n| table_schema | constraint_name             | table_name   | column_name     | foreign_table_schema | foreign_table_name | foreign_column_name |\r\n| ------------ | --------------------------- | ------------ | --------------- | -------------------- | ------------------ | ------------------- |\r\n| public       | fk_ageCategory              | course       | age_category_id | public               | age_category       | id                  |\r\n```\r\n\r\nI also restarted my Supabase-server from the dashboard, as well as ran `NOTIFY ddl_command_end;` inside the SQL editor.  \r\n\r\n_Originally posted by @mgm1313 in https://github.com/supabase/supabase/issues/4170#issuecomment-988934320_",
            "author": {
                "login": "mgm1313"
            },
            "state": "CLOSED",
            "createdAt": "2021-12-09T07:08:43Z",
            "closedAt": "2022-01-19T17:11:20Z",
            "url": "https://github.com/supabase/postgrest-js/issues/231",
            "comments": [
                {
                    "id": "IC_kwDODheSms47HZpD",
                    "body": "I just found out that above error occurs when the foreign key for one of the rows is `NULL`. @steve-chavez is it intended behavior that the `!inner` join does not work on a nullable foreign key column? ",
                    "author": {
                        "login": "mgm1313"
                    },
                    "createdAt": "2021-12-11T22:09:18Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/231#issuecomment-991795779"
                },
                {
                    "id": "IC_kwDODheSms47HaHs",
                    "body": "@mgm1313 I saw your comment on https://github.com/supabase/supabase/issues/4170#issuecomment-988960717\r\n\r\n> https://__.supabase.co/rest/v1/course?select=*,age_category!inside(*)\r\n> Omitting the !inside results in a valid response.\r\n\r\nThere you used `!inside` instead of `!inner`, are you sure you're using the correct keyword(`!inner`)?\r\n\r\n> is it intended behavior that the !inner join does not work on a nullable foreign key column?\r\n\r\nNo that shouldn't affect it.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-12-11T22:26:46Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/231#issuecomment-991797740"
                },
                {
                    "id": "IC_kwDODheSms48mVap",
                    "body": "Closing this one until further feedback is provided.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-01-19T17:11:20Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/231#issuecomment-1016682153"
                },
                {
                    "id": "IC_kwDODheSms5HLRAn",
                    "body": "@steve-chavez I experienced the same error. I am trying to `inner join` two tables in my schema and it says `{\r\n  hint: If a new foreign key between these entities was cr\u2026 in the database, try reloading the schema cache.,\r\n  message: Could not find a relationship between transsecurity and category in the schema cache\r\n}`\r\n\r\nMy code:\r\n\r\n`const { data, error } = await client\r\n    .from('transsecurity')\r\n    .select('*, category!inner(*)')`\r\n\r\nCan you please help me out on this?\r\n",
                    "author": {
                        "login": "lazyprogrammerP"
                    },
                    "createdAt": "2022-07-25T14:37:11Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/231#issuecomment-1194135591"
                },
                {
                    "id": "IC_kwDODheSms5HQpt-",
                    "body": "@lazyprogrammerP Is there a foreign key between transsecurity and category? Can you share the tables' definitions?",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-07-26T14:19:33Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/231#issuecomment-1195547518"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5AO9zS",
            "number": 232,
            "title": "New !inner join not working: \"Could not find a relationship between trips and bookings in the schema cache\"",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nI follow the syntax explained here: https://postgrest.org/en/v9.0/api.html#embedding-with-top-level-filtering\r\n\r\nI am attempting to utilize the new inner join functionality. I attempt to perform a simple query. If I leave out \"!inner\" it works well, however, with \"!inner\", I get an error:\r\n\r\n```\r\n{\r\n    \"hint\": \"If a new foreign key between these entities was created in the database, try reloading the schema cache.\",\r\n    \"message\": \"Could not find a relationship between trips and bookings in the schema cache\"\r\n}\r\n```\r\n\r\nExample:\r\n- Works = https://__.supabase.co/rest/v1/trips?select=bookings(id)\r\n- Does not works = https://__.supabase.co/rest/v1/trips?select=bookings!inner(id)\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n- Try similar queries as above\r\n\r\n## Expected behavior\r\n\r\nI would expect, when not giving any filters to the query, to get the exact same response as if not including \"!inner\" in the query.\r\n\r\n## System information\r\n\r\n- Happens both using the Javascript SDK and through direct REST calls in Postman\r\n\r\n## Additional context\r\n\r\n- I have tried with multiple different relations in our setup. All of them behave the same.\r\n- I have attempted to restart our Supabase server in the cloud dashboard but that made zero difference.\r\n",
            "author": {
                "login": "mbalslow"
            },
            "state": "CLOSED",
            "createdAt": "2021-11-30T12:17:19Z",
            "closedAt": "2021-12-01T08:05:45Z",
            "url": "https://github.com/supabase/postgrest-js/issues/232",
            "comments": [
                {
                    "id": "IC_kwDODheSms46mJM0",
                    "body": "I think you don't have the PostgREST 9 version enabled in your instance.\r\n\r\nUnfortunately there's no direct way to check the version for now(as Cloudflare is overriding the `Server` header coming from PostgREST), but you could do:\r\n\r\n```js\r\nGET https://__.supabase.co/rest/v1/trips?id=is.anything\r\n```\r\n\r\nIf it replies with an error like:\r\n\r\n```js\r\n{\r\n \"hint\":null,\r\n \"message\":\"syntax error at or near \\\"'anything'\\\"\",\r\n \"code\":\"42601\",\r\n \"details\":null\r\n}\r\n```\r\n\r\nThen you're not on PostgREST 9 as this version replies with a more descriptive error message instead:\r\n\r\n```js\r\n{\r\n  \"details\":\"unexpected \\\"a\\\" expecting null or trilean value (unknown, true, false)\",\r\n  \"message\":\"\\\"failed to parse filter (is.anything)\\\" (line 1, column 4)\"\r\n}\r\n```\r\n",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-11-30T22:30:00Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/232#issuecomment-983077684"
                },
                {
                    "id": "IC_kwDODheSms46mJt5",
                    "body": "@steve-chavez thanks, I will get back to you after testing this asap. My follow-up question is that in case it is not version 9, how could this be since it is stated in the release notes that all existing project have been upgraded? Is it then just a matter of time before it is upgraded or have I misunderstood the release notes and do I need to do something to get on version 9?",
                    "author": {
                        "login": "mbalslow"
                    },
                    "createdAt": "2021-11-30T22:33:41Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/232#issuecomment-983079801"
                },
                {
                    "id": "IC_kwDODheSms46mKwt",
                    "body": "@steve-chavez it seems that it is not on version 9 based on my test",
                    "author": {
                        "login": "mbalslow"
                    },
                    "createdAt": "2021-11-30T22:40:25Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/232#issuecomment-983084077"
                },
                {
                    "id": "IC_kwDODheSms46mmjO",
                    "body": "> Is it then just a matter of time before it is upgraded \r\n\r\n@mbalslow Yes, PostgREST 9 is still being rolled out to all instances. It should be a matter of hours.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-12-01T01:33:30Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/232#issuecomment-983197902"
                },
                {
                    "id": "IC_kwDODheSms46nU0d",
                    "body": "@steve-chavez I can confirm that it now works so it was simply a matter of time until the instance was upgraded",
                    "author": {
                        "login": "mbalslow"
                    },
                    "createdAt": "2021-12-01T08:05:45Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/232#issuecomment-983387421"
                },
                {
                    "id": "IC_kwDODheSms468fCw",
                    "body": "I've got exactly the same issue as described in the original post, but different from https://github.com/supabase/supabase/issues/4170#issuecomment-983084077 I can confirm I'm already on PostgREST 9.\r\nWhat else could I do @steve-chavez to debug this issue?  \r\n\r\nMy query is: `https://__.supabase.co/rest/v1/courses?select=age_category!inner(id)`\r\n\r\nThe error is:\r\n```json\r\n  \"error\": {\r\n    \"message\": \"Could not find a relationship between course and age_category in the schema cache\",\r\n    \"hint\": \"If a new foreign key between these entities was created in the database, try reloading the schema cache.\"\r\n  },\r\n```\r\n\r\nRunning the code suggested in https://github.com/supabase/supabase/discussions/2579#discussioncomment-1060046 returned\r\n```mysql\r\nSELECT\r\n    tc.table_schema, \r\n    tc.constraint_name, \r\n    tc.table_name, \r\n    kcu.column_name, \r\n    ccu.table_schema AS foreign_table_schema,\r\n    ccu.table_name AS foreign_table_name,\r\n    ccu.column_name AS foreign_column_name \r\nFROM \r\n    information_schema.table_constraints AS tc \r\n    JOIN information_schema.key_column_usage AS kcu\r\n      ON tc.constraint_name = kcu.constraint_name\r\n      AND tc.table_schema = kcu.table_schema\r\n    JOIN information_schema.constraint_column_usage AS ccu\r\n      ON ccu.constraint_name = tc.constraint_name\r\n      AND ccu.table_schema = tc.table_schema\r\nWHERE tc.constraint_type = 'FOREIGN KEY' AND tc.table_name IN ('course', 'age_category');\r\n```\r\n```markdown\r\n| table_schema | constraint_name             | table_name   | column_name     | foreign_table_schema | foreign_table_name | foreign_column_name |\r\n| ------------ | --------------------------- | ------------ | --------------- | -------------------- | ------------------ | ------------------- |\r\n| public       | fk_ageCategory              | course       | age_category_id | public               | age_category       | id                  |\r\n```",
                    "author": {
                        "login": "mgm1313"
                    },
                    "createdAt": "2021-12-08T15:49:52Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/232#issuecomment-988934320"
                },
                {
                    "id": "IC_kwDODheSms468kWj",
                    "body": "@mgm1313 According to your query results, the table is named `course`(note the singular) and not `courses`, so it should be like:\r\n\r\n```\r\nhttps://__.supabase.co/rest/v1/course?select=age_category!inner(id)\r\n```",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-12-08T16:13:21Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/232#issuecomment-988956067"
                },
                {
                    "id": "IC_kwDODheSms468lfN",
                    "body": "> @mgm1313 According to your query results, the table is named `course`(note the singular) and not `courses`, so it should be like:\r\n> \r\n> ```\r\n> https://__.supabase.co/rest/v1/course?select=age_category!inner(id)\r\n> ```\r\n\r\nAh stupid mistake @steve-chavez while retyping from my other computer, sorry! I now copied the actually query:\r\n`https://__.supabase.co/rest/v1/course?select=*,age_category!inside(*)`\r\nOmitting the `!inside` results in a valid response. ",
                    "author": {
                        "login": "mgm1313"
                    },
                    "createdAt": "2021-12-08T16:18:35Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/232#issuecomment-988960717"
                },
                {
                    "id": "IC_kwDODheSms4682ir",
                    "body": "@steve-chavez I am experiencing some unexpected behavior. Maybe this is on purpose but it should be clearly clarified in the documentation, I think - maybe it is, but I cannot find it anywhere.\r\n\r\nIn a simple one-to-one relationship, where the given relationship might be null (foreign key is nullable), using the \"!inner\" excludes any records without a relationship even though that is not specified as a filter.\r\n\r\nI have attempted to make a minimal way of reproducing what I mean:\r\n\r\n1. I have a \"owner\" and a \"dog\" table. One owner may or may not have a dog (\"dog_id\" column is nullable)\r\n\r\n![Dog table](https://user-images.githubusercontent.com/49169557/145256556-838bbcd5-769b-4e61-a64c-20e63c1218a8.JPG)\r\n\r\n![Owner table](https://user-images.githubusercontent.com/49169557/145256570-32c0087e-1b07-4c05-a91b-1e25c5027ede.JPG)\r\n\r\n2. Querying this data without the use of \"!inner\", I get both records:\r\n\r\n![Request without inner](https://user-images.githubusercontent.com/49169557/145256681-b991f784-58cc-46f6-8ec2-45598b14e57e.JPG)\r\n\r\n3. Querying this data with the use of \"!inner\", I only get the one with a dog, even though I have not filtered in any way. \r\n\r\n**I would expect to always get all \"owners\" if I use no filters.**\r\n\r\n![Request with inner](https://user-images.githubusercontent.com/49169557/145256836-4cb1f108-d915-4d20-a43a-5263d60f9a5b.JPG)\r\n\r\nIs this the intended behavior of \"!inner\", or?",
                    "author": {
                        "login": "mbalslow"
                    },
                    "createdAt": "2021-12-08T17:41:29Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/232#issuecomment-989030571"
                },
                {
                    "id": "IC_kwDODheSms4686gE",
                    "body": "@mbalslow Yes, that's intended behavior - does an INNER JOIN under the hood - it excludes top-level rows without an explicit filter(actually it contains an implicit filter, the ON clause of the INNER JOIN).\r\n\r\n> Maybe this is on purpose but it should be clearly clarified in the documentation\r\n\r\nTrue. Actually on the PostgREST side we are thinking of adding an alternative way to specify this operation, which would enable doing:\r\n\r\n```http\r\nGET /countries?select=name,cities(name)&cities=exists.true\r\n```\r\n\r\nOr through `postgrest-js`:\r\n\r\n```js\r\nconst { data, error } = await supabase\r\n  .from('countries')\r\n  .select(`\r\n    *,\r\n    cities (*)\r\n  `)\r\n  .exists('cities', true)\r\n```\r\n\r\nI think that would make the filtering more explicit.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-12-08T18:03:17Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/232#issuecomment-989046788"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5AZatK",
            "number": 234,
            "title": "ESLint rule to avoid using `update` without filters",
            "body": "# Feature request\r\n\r\n## Problem\r\n\r\nSometimes, I forget to use filters with the `.update()` method.\r\nBy forgetting filters with `update()`, I destroyed the production database multiple times.\r\n\ud83d\ude42 \r\n\r\n## Solution\r\n\r\nI'd like an ESLint rule that warns me when I forget to combine `.update()` with a filter (`.match()`, `.eq()`, etc)\r\n\r\n## Alternatives\r\n\r\nI don't know any alternative that would work. I think that ESLint is the proper tool for the job.",
            "author": {
                "login": "clouedoc"
            },
            "state": "CLOSED",
            "createdAt": "2021-12-14T23:47:54Z",
            "closedAt": "2021-12-15T07:29:05Z",
            "url": "https://github.com/supabase/postgrest-js/issues/234",
            "comments": [
                {
                    "id": "IC_kwDODheSms47QZo1",
                    "body": "Do you know you can prevent this at the database level with the [safeupdate](https://github.com/eradman/pg-safeupdate) extension?\r\n\r\nYou can enable it by doing:\r\n\r\n```sql\r\nALTER DATABASE postgres SET session_preload_libraries = 'safeupdate';\r\n```\r\n\r\nThen whenever trying to UPDATE without a a filter you'll get an error like\r\n\r\n```\r\nUPDATE requires a WHERE clause\r\n```",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-12-15T00:06:17Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/234#issuecomment-994155061"
                },
                {
                    "id": "IC_kwDODheSms47QaT4",
                    "body": "@steve-chavez I didn't know it was possible; thank you for the hint.\r\nI'll let this feature request open if it interests you, but you can consider my issue as fixed.",
                    "author": {
                        "login": "clouedoc"
                    },
                    "createdAt": "2021-12-15T00:11:23Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/234#issuecomment-994157816"
                },
                {
                    "id": "IC_kwDODheSms47RaQK",
                    "body": "Note: do a `SHOW session_preload_libraries` first in case there are existing entries. On the hosted db we have `supautils` so I'd do\r\n```sql\r\nALTER DATABASE postgres SET session_preload_libraries = 'supautils,safeupdate';\r\n```",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2021-12-15T07:29:05Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/234#issuecomment-994419722"
                },
                {
                    "id": "IC_kwDODheSms47R0_0",
                    "body": "@soedirgo too late, I've overwritten the value \ud83d\ude2c\r\n\r\nThanks for the heads up, I'll look at the next DB backup's diff to see if there was existing values.\r\n\r\n**Edit:** it just added this line to the database's backup, so I guess there was no existing value:\r\n\r\n```diff\r\n+ ALTER DATABASE postgres SET session_preload_libraries TO 'safeupdate';\r\n```",
                    "author": {
                        "login": "clouedoc"
                    },
                    "createdAt": "2021-12-15T09:01:45Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/234#issuecomment-994529268"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5Ah1uw",
            "number": 236,
            "title": " Chore: update Github description to supabase.com",
            "body": "# Chore\r\n\r\n## Describe the chore\r\n\r\nupdate Github description  from [supabase.io](https://supabase.com) to [supabase.com](https://supabase.com)\r\n\r\n<img width=\"1392\" alt=\"Screen Shot 2021-12-16 at 3 22 00 PM\" src=\"https://user-images.githubusercontent.com/70828596/146443821-141267ee-16f3-4ca3-a9d5-105a87690d36.png\">",
            "author": {
                "login": "Isaiah-Hamilton"
            },
            "state": "CLOSED",
            "createdAt": "2021-12-16T20:23:14Z",
            "closedAt": "2022-09-27T07:26:25Z",
            "url": "https://github.com/supabase/postgrest-js/issues/236",
            "comments": [
                {
                    "id": "IC_kwDODheSms5LDEQ6",
                    "body": "Updated \ud83d\udc4d ",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-27T07:26:25Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/236#issuecomment-1259095098"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWUxMDg2Mjk3NTc2",
            "number": 237,
            "title": "Add transactions for read and write operations on one or more documents",
            "body": "# Feature request\r\n\r\nAdd transactions for read and write operations on one or more documents.\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nIf I make multiple requests to modify a row, it could lead to an improper update.\r\n\r\nExample\r\n\r\nFirst Request: \r\n1. fetch a row,\r\n2. increment the value\r\n3. update row\r\n\r\nSecond request:\r\n1. fetches row before step 3 runs on first request\r\n2. first request step 3 runs\r\n2. Increments value on stale row\r\n4. Update row with incremented value on stale data\r\n\r\n## Describe the solution you'd like\r\n\r\nFirebase offers [transactions](https://firebase.google.com/docs/firestore/manage-data/transactions)\r\n> In the case of a concurrent edit, Cloud Firestore runs the entire transaction again. For example, if a transaction reads documents and another client modifies any of those documents, Cloud Firestore retries the transaction. This feature ensures that the transaction runs on up-to-date and consistent data.\r\n\r\n## Describe alternatives you've considered\r\n\r\nInstead of incrementing a value, just inserting a new row into a different table and using total row count.\r\nThis solves my issue but increases storage size. \r\n\r\nTransactions would still be a great improvement for other use cases.",
            "author": {
                "login": "codebycorey"
            },
            "state": "CLOSED",
            "createdAt": "2020-12-04T03:56:06Z",
            "closedAt": "2020-12-09T05:39:42Z",
            "url": "https://github.com/supabase/postgrest-js/issues/237",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDczOTQ4Mzc4Mw==",
                    "body": "Hey @CodeByCorey, this would be done as a Stored Procedure, which you can then call using `rpc()`: https://supabase.io/docs/client/rpc\r\n\r\nPostgres introduced transations into stored procedures in PG11, an Supabase is running on PG12. Here is an example of a stored procedure with a commit/rollback: https://www.postgresql.org/docs/current/plpgsql-transactions.html\r\n\r\nDoes that help?\r\n",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-12-06T10:34:08Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/237#issuecomment-739483783"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDczOTUzNzk1NQ==",
                    "body": "@CodeByCorey Also note that you can already rollback by raising an error on regular postgres functions:\r\n\r\n```sql\r\nCREATE OR REPLACE FUNCTION just_fail() RETURNS json AS $$\r\nBEGIN\r\n  -- do some logic here\r\n -- RETURN\r\n  -- in case of an error, fail:\r\n  RAISE EXCEPTION 'I refuse!'\r\n    USING DETAIL = 'Pretty simple',\r\n          HINT = 'There is nothing you can do.';\r\n -- the above will cause a rollback\r\nEND \r\n$$ LANGUAGE plpgsql;\r\n\r\n-- the above message will show on the error attribute when calling the function through supabase-js\r\nconst { data, error } = await supabase.rpc('just_fail')\r\nconsole.log(error);\r\n{\r\n  \"message\":\"I refuse!\",\r\n  \"details\":\"Pretty simple\",\r\n  \"hint\":\"There is nothing you can do.\",\r\n  \"code\":\"P0001\"\r\n}\r\n```",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2020-12-06T17:49:06Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/237#issuecomment-739537955"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc0MTU0MTA3NQ==",
                    "body": "closing this for now Corey - but feel free to reopen if you have any questions",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2020-12-09T05:39:42Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/237#issuecomment-741541075"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc4Njk4Nzc0OQ==",
                    "body": "@steve-chavez can we change owner to authenticated on functions similar to views?\nTo apply RLS\n\n`ALTER FUNCTION just_fail OWNER TO authenticated;`",
                    "author": {
                        "login": "tawjaw"
                    },
                    "createdAt": "2021-02-27T02:22:52Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/237#issuecomment-786987749"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc4Njk4OTc2Nw==",
                    "body": "I should have read the [docs](https://postgrest.org/en/v7.0.0/schema_structure.html#functions) before asking\n\n\nIf I understood correctly, first I have to revoke execute to all the functions from PUBLIC\n\n`ALTER DEFAULT PRIVILEGES REVOKE EXECUTE ON FUNCTIONS FROM PUBLIC; `\n\nAnd then I can grant access on specific functions to authenticated users\n\n`GRANT EXECUTE ON FUNCTION  just_fail TO authenticated; `\n\n\nHowever it doesn't say anything specific about row-level-security like it explains in Views \n\nWhat happens if I select from a table with RLS inside the function? ",
                    "author": {
                        "login": "tawjaw"
                    },
                    "createdAt": "2021-02-27T02:39:20Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/237#issuecomment-786989767"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc4Njk5MTI0NQ==",
                    "body": "@tawjaw Functions work normally for RLS - the calling role privileges will be applied by default(SECURITY INVOKER). So no need for a previous `ALTER OWNER` there.\r\n\r\nIt's possible to get a similar behavior to ALTER OWNER on VIEWs with `SECURITY DEFINER`.\r\n\r\nCheck this for more details: https://postgrest.org/en/v7.0.0/schema_structure.html#security-definer",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-02-27T02:51:20Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/237#issuecomment-786991245"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc4Njk5MjI2NA==",
                    "body": "Thank you @steve-chavez \nSorry I've been asking a lot.. before I started using supabase I didn't know RLS existed. the concept is still new to me. ",
                    "author": {
                        "login": "tawjaw"
                    },
                    "createdAt": "2021-02-27T02:59:15Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/237#issuecomment-786992264"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc4Njk5NTQwNg==",
                    "body": "@tawjaw No problem! I do realize the privileges around VIEWs and FUNCTIONs are a bit confusing at first. Feel free to ping me anytime you have questions :-]",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-02-27T03:23:00Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/237#issuecomment-786995406"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDc4Njk5NTYwNw==",
                    "body": "Thanks @steve-chavez \nI appreciate it.\n\nI'm starting a test supabase project and just going to play with views and functions from the client side to understand it fully ",
                    "author": {
                        "login": "tawjaw"
                    },
                    "createdAt": "2021-02-27T03:24:52Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/237#issuecomment-786995607"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgzMTQzOTczNw==",
                    "body": "I think this should be reopened. There are use cases where a rpc would not be able to work, whereas a transaction (similar to what Firebase has) would. Mainly, this is because you can have arbitrary logic or call libraries inside a Firebase transaction (which I think a rpc does not support).\r\n\r\nFor example, you might imagine a scenario where Record A is stored in the database and is also locally cached on a device for offline editing. You don't necessarily want to replace the record in the database with the locally cached record, because the record could have been updated from other devices. Instead, you might want to implement some complex business logic to merge the database record together with the locally cached record. You could do this inside a transaction in application logic, but not in a rpc implemented on the database.\r\n\r\nSpecifically, I'd be looking for the following two properties:\r\n- Roll back all of the database operations if any of them fail or if an error occurs within the transaction\r\n- Ensure that Record A in the database is not changed during the transaction (so we are always operating on the most up-to-date record)\r\n\r\nLet me know if what I described above actually would be possible somehow currently, either with a rpc or through some other mechanism. Otherwise, having a transaction similar to what Firebase has seems like the ideal solution to me.",
                    "author": {
                        "login": "churichard"
                    },
                    "createdAt": "2021-05-03T18:17:42Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/237#issuecomment-831439737"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgzMTUyMjYyNA==",
                    "body": "> you might want to implement some complex business logic to merge the database record together with the locally cached record. You could do this inside a transaction in application logic, but not in a rpc implemented on the database.\r\n\r\nHmm.. Couldn't you send the local record as an argument of the rpc?  That way you could do the merge inside the SQL function.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-05-03T20:45:30Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/237#issuecomment-831522624"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgzMTU0MzQzOQ==",
                    "body": "In my case, the records are JSON objects and I want to use a JS library to do the merge.\r\n\r\nFor my specific use case (not particularly relevant but in case you're curious), this is the library I'd like to use: https://github.com/yjs/yjs. You can imagine it as accepting two JSON objects (the \"master\" object from the database and the locally updated object) and returning a JSON object with the changes merged together with no conflicts (even if the locally updated object was updated from an outdated \"master\" database object). I think it's a little hard to do this kind of merge in a SQL function, even if I wasn't using a library and wanted to write some logic myself.",
                    "author": {
                        "login": "churichard"
                    },
                    "createdAt": "2021-05-03T21:20:31Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/237#issuecomment-831543439"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgzMTYyOTIwMg==",
                    "body": "> accepting two JSON objects (the \"master\" object from the database and the locally updated object) and returning a JSON object with the changes merged together with no conflicts\r\n\r\nI think this is getting more into the \"offline support\" or \"conflict resolution\" territory. As you point out, CRDTs could solve this (and we are even chatting to the Yjs maintainer about this), but note that it would need to be for a single database field rather than an entire row (although Automerge looks like they are [working on](https://github.com/automerge/automerge#table) something here too). CRDTs are specific data types (text, counters, etc), whereas Postgres supports everything from numerics to Geometry - we'd need a conflict resolution strategy for every data type, or just blindly go with a \"last write wins\" strategy (and we would need transaction timestamps).\r\n\r\n@churichard - can you please provide some code (which you are using for your Firebase), and perhaps we can see if the same can be done using a `jsonb` column?\r\n\r\n",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2021-05-04T01:07:40Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/237#issuecomment-831629202"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDgzMjExNjg5Nw==",
                    "body": ">  As you point out, CRDTs could solve this (and we are even chatting to the Yjs maintainer about this)\r\n\r\nIt would be wonderful if there was first party support for offline support / conflict resolution! It would definitely solve the use case I mentioned earlier.\r\n\r\nIf we generalize a bit more, though, I feel like it might still be useful to have a transaction such that you're doing SELECTs, performing arbitrary transforms on the data, and then doing UPDATEs with the transformed data, while guaranteeing that the SELECTed data has not changed in the meantime (basically the field or row is locked).\r\n\r\nI think you can probably imagine a scenario where this might be useful, but if you want a concrete example, here's one from the project I'm working on where I:\r\n1. [Get a field from a record](https://github.com/churichard/notabase/blob/06926ce4561ef2862075f8b496eacf9e649c46c9/editor/useBacklinks.ts#L119-L123) (`content` is a `jsonb` field)\r\n2. [Perform some operations on it](https://github.com/churichard/notabase/blob/06926ce4561ef2862075f8b496eacf9e649c46c9/editor/useBacklinks.ts#L129-L139) (using a JS library)\r\n3. [Update the field](https://github.com/churichard/notabase/blob/06926ce4561ef2862075f8b496eacf9e649c46c9/editor/useBacklinks.ts#L152-L155)\r\n\r\nThe main thing in this use case is making sure that the record's fields do not change while we're doing the operations. This sounds like a case where a transaction would be useful, but let me know if there is a better or alternative way of doing this.\r\n\r\n> but note that it would need to be for a single database field rather than an entire row \r\n\r\nYeah, my use case about merging two JSON objects is just for single database field on a row (apologies if that was unclear).\r\n\r\n> @churichard - can you please provide some code (which you are using for your Firebase), and perhaps we can see if the same can be done using a `jsonb` column?\r\n\r\nI'm not using Firebase for my current project so I don't have any specific code to share. I only draw the parallel to Firebase transactions since I've worked with them in previous projects and know that it would be possible with the way that they work.",
                    "author": {
                        "login": "churichard"
                    },
                    "createdAt": "2021-05-04T17:32:42Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/237#issuecomment-832116897"
                },
                {
                    "id": "IC_kwDODheSms47HVCD",
                    "body": "https://www.postgresql.org/docs/current/sql-begin.html\r\n\r\npostgres has transactions outside of procedures, however it would require a way to keep a single user's connection open from what I understand. Not sure how well that would work with supabase.\r\n\r\nit'd be super nice/useful if we could have a `begin` `commit` `rollback` methods accessible from the library.\r\n\r\non the conflict resolution things, it might be useful to be able to lock rows, though could be a security issue, so maybe not, unless others can think of a smart way of making it safe. \r\nhttps://www.postgresql.org/docs/current/explicit-locking.html#LOCKING-ROWS",
                    "author": {
                        "login": "gitbugr"
                    },
                    "createdAt": "2021-12-11T20:36:54Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/237#issuecomment-991776899"
                },
                {
                    "id": "IC_kwDODheSms47jcj2",
                    "body": "I'm unable to comment on the implementation feasibility of this on Postgres, but I find that Firebase's batching API is a super elegant and dev-friendly way of handling batches / transactions / atomic operations. An API like this would be amazing. Having to learn and use RPCs for atomic / batched write operations is annoying.\r\n\r\nFirebase docs on transactions / batched writes: https://firebase.google.com/docs/firestore/manage-data/transactions#batched-writes\r\n\r\nExample of firebase batching API from their docs:\r\n```js\r\nimport { writeBatch, doc } from \"firebase/firestore\"; \r\n\r\n// Get a new write batch\r\nconst batch = writeBatch(db);\r\n\r\n// Set the value of 'NYC'\r\nconst nycRef = doc(db, \"cities\", \"NYC\");\r\nbatch.set(nycRef, {name: \"New York City\"});\r\n\r\n// Update the population of 'SF'\r\nconst sfRef = doc(db, \"cities\", \"SF\");\r\nbatch.update(sfRef, {\"population\": 1000000});\r\n\r\n// Delete the city 'LA'\r\nconst laRef = doc(db, \"cities\", \"LA\");\r\nbatch.delete(laRef);\r\n\r\n// Commit the batch\r\nawait batch.commit();\r\n```",
                    "author": {
                        "login": "miketromba"
                    },
                    "createdAt": "2021-12-21T22:53:30Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/237#issuecomment-999147766"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5BIQP9",
            "number": 238,
            "title": ".or() across multiple tables in single query",
            "body": "# Improve documentation\r\n\r\n## Link \r\n\r\nhttps://supabase.com/docs/reference/javascript/or#use-or-on-foreign-tables\r\n\r\n## Describe the problem\r\n\r\nHello, is it currently possible to chain `.or()` across multiple tables in a single query?\r\n\r\nI'm trying to do something like this:\r\n\r\n```\r\n    let query = this.client.from('user')                                             \r\n      .select(                                                                       \r\n        `                                                                            \r\n        github_id,                                                                   \r\n        email,                                                                       \r\n        keys:auth_key_user_id_fkey(                                                  \r\n          id,                                                                        \r\n          deleted_at,                                                                \r\n          secret,                                                                    \r\n          history: auth_key_history_auth_key_id_fkey(                                   \r\n            status,                                                                  \r\n            reason,                                                                  \r\n            inserted_at                                                              \r\n          )                                                                          \r\n        )                                                                            \r\n      `                                                                              \r\n      )                                                                              \r\n      .is('keys.history.deleted_at', null);                                          \r\n                                                                                     \r\n    if (filterTerm) {                                                                \r\n      query = query                                                                  \r\n        .or(`github_id.ilike.%${filterTerm}%,email.ilike.%${filterTerm}%`)              \r\n        .or(`secret.ilike.%${filterTerm}%`, { foreignTable: 'auth_key' })               \r\n        .or(`status.ilike.%${filterTerm}%`, { foreignTable: 'auth_key_history' })       \r\n    } \r\n```\r\n\r\nhowever it's not currently working.  Do the docs need to be improved or is this currently not supported?",
            "author": {
                "login": "jsdevel"
            },
            "state": "CLOSED",
            "createdAt": "2022-01-03T17:20:13Z",
            "closedAt": "2022-12-16T23:28:16Z",
            "url": "https://github.com/supabase/postgrest-js/issues/238",
            "comments": [
                {
                    "id": "IC_kwDODheSms48C0vG",
                    "body": "I'm guessing you wanted the list of users where the `github_id` matches the term OR any of its `auth_key`'s `secret` matches the term OR any of the `auth_key`'s `auth_key_history.status` matches the term.\r\n\r\nIn that case this isn't supported - the workaround is to use an `.rpc()` on a function taking a `filterTerm`.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-01-07T12:34:05Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/238#issuecomment-1007373254"
                },
                {
                    "id": "IC_kwDODheSms5Q0ANQ",
                    "body": "Combining related tables conditions with `or` can now be done like:\r\n\r\n```js\r\nconst { data, error } = await supabase\r\n  .from('clients')\r\n  .select(`\r\n    *,\r\n    clients_info(*), \r\n    contacts(*)\r\n  `)\r\n  .like('clients_info.address', '%main street%')\r\n  .like('contacts.name', '%Tabby%')\r\n  .or('clients_info.not.is.null, contacts.not.is.null')\r\n```\r\n\r\nFor now this is only available on the [CLI](https://supabase.com/docs/reference/cli/introduction) as it uses the latest [PostgREST pre-release](https://github.com/PostgREST/postgrest/releases/tag/v10.2.0.20230203).",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-12-16T23:28:16Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/238#issuecomment-1355809616"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5BTSoa",
            "number": 239,
            "title": "Supabase default of nullsLast can cause performance issues with ascending:false.",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\nI'm entering this as a bug as it is not expected default behavior, but it could be feature request or documentation enhancement.\r\n\r\nThere can be a performance issue for large tables with an index and using limit when ordered by descending because of default choice enforced by postgrest.js.\r\n  \r\nIn Postgres  NULLS FIRST is the default for ORDER BY DESC and NULLS LAST is default for the default ORDER BY ASC.\r\n\r\nIn PostgREST nullsfirst or nullslast is an optional parameter and would allow Postgres to sort by default order.\r\n\r\nSupabase postgrest.js defaults to nullslast and can only be over ridden with a nullsFirst:true option.\r\n\r\nIn the case of using ascending:false option in Supabase.js (postgrest.js), nullslast is sent to postgREST by default and then Postgres will not use the default NULLS FIRST.\r\n\r\nMany users will not even be thinking of nullsfirst or nullslast as default normally works fine.\r\n\r\n\r\n## To Reproduce\r\nThe issue is discussed and \"resolved\" in this thread on discord:\r\n\r\nhttps://discord.com/channels/839993398554656828/928590123011031050\r\n\r\n## Expected behavior\r\n\r\nEither it should be documented that it is recommended to also set nullsFirst:true when using ascending:false and why\r\nOR better postgrest.js should take optional nullsFirst AND nullsLast parameter so default is not specifying and letting PostgREST and Postgres make their default choices.\r\n\r\n## Screenshots\r\n\r\n![image](https://user-images.githubusercontent.com/54564956/148399564-c3f4fe8e-3590-4463-8ea6-0eba9f9ab3a2.png)\r\n\r\n## System information\r\n\r\nLastest Supabase.\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "GaryAustin1"
            },
            "state": "CLOSED",
            "createdAt": "2022-01-06T14:39:56Z",
            "closedAt": "2022-09-27T07:36:25Z",
            "url": "https://github.com/supabase/postgrest-js/issues/239",
            "comments": [
                {
                    "id": "IC_kwDODheSms48AH6G",
                    "body": "cc @steve-chavez - thoughts? I'm happy to document this one if you prefer",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2022-01-06T15:09:47Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/239#issuecomment-1006665350"
                },
                {
                    "id": "IC_kwDODheSms48At5W",
                    "body": "@kiwicopple I think postgrest-js should not default to a NULLS LAST, otherwise the intuitive way of creating an index to speed up order won't work:\r\n\r\n```sql\r\nCREATE INDEX index_name ON TABLE table_name (date)\r\n-- they'd have to create it as\r\n-- CREATE INDEX index_name ON TABLE table_name (date DESC NULLS LAST)\r\n```\r\n\r\n> better postgrest.js should take optional nullsFirst AND nullsLast parameter so default is not specifying and letting PostgREST and Postgres make their default choices.\r\n\r\nAgree, this would be a breaking change in postgrest-js though. Something for supabase-js 2.0 https://github.com/supabase/supabase-js/issues/170.\r\n\r\nSome references:\r\n\r\n- https://stackoverflow.com/questions/45719419/how-to-create-an-index-properly-for-desc-nulls-last-sorting\r\n- https://dba.stackexchange.com/questions/254731/why-does-order-by-nulls-last-affect-the-query-plan-on-a-primary-key\r\n\r\nDefault NULLS LAST happens here:\r\n\r\nhttps://github.com/supabase/postgrest-js/blob/ff790caf45cf3a3d8fe84e743600393988fc7122/src/lib/PostgrestTransformBuilder.ts#L40-L44",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-01-06T18:33:35Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/239#issuecomment-1006820950"
                },
                {
                    "id": "IC_kwDODheSms5LDG9Z",
                    "body": "Resolved in https://github.com/supabase/postgrest-js/pull/283",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-27T07:36:25Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/239#issuecomment-1259106137"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5BYw8E",
            "number": 240,
            "title": "Transactional Update / Upsert / Insert with relationships",
            "body": "## Preamble\r\nIn the referenced discussion it was mentioned that currently it is not possible to do transactional changes to the database, which is a common case in a lot of DB systems out there.\r\n\r\nObvioulsy, one could workaround it via RPC / Functions but workarounds shouldn't be considered a good solution.\r\n\r\n## Problem Description\r\nIf you are selecting data from related tables you can do so via `select('column_name, other_table (other_table_column_name)` . This behaviour of automatic relation detection implies that you'd be equally be able to perform such an action on mutation e.g.\r\n\r\n```js\r\n// not working:\r\nsupabase.from('table').upsert([{ id: 123, name: 'foo', foreign_table: [{foreign_name: 'foobar'}})\r\n```\r\n\r\nWhat this should do is: Go to the database, find the relation via `foreign_table` (if easier, allow to provide additional arguments to specify that) and then update/insert all entries within the `foreign_table` property to have the `id` from its \"parent\" related table. \r\n\r\nSo the outcome here would be\r\n\r\n- Table 1: `[id=123, name='foo']`\r\n- Table 2: `[table1_id=123, foreign_name='foobar']`\r\n\r\n\r\n## Why is this crucial and not just \"syntactical sugar\" enhancement?\r\nFrom an architectural viewpoint [TRANSACTIONS](https://en.wikipedia.org/wiki/Database_transaction) are meant to succeed completely or fail completely. What you get with supabase instead is having sequential inserts of which one can succeed and the next one fail hence leading to **corrupt data**.\r\n\r\n### Discussed in https://github.com/supabase/supabase/discussions/710\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **gaurangrshah** February 12, 2021</sup>\r\nI must be missing something, but I'm currently experimenting with supabase, and I can't seem to figure out how to create many-to-many or one-to-many relationships using the UI. Are there any blog posts, that discuss this? I am more than sure that I'm missing something. I've read through the docs pretty much cover -to-cover and can't seem to find anything other than this: https://supabase.io/docs/guides/database#relationships\r\n\r\nAny help/suggestions/guidance would be greatly appreciated! Thanks in advance for the help! </div>",
            "author": {
                "login": "activenode"
            },
            "state": "CLOSED",
            "createdAt": "2022-01-08T07:43:46Z",
            "closedAt": "2022-09-27T07:43:37Z",
            "url": "https://github.com/supabase/postgrest-js/issues/240",
            "comments": [
                {
                    "id": "IC_kwDODheSms48FsaV",
                    "body": "Linking https://github.com/PostgREST/postgrest/issues/818\r\n\r\nhttps://github.com/supabase/supabase/discussions/6771",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-01-08T19:46:57Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/240#issuecomment-1008125589"
                },
                {
                    "id": "IC_kwDODheSms5I-B4L",
                    "body": "@steve-chavez is there alternative with graphql or the \"officially recommended\" way ?",
                    "author": {
                        "login": "proton1k"
                    },
                    "createdAt": "2022-08-23T15:16:37Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/240#issuecomment-1224220171"
                },
                {
                    "id": "IC_kwDODheSms5LDIya",
                    "body": "Closing as duplicate of https://github.com/supabase/postgrest-js/issues/219.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-27T07:43:37Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/240#issuecomment-1259113626"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5BezVw",
            "number": 241,
            "title": "Fetch method can't  handle error response that is not a valid JSON object",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nrelated to https://github.com/supabase/gotrue-js/issues/325\r\n\r\nhttps://github.com/supabase/postgrest-js/blob/ff790caf45cf3a3d8fe84e743600393988fc7122/src/lib/types.ts#L126-L132\r\n\r\nFetch method tries to parse error response as json before returning. Whenever the error response is not JSON object, it will not return properly instead a json parsing error will be throw.\r\n\r\n## Expected behavior\r\n\r\n- get error response as raw text\r\n- trying to parse error response as json\r\n  - if succeed: return as json\r\n  - else: return as text",
            "author": {
                "login": "phamhieu"
            },
            "state": "CLOSED",
            "createdAt": "2022-01-11T02:54:50Z",
            "closedAt": "2022-01-12T05:55:27Z",
            "url": "https://github.com/supabase/postgrest-js/issues/241",
            "comments": [
                {
                    "id": "IC_kwDODheSms48PYOI",
                    "body": ":tada: This issue has been resolved in version 0.35.1 :tada:\n\nThe release is available on:\n- [GitHub release](https://github.com/supabase/postgrest-js/releases/tag/v0.35.1)\n- [npm package (@latest dist-tag)](https://www.npmjs.com/package/@supabase/postgrest-js/v/0.35.1)\n\nYour **[semantic-release](https://github.com/semantic-release/semantic-release)** bot :package::rocket:",
                    "author": {
                        "login": "github-actions"
                    },
                    "createdAt": "2022-01-12T05:56:57Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/241#issuecomment-1010664328"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5B1J9E",
            "number": 243,
            "title": "Support to add `Prefer` headers",
            "body": "# Feature request\r\nI was trying to use [Prefer: tx=rollback](https://postgrest.org/en/stable/configuration.html#db-tx-end) header as part of my regular testing. I was using following code snippet to initialise postgrest client\r\n\r\n```\r\ncreateClient(url, key, { options: { headers: { Prefer: \"tx=rollback\" } } } )\r\n```\r\n\r\nHowever, I realised that it gets overwritten by the current [implementation](https://github.com/supabase/postgrest-js/blob/eab227d2fb0eacd5fc4b1bc355183050a5ca40d9/src/lib/PostgrestQueryBuilder.ts#L112). \r\n\r\n## Is your feature request related to a problem? Please describe.\r\nI would like to use [Prefer: tx=rollback](https://postgrest.org/en/stable/configuration.html#db-tx-end) as part of my test suite. With the current implementation I am not able to add this headers to postgrest client.\r\n\r\n## Describe the solution you'd like\r\nAbility to add `Prefer` headers while creating postgrest client\r\n",
            "author": {
                "login": "bhvngt"
            },
            "state": "CLOSED",
            "createdAt": "2022-01-15T05:30:23Z",
            "closedAt": "2022-01-17T02:40:00Z",
            "url": "https://github.com/supabase/postgrest-js/issues/243",
            "comments": []
        },
        {
            "id": "I_kwDODheSms5DV8Fk",
            "number": 245,
            "title": "Document or improve flexibility for absolute url requirement",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nTo make deployment of my application \"simpler,\" I have a proxy that listens on the same domain as the domain the UI is served from. (i.e. `__api__/` gets sent to my PostgREST API, everything else goes to the frontend)\r\n\r\nHowever, referring to this API in PostgrestClient with a relative path throws an error\r\n\r\n```\r\nvue.runtime.esm.js:1888 TypeError: Failed to construct 'URL': Invalid URL\r\n    at new c (PostgrestQueryBuilder.js:6)\r\n    at from (PostgrestClient.js:34)\r\n    at na (actions.js:18)\r\n    at m.<anonymous> (actions.js:364)\r\n    at Array.<anonymous> (vuex.esm.js:847)\r\n    at m.dispatch (vuex.esm.js:512)\r\n    at m.dispatch (vuex.esm.js:402)\r\n    at a.selectedAccount (Explorer.vue:182)\r\n    at en.run (vue.runtime.esm.js:4568)\r\n    at qi (vue.runtime.esm.js:4310)\r\n```\r\n\r\nFrom here: https://github.com/supabase/postgrest-js/blob/aa223b4569b5c08714bb1d029e8f780e19db2b09/src/lib/PostgrestQueryBuilder.ts#L14\r\n\r\nContrasting this with `axios`, for instance, which takes a relative URL just fine.\r\n\r\n## Describe the solution you'd like\r\n\r\nIt would be ideal to be a bit more flexible in how URLs are taken / used so that relative paths can be used\r\n\r\n## Describe alternatives you've considered\r\n\r\nAt a minimum, better documentation and logging on the requirements for `url` (even just documenting that it will get passed to `new URL()` would be helpful). \r\n\r\nThe solution/workaround is to generate the absolute URL reference. In my case:\r\n\r\n```\r\nwindow.location.protocol + \"//\" + window.location.hostname + \":\" + window.location.port + PG_URL\r\n```\r\n\r\nThis is much less than ideal because I have to track a separate URL for the PostgrestClient than for my other API client libraries (and the application is hosted at different schemes, potentially at different root paths, etc.).\r\n\r\n## Additional context\r\n\r\n",
            "author": {
                "login": "colearendt"
            },
            "state": "CLOSED",
            "createdAt": "2022-02-10T10:49:56Z",
            "closedAt": "2023-08-03T13:55:10Z",
            "url": "https://github.com/supabase/postgrest-js/issues/245",
            "comments": [
                {
                    "id": "IC_kwDODheSms49uiOm",
                    "body": "Yes, we should document that it's meant to accept absolute URLs. The fact that it uses WHATWG URL is an implementation detail - I don't think we should expose that (we previously used superagent).\r\n\r\nThe workaround is inconvenient, but I don't think it's worth adding the relative URL handling right now (unless maybe if WHATWG URL supports relative URL w/o base OOTB).",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-02-10T22:45:33Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/245#issuecomment-1035608998"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5E0Q12",
            "number": 249,
            "title": "Ability to order by multiple columns",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nI don't see a way to order by multiple columns. Here's what I would do in SQL:\r\n```\r\nSELECT\r\n\tfirst_name,\r\n\tlast_name\r\nFROM\r\n\tcustomer\r\nORDER BY\r\n\tfirst_name ASC,\r\n\tlast_name DESC;\r\n```\r\n\r\n## Describe the solution you'd like\r\n\r\nI'd like the `order()` method to accept multiple columns. Here's an idea:\r\n\r\n```\r\nconst { data, error } = await supabase\r\n  .from('customer')\r\n  .select('first_name', 'last_name')\r\n  .order([\r\n    { column: 'first_name', ascending: true },\r\n    { column: 'last_name', ascending: false },\r\n  ])\r\n```\r\n\r\n## Describe alternatives you've considered\r\n\r\nI tried multiple `.order` methods and this didn't appear to work (maybe I screwed up the logic?)\r\n\r\n```\r\nconst { data, error } = await supabase\r\n  .from('customer')\r\n  .select('first_name', 'last_name')\r\n  .order('first_name', { ascending: true })\r\n  .order('last_name, { ascending: false });\r\n```\r\n\r\n",
            "author": {
                "login": "pangolingo"
            },
            "state": "CLOSED",
            "createdAt": "2022-02-28T17:56:24Z",
            "closedAt": "2022-08-11T21:15:23Z",
            "url": "https://github.com/supabase/postgrest-js/issues/249",
            "comments": [
                {
                    "id": "IC_kwDODheSms4-3OfM",
                    "body": "> I tried multiple .order methods and this didn't appear to work\r\n\r\nHm, that should work, it's tested here:\r\n\r\nhttps://github.com/supabase/postgrest-js/blob/5f47e84e917448d792c89e5be29c2f643c2a82ab/test/transforms.ts#L12-L19\r\n\r\nCan you double check? Perhaps share some sample data and the supabase-js output.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-02-28T21:10:00Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/249#issuecomment-1054664652"
                },
                {
                    "id": "IC_kwDODheSms4-7KE3",
                    "body": "Related to this issue - I'm unable to sort by two dates, `updated_at` and `created_at`. What I expect to see is results ordered by `updated_at` if not null, otherwise `created_at`. What I'm seeing is two groups of sorted results based on `updated_at` and `created_at`. \r\n\r\nThis is what I'm doing:\r\n`.select().order('updated_at', { ascending: false })\r\n    .order('created_at', { ascending: false });`\r\n\r\nI've played around with the order and using `nullsFirst` but can't seem to get it right.",
                    "author": {
                        "login": "jimmythigpen"
                    },
                    "createdAt": "2022-03-01T17:44:45Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/249#issuecomment-1055695159"
                },
                {
                    "id": "IC_kwDODheSms5BIcoj",
                    "body": "Bump - ordering by multiple columns isn't working for me either. That test could be passing by coincidence?",
                    "author": {
                        "login": "nicksiscoe"
                    },
                    "createdAt": "2022-04-08T10:50:13Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/249#issuecomment-1092733475"
                },
                {
                    "id": "IC_kwDODheSms5BKRbg",
                    "body": "@nasiscoe Could you send me your project ref plus a sample query to steve@supabase.io so I can reproduce?",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-04-08T18:43:27Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/249#issuecomment-1093211872"
                },
                {
                    "id": "IC_kwDODheSms5IFDZA",
                    "body": "I can confirm that multiple order by has been implemented in https://github.com/supabase/postgrest-js/pull/162 and is working great for me \ud83d\udc4d \r\n\r\nYou can check that the HTTP requests sent by supabase look like this : https://postgrest.org/en/stable/api.html?highlight=order#ordering",
                    "author": {
                        "login": "spyl94"
                    },
                    "createdAt": "2022-08-09T11:55:41Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/249#issuecomment-1209284160"
                },
                {
                    "id": "IC_kwDODheSms5IMz8j",
                    "body": "@spyl94 Cool! Thanks for confirming.\r\n\r\nTo close this one I think we'd need an additional example(\"ordering multiple columns\") here: https://supabase.com/docs/reference/javascript/order#examples",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-08-10T21:51:06Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/249#issuecomment-1211318051"
                },
                {
                    "id": "IC_kwDODheSms5IROwp",
                    "body": "I just added some documentation so we can probably close the issue !",
                    "author": {
                        "login": "spyl94"
                    },
                    "createdAt": "2022-08-11T20:46:18Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/249#issuecomment-1212476457"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5Fq0yF",
            "number": 251,
            "title": "How to reload schema cache?",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nCannot call RPC with input variables\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Create an RPC in Supabase UI:\r\n```\r\nCREATE OR REPLACE FUNCTION test_return_one(\r\n  inputVariable text\r\n)\r\n    RETURNS int\r\n    LANGUAGE 'plpgsql'\r\nAS $$\r\nbegin\r\n  return 1;\r\nend\r\n$$;\r\n```\r\n2. Test that it works in Supabase UI:\r\n```\r\nselect * from test_return_one('hello');\r\n```\r\n(it works)\r\n\r\n3. Call RPC from supabase.js\r\n```\r\nconst { error, data } = await supabase\r\n    .rpc('test_return_one', { inputVariable: 'hello' })\r\n    .select();\r\nconsole.log(error, data);\r\n```\r\nThis errors out.\r\n\r\n4. This is the error:\r\n```\r\n{\r\n  error: {\r\n    message: 'Could not find the public.test_return_one(inputVariable) function or the public.test_return_one function with a single unnamed json or jsonb parameter in the schema cache',\r\n    hint: 'If a new function was created in the database with this name and parameters, try reloading the schema cache.'\r\n  },\r\n  data: null,\r\n  count: null,\r\n  status: 404,\r\n  statusText: 'Not Found',\r\n  body: null\r\n}\r\n```\r\n\r\n5. I restarted local npm server and tried step 3 again with the same results.\r\n\r\nnote: this does work when you create a function without any variables.\r\n\r\n## Expected behavior\r\n\r\nI expect it to return the same data as the data seen in the Supabase UI.\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser (if applies) chrome\r\n- Version of supabase-js: 1.29.4\r\n- Version of Node.js: 12.17.0\r\n\r\n\r\n",
            "author": {
                "login": "ryan-eiv"
            },
            "state": "CLOSED",
            "createdAt": "2022-03-14T20:10:41Z",
            "closedAt": "2022-03-14T22:11:08Z",
            "url": "https://github.com/supabase/postgrest-js/issues/251",
            "comments": [
                {
                    "id": "IC_kwDODheSms4_nN-y",
                    "body": "Add double quotes to \"inputVariable\" like:\r\n\r\n```sql\r\nCREATE OR REPLACE FUNCTION test_return_one(\r\n  \"inputVariable\" text\r\n)\r\n```\r\n\r\nBy default PostgreSQL is case-insensitive so the parameter is being defined as \"inputvariable\" while the rpc snippet doesn't use this form.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-03-14T20:16:35Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/251#issuecomment-1067245490"
                },
                {
                    "id": "IC_kwDODheSms4_nOet",
                    "body": "That helped. Thank you!",
                    "author": {
                        "login": "ryan-eiv"
                    },
                    "createdAt": "2022-03-14T20:18:40Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/251#issuecomment-1067247533"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5Fx9zJ",
            "number": 252,
            "title": "Adding the ONLY keyword to the JS API",
            "body": "### Discussed in https://github.com/supabase/supabase/discussions/5927\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **Teio07** March 15, 2022</sup>\r\nHi,\r\nI'm considering handling deletion using partitions (to separate deleted records from non deleted records) as described in this post : \r\nhttps://stackoverflow.com/questions/506432/cascading-soft-delete\r\n\r\nBut once implemented, if I want to be able to select records (only non-deleted ones) I have to SELECT like this with Postgresql :\r\n```\r\nSELECT name, altitude\r\n    FROM ONLY cities\r\n    WHERE altitude > 500;\r\n```\r\nref. : https://www.postgresql.org/docs/9.1/ddl-inherit.html#:~:text=Here%20the%20ONLY%20keyword%20indicates,DELETE%20%E2%80%94%20support%20the%20ONLY%20keyword.\r\n\r\nIs such a call possible using supabase with react ?\r\nHow would that translate ?\r\n\r\nThanks in advance !</div>",
            "author": {
                "login": "TeddyLourson"
            },
            "state": "CLOSED",
            "createdAt": "2022-03-16T08:53:37Z",
            "closedAt": "2022-09-28T04:09:56Z",
            "url": "https://github.com/supabase/postgrest-js/issues/252",
            "comments": [
                {
                    "id": "IC_kwDODheSms5LDK6d",
                    "body": "Sorry for the very late response. AFAIK we don't do this on PostgREST - @steve-chavez can you confirm?",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-27T07:52:01Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/252#issuecomment-1259122333"
                },
                {
                    "id": "IC_kwDODheSms5LHG6D",
                    "body": "Yes, not yet available on PostgREST. Can be done through RPC.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-09-27T22:52:41Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/252#issuecomment-1260154499"
                },
                {
                    "id": "IC_kwDODheSms5LLGva",
                    "body": "@soedirgo Hm, should this be closed if it's not yet completed?\r\n\r\nAt the postgrest-js side I assume we'd have to add a param to `from`:\r\n\r\n```js\r\nconst { data, error } = await supabase\r\n  .from('countries', {only: true})\r\n  .select(`\r\n    name,\r\n    cities (\r\n      name\r\n    )\r\n  `)\r\n```\r\n\r\nSince DELETE/UPDATE in SQL also have an optional ONLY clause.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-09-28T17:01:22Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/252#issuecomment-1261202394"
                },
                {
                    "id": "IC_kwDODheSms5LLOki",
                    "body": "@soedirgo Seeing that https://github.com/supabase/postgrest-js/issues/339 was closed. Perhaps do you think it'd be better to close all issues with the [postgrest-patch-needed](https://github.com/supabase/postgrest-js/issues?q=is%3Aissue+is%3Aopen+label%3Apostgrest-patch-needed) tag?",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-09-28T17:31:08Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/252#issuecomment-1261234466"
                },
                {
                    "id": "IC_kwDODheSms5LNAuC",
                    "body": "Hmm, I guess a rule of thumb is to close unless a feature is approved to be implemented upstream. In both of these cases though there's no associated PostgREST feature request.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-29T03:29:43Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/252#issuecomment-1261702018"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5HBmeh",
            "number": 262,
            "title": "Escape special characters in column names",
            "body": "# Bug report\r\nWhile working on https://github.com/supabase-community/postgrest-py/pull/108 I found out that postgrest-js does not escape special characters in column names.\r\n\r\n## Describe the bug\r\nColumns that have PostgREST special characters `.,:()` should be escaped by surrounding in double quote `\"`; this is not done and results in an API error.\r\n\r\n## To Reproduce\r\n```js\r\n    const res = await client\r\n        .from(\"test\")\r\n        .select(\"*\")\r\n        .eq(':col.name', 1);\r\n    console.log(res);\r\n```\r\nresults in error:\r\n```json\r\n{\r\n  error: {\r\n    message: '\"failed to parse tree path (:col.name)\" (line 1, column 1)',\r\n    details: 'unexpected \":\" expecting field name (* or [a..z0..9_])'\r\n  },\r\n  data: null,\r\n  count: null,\r\n  status: 400,\r\n  statusText: 'Bad Request',\r\n  body: null\r\n}\r\n```\r\nWrapping `:col.name` in double quotes before passing it to `.eq` works as expected.",
            "author": {
                "login": "anand2312"
            },
            "state": "CLOSED",
            "createdAt": "2022-04-04T10:52:16Z",
            "closedAt": "2022-09-27T07:47:29Z",
            "url": "https://github.com/supabase/postgrest-js/issues/262",
            "comments": [
                {
                    "id": "IC_kwDODheSms5LDJyM",
                    "body": "This prohibits the use of foreign table filters: https://supabase.com/docs/reference/javascript/filter#filter-embedded-resources.\r\n\r\nCurrently you need to escape column names manually, but eventually we'd like to move away from stringly-typed params - ideally you wouldn't need to escape anything.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-27T07:47:29Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/262#issuecomment-1259117708"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5HTusq",
            "number": 263,
            "title": "Cannot query foreign tables when table has a self-referential foreign key",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nI have a table named `Comments` that is directly related to table `Ideas`. I want to get/query all comments that have `comments.idea_id` = `ideas.ideas_id`.\r\n![image](https://user-images.githubusercontent.com/30664920/161985256-06dd42ea-3b20-40e1-9d7c-47fbec4cbf79.png)\r\n\r\nBelow is my code snippet:\r\n````typescript\r\nexport const getIdeasListByCategoryId = async (category_id: string, limit?: number) => {\r\n\tconst noLimit = 99999;\r\n\tconst { data, error } = await supabase\r\n\t\t.from('ideas')\r\n\t\t.select('*, comments(idea_id)')\r\n\t\t.match({ category_id: category_id })\r\n\t\t.limit(limit || noLimit);\r\n\treturn { data, error };\r\n};\r\n````\r\nAfter a long time of wondering why my code didn't work (data always return `null`) while the other tables (without self-referential records) did correctly. Then I tried to delete and re-created the `Comments` table many times and I realized that my code only works if it doesn't have the self-referential record (`parent_comment_id`).\r\n![image](https://user-images.githubusercontent.com/30664920/161985893-aa171374-7c2f-4738-9d86-412d0c8fcbae.png)\r\n\r\nThus, if anyone has experienced my situation, please give me some advice. Thank you!\r\n \r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior:\r\n\r\n1. Create two tables with one has a self-referential record\r\n2. Make a foreign table query\r\n3. See error (always return `null`)\r\n\r\n## Expected behavior\r\n\r\nSuccessfully get all data from foreign tables.\r\n\r\n## Screenshots\r\n\r\nMentioned above.\r\n\r\n## System information\r\n\r\n- OS: macOS Monterey 12.2.1\r\n- Browser: Chrome\r\n- Version of supabase-js: 1.30.7\r\n- Version of Node.js: 16.7.0\r\n\r\n## Additional context\r\n\r\nNone.\r\n",
            "author": {
                "login": "phulengo"
            },
            "state": "CLOSED",
            "createdAt": "2022-04-06T13:38:16Z",
            "closedAt": "2022-04-07T19:31:07Z",
            "url": "https://github.com/supabase/postgrest-js/issues/263",
            "comments": [
                {
                    "id": "IC_kwDODheSms5BFr6N",
                    "body": "> After a long time of wondering why my code didn't work (data always return null)\r\n\r\nDid you caught the error message in that case? It always has more information in the `details` and `hint` fields.\r\n\r\nIt could be that more than one way to join `ideas` with `comments` was detected, in this case you needed to add a hint to `comments(idea_id)`. The error message clarifies that.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-04-07T17:28:57Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/263#issuecomment-1092009613"
                },
                {
                    "id": "IC_kwDODheSms5BGHuW",
                    "body": "> > After a long time of wondering why my code didn't work (data always return null)\r\n> \r\n> Did you caught the error message in that case? It always has more information in the `details` and `hint` fields.\r\n> \r\n> It could be that more than one way to join `ideas` with `comments` was detected, in this case you needed to add a hint to `comments(idea_id)`. The error message clarifies that.\r\n\r\nSorry for my negligence, I only checked the `data` variable but the `error` one.\r\n![image](https://user-images.githubusercontent.com/30664920/162279735-faec6a27-5b8f-46f0-b9ed-32ad9bcdf58f.png)\r\nAfter replacing `comments(idea_id)` with `comments!comments_idea_id_fkey(*)` as `hint` described, the problem was solved although it's a little weird to me...\r\n\r\nBtw, I found another way to achieve this by creating a Postgres function on the database server and calling it using `.rpc()`. Many thanks for your advice!",
                    "author": {
                        "login": "phulengo"
                    },
                    "createdAt": "2022-04-07T19:31:07Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/263#issuecomment-1092123542"
                },
                {
                    "id": "IC_kwDODheSms5BGQtb",
                    "body": "No problem! \r\n\r\n> comments!comments_idea_id_fkey(*) as hint described, the problem was solved although it's a little weird to me...\r\n\r\nYeah, you can actually rename foreign keys so instead of `comments_idea_id_fkey` you can use a more friendlier name. The `rpc` route is good though.\r\n\r\nSeeing the error message, I think the problem is that we're too liberal in detecting a many-to-many relationship, this can definitely be improved.\r\n\r\nLinking to https://github.com/PostgREST/postgrest/issues/2070#issuecomment-996274638 - will revise this.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-04-07T20:14:52Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/263#issuecomment-1092160347"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5HdBvD",
            "number": 264,
            "title": "Restrict many-to-many relationships detected: Queries using !inner are returning null in the supabase-js",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nAll my queries using inner joins are returning null.\r\n\r\nThis is CRITICAL as we have many queries like this in the grid (filtering results)\r\n\r\nI am quite sure this is an issue, because we haven't had any new release and these two queries are active for months working well.\r\n\r\nPlease, Check this ASAP!\r\n\r\nI can give you two examples that are returning null when using inner joins:\r\n\r\n```    const { data: reverse_orders, count, error } = await supabase\r\n    .from('reverse_orders')\r\n    .select(\r\n        `id,\r\n        client:client_id(name, email),\r\n        status:status_id(name, id),\r\n        reverse_trackings!inner(courier_collect_number, customer_posting, courier_company),\r\n        ecommerce_number, date_request, date_analyzed, date_finished, price, refund_value, exchange_value, is_exception`, \r\n        { count: \"exact\" }\r\n    )\r\n    .eq('organisation_id', organisationId)\r\n    .eq('reverse_trackings.courier_collect_number', collectNumber)\r\n\r\n\r\n\r\n       query = supabase\r\n            .from('reverse_orders')\r\n            .select(\r\n                `id,\r\n                client:client_id(name, email),\r\n                status:status_id(name, id),\r\n                reverse_trackings!inner(courier_collect_number, customer_posting, courier_company),\r\n                ecommerce_number, date_request, date_analyzed, date_finished, price, refund_value, exchange_value, is_exception`, \r\n                { count: \"exact\" }\r\n            )\r\n            .eq('organisation_id', organisationId)\r\n            .eq('reverse_trackings.customer_posting', !isCollect)\r\n            .match(filter)\r\n",
            "author": {
                "login": "gabrielsestrem"
            },
            "state": "CLOSED",
            "createdAt": "2022-04-09T20:59:42Z",
            "closedAt": "2022-04-27T16:35:29Z",
            "url": "https://github.com/supabase/postgrest-js/issues/264",
            "comments": [
                {
                    "id": "IC_kwDODheSms5BOcL1",
                    "body": "@gabrielsestrem Can you send me your project ref to steve@supabase.io?",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-04-10T16:09:15Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/264#issuecomment-1094304501"
                },
                {
                    "id": "IC_kwDODheSms5BOdYv",
                    "body": "Hi @steve-chavez. Done!",
                    "author": {
                        "login": "gabrielsestrem"
                    },
                    "createdAt": "2022-04-10T16:36:53Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/264#issuecomment-1094309423"
                },
                {
                    "id": "IC_kwDODheSms5BOihm",
                    "body": "Hi @steve-chavez . I am thinking about creating views using the INNER JOIN in the database and then querying from the view. What's your opinion about that? Tomorrow is Monday and customers will start to complain if we don't fix this by tomorrow.",
                    "author": {
                        "login": "gabrielsestrem"
                    },
                    "createdAt": "2022-04-10T17:14:50Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/264#issuecomment-1094330470"
                },
                {
                    "id": "IC_kwDODheSms5BOlfF",
                    "body": "@gabrielsestrem yes views are fine as well. If you're using RLS, make sure to alter the owner like discussed here: https://github.com/supabase/supabase/discussions/1501\r\n\r\nHm, from our side, there was no change on the `!inner` logic.\r\n\r\n>  returning null in the supabase-js \r\n\r\nDoes it return `null` or an empty array `[]`? Does the error field show something?",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-04-10T18:30:02Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/264#issuecomment-1094342597"
                },
                {
                    "id": "IC_kwDODheSms5BQIjr",
                    "body": "Hi @steve-chavez. it does return `null` and thanks for asking for the error field. Now I can see what's happening.\r\n\r\n```reverseDetailsForStateError {\r\n  message: \"Could not embed because more than one relationship was found for 'reverse_orders' and 'addresses'\",\r\n  details: [\r\n    {\r\n      relationship: 'reverse_orders_address_id_fkey[address_id][id]',\r\n      embedding: 'reverse_orders with addresses',\r\n      cardinality: 'many-to-one'\r\n    },\r\n    {\r\n      relationship: 'public.view_reverse_items[reverse_itens_reverse_order_id_fkey][reverse_orders_address_id_fkey]',\r\n      embedding: 'reverse_orders with addresses',\r\n      cardinality: 'many-to-many'\r\n    },\r\n    {\r\n      relationship: 'public.view_reverse_items[reverse_items_reverse_order_id_fkey][reverse_orders_address_id_fkey]',\r\n      embedding: 'reverse_orders with addresses',\r\n      cardinality: 'many-to-many'\r\n    }\r\n  ],\r\n  hint: \"Try changing 'addresses' to one of the following: 'addresses!reverse_orders_address_id_fkey', 'addresses!view_reverse_items', 'addresses!view_reverse_items'. Find the desired relationship in the 'details' key.\"\r\n}\r\n```\r\n\r\nAll of these started when I created a view called view_reverse_items. This view has six inner joins and after creating the view, all the other  !inner joins in supabase-js failed. If I drop the view, everything started to work again.\r\n\r\nWhat is wrong with that view?\r\n\r\n```CREATE VIEW view_reverse_items AS\r\nSELECT\r\n\treverse_items.received,\r\n       reverse_items.created_at,\r\n\treverse_items.sku,\r\n\treverse_items.description,\r\n\treverse_items.image_url,\r\n\treverse_items.quantity,\r\n\treverse_items.price,\r\n\treverse_items.reason,\r\n\treverse_items.is_exchange,\r\n\treverse_items.id_item,\r\n       reverse_items.organisation_id,\r\n\treverse_orders.ecommerce_number,\r\n       reverse_orders.created_at as reverse_orders_created_at,\r\n\treverse_orders.price as reverse_orders_price,\r\n\treverse_orders.refund_value,\r\n\treverse_orders.exchange_value,\r\n\treverse_orders.is_exception,\r\n       reverse_orders.status_id,\r\n\treverse_orders.client_id,\r\n\treverse_orders.address_id,\r\n\treverse_orders.reverse_tracking_id,\r\n\treverse_order_id,\r\n\treverse_status.name as reverse_status_name,\r\n\treverse_trackings.courier_company,\r\n\treverse_trackings.shipping_company_id,\r\n\tshipping_company.name as shipping_company_name,\r\n\tclients.name,\r\n\taddresses.city,\r\n\taddresses.state\r\nFROM\r\n\treverse_items\r\nINNER JOIN reverse_orders ON reverse_order_id = reverse_orders.id\r\nINNER JOIN reverse_status ON reverse_orders.status_id = reverse_status.id\r\nINNER JOIN reverse_trackings ON reverse_orders.reverse_tracking_id = reverse_trackings.id\r\nINNER JOIN shipping_company ON reverse_trackings.shipping_company_id = shipping_company.id\r\nINNER JOIN clients ON reverse_orders.client_id = clients.id\r\nINNER JOIN addresses ON reverse_orders.address_id = addresses.id`\r\n\r\n",
                    "author": {
                        "login": "gabrielsestrem"
                    },
                    "createdAt": "2022-04-11T08:56:48Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/264#issuecomment-1094748395"
                },
                {
                    "id": "IC_kwDODheSms5BQRCu",
                    "body": "Hi @steve-chavez. I think now I understand,\r\n\r\nIf I have views using INNER JOIN, every time I want to use supabase-js inner feature, I have to specify which FK I am referring to.\r\n\r\nInstead of doing: `reverse_trackings!inner`\r\nI have to do: `reverse_trackings!reverse_orders_reverse_tracking_id_fkey`\r\n\r\nIs it correct?",
                    "author": {
                        "login": "gabrielsestrem"
                    },
                    "createdAt": "2022-04-11T09:13:37Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/264#issuecomment-1094783150"
                },
                {
                    "id": "IC_kwDODheSms5BSfE5",
                    "body": "> What is wrong with that view?\r\n\r\nNothing wrong. Here I think the problem is on us. Specifically, the REST API(PostgREST) is being too liberal in detecting many-to-many relationships to other tables/views(as it can be seen in the [error you shared above](https://github.com/supabase/postgrest-js/issues/264#issuecomment-1094748395), it's considering the `view_reverse_items` as a junction). I'm currently working on a patch, with this there would be only one relationship detected between `reverse_orders` and `addresses`.\r\n\r\n> Instead of doing: reverse_trackings!inner\r\n> I have to do: reverse_trackings!reverse_orders_reverse_tracking_id_fkey\r\n> Is it correct?\r\n\r\nOh, seems it should be: `reverse_trackings!reverse_orders_reverse_tracking_id_fkey!inner` the hints in the error message do not include the `!inner` part.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-04-11T18:03:00Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/264#issuecomment-1095364921"
                },
                {
                    "id": "IC_kwDODheSms5BS-rh",
                    "body": "Are you able to apply the patch in both projects? we have two: prod and test. I'll send you an email with our project refs. Thanks @steve-chavez ",
                    "author": {
                        "login": "gabrielsestrem"
                    },
                    "createdAt": "2022-04-11T19:47:44Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/264#issuecomment-1095494369"
                },
                {
                    "id": "IC_kwDODheSms5BpWjK",
                    "body": "Hi @steve-chavez . Any updates on this?\r\nThanks,\r\nGabriel",
                    "author": {
                        "login": "gabrielsestrem"
                    },
                    "createdAt": "2022-04-18T12:25:53Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/264#issuecomment-1101359306"
                },
                {
                    "id": "IC_kwDODheSms5Br5VQ",
                    "body": "@gabrielsestrem Yes, I'm still working on this one. \r\n\r\nIt requires some heavy refactoring(https://github.com/PostgREST/postgrest/pull/2250) but it should be done by this week.\r\n\r\nSubscribe to https://github.com/PostgREST/postgrest/issues/2070 to track progress.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-04-19T04:49:20Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/264#issuecomment-1102026064"
                },
                {
                    "id": "IC_kwDODheSms5CBLhC",
                    "body": "@gabrielsestrem Sorry for the delay. https://github.com/PostgREST/postgrest/pull/2262 should be merged Monday tops and then I'll make a pre-release and patch your instance.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-04-23T18:41:45Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/264#issuecomment-1107605570"
                },
                {
                    "id": "IC_kwDODheSms5CBSP2",
                    "body": "Thanks @steve-chavez \ud83d\ude4f\ud83c\udffc",
                    "author": {
                        "login": "gabrielsestrem"
                    },
                    "createdAt": "2022-04-23T19:07:11Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/264#issuecomment-1107633142"
                },
                {
                    "id": "IC_kwDODheSms5CHgaZ",
                    "body": "@gabrielsestrem Just updated both the instances you shared through email. Let me know if the error goes away.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-04-26T03:23:35Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/264#issuecomment-1109264025"
                },
                {
                    "id": "IC_kwDODheSms5CO8xp",
                    "body": "On the postgrest side it was [confirmed](https://github.com/PostgREST/postgrest/issues/2070#issuecomment-1111045734) that it resolved a similar issue(unnecessary many-to-many relationships are no longer generated) \r\n\r\nSo considering this one resolved - but please reopen if not.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-04-27T16:35:29Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/264#issuecomment-1111215209"
                },
                {
                    "id": "IC_kwDODheSms5CPOk_",
                    "body": "Hi @steve-chavez it's working now! thanks a lot man! will this work in a new projects as well?",
                    "author": {
                        "login": "gabrielsestrem"
                    },
                    "createdAt": "2022-04-27T17:29:19Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/264#issuecomment-1111288127"
                },
                {
                    "id": "IC_kwDODheSms5CQf2z",
                    "body": "@gabrielsestrem Great to know!\r\n\r\n>  will this work in a new projects as well?\r\n\r\nNot yet, but the change should be rolled to other projects next week.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-04-28T00:52:38Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/264#issuecomment-1111621043"
                },
                {
                    "id": "IC_kwDODheSms5CSlET",
                    "body": "Thanks",
                    "author": {
                        "login": "gabrielsestrem"
                    },
                    "createdAt": "2022-04-28T12:53:01Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/264#issuecomment-1112166675"
                },
                {
                    "id": "IC_kwDODheSms5EA2KQ",
                    "body": "Hi @steve-chavez ! I think we might have to reopen this issue.\r\n\r\nSuddenly our projects started to get the issue again. I had to drop the view in order to make our queries using !inner joint to work.\r\n\r\n\r\n` {\r\n  message: \"Could not embed because more than one relationship was found for 'reverse_orders' and 'reverse_trackings'\",\r\n  details: [\r\n    {\r\n      relationship: 'reverse_orders_reverse_tracking_id_fkey[reverse_tracking_id][id]',\r\n      embedding: 'reverse_orders with reverse_trackings',\r\n      cardinality: 'many-to-one'\r\n    },\r\n    {\r\n      relationship: 'public.view_reverse_items[reverse_items_reverse_order_id_fkey][reverse_orders_reverse_tracking_id_fkey]',\r\n      embedding: 'reverse_orders with reverse_trackings',\r\n      cardinality: 'many-to-many'\r\n    },\r\n    {\r\n      relationship: 'public.view_reverse_items[reverse_itens_reverse_order_id_fkey][reverse_orders_reverse_tracking_id_fkey]',\r\n      embedding: 'reverse_orders with reverse_trackings',\r\n      cardinality: 'many-to-many'\r\n    }\r\n  ],\r\n  hint: \"Try changing 'reverse_trackings' to one of the following: 'reverse_trackings!reverse_orders_reverse_tracking_id_fkey', 'reverse_trackings!view_reverse_items', 'reverse_trackings!view_reverse_items'. Find the desired relationship in the 'details' key.\"\r\n}`",
                    "author": {
                        "login": "gabrielsestrem"
                    },
                    "createdAt": "2022-05-30T12:03:39Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/264#issuecomment-1141072528"
                },
                {
                    "id": "IC_kwDODheSms5EA2hg",
                    "body": "@steve-chavez Just to note, everything was working all right, but started to fail again since Yesterday. And We haven't done any database changes.",
                    "author": {
                        "login": "gabrielsestrem"
                    },
                    "createdAt": "2022-05-30T12:05:11Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/264#issuecomment-1141074016"
                },
                {
                    "id": "IC_kwDODheSms5ECJ86",
                    "body": "@gabrielsestrem Sorry about this, there was a middleware migration recently and this didn't pick up your patched postgREST.\r\nThis will not happen again as we'll now use the [latest pre-release](https://github.com/PostgREST/postgrest/releases/tag/v9.0.0.20220516) for all instances.\r\n\r\nI've patched both projects you shared me through email. Let me know if that fixes the issue.\r\n",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-05-30T18:57:29Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/264#issuecomment-1141415738"
                },
                {
                    "id": "IC_kwDODheSms5ECdXI",
                    "body": "Hi @steve-chavez , We now have three projects, let me send you all the three projects IDS by email",
                    "author": {
                        "login": "gabrielsestrem"
                    },
                    "createdAt": "2022-05-30T21:48:09Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/264#issuecomment-1141495240"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5HdpaN",
            "number": 265,
            "title": "Add ability to pass typed array to `select()` method",
            "body": "# Feature request\r\n\r\nCurrently, the `select()` method of the `QueryBuilder` accepts a string of comma-separated values.\r\n\r\nhttps://github.com/supabase/postgrest-js/blob/v0.37.2/src/lib/PostgrestQueryBuilder.ts#L33\r\n\r\nThis does not allow for any type-checking and feels a bit \"raw\" (personal opinion only).\r\n\r\n## Describe the solution you'd like\r\n\r\nAllow a typed array to be passed as the `columns` property.\r\n\r\n```typescript\r\nexport default class PostgrestQueryBuilder<T> extends PostgrestBuilder<T> {\r\n// ... \r\n  select (\r\n    columns: (keyof T )[] | string = '*',\r\n    {\r\n      head = false,\r\n      count = null,\r\n    }: {\r\n      head?: boolean\r\n      count?: null | 'exact' | 'planned' | 'estimated'\r\n    } = {}\r\n  ): PostgrestFilterBuilder<T> {\r\n    this.method = 'GET'\r\n    // Remove whitespaces except when quoted\r\n    let quoted = false\r\n    \r\n    const cleanedColumns = (Array.isArray(columns) ? columns.join(',') : columns)\r\n      .split('')\r\n      .map((c) => {\r\n        if (/\\s/.test(c) && !quoted) {\r\n          return ''\r\n        }\r\n        if (c === '\"') {\r\n          quoted = !quoted\r\n        }\r\n        return c\r\n      })\r\n      .join('')\r\n    // ...\r\n  }\r\n}\r\n```\r\n\r\n## Describe alternatives you've considered\r\n\r\nThis is more a \"nice to have\" as it works fine as is, and this approach can be implemented manually. \r\n\r\nHowever, given the minimal overhead and typing upside, I thought it might be worthwhile suggesting.\r\n",
            "author": {
                "login": "prescience-data"
            },
            "state": "OPEN",
            "createdAt": "2022-04-10T09:19:12Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/265",
            "comments": []
        },
        {
            "id": "I_kwDODheSms5IJH4o",
            "number": 268,
            "title": "quirky .range() during pagination",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\nWhen paginating using `range`, specifically at the last page, a duplicate item would be added in place of the correct item.\r\nThe workaround is to delete both items (duplicate item and correct item) from the dashboard, and re-enter in those items.\r\n\r\n## To Reproduce\r\n\r\nThis may be a one-off cache related issue, I can't be certain, but i can't reproduce.\r\nFeel free to close the issue, I simply wanted to bring it to the devs + community's attention in case someone runs into it.\r\n\r\n",
            "author": {
                "login": "zidkim"
            },
            "state": "CLOSED",
            "createdAt": "2022-04-21T00:27:04Z",
            "closedAt": "2022-04-25T11:57:28Z",
            "url": "https://github.com/supabase/postgrest-js/issues/268",
            "comments": [
                {
                    "id": "IC_kwDODheSms5B1o0K",
                    "body": "Is this related to the supabase-js range functions - like [rangeLt](https://supabase.com/docs/reference/javascript/rangelt)?",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-04-21T00:31:12Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/268#issuecomment-1104579850"
                },
                {
                    "id": "IC_kwDODheSms5B5JY6",
                    "body": ">  specifically at the last page, a duplicate item would be added in place of the correct item\r\n\r\n@madleo-dk The above sounds exactly like [PostgreSQL docs on inclusivity for ranges](https://www.postgresql.org/docs/current/rangetypes.html#RANGETYPES-INCLUSIVITY). Basically, a `[` or `]` for the range input would mean the bound is included.\r\n\r\nFrom the example in the docs:\r\n\r\n```js\r\nconst { data, error } = await supabase\r\n  .from('countries')\r\n  .select('name, id, population_range_millions')\r\n  .rangeLt('population_range_millions', '[150, 250]')\r\n```\r\n\r\nBrackets `[]` are used. For not including the bounds, parens `()` should be used as per the PostgreSQL docs.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-04-21T17:31:51Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/268#issuecomment-1105499706"
                },
                {
                    "id": "IC_kwDODheSms5CEgYN",
                    "body": "Hey @madleo-dk - I'll close this for now, but if steve's solution doesn't work for you feel free to comment and we can re-open",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2022-04-25T11:57:28Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/268#issuecomment-1108477453"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5KvAiG",
            "number": 271,
            "title": "throwOnError does not respect maybeSingle",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\nCurrently, `throwOnError()` does not respect `maybeSingle()`. It only looks at the fetch response and throws if it is not \"ok\". If used with `maybeSingle()`, it should not throw for the 406 error.\r\n\r\n## To Reproduce\r\n\r\n```ts\r\nconst { data, error } = await supabaseClient\r\n  .from('channel')\r\n  .update({ active: false })\r\n  .eq('id', channelId)\r\n  .maybeSingle();\r\nconsole.error(error); // null\r\n```\r\n\r\n```ts\r\nconst { data, error } = await supabaseClient\r\n  .from('channel')\r\n  .update({ active: false })\r\n  .eq('id', channelId)\r\n  .throwOnError(true)\r\n  .maybeSingle(); // throws\r\n```\r\n## Expected behavior\r\n\r\n```ts\r\nconst { data, error } = await supabaseClient\r\n  .from('channel')\r\n  .update({ active: false })\r\n  .eq('id', channelId)\r\n  .throwOnError(true)\r\n  .maybeSingle(); \r\nconsole.error(error) // null\r\n```\r\n\r\n## System information\r\n\r\n- Version of supabase-js: 1.35.3\r\n- Version of Node.js: v16.14.2\r\n\r\n## Additional Context\r\nHappy to open a PR if this is desired behaviour.\r\n\r\nEDIT: I went ahead and opened a PR to fix this issue: #272 ",
            "author": {
                "login": "psteinroe"
            },
            "state": "CLOSED",
            "createdAt": "2022-05-31T13:02:36Z",
            "closedAt": "2022-05-31T15:06:41Z",
            "url": "https://github.com/supabase/postgrest-js/issues/271",
            "comments": [
                {
                    "id": "IC_kwDODheSms5EFX7k",
                    "body": ":tada: This issue has been resolved in version 0.37.3 :tada:\n\nThe release is available on:\n- [GitHub release](https://github.com/supabase/postgrest-js/releases/tag/v0.37.3)\n- [npm package (@latest dist-tag)](https://www.npmjs.com/package/@supabase/postgrest-js/v/0.37.3)\n\nYour **[semantic-release](https://github.com/semantic-release/semantic-release)** bot :package::rocket:",
                    "author": {
                        "login": "github-actions"
                    },
                    "createdAt": "2022-05-31T15:08:08Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/271#issuecomment-1142259428"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5KvylL",
            "number": 273,
            "title": "Int8 and Numerical columns returning incorrectly (rounded)",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen using `int8` and `numerical` columns, using the `supabase-js` client will return a rounded (wrong precision) number back. \r\n\r\nI've verified the data is correct both in the Supabase UI (table view), and even returns correctly via the SQL Editor. Additionally, I've verified it's incorrect by making sure the precision of the Numerical unit is set as it should be (also via SQL).\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Create database with numerical OR int8 column\r\n2. Insert 1+ rows with data - For example: `3458764526536546760`\r\n3. Via JS client, `supabase.from(table_name).select()` the table\r\n4. See that the retrieved value is rounded (in my case with the number above: `3458764526536547000`)\r\n5. Head to SQL editor, and select the same table via SQL (SELECT * from table_name), and verify the data is returned as expected\r\n\r\n## Expected behavior\r\n\r\nThe number should return as expected (not rounded)\r\n\r\n## System information\r\n\r\n- OS: MacOS\r\n- Browser: Chrome\r\n- Version of supabase-js: `v1.35.3`\r\n- Version of Node.js: `v16.13.0`\r\n\r\n",
            "author": {
                "login": "addisonschultz"
            },
            "state": "CLOSED",
            "createdAt": "2022-05-31T13:36:22Z",
            "closedAt": "2022-05-31T21:20:27Z",
            "url": "https://github.com/supabase/postgrest-js/issues/273",
            "comments": [
                {
                    "id": "IC_kwDODheSms5EF52c",
                    "body": "Can't reproduce:\r\n\r\n```sql\r\nCREATE TABLE int8_test (\r\n  id bigint PRIMARY KEY,\r\n  num int8\r\n);\r\ninsert into int8_test values(1, 3458764526536546760);\r\n```\r\n\r\n```bash\r\ncurl localhost:3000/int8_test\r\n\r\n[{\"id\":1,\"num\":3458764526536546760}]\r\n```\r\n\r\nSame number `3458764526536546760`.\r\n\r\n@soedirgo `postgrest-js` casts the number somehow?",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-05-31T17:10:24Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/273#issuecomment-1142398364"
                },
                {
                    "id": "IC_kwDODheSms5EGN2F",
                    "body": "This is because numbers in JS are float64, so if your number is more than `Number.MAX_SAFE_INTEGER === 9007199254740991` it won't be represented correctly.\r\n\r\nAn alternative is to cast it to `text`: `supabase.from(table_name).select('id, num::text')` and manually convert them to `BigInt`.\r\n\r\nI understand the correctness issue can be unacceptable to some - let me know what your thoughts are about this.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-05-31T18:18:46Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/273#issuecomment-1142480261"
                },
                {
                    "id": "IC_kwDODheSms5EG3Xd",
                    "body": "Thanks for the explanation - This does make sense to me, but was not expected (My JS knowledge doesn't go quite that deep)\u2014Maybe something good for the JS client docs? \r\n\r\nThe solution is acceptable, and will work for me\u2014I may also store it in a text type to begin with anyway.\r\n\r\nThanks @steve-chavez @soedirgo, this is now solved for me!",
                    "author": {
                        "login": "addisonschultz"
                    },
                    "createdAt": "2022-05-31T21:20:27Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/273#issuecomment-1142650333"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5LjstB",
            "number": 280,
            "title": "Method to set schema on a call by call basis.",
            "body": "# Feature request\r\n\r\nRight now you can only set a schema in initial supabase client setup.\r\nIt would be very useful to be able to override the default ('public' normally) schema on individual calls.\r\n\r\n## Describe the solution you'd like\r\nAdd a postgrest-js operation  .schema('myschema') that can be used with other operations on a single call basis.\r\n\r\n## Describe alternatives you've considered\r\nCurrently the below works in my environment.  It does not impact storage and auth, but have not tested on realtime yet.\r\n```\r\nlet schema = ''\r\nvar supabase = supabase.createClient(SUPABASE_URL, SUPABASE_KEY, {\r\n    fetch: (requestInfo, requestInit) => {\r\n        if (schema) requestInit.headers['Accept-Profile'] = schema\r\n        return(fetch(requestInfo,requestInit))\r\n    }\r\n```\r\nThen you do the following for a different schema\r\n```\r\n    schema = 'storage'\r\n    const response = await supabase\r\n        .from('objects')\r\n        .select('*')\r\n    schema = ''\r\n```\r\nFor modular code one could add \r\n```\r\nexport function setSchema(schemaName) {\r\n schema = schemaName\r\n}\r\n```\r\nAnd call that before and after supabase database call to another schema.\r\n## Additional context\r\n\r\nIt appears the only thing required to make PostgREST work with an API available schema is setting the Accept-Profile' header.  This should be easily done in postgrest-js with a .schema('myschema') function added to postgrest calls.\r\n```\r\n    const response = await supabase\r\n        .from('objects')\r\n        .schema('storage')\r\n        .select('*')\r\n```\r\n",
            "author": {
                "login": "GaryAustin1"
            },
            "state": "CLOSED",
            "createdAt": "2022-06-10T14:43:47Z",
            "closedAt": "2023-08-06T14:44:05Z",
            "url": "https://github.com/supabase/postgrest-js/issues/280",
            "comments": [
                {
                    "id": "IC_kwDODheSms5EtbRW",
                    "body": "I could swear I tested the code below before, and it did not pass down to postgrest-js after the initial setup, but seems to work (at least for javascript, not sure what typescript would complain about).  \r\n```\r\nsupabase.schema = 'storage'\r\nawait supabase.from('objects').select('*')\r\nsupabase.schema = 'public' // put it back\r\n```\r\nI don't find this documented anywhere, but it seems to work now...  ONCE AGAIN not tested impact on realtime, if any...\r\n\r\nAnyway to get the official way, if any to toggle schema for different requests?",
                    "author": {
                        "login": "GaryAustin1"
                    },
                    "createdAt": "2022-06-10T21:45:45Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/280#issuecomment-1152758870"
                },
                {
                    "id": "IC_kwDODheSms5EwLI9",
                    "body": "+1 on using the builder pattern to switch schemas, though I'd put it before the `.from()`, e.g.\r\n\r\n```ts\r\n    const response = await supabase\r\n        .schema('storage')\r\n        .from('objects')\r\n        .select()\r\n```",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-06-13T05:11:02Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/280#issuecomment-1153479229"
                },
                {
                    "id": "IC_kwDODheSms5FBwLh",
                    "body": "Might be worth thinking how the interface would look like when postgREST supports embedding on different schemas(just needs an additional header semantic). Maybe like:\r\n\r\n```js\r\nconst { data, error } = await supabase\r\n  .schema({ countries: \"core\", cities: \"protected\" })\r\n  .from('countries')\r\n  .select(`\r\n    name,\r\n    cities (\r\n      name\r\n    )\r\n  `)\r\n```\r\n\r\nI guess extending the `.schema()` method to take an object later on shouldn't be a problem.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-06-16T20:11:15Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/280#issuecomment-1158087393"
                },
                {
                    "id": "IC_kwDODheSms5FDWEU",
                    "body": "That looks neat - do you have some links on PostgREST for more details on that?",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-06-17T05:28:13Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/280#issuecomment-1158504724"
                },
                {
                    "id": "IC_kwDODheSms5fviO0",
                    "body": "Plus one to this- it would be great if I didn't have to create a whole new client to access another *public* schema on my database.",
                    "author": {
                        "login": "bdotsamir"
                    },
                    "createdAt": "2023-06-25T22:41:33Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/280#issuecomment-1606296500"
                },
                {
                    "id": "IC_kwDODheSms5gBeJU",
                    "body": "Hey @soedirgo @steve-chavez !\r\n\r\nAre there any blockers to introduce an solution for this issue at the moment?",
                    "author": {
                        "login": "dshukertjr"
                    },
                    "createdAt": "2023-06-28T08:34:49Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/280#issuecomment-1610998356"
                },
                {
                    "id": "IC_kwDODheSms5gD683",
                    "body": "@dshukertjr Just added some feedback on https://github.com/supabase/postgrest-js/pull/441#discussion_r1245390149",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-06-28T15:21:32Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/280#issuecomment-1611640631"
                },
                {
                    "id": "IC_kwDODheSms5gEDoP",
                    "body": "What is the syntax at `.schema({ countries: \"core\", cities: \"protected\" })`? I don't understand what those values are except that `countries` and `cities` are tables",
                    "author": {
                        "login": "bdotsamir"
                    },
                    "createdAt": "2023-06-28T15:44:50Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/280#issuecomment-1611676175"
                },
                {
                    "id": "IC_kwDODheSms5gicub",
                    "body": "> What is the syntax at `.schema({ countries: \"core\", cities: \"protected\" })`? I don't understand what those values are except that `countries` and `cities` are tables\r\n\r\nI think it would be used to tell which tables is on which schema, I guess if in the query you have perhaps a join from a table in schema A on a table in schema B.",
                    "author": {
                        "login": "Eldynn"
                    },
                    "createdAt": "2023-07-04T07:11:00Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/280#issuecomment-1619643291"
                },
                {
                    "id": "IC_kwDODheSms5jUvmF",
                    "body": ">     const response = await supabase\r\n>       .schema('storage')\r\n>       .from('objects')\r\n>       .select()\r\n\r\nhttps://github.com/supabase/postgrest-js/issues/280#issuecomment-1153479229\r\n\r\nOn second thought, since multiple schemas are not supported. I think we can just stick to having a `schema()` method.\r\n\r\nUsing a single schema for the API is also a best practice.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-08-05T04:17:59Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/280#issuecomment-1666382213"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5L1bir",
            "number": 281,
            "title": "Wrong PostgrestError type",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nThe type ``PostgrestError`` from ``node_modules/@supabase/postgrest-js/src/lib/types.ts`` is wrong.\r\nThe type has a field ``code: string``.\r\n\r\n```ts\r\nexport type PostgrestError = {\r\n  message: string\r\n  details: string\r\n  hint: string\r\n  code: string\r\n}\r\n```\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Go to ``node_modules/@supabase/postgrest-js/src/lib/types.ts`` from a supabase client project that has this lib.\r\n3. Scroll down to the type ``PostgrestError``\r\n4. See error\r\n\r\n## Expected behavior\r\n\r\nThe type should have a field ``code: number`` like the real error result from a select call from the supabase client lib.\r\n\r\n```ts\r\nexport type PostgrestError = {\r\n  message: string\r\n  details: string\r\n  hint: string\r\n  code: number\r\n}\r\n```\r\n",
            "author": {
                "login": "JulienLecoq"
            },
            "state": "CLOSED",
            "createdAt": "2022-06-15T14:10:00Z",
            "closedAt": "2022-06-16T20:14:12Z",
            "url": "https://github.com/supabase/postgrest-js/issues/281",
            "comments": [
                {
                    "id": "IC_kwDODheSms5E8rC9",
                    "body": "Note that code is not always a number, see: https://www.postgresql.org/docs/current/errcodes-appendix.html\r\n\r\nThere are some codes like `42P01`(undefined table)",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-06-15T17:41:20Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/281#issuecomment-1156755645"
                },
                {
                    "id": "IC_kwDODheSms5FBwuM",
                    "body": "This one is looking solved to me but please reopen if not.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-06-16T20:14:12Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/281#issuecomment-1158089612"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5L8Bzq",
            "number": 282,
            "title": "API no working reliably (FetchError: Unexpected token < in JSON at position 1) ",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nCalling Supabase API and RPC functions sometimes gives the following error \"FetchError: Unexpected token < in JSON at position 1\" \r\n\r\n## To Reproduce\r\n\r\nNo general way to reproduce it as it is an intermittent issue probably related to server performance or how Supabase provisions the Postgres cluster. But chances are that you can query your logs for 500 errors or look into your GA (Google Analytics) and you will find some there.\r\n\r\n## Expected behavior\r\n\r\nAPI should work as expected and not only sometimes.\r\n\r\n## Screenshots\r\n\r\n![image](https://user-images.githubusercontent.com/85610381/168421880-18ef4adf-58a1-4164-925a-6a72c487495f.png)\r\n\r\n![image](https://user-images.githubusercontent.com/85610381/168421996-65290996-e2d2-4ed0-9772-56e93e7f2df4.png)\r\n\r\n![image](https://user-images.githubusercontent.com/85610381/168422448-7309389c-709d-421c-af49-f413976649b1.png)\r\n\r\n\r\n## Additional context\r\n\r\nInitially, I was getting a \"FetchError: Unexpected token < in JSON at position 1\" error at the application level so I started looking deeper and find out that Cloudflare is sending and timeout response that can not be decoded as a JSON response and hence the error.\r\n\r\nSo I look into the logs and found that there are logs with 522 and 524 status codes. I thought that this could be an issue with the server resources and checked for the server loads but that is not the case here as evident by the screenshot attached.\r\n\r\nTried raising the issue with Supabase support and received the most unhelpful response that is possible and they never reply to the follow-up emails.\r\n",
            "author": {
                "login": "give-my-certificate"
            },
            "state": "CLOSED",
            "createdAt": "2022-05-14T10:45:52Z",
            "closedAt": "2022-12-17T05:16:00Z",
            "url": "https://github.com/supabase/postgrest-js/issues/282",
            "comments": [
                {
                    "id": "IC_kwDODheSms5FBuba",
                    "body": "I believe this is related to the issue I created a few days ago => https://github.com/supabase/supabase/issues/6813\r\n\r\nEssentially the JSON body response from Supabase API is always undefined in my case...",
                    "author": {
                        "login": "jellohouse"
                    },
                    "createdAt": "2022-05-14T21:28:53Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/282#issuecomment-1158080218"
                },
                {
                    "id": "IC_kwDODheSms5FBubf",
                    "body": "@jellohouse Yes, It is the same. I did some more research on top of that as in why the JSON body response from Supabase API is undefined. It seems that the handshake between cloudflare and Supabase servers are not completing. However I am not very sure, But I have a hunch that Supabase servers are overloading from time to time as I have also noticed that API response times are also not consistent ",
                    "author": {
                        "login": "give-my-certificate"
                    },
                    "createdAt": "2022-05-15T16:02:47Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/282#issuecomment-1158080223"
                },
                {
                    "id": "IC_kwDODheSms5FBubh",
                    "body": "@steve-chavez Is there any way I can help in resolving the same, Default cloudflare timeout is 60 second which should be enough for all queries except bulk insert/Update and rpc functions (with complex joins). I also go through Supabase source code but everything looks fine from a distance. In my understanding it must be something to do with the postgresql configruaton set by Supabase as my server have a lot of free RAM and CPU, Less than 500K records per table. Max 20 tables including Auth once. Still slow query logs are showing few simple write queries taking more than 100 seconds. \r\n\r\nI would love to help in debugging the issue further but how the Supabase servers are configured are closed source.\r\n\r\n@awalias @kiwicopple Please look into it as communicating with your support is literally not possible \r\n\r\n![image](https://user-images.githubusercontent.com/85610381/168744948-2777c3a6-d349-4e51-86f1-974812f51ac7.png)\r\n\r\nNo reply in 4 days ",
                    "author": {
                        "login": "give-my-certificate"
                    },
                    "createdAt": "2022-05-17T06:36:46Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/282#issuecomment-1158080225"
                },
                {
                    "id": "IC_kwDODheSms5FBubj",
                    "body": "@give-my-certificate We're thinking of handling Cloudflare timeouts with retries in https://github.com/supabase/postgrest-js/pull/267.\r\n\r\n> n my understanding it must be something to do with the postgresql configruaton set by Supabase as my server have a lot of free RAM and CPU \r\n\r\nBear in mind that if you do many UPDATEs, then locks on rows will be acquired - this might not cause noticeable CPU/RAM consumption, but could cause waiting and slow responses.\r\n\r\nSorry about the slow reply in support, I'll come back to this one.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-05-18T03:11:19Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/282#issuecomment-1158080227"
                },
                {
                    "id": "IC_kwDODheSms5FBubl",
                    "body": "@steve-chavez \r\n\r\n> Bear in mind that if you do many UPDATEs, then locks on rows will be acquired - this might not cause noticeable CPU/RAM consumption, but could cause waiting and slow responses.\r\n\r\nYou are right, I forgot about locks, However, After your comment, I crosschecked query logs with slow query timestamps and it doesn't looks like a lock problem in this case. \r\n\r\nOne weird thing though, I upgraded my instance type from micro to small and it drastically reduced 522 and 524 errors despite having no RAM crunch.\r\n\r\n> We're thinking of handling Cloudflare timeouts with retries in https://github.com/supabase/postgrest-js/pull/267.\r\n\r\nI have gone through the pull request code and discussion and have few questions/edge case scenarios. Also as I am no expert in databases, So pardon me if these are the foolish scenarios.\r\n\r\n- What about array push operations, where the push/pop operation (Using RPC functions) times out on Cloudflare while the actual database write is successful, wouldn't a retry create duplicate entries.\r\n- Similarly for the write operations, where primary key is missing, There may be a chance of having two or more records with same data .\r\n- In a case where timeout is happening due to resource crunch on the server. Wouldn't retries create too much load on top.\r\n- Also as timeouts are also happening on storage operations. Could there be a case where the object table updates without actual object being uploaded to s3. In this scenario even retries won't work.\r\n",
                    "author": {
                        "login": "give-my-certificate"
                    },
                    "createdAt": "2022-05-20T04:56:07Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/282#issuecomment-1158080229"
                },
                {
                    "id": "IC_kwDODheSms5FBubo",
                    "body": "> Also as I am no expert in databases, So pardon me if these are the foolish scenarios.\r\n\r\nThese are great questions @give-my-certificate.\r\n\r\n> What about array push operations, where the push/pop operation (Using RPC functions) times out on Cloudflare while the actual database write is successful, wouldn't a retry create duplicate entries.\r\n\r\nYeah, on https://github.com/supabase/postgrest-js/pull/267 there won't be retries for POST requests, underlyingly the js library calls RPC with the POST method.\r\n\r\nFor now retries in the PR are only targeting GET requests.\r\n\r\n> Similarly for the write operations, where primary key is missing, There may be a chance of having two or more records with same data .\r\n\r\nSame here, POST is used for insert and upsert.\r\n\r\n> In a case where timeout is happening due to resource crunch on the server. Wouldn't retries create too much load on top.\r\n\r\nThat's a concern I have as well. My idea is to additionally add backpressure to the REST API, so when it's overloaded it will send a `503 Service Unavailable` plus a `Retry-After: x` header that the js client can use to retry after x seconds.\r\nThis overloaded state could also be notified through the UI somehow, so the user can try to fix queries or consider upgrading the instance.\r\n\r\n> Also as timeouts are also happening on storage operations. Could there be a case where the object table updates without actual object being uploaded to s3. In this scenario even retries won't work.\r\n\r\nUpdates are done with the PATCH method, so no retries as well.\r\n\r\n---\r\n\r\nOverall this is still being worked on, https://github.com/supabase/postgrest-js/pull/267 is still a draft.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-05-24T04:00:17Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/282#issuecomment-1158080232"
                },
                {
                    "id": "IC_kwDODheSms5Kg3KH",
                    "body": "ran into same issue today! :|,\r\n\r\ni am using supabase as backend for projects so try to understand and resolve these errors!",
                    "author": {
                        "login": "mohitxskull"
                    },
                    "createdAt": "2022-09-17T19:29:05Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/282#issuecomment-1250128519"
                },
                {
                    "id": "IC_kwDODheSms5Q05nR",
                    "body": "This one was solved with https://github.com/PostgREST/postgrest/pull/2449/ and released on [v10.1.0](https://github.com/PostgREST/postgrest/releases/tag/v10.1.0). This version(actually v10.1.1)  is already deployed to all supabase projects.\r\n\r\nIf a timeout happens, nowadays a 504 Gateway timeout status will be reported with the `Timed out acquiring connection from connection pool` error message.\r\n\r\nWill close for now. Please reopen if the error persists.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-12-17T05:16:00Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/282#issuecomment-1356044753"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5MfVYI",
            "number": 286,
            "title": "PATCH requests are failling because CORS from multiple origins(due to a browser extension)",
            "body": "# Bug report\r\nPATCH requests are failling because CORS from multiple origins.\r\nIm trying to make a `update()` request to one of my tables and get CORS error, tried from another origin and the same happens.\r\n\r\n\r\n## To Reproduce\r\nhttps://github.com/dcruz1990/contabilidad-simple/\r\n\r\n## System information\r\n\r\n- OS: Linux\r\n- Browser: Chrome\r\n- Version of supabase-js: `@supabase/supabase-js\": \"^1.31.2\"`\r\n- Version of Node.js: 6.14.15\r\n",
            "author": {
                "login": "dcruz1990"
            },
            "state": "CLOSED",
            "createdAt": "2022-03-30T19:23:00Z",
            "closedAt": "2022-06-24T20:08:57Z",
            "url": "https://github.com/supabase/postgrest-js/issues/286",
            "comments": [
                {
                    "id": "IC_kwDODheSms5Fc75f",
                    "body": "Hey @dcruz1990 - are you able to share a few more details?\r\n\r\nWhat request are you making? Is it using the supabase API, graphql, edge functions, etc?",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2022-04-05T10:27:44Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/286#issuecomment-1165213279"
                },
                {
                    "id": "IC_kwDODheSms5Fc75j",
                    "body": "Im using the standar supabase API. \r\n\r\n```\r\n const updateAccountBalance = async (balance: number) => {\r\n      console.log(\"El balance es\" + balance);\r\n      const { data, error } = await supabase\r\n        .from(\"account\")\r\n        .update({\r\n          balance: balance,\r\n        })\r\n        .match({ id: currentAccount.value?.id });\r\n    };\r\n```\r\n\r\n",
                    "author": {
                        "login": "dcruz1990"
                    },
                    "createdAt": "2022-04-05T13:51:25Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/286#issuecomment-1165213283"
                },
                {
                    "id": "IC_kwDODheSms5Fc75k",
                    "body": "that's odd. I get the feeling the CORS error is a red-herring. Are any of your other endpoints failing, or just this request?\r\n\r\nAre you able to inspect the logs in your dashboard and see any errors there?",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2022-04-07T15:01:49Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/286#issuecomment-1165213284"
                },
                {
                    "id": "IC_kwDODheSms5Fc75m",
                    "body": "Not sure if it's related to this issue, but I figured that I'll post this here if it is.\r\n\r\nI'm getting a similar issue when trying to update custom SMTP settings on the `/auth/settings` page in Supabase where it always sends back 405 ```{\r\n    \"data\": null,\r\n    \"error\": {\r\n        \"message\": \"Method PATCH Not Allowed\"\r\n    }\r\n}```. This only happens on self-hosted/supabase cli. \r\n\r\nMight this be related?",
                    "author": {
                        "login": "Flambe"
                    },
                    "createdAt": "2022-04-13T14:48:07Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/286#issuecomment-1165213286"
                },
                {
                    "id": "IC_kwDODheSms5Fc75r",
                    "body": "@kiwicopple here is the [app preview](https://dashboard.ionicframework.com/preview/432570fd/q3coqbflxp)\r\n\r\n![image](https://user-images.githubusercontent.com/43586145/163214740-a89eda04-d9ea-4426-a44b-30fe6e9e6e9f.png)\r\n\r\nAs you can see, im doing a post request but inside it im doing a PATCH and it fails, from localhost and from Ionic Dashboard origin. \r\n\r\n@Flambe maybe your issue is related to this, i cant figure out how to fix it. ",
                    "author": {
                        "login": "dcruz1990"
                    },
                    "createdAt": "2022-04-13T15:25:05Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/286#issuecomment-1165213291"
                },
                {
                    "id": "IC_kwDODheSms5Fc75u",
                    "body": "Hi. Any update on the fix or workaround here? Currently experiencing the same thing.\r\n\r\nEdit: ok, current workaround is by using `.upsert` instead of `.update`, which seems to be working just fine",
                    "author": {
                        "login": "marssantoso"
                    },
                    "createdAt": "2022-04-13T19:13:19Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/286#issuecomment-1165213294"
                },
                {
                    "id": "IC_kwDODheSms5Fc75y",
                    "body": "@dcruz1990 in the link you posted, I do see that the CORS headers are being sent correctly. Is this happening only on an actual mobile device running an ionic app?\r\n\r\n<img width=\"896\" alt=\"CleanShot 2022-04-14@2x\" src=\"https://user-images.githubusercontent.com/2155545/163341374-7559bf53-dfe1-43c6-b6d2-cd0a48932c77.png\">\r\n\r\n\r\n@Flambe that seems to be a different issue on our Supabase Studio. Can you please create a separate issue for it?",
                    "author": {
                        "login": "inian"
                    },
                    "createdAt": "2022-04-14T08:04:39Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/286#issuecomment-1165213298"
                },
                {
                    "id": "IC_kwDODheSms5Fc752",
                    "body": "> @Flambe that seems to be a different issue on our Supabase Studio. Can you please create a separate issue for it?\r\n\r\nWill do!",
                    "author": {
                        "login": "Flambe"
                    },
                    "createdAt": "2022-04-14T10:35:51Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/286#issuecomment-1165213302"
                },
                {
                    "id": "IC_kwDODheSms5Fc756",
                    "body": "@inian it happens there and on local environment, also in exported apk. \r\n\r\n@marssantoso tried that but its different verb and the data that i doesn't provide gets to null. ",
                    "author": {
                        "login": "dcruz1990"
                    },
                    "createdAt": "2022-04-14T19:13:30Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/286#issuecomment-1165213306"
                },
                {
                    "id": "IC_kwDODheSms5Fc757",
                    "body": "Can you post a screenshot of your network tab showing the OPTIONs request? I am not able to replicate it by visiting this link - https://dashboard.ionicframework.com/preview/432570fd/q3coqbflxp",
                    "author": {
                        "login": "inian"
                    },
                    "createdAt": "2022-04-15T08:50:36Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/286#issuecomment-1165213307"
                },
                {
                    "id": "IC_kwDODheSms5Fc758",
                    "body": "PATCH method is missing from my side... \r\n![image](https://user-images.githubusercontent.com/43586145/163632383-e256107f-e6cd-473b-980d-aa57d103197d.png)",
                    "author": {
                        "login": "dcruz1990"
                    },
                    "createdAt": "2022-04-15T21:12:33Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/286#issuecomment-1165213308"
                },
                {
                    "id": "IC_kwDODheSms5Fc75-",
                    "body": "There is something weird going on. Supabase sets the Access-Control-Allow-Origin header to be `*` and not https://q3c...appflowapp.co. Do you know if there is a proxy in between which is altering these headers?",
                    "author": {
                        "login": "inian"
                    },
                    "createdAt": "2022-04-16T09:31:04Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/286#issuecomment-1165213310"
                },
                {
                    "id": "IC_kwDODheSms5Fc76C",
                    "body": "I don't really know that... im using Warp CLI to connect to the internet.. but the error also happens in localhost. ",
                    "author": {
                        "login": "dcruz1990"
                    },
                    "createdAt": "2022-04-17T00:21:19Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/286#issuecomment-1165213314"
                },
                {
                    "id": "IC_kwDODheSms5Fc76E",
                    "body": "Just to clarify, the REST API does set the `Access-Control-Allow-Methods`:\r\n\r\nhttps://github.com/PostgREST/postgrest/blob/7589102c6cd86598eed9bae84801823af7a10d78/test/spec/Feature/CorsSpec.hs#L23-L28\r\n\r\nIt always sets `PATCH` as showed in the above test.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-04-18T15:30:19Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/286#issuecomment-1165213316"
                },
                {
                    "id": "IC_kwDODheSms5Fc76H",
                    "body": "@dcruz1990 Can you share the privileges on the `account` table? Run the following query:\r\n\r\n```sql\r\nselect a.schemaname, a.tablename, b.usename,\r\n  HAS_TABLE_PRIVILEGE(usename, quote_ident(schemaname) || '.' || quote_ident(tablename), 'select') as has_select,\r\n  HAS_TABLE_PRIVILEGE(usename, quote_ident(schemaname) || '.' || quote_ident(tablename), 'insert') as has_insert,\r\n  HAS_TABLE_PRIVILEGE(usename, quote_ident(schemaname) || '.' || quote_ident(tablename), 'update') as has_update,\r\n  HAS_TABLE_PRIVILEGE(usename, quote_ident(schemaname) || '.' || quote_ident(tablename), 'delete') as has_delete, \r\n  HAS_TABLE_PRIVILEGE(usename, quote_ident(schemaname) || '.' || quote_ident(tablename), 'references') as has_references \r\nfrom pg_tables a, pg_user b \r\nwhere a.schemaname = 'public' and a.tablename='account';\r\n```\r\n\r\nAlso, by any chance, is `account` actually a view?",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-04-18T15:52:59Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/286#issuecomment-1165213319"
                },
                {
                    "id": "IC_kwDODheSms5Fc76K",
                    "body": "@steve-chavez here is\r\n![image](https://user-images.githubusercontent.com/43586145/163851911-fca28ae5-d6cf-4813-8d1b-7d98454860fe.png)\r\n",
                    "author": {
                        "login": "dcruz1990"
                    },
                    "createdAt": "2022-04-18T17:58:02Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/286#issuecomment-1165213322"
                },
                {
                    "id": "IC_kwDODheSms5Fc76L",
                    "body": "@dcruz1990 I think there's another page missing there, the `anon` and `authenticated`(`usename` column) privileges on the table would help to clarify things.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-04-18T18:02:02Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/286#issuecomment-1165213323"
                },
                {
                    "id": "IC_kwDODheSms5Fc76O",
                    "body": "@steve-chavez hm. that's the query result.. im not using authentication. Im just following your instructions :sweat_smile:  ",
                    "author": {
                        "login": "dcruz1990"
                    },
                    "createdAt": "2022-04-18T18:06:07Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/286#issuecomment-1165213326"
                },
                {
                    "id": "IC_kwDODheSms5Fc76Q",
                    "body": "Try this other query.\r\n\r\n```sql\r\nSELECT n.nspname as \"Schema\",\r\n  c.relname as \"Name\",\r\n  CASE c.relkind WHEN 'r' THEN 'table' WHEN 'v' THEN 'view' WHEN 'm' THEN 'materialized view' WHEN 'S' THEN 'sequence' WHEN 'f' THEN 'foreign table' WHEN 'p' THEN 'partitioned table' END as \"T\r\nype\",\r\n  pg_catalog.array_to_string(c.relacl, E'\\n') AS \"Access privileges\",\r\n  pg_catalog.array_to_string(ARRAY(\r\n    SELECT attname || E':\\n  ' || pg_catalog.array_to_string(attacl, E'\\n  ')\r\n    FROM pg_catalog.pg_attribute a\r\n    WHERE attrelid = c.oid AND NOT attisdropped AND attacl IS NOT NULL\r\n  ), E'\\n') AS \"Column privileges\",\r\n  pg_catalog.array_to_string(ARRAY(\r\n    SELECT polname\r\n    || CASE WHEN NOT polpermissive THEN\r\n       E' (RESTRICTIVE)'\r\n       ELSE '' END\r\n    || CASE WHEN polcmd != '*' THEN\r\n           E' (' || polcmd || E'):'\r\n       ELSE E':'\r\n       END\r\n    || CASE WHEN polqual IS NOT NULL THEN\r\n           E'\\n  (u): ' || pg_catalog.pg_get_expr(polqual, polrelid)\r\n       ELSE E''\r\n       END\r\n    || CASE WHEN polwithcheck IS NOT NULL THEN\r\n           E'\\n  (c): ' || pg_catalog.pg_get_expr(polwithcheck, polrelid)\r\n       ELSE E''\r\n       END    || CASE WHEN polroles <> '{0}' THEN\r\n           E'\\n  to: ' || pg_catalog.array_to_string(\r\n               ARRAY(\r\n                   SELECT rolname\r\n                   FROM pg_catalog.pg_roles\r\n                   WHERE oid = ANY (polroles)\r\n                   ORDER BY 1\r\n               ), E', ')\r\n       ELSE E''\r\n       END\r\n    FROM pg_catalog.pg_policy pol\r\n    WHERE polrelid = c.oid), E'\\n')\r\n    AS \"Policies\"\r\nFROM pg_catalog.pg_class c\r\n     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace\r\nWHERE c.relkind IN ('r','v','m','S','f','p')\r\n  AND n.nspname !~ '^pg_' AND pg_catalog.pg_table_is_visible(c.oid)\r\nORDER BY 1, 2;\r\n```",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-04-18T18:25:43Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/286#issuecomment-1165213328"
                },
                {
                    "id": "IC_kwDODheSms5Fc76S",
                    "body": "![image](https://user-images.githubusercontent.com/43586145/163856286-395d91c2-a728-414b-9bcf-eea6c80d372d.png)\r\n[supabase_oycsjhformyuenpdxgtu_New Query (1).csv](https://github.com/supabase/supabase/files/8507377/supabase_oycsjhformyuenpdxgtu_New.Query.1.csv)\r\n\r\n",
                    "author": {
                        "login": "dcruz1990"
                    },
                    "createdAt": "2022-04-18T18:32:11Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/286#issuecomment-1165213330"
                },
                {
                    "id": "IC_kwDODheSms5Fc76U",
                    "body": "Privileges seem fine. Hm, there must be something else changing the cors headers.\r\n\r\n@dcruz1990 Share your project ref to support@supabase.io",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-04-18T18:44:59Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/286#issuecomment-1165213332"
                },
                {
                    "id": "IC_kwDODheSms5Fc76W",
                    "body": "Also reported on https://discord.com/channels/839993398554656828/843999948717555735/972548128697901086",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-05-10T04:16:34Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/286#issuecomment-1165213334"
                },
                {
                    "id": "IC_kwDODheSms5Fc76X",
                    "body": "@dcruz1990 \r\nYou say this is in Chrome.  Do you by chance have this extension installed (or one similar) https://chrome.google.com/webstore/detail/allow-cors-access-control/lhobafahddgcelffkeicbaginigeejlf\r\n\r\nI recalled a discussion in discord where the user mentioned patch not working, and resolved by removing their cors \"allower\" extension (they did not mention the actual extension though).\r\n\r\nNote by default that extension does not do patch and I believe also returns the requester website (versus *) to allow faking out the browser.\r\n<img width=\"704\" alt=\"cors extension\" src=\"https://user-images.githubusercontent.com/54564956/168501713-5f020510-4555-4cc3-84de-582efc1c62de.PNG\">\r\n\r\nEdit:  I loaded that extension and get these headers for a SB network call with it on:\r\naccess-control-allow-methods: GET, PUT, POST, DELETE, HEAD, OPTIONS\r\naccess-control-allow-origin: mytestsite.com\r\nAnd this with it off:\r\naccess-control-allow-methods: GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS,TRACE,CONNECT\r\naccess-control-allow-origin: *",
                    "author": {
                        "login": "GaryAustin1"
                    },
                    "createdAt": "2022-05-16T00:36:45Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/286#issuecomment-1165213335"
                },
                {
                    "id": "IC_kwDODheSms5Fc76d",
                    "body": "Holy shit, confirmed that's the issue on my end. Turning that extension ON and OFF to see if it makes a difference, and yea it does. Didn't expect that...",
                    "author": {
                        "login": "marssantoso"
                    },
                    "createdAt": "2022-05-22T21:18:15Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/286#issuecomment-1165213341"
                },
                {
                    "id": "IC_kwDODheSms5Fc76h",
                    "body": "Hm, I'm surprised that an extension could be that invasive, it can even block GET/POST it seems.\r\n\r\nI'll transfer this to `postgrest-js`, I'm not sure but maybe it could detect that an HTTP method is blocked somehow(and print something in the JS console as a warning).\r\n\r\nThis will be low priority though, as it's an edge case.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-06-24T05:32:33Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/286#issuecomment-1165213345"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5N5yfW",
            "number": 289,
            "title": "Add a method to search across multiple columns",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nCurrently, `textSearch` allows to search for a search query on only one column, but in a typical application, we would want to search across multiple columns. \r\n\r\nCurrently, searching through multiple columns is possible using the rest api like this https://github.com/PostgREST/postgrest/issues/2374#issuecomment-1186255788\r\n\r\n```http\r\nGET /blog_posts?or=(title.fts.searchTerm,content.fts.searchTerm)\r\n```\r\nThat means we can perform full text search across multiple columns via js client can be done like this:\r\n```typescript\r\nconst { data, error } = await supabase\r\n  .from('blog_posts')\r\n  .select('*')\r\n  .or('title.fts.searchTerm,content.fts.searchTerm')\r\n```\r\n\r\nHowever, developers would need to use the rest api syntax to perform text search, so it might not be a nice developer experience. \r\n\r\n\r\n## Describe the solution you'd like\r\n\r\nThis is a suggestion from @steve-chavez, so I don't want to take any credits, but we could introduce a new method where we combine multiple text search just like `match` like this:\r\n\r\n```typescript\r\nconst { data, error } = await supabase\r\n  .from('blog_posts')\r\n  .select('*')\r\n  .textMatch({title: 'sometitle', contents: 'somecontent'})\r\n```\r\n\r\n## Describe alternatives you've considered\r\n\r\nWe can use `or` filter to combine multiple text search query.\r\n```typescript\r\nconst { data, error } = await supabase\r\n  .from('blog_posts')\r\n  .select('*')\r\n  .or('title.fts.searchTerm,content.fts.searchTerm')\r\n```\r\n",
            "author": {
                "login": "dshukertjr"
            },
            "state": "OPEN",
            "createdAt": "2022-07-17T05:36:04Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/289",
            "comments": [
                {
                    "id": "IC_kwDODheSms5GvKkx",
                    "body": "Sounds reasonable to me. Simplest solution would be to extend the current `textSearch()` to accept an array of columns for the `column` argument:\r\n```ts\r\nconst { data, error } = await supabase\r\n  .from('blog_posts')\r\n  .select()\r\n  .textSearch(['title', 'contents'], 'searchTerm')\r\n```",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-07-18T04:58:44Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/289#issuecomment-1186769201"
                },
                {
                    "id": "IC_kwDODheSms5Gy9_w",
                    "body": "@soedirgo So `title` and `contents` would be combined with `OR` right? Hm, seems a bit ad hoc to me. At first glance I would also think that both should be combined with `AND`.\r\n\r\nPerhaps we can come up with an uniform interface for all filters. Instead of taking an array as an alternative, how about an object? Like:\r\n\r\n```js\r\n.textSearch({\r\n  or: {\r\n    title: 'searchTerm'\r\n  , contents: 'searchTerm'\r\n  }\r\n});\r\n```",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-07-18T17:00:31Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/289#issuecomment-1187766256"
                },
                {
                    "id": "IC_kwDODheSms5G2k73",
                    "body": "Hmm, it departs too much from how the current filters look like imo (personal taste of course). Though I can see the confusion of `or`/`and` with the array approach.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-07-19T07:43:40Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/289#issuecomment-1188712183"
                },
                {
                    "id": "IC_kwDODheSms5G2re6",
                    "body": "I actually like @soedirgo's suggestion here, because I think in most cases, we need to search for only one search query across different columns. About the confusion of `or` and `and`, would in code documentation be not enough?\r\n\r\n```typescript\r\nconst { data, error } = await supabase\r\n  .from('blog_posts')\r\n  .select()\r\n  .textSearch(['title', 'contents'], 'searchTerm')\r\n```",
                    "author": {
                        "login": "dshukertjr"
                    },
                    "createdAt": "2022-07-19T08:11:24Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/289#issuecomment-1188739002"
                },
                {
                    "id": "IC_kwDODheSms5G5wFy",
                    "body": "> I think in most cases, we need to search for only one search query across different columns\r\n\r\nYeah, since it's a common use case for `textSearch` then I think it should be fine adding a shortcut for it.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-07-19T20:59:16Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/289#issuecomment-1189544306"
                },
                {
                    "id": "IC_kwDODheSms5G6fAF",
                    "body": "This [tweet](https://twitter.com/cawthornejosh/status/1549362423689355265?s=21&t=kj_Nsq_nw4kCwsob-lUr3g) asks for something similar for the `like` operator. I guess like:\r\n\r\n```js\r\nconst { data, error } = await supabase\r\n  .from('blog_posts')\r\n  .select()\r\n  .ilike(['title', 'contents'], 'Jo%')\r\n```",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-07-20T02:27:34Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/289#issuecomment-1189736453"
                },
                {
                    "id": "IC_kwDODheSms5Py3MK",
                    "body": "Any updates on this? I need it Lol",
                    "author": {
                        "login": "riodw"
                    },
                    "createdAt": "2022-12-06T04:27:29Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/289#issuecomment-1338733322"
                },
                {
                    "id": "IC_kwDODheSms5Py7LN",
                    "body": "Might I suggest:\r\n```\r\nconst { data, error } = await supabase\r\n  .from('books')\r\n  .select()\r\n  .textSearch(`'title' | 'description'`, `'little' | 'big'`);\r\n```\r\nThis is a simple modification of https://supabase.com/docs/guides/database/full-text-search#match-any-search-words\r\n\r\n> To find all `books` where field `description OR title` contain ANY of the words `little OR big`.\r\n\r\n\r\n",
                    "author": {
                        "login": "riodw"
                    },
                    "createdAt": "2022-12-06T04:48:28Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/289#issuecomment-1338749645"
                },
                {
                    "id": "IC_kwDODheSms5Vfhz_",
                    "body": "I agree that the lack of this feature is really really annoying. To use an SQL function for this is rather overkill.\r\nThere are already  SackOverflow  [questions](https://stackoverflow.com/questions/69225396/is-there-a-way-to-perform-full-text-search-on-multiple-columns-on-supabase-with)  and even otherwise nice examples in official docs [do not explicitly mention and warn](https://supabase.com/docs/guides/database/full-text-search#searchable-columns) that there is no JavaScript and Dart front-end api for more columns search. \r\nAt this moment it would be great to have a explicit warning in docs that this is really a non existing feature, I made a PR  [#12508 ](https://github.com/supabase/supabase/pull/12508)",
                    "author": {
                        "login": "kvetoslavnovak"
                    },
                    "createdAt": "2023-02-17T08:54:23Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/289#issuecomment-1434328319"
                },
                {
                    "id": "IC_kwDODheSms5WmLFt",
                    "body": "Building a project where this feature would be greatly appreciated. Might use the workaround approach with a custom Postgres function, but this really should be a first-class function in the API",
                    "author": {
                        "login": "shrey150"
                    },
                    "createdAt": "2023-03-03T02:14:03Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/289#issuecomment-1452847469"
                },
                {
                    "id": "IC_kwDODheSms5Xnetq",
                    "body": "Just to document how you can do this now:\r\n\r\n```sql\r\nCREATE FUNCTION title_description(books) RETURNS text AS $$\r\n  SELECT $1.title || ' ' || $1.description;\r\n$$ LANGUAGE SQL;\r\n```\r\n\r\n```js\r\nconst { data, error } = await supabase\r\n  .from('books')\r\n  .select()\r\n  .textSearch('title_description', `little`)\r\n```\r\n\r\nhttps://supabase.com/docs/guides/database/full-text-search#search-multiple-columns",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-03-15T13:01:00Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/289#issuecomment-1469967210"
                },
                {
                    "id": "IC_kwDODheSms5oQCFd",
                    "body": "how do you all accomplish this now, without the new feature?  Use multiple queries and then add logic to filter/combine?",
                    "author": {
                        "login": "lucksp"
                    },
                    "createdAt": "2023-10-05T14:33:19Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/289#issuecomment-1749033309"
                },
                {
                    "id": "IC_kwDODheSms5phSR5",
                    "body": "> Just to document how you can do this now:\r\n> \r\n> ```sql\r\n> CREATE FUNCTION title_description(books) RETURNS text AS $$\r\n>   SELECT $1.title || ' ' || $1.description;\r\n> $$ LANGUAGE SQL;\r\n> ```\r\n> \r\n> ```js\r\n> const { data, error } = await supabase\r\n>   .from('books')\r\n>   .select()\r\n>   .textSearch('title_description', `little`)\r\n> ```\r\n> \r\n> https://supabase.com/docs/guides/database/full-text-search#search-multiple-columns\r\n\r\n@steve-chavez is it possible that this doesn't work for a materialized view?\r\nI'm getting the following error:\r\n\r\ncode\r\n: \r\n\"42703\"\r\ndetails\r\n: \r\nnull\r\nhint\r\n: \r\nnull\r\nmessage\r\n: \r\n\"column search_1.name_slug does not exist\"\r\n\r\nEDIT:\r\nI fixed this issue by creating an index per the documentation. This works just fine for materialized view!",
                    "author": {
                        "login": "Strijdhagen"
                    },
                    "createdAt": "2023-10-19T08:38:20Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/289#issuecomment-1770333305"
                }
            ]
        },
        {
            "id": "MDU6SXNzdWUxMzA4NzQ1OTM5",
            "number": 290,
            "title": "Show progress bar for large inserts",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nI'm importing [TB](https://github.com/tutorbookapp/tutorbook)'s Firestore data to Supabase and need to insert >1000 rows at a time. This results in a long wait (so far >5 mins) with no logging or indication that something is happening as the Supabase SDK inserts all those rows.\r\n\r\n## Describe the solution you'd like\r\n\r\nI'd like to have an option to enable a progress bar or some other tracker that can indicate the ETA for large inserts.\r\n\r\n## Describe alternatives you've considered\r\n\r\nI can insert one row at a time and then show the progress bar myself:\r\n\r\n```javascript\r\nconst progress = require('cli-progress');\r\nconst bar = new progress.SingleBar({}, progress.Presets.shades_classic);\r\nlet count = 0;\r\nbar.start(users.length, count);\r\nawait Promise.all(users.map(async (user) => {\r\n  const { data, error } = await supabase.from('users').insert(user);\r\n  bar.update((count += 1));\r\n})));\r\n```\r\n\r\n## Additional context\r\n\r\n[This is the script](https://github.com/tutorbookapp/tutorbook/blob/supabase/scripts/migrate/supabase.js) that I'm using to import my Firestore data into Supabase. And [this](https://github.com/tutorbookapp/tutorbook/blob/supabase/db/setup.pgsql) defines my PostgreSQL schema.",
            "author": {
                "login": "nicholaschiang"
            },
            "state": "CLOSED",
            "createdAt": "2021-06-05T18:30:15Z",
            "closedAt": "2021-06-06T00:55:24Z",
            "url": "https://github.com/supabase/postgrest-js/issues/290",
            "comments": [
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDExODgzNzkxNjk=",
                    "body": "> need to insert >1000 rows at a time. This results in a long wait (so far >5 mins)\r\n\r\nThis will be much faster If you batch the rows(construct an array) and insert all in one go. Right now you're inserting one by one(done in your script [here](https://github.com/tutorbookapp/tutorbook/blob/supabase/scripts/migrate/supabase.js#L85-L86)), and that will always be much slower.\r\n\r\nCheck the docs for bulk create: https://supabase.io/docs/reference/javascript/insert#bulk-create",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-06-05T23:24:35Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/290#issuecomment-1188379169"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDExODgzNzkxNzQ=",
                    "body": "@steve-chavez Inserting one-by-one is nice though because I can inspect each error individually and then retry them as needed (e.g. after I've manually added a name to a record that previously didn't have one, I have to retry only that insert).",
                    "author": {
                        "login": "nicholaschiang"
                    },
                    "createdAt": "2021-06-05T23:57:43Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/290#issuecomment-1188379174"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDExODgzNzkxNzc=",
                    "body": "Actually, using a bulk insert seems like a great solution. It'll fail if any one of the records causes an error and no rows will be inserted, right @steve-chavez? If that's the behavior, then I can close this issue. I'll just try to perform a bulk insert (of all my user data from Firestore) and then if there's an error, I'll manually update/remove the culprit row and retry the insert.",
                    "author": {
                        "login": "nicholaschiang"
                    },
                    "createdAt": "2021-06-06T00:29:24Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/290#issuecomment-1188379177"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDExODgzNzkxODE=",
                    "body": "Yup, this is super fast now! \ud83e\udd2f ",
                    "author": {
                        "login": "nicholaschiang"
                    },
                    "createdAt": "2021-06-06T00:55:24Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/290#issuecomment-1188379181"
                },
                {
                    "id": "MDEyOklzc3VlQ29tbWVudDExODgzNzkxODY=",
                    "body": ">  It'll fail if any one of the records causes an error and no rows will be inserted, right @steve-chavez? \r\n\r\n@nicholaschiang Yes exactly. The insertion is \"atomic\" - all rows succeed or none does.\r\n\r\n> Yup, this is super fast now! exploding_head\r\n\r\n:boom:  Cool!",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2021-06-06T01:18:47Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/290#issuecomment-1188379186"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5OFXSq",
            "number": 291,
            "title": "RLS breach return empty array instead of 403",
            "body": "Hey there,\r\n\r\nI have a table `chunks` for which i'm building a RLS policy to allow only owners (authenticated and uid() matching the `owner_id` field) to read the data.\r\n\r\nSo I just enabled RLS with no policies on that table, reloaded my app as unauthenticated, and was surprised to see that the return of the following query:\r\n\r\n```typescript\r\nconst chunk = await supabase\r\n  .from<Chunk>(\"chunks\")\r\n  .select(`*`)\r\n  .eq(\"slug\", router.query.slug as string)\r\n```\r\n\r\nyielded an empty array `[]` as a result instead of a `HTTP 403` error.\r\n\r\nWouldn't a breach in RLS policy be considered an access forbidden? Is this behavior expected?\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser: chrome\r\n- Version of supabase-js: 1.35.4\r\n- Version of Node.js: 17\r\n\r\n\r\n",
            "author": {
                "login": "tzvc"
            },
            "state": "CLOSED",
            "createdAt": "2022-07-19T17:58:31Z",
            "closedAt": "2022-07-20T02:18:00Z",
            "url": "https://github.com/supabase/postgrest-js/issues/291",
            "comments": [
                {
                    "id": "IC_kwDODheSms5G5tiy",
                    "body": "This is the way Postgres RLS works, not a SB thing.  \r\nhttps://dba.stackexchange.com/questions/300776/postgres-rls-how-to-error-instead-of-ignoring-rows-not-matched-by-the-policy\r\n\r\nRLS policy is just like an extra where statement on the select.",
                    "author": {
                        "login": "GaryAustin1"
                    },
                    "createdAt": "2022-07-19T19:54:38Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/291#issuecomment-1189533874"
                },
                {
                    "id": "IC_kwDODheSms5G5ufJ",
                    "body": "Also, if you expect a single row you can use [single()](https://supabase.com/docs/reference/javascript/single) to generate an error.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-07-19T20:50:34Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/291#issuecomment-1189537737"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5OZWub",
            "number": 292,
            "title": "Batch delete is subject to max URL length",
            "body": "### Discussed in https://github.com/supabase/supabase/discussions/4831\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **pryme0** January  6, 2022</sup>\r\nIs there a way to do batch delete with supbase?\r\nLike i pass in an array containing id's of records i want to delete  and it runs the operation for me</div>",
            "author": {
                "login": "pryme0"
            },
            "state": "OPEN",
            "createdAt": "2022-01-06T12:53:30Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/292",
            "comments": [
                {
                    "id": "IC_kwDODheSms5HGL4m",
                    "body": "definitely:\r\n\r\n```js\r\nconst { data, error } = await supabase\r\n  .from('cities')\r\n  .delete()\r\n  .in('id', ['1', '2'])\r\n```",
                    "author": {
                        "login": "kiwicopple"
                    },
                    "createdAt": "2022-01-06T14:59:48Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/292#issuecomment-1192803878"
                },
                {
                    "id": "IC_kwDODheSms5HGL4r",
                    "body": "I have a join table using multiple fields as a primary id. For simplicity say user_colors. Perhaps I first add 4 user_colors `supabase.from('user_colors').upsert([ {user_id: 'bill', color_id: 'red'},  {user_id: 'bill', color_id: 'green'}, {user_id: 'bill', color_id: 'blue'}])` and I now want to delete the ones with user_id as bill and colors red and green and keep blue\r\n\r\nHow does this look in that case?",
                    "author": {
                        "login": "24jr"
                    },
                    "createdAt": "2022-07-17T14:58:18Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/292#issuecomment-1192803883"
                },
                {
                    "id": "IC_kwDODheSms5HGL4u",
                    "body": "@24jr Can you ask that one in a new discussion? https://github.com/supabase/supabase/discussions\r\n\r\n`upsert` seems unrelated to this one.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-07-19T00:27:24Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/292#issuecomment-1192803886"
                },
                {
                    "id": "IC_kwDODheSms5HGL4y",
                    "body": "With filter `in` aren\u2019t we limited to the length of url params ? When we have lots of items to delete with long string ids, for instance.",
                    "author": {
                        "login": "aiibe"
                    },
                    "createdAt": "2022-07-22T16:23:26Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/292#issuecomment-1192803890"
                },
                {
                    "id": "IC_kwDODheSms5HGMX9",
                    "body": "@aiibe Yes, see https://github.com/PostgREST/postgrest/issues/2314. A bulk delete with a request payload is being worked on https://github.com/PostgREST/postgrest/pull/2355.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-07-22T17:49:10Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/292#issuecomment-1192805885"
                },
                {
                    "id": "IC_kwDODheSms5LDGx7",
                    "body": "Repurposing this issue to batch delete w/ request body",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-27T07:35:42Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/292#issuecomment-1259105403"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5PICwQ",
            "number": 294,
            "title": "RPC returning 404",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nCalls to `supabase.rpc()` return a 404 status code, even though the function exists and the rpc method is being called as described in the documentation: https://supabase.com/docs/reference/javascript/rpc\r\n\r\n## To Reproduce\r\n\r\n1. Create function `hello_foo` in the supabase console (to ensure there isn't anything I'm missing by creating the function in the sql editor) in schema public returning json with body:\r\n```\r\nBEGIN\r\n  RETURN '{\"data\": \"hello foo\"}';\r\nEND;\r\n```\r\n2. Call rpc method via supabase lib `const resp = await supabase.rpc(\"hello_foo\", {});`\r\n3. Response payload:\r\n```\r\n{\r\n  \"body\": null,\r\n  \"count\": null,\r\n  \"data\": null,\r\n  \"error\": Object {},\r\n  \"status\": 404,\r\n  \"statusText\": \"\",\r\n}\r\n```\r\n\r\n## Expected behavior\r\n\r\n404 indicates to me that Supabase is having trouble finding the function. I would expect Supabase to be able to find this function properly.\r\n\r\n## Screenshots\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n## System information\r\n\r\n- OS/Browser: React Native, iOS\r\n- Version of supabase-js: 1.31.1\r\n- Version of Node.js: v14.18.0\r\n\r\n## Additional context\r\n\r\nMy end goal is to execute a more complicated function (a password check), but am unable to get this simple case working.\r\n\r\nAnother thing i noticed was without any rpc params (ie `supabase.rpc(\"hello_foo\");` I recieve a 400 response:\r\n```\r\nObject {\r\n  \"body\": null,\r\n  \"count\": null,\r\n  \"data\": null,\r\n  \"error\": Object {\r\n    \"message\": \"Error in $: not enough input\",\r\n  },\r\n  \"status\": 400,\r\n  \"statusText\": \"\",\r\n}\r\n```\r\n",
            "author": {
                "login": "wernst"
            },
            "state": "CLOSED",
            "createdAt": "2022-03-22T21:40:23Z",
            "closedAt": "2022-08-03T16:24:08Z",
            "url": "https://github.com/supabase/postgrest-js/issues/294",
            "comments": [
                {
                    "id": "IC_kwDODheSms5Hxo6V",
                    "body": ">{\r\n  \"body\": null,\r\n  \"count\": null,\r\n  \"data\": null,\r\n  \"error\": Object {},\r\n  \"status\": 404,\r\n  \"statusText\": \"\",\r\n}\r\n\r\nCan you print and share the `error` Object?",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-03-23T11:39:57Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/294#issuecomment-1204194965"
                },
                {
                    "id": "IC_kwDODheSms5Hxo6a",
                    "body": "> const resp = await supabase.rpc(\"hello_foo\", {});\r\n\r\nIf the function was defined as taking no parameters, likely the error was in the `{}` argument(this would mean the function takes a json parameter). For confirming that, we'd have to see the SQL function signature.\r\n\r\nAlso sharing the full error message as I requested above would have made this more clear.\r\n\r\nI'll close because of lack of activity but feel free to reopen if the problem persists.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-08-03T16:24:08Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/294#issuecomment-1204194970"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5Pcusb",
            "number": 295,
            "title": "`error` is returned as `[]` if `.update()` matched no records",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nThis is not a feature, so much as an improvement. I noticed when preforming an update, the response returns an error if the request didn't match any records. This is expected. However the response.error comes back as a empty array, which is not very helpful. A message could make error handling and debugging easier for consumers. \r\n\r\n## Describe the solution you'd like\r\n\r\nA message indicating the request did not match any existing records\r\n\r\n## Describe alternatives you've considered\r\n\r\nI stop whining about missing error messages. After all, the response does return a 404. \r\n\r\n## Additional context\r\n\r\n![image](https://user-images.githubusercontent.com/33016331/183513652-7401e5a5-8e3e-4445-926c-fa0e2691a848.png)\r\n\r\n",
            "author": {
                "login": "p-schneid"
            },
            "state": "CLOSED",
            "createdAt": "2022-08-08T21:02:22Z",
            "closedAt": "2022-12-16T12:58:45Z",
            "url": "https://github.com/supabase/postgrest-js/issues/295",
            "comments": [
                {
                    "id": "IC_kwDODheSms5IEWpT",
                    "body": "Thanks! This seems to be a bug. ~~Can you provide the supabase-js version you used?~~ Nvm, was able to reproduce this on the latest version.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-08-09T08:52:57Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/295#issuecomment-1209100883"
                },
                {
                    "id": "IC_kwDODheSms5IGeSy",
                    "body": "Related https://github.com/PostgREST/postgrest/issues/2343",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-08-09T17:20:54Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/295#issuecomment-1209656498"
                },
                {
                    "id": "IC_kwDODheSms5J758N",
                    "body": "Same issue when `.range()` is not satisfiable: #324.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-08T09:07:35Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/295#issuecomment-1240440589"
                },
                {
                    "id": "IC_kwDODheSms5J_UWa",
                    "body": "Just to be clear, on this issue there is no error message in the response body coming from the server, only a 4xx status. This needs a fix on the PostgREST side.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-09-08T23:30:44Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/295#issuecomment-1241335194"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5QH-b-",
            "number": 303,
            "title": "[supabase-js v2] Improve Types Implementation for Nested Queries",
            "body": "# Feature request\r\n\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nHi there, \r\nI tried implementing supabase-js v2, and first was happy to see the type generation out of select queries.\r\nBut the real issues I have are still not solved with the new approach, these are nested tables types.\r\n\r\n```ts\r\n// I saw this example on the new docs: https://supabase.com/docs/reference/javascript/next/typescript-support.\r\nimport supabase from '~/lib/supabase'\r\nimport type { Database } from '~/lib/database.types'\r\n\r\nasync function getMovies() {\r\n  return await supabase.from('movies').select('id, title, actors(*)')\r\n}\r\n\r\ntype actors = Database['public']['Tables']['actors']['Row']\r\ntype MoviesResponse = Awaited<ReturnType<typeof getMovies>>\r\ntype MoviesResponseSuccess = MoviesResponse['data'] & {\r\n  actors: actors[]\r\n}\r\n```\r\n\r\nSo let's imagine you have this data structure `id, title, actors(name, birth_date)`, typescript will catch the `id` and `title`, of the movie, but not the `name` and `birth_date` of the nested relation. If I am now going to add this info manually like this:\r\n\r\n```ts\r\n// ...\r\n\r\nasync function getMovies() {\r\n  return await supabase.from('movies').select('id, title, actors(name, birth_date)')\r\n}\r\n\r\ntype actors = Database['public']['Tables']['actors']['Row']\r\ntype MoviesResponse = Awaited<ReturnType<typeof getMovies>>\r\ntype MoviesResponseSuccess = MoviesResponse['data'] & {\r\n  actors: Pick<actors, 'name' | 'birth_date'>[]\r\n}\r\n```\r\n\r\nthere will be a lot of redunancy in the implementation. Since we have to define the table cols twice.\r\n\r\n## Describe the solution you'd like\r\n\r\nOf course it would be perfect if nested relations would work out of the box. I see that this would be very difficult to do, and that's maybe why you didn't.\r\n\r\nI would essentially suggest to export this type, to create something like this:\r\n```ts\r\n// (!) Pseudocode\r\n// ...\r\n\r\nimport { ResolveRelationQuery } from '@supabase/supabase-js'\r\n\r\nconst actorsRelation = 'actors(name, birth_date)'\r\nasync function getMovies() {\r\n  return await supabase.from('movies').select(`id, title, ${actorsRelation}`)\r\n}\r\n\r\ntype MoviesResponse = Awaited<ReturnType<typeof getMovies>>\r\ntype MoviesResponseSuccess = MoviesResponse['data'] & {\r\n  actors: ResolveRelationQuery<typeof actorsRelation>[]\r\n}\r\n```\r\n\r\n## Describe alternatives you've considered\r\n\r\nI peeked into the type definitions of the new supabase-js v2 library, and saw a `GetResult` type coming from `@supabase/postgrest-js/dist/module/select-query-parser`. \r\n\r\nI have implemented something with this, which technically works, but is not very developer friendly since everyone have to define lots of types in the repo. See https://github.com/supabase/postgrest-js/issues/303\r\n",
            "author": {
                "login": "kryptovergleichde"
            },
            "state": "OPEN",
            "createdAt": "2022-08-17T11:43:07Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/303",
            "comments": [
                {
                    "id": "IC_kwDODheSms5Iv78Y",
                    "body": "So I successfully created some Types, which could be implemented by supabase-js. \r\n\r\nWhat works: \r\n- it infers the table names and column names completely automatic, so no duplicate definitions. \r\n- `table(*)` works\r\n- It even errors if for example you do define the relation string in a wrong format. Correct is `table(col, col)`, but if you do this with a table that doesn't exist or you do it with a wrong syntax like `table[col|col]` it will error.\r\n- Determined by the second argument of `ResolveRelationQuery`, you can change the relation type between `one` (which leads to an object) and `many` (which leads to an array of objects). This is unfortunately impossible to detect via the types, as it is dependent on the database config (as far as I know)\r\n\r\nWhat currently not works:\r\n- currently, only the `table(col, col)` format is supported. Missing support for\r\n  - `table (\r\n    col,\r\n    col\r\n  )` (multiline)\r\n  - `supplier:supplier_id ( name )`\r\n  - `users!inner(*)`\r\n\r\nSo these types would need some fine-tuning for production.\r\n\r\nYou can try it out in any project: \r\nFirst implement this somewhere globally:\r\n\r\n```ts\r\n// lib/supabase.ts\r\nimport { createClient } from '@supabase/supabase-js'\r\nimport type { GetResult } from '@supabase/postgrest-js/dist/module/select-query-parser'\r\nimport type { Database } from '@/lib/database.types'\r\n\r\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL as string\r\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY as string\r\n\r\nexport const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey)\r\n\r\ntype Tables = Database['public']['Tables']\r\ntype SplitRelStr_SuccessProps<T = keyof Tables, Q = string> = { table: T; query: Q }\r\ntype SplitRelStr<RelStr extends string> = RelStr extends `${infer T}(${infer Q})`\r\n  ? T extends keyof Tables\r\n    ? SplitRelStr_SuccessProps<T, Q>\r\n    : { error: 'Parsed `RelationString`, but the table name does not exist.' }\r\n  : { error: 'Cannot parse `RelationString`' }\r\ntype GetResolvedResult<SP extends SplitRelStr_SuccessProps> = GetResult<Tables[SP['table']]['Row'], SP['query']>\r\n\r\n/**\r\n * @template RelStr Supabase relation string, e.g. `tablename(colum, another_colum)`.\r\n * @template RelType The type of relation. e.g. `one` or `many`. This decides if the returned relation is an array of objects/single object.\r\n */\r\nexport type ResolveRelationQuery<\r\n  RelStr extends string,\r\n  RelType extends 'one' | 'many' = 'many'\r\n> = SplitRelStr<RelStr> extends SplitRelStr_SuccessProps\r\n  ? {\r\n      [K in SplitRelStr<RelStr>['table']]: RelType extends 'one'\r\n        ? GetResolvedResult<SplitRelStr<RelStr>> | null\r\n        : GetResolvedResult<SplitRelStr<RelStr>>[]\r\n    }\r\n  : { error: SplitRelStr<RelStr>['error'] }\r\n\r\n/**\r\n * @template R { data } response you get from `const { data, error } = await supabase.from('tablename').select(...)`\r\n * @template RelObj Object that contains the table name and the resolved relation.\r\n */\r\nexport type ResolveResponse<R extends any[], RelObj extends object> = (R[0] & RelObj)[]\r\n```\r\n\r\nAnd then when you want to use it:\r\n```ts\r\nimport { supabase, ResolveRelationQuery, ResolveResponse } from '@/lib/supabase'\r\n\r\nconst loadData = async () => {\r\n  const actorsRelation = `actors(name, birth_date)`\r\n  const companiesRelation = `companies(*)`\r\n\r\n  const { data, error } = await supabase\r\n    .from('movies')\r\n    .select(`\r\n      name, id,\r\n      ${actorsRelation},\r\n      ${companiesRelation}\r\n    `)\r\n \r\n  if (!data?.length || error) return\r\n\r\n  type Actors = ResolveRelationQuery<typeof actorsRelation, 'many'>\r\n  type Companies = ResolveRelationQuery<typeof companiesRelation, 'many'>\r\n  type Response = ResolveResponse<typeof loadData, Actors & Companies>\r\n\r\n  return data as Response\r\n}\r\n\r\nconst main = async () => {\r\n  const data = await loadData()\r\n\r\n  data?.map(entry => {\r\n    console.log(entry.id)\r\n    console.log(entry.actors) // -> now has resolved type, object or array of objects looking like this: `{ name: string | null, birth_date: string | null }`\r\n  })\r\n}\r\n\r\nmain()\r\n```",
                    "author": {
                        "login": "kryptovergleichde"
                    },
                    "createdAt": "2022-08-17T15:41:42Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1220525848"
                },
                {
                    "id": "IC_kwDODheSms5Iv78n",
                    "body": "I think it's very much needed to find a solution for this, especially since querying foreign tables this way is documented as the recommended solution (https://supabase.com/docs/reference/javascript/select#query-foreign-tables).\r\n\r\nPerhaps some insights could be gained from the way Prisma has implemented this. They have solved nested querying in their type resolving, you can simply run a query similar to the one below. This will return a type including all nested relations.\r\n\r\n```typescript\r\nawait prisma.movies.findMany({\r\n    select: {\r\n        name: true,\r\n        id: true,\r\n        actors: {\r\n            name: true,\r\n            birth_date: true\r\n        },\r\n        companies: true\r\n    }\r\n});\r\n```",
                    "author": {
                        "login": "lorenzodejong"
                    },
                    "createdAt": "2022-08-19T07:19:00Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1220525863"
                },
                {
                    "id": "IC_kwDODheSms5Iv78s",
                    "body": "Thanks for looking into this! Yes, the nested types is intentionally omitted for now - the difficulty here is determining the cardinality of the nested tables, e.g. using the first snippet `actors` can either be `{ name, birth_date }` or `{ name, birth_date }[]` depending on how the foreign key relationships look like.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-08-19T10:40:58Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1220525868"
                },
                {
                    "id": "IC_kwDODheSms5Iv-dr",
                    "body": "@soedirgo Thanks for your answer, yes. Do you know if there is a possibility to get this information about the foreign key relationship out of the data returned by supabase-cli? Otherwise I think there has to be a manual way to define if it's a `one` or `many` relation, like I did in my examples.",
                    "author": {
                        "login": "kryptovergleichde"
                    },
                    "createdAt": "2022-08-19T10:55:06Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1220536171"
                },
                {
                    "id": "IC_kwDODheSms5I-QfD",
                    "body": "Yup, we're looking into this right now (PostgREST itself definitely does this) - ideally the typegen should output this information and postgrest-js would handle the disambiguation OOtB.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-08-23T16:03:22Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1224280003"
                },
                {
                    "id": "IC_kwDODheSms5L50fg",
                    "body": "I'm doing this temporary hack until it gets solved from `supabase-js`. Any update on when this will be done automatically?\r\n\r\n```javascript\r\nconst { data, error } = await supabase.from(\"items\")\r\n    .select(`*, talent:talent_id( username, avatar )`,)\r\n    .eq(\"content_id\", \"1\");\r\n\r\nif (error) {\r\n    return null\r\n}\r\n\r\n// TODO: In future versions of supabase-js this should no longer be necessary\r\ntype supabaseType = typeof data & { \r\n    talent: Pick<Database['public']['Tables']['users']['Row'], \"username\" | \"avatar\">\r\n}[]\r\nconst supabaseData =  data as supabaseType\r\n\r\nconst username = supabaseData[0].talent.username\r\n```",
                    "author": {
                        "login": "johanneskares"
                    },
                    "createdAt": "2022-10-10T15:00:45Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1273448416"
                },
                {
                    "id": "IC_kwDODheSms5Mtxgh",
                    "body": "The recent release from this PR https://github.com/supabase/postgrest-js/pull/345 broke my workaround, mentioned above. \r\n\r\n```\r\nAdditionally, instead of always returning unknown for all nested relations, we instead return T | T[]\r\n```\r\n\r\nI guess it would be better to change this behavior once the feature is complete instead of forcing us to come up with new workarounds along the way ;)",
                    "author": {
                        "login": "johanneskares"
                    },
                    "createdAt": "2022-10-21T14:46:12Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1287067681"
                },
                {
                    "id": "IC_kwDODheSms5Oh0aY",
                    "body": "For someone relatively new to Typescript, managing types for nested tables is quite painful. I hope this could be resolved at some point.\r\n\r\nI ended up doing this which I'm pretty sure is quite a bad solution:\r\n\r\n```\r\ntype Product = Database[\"public\"][\"Tables\"][\"products\"][\"Row\"];\r\ninterface ProductFull extends Omit<Product, \"vendor\"> {\r\n  vendor: Database[\"public\"][\"Tables\"][\"vendors\"][\"Row\"];\r\n}\r\n\r\nconst Products: FC = () => {\r\n  const [products, setProducts] = useState<ProductFull[]>([]);\r\n  const supabaseClient = useSupabaseClient<Database>();\r\n\r\n  useEffect(() => {\r\n    async function getProducts(): Promise<PostgrestResponse<ProductFull>> {\r\n      return await supabaseClient.from(\"products\").select(\"*, vendor(*)\");\r\n    }\r\n\r\n    async function loadData() {\r\n      const { data } = await getProducts();\r\n      if (data) setProducts(data);\r\n    }\r\n    loadData();\r\n  }, [supabaseClient]);\r\n\r\n  return <></>\r\n}\r\n```",
                    "author": {
                        "login": "cdedreuille"
                    },
                    "createdAt": "2022-11-16T18:30:12Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1317488280"
                },
                {
                    "id": "IC_kwDODheSms5PM7ZC",
                    "body": "I came up with a workaround with less moving parts, inspired by @johanneskares workaround :\r\n```typescript\r\nconst { data, error } = await supabase.from(\"items\")\r\n    .select(`*, talent:talent_id( username, avatar )`,)\r\n    .eq(\"content_id\", \"1\");\r\n\r\n// TODO: workaround until this is implemented: https://github.com/supabase/postgrest-js/issues/303\r\ntype ResultRow = ArrayElement<typeof data>;\r\ntype PatchedResult = Modify<ResultRow, {\r\n\ttalent: ArrayElement<ResultRow['talent']>;\r\n}>[];\r\n\r\nconst username = (data as PatchedResult)[0].talent.username\r\n```\r\n\r\nCan also easily be adjusted to have `talent` as an array:\r\n```\r\ntype PatchedResult = Modify<ResultRow, {\r\n\ttalent: ArrayElement<ResultRow['talent']>[];\r\n}>[];\r\n```\r\n  \r\nIt uses the custom `ArrayElement` and `Modify` types which can come in handy in all sorts of Situations:\r\n```typescript\r\nexport type ArrayElement<T> = T extends readonly unknown[] ? T[0] : never;\r\nexport type Modify<T, R> = Omit<T, keyof R> & R;\r\n\r\n``` ",
                    "author": {
                        "login": "samuba"
                    },
                    "createdAt": "2022-11-28T09:39:00Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1328789058"
                },
                {
                    "id": "IC_kwDODheSms5Pp005",
                    "body": "Thanks for the workaround @samuba! However it seems `type-fest` does not include those types? https://www.npmjs.com/package/type-fest",
                    "author": {
                        "login": "Murkrage"
                    },
                    "createdAt": "2022-12-04T09:59:40Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1336364345"
                },
                {
                    "id": "IC_kwDODheSms5Pp-s2",
                    "body": "Whoopsie, thanks for pointing it out. \ud83d\ude05 I corrected my answer",
                    "author": {
                        "login": "samuba"
                    },
                    "createdAt": "2022-12-04T12:53:03Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1336404790"
                },
                {
                    "id": "IC_kwDODheSms5QIURi",
                    "body": "Hello \ud83d\udc4b Having the same problem with joins, whatever you do, join results always appear to be `T | T[] |\u00a0null`.\r\n\r\nI used the `.returns<MainEntity & { relationship: Relationship }>()` helper introduced in #345 but I'm really wondering if we couldn't find a way to easily infer this information.\r\n\r\nLet's say we have 2 tables:\r\n- `movies (id, name, category_id)`\r\n- `categories (id, name)` \r\n\r\n### One to One\r\nIf `category` cannot be `NULL`, then:\r\n- `supabase.from(\"movies\").select(\"*, category:categories(*)\")` cannot return any other type than `Movie & { category: Category }`, right? \r\n- \r\nIf `category` is `NULL`, then:\r\n- `supabase.from(\"movies\").select(\"*, category:categories(*)\")` could return something like `Movie & { category?: Category }`, right? \r\n\r\n### One to Many\r\nIf `category` cannot be `NULL`, then:\r\n- `supabase.from(\"categories\").select(\"*, movies(*)\")` cannot return any other type than `Category & { movies: Movie[] }`, right? \r\n\r\n### Many to Many\r\nI don't even know how it's handled honestly, but I suppose we can have the same reasoning \r\n\r\nI'm not a huge Typescript expert, but I would gladly have a look if you think that's worth it.",
                    "author": {
                        "login": "pybuche"
                    },
                    "createdAt": "2022-12-09T14:12:37Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1344357474"
                },
                {
                    "id": "IC_kwDODheSms5RqjWK",
                    "body": "> I think it's very much needed to find a solution for this, especially since querying foreign tables this way is documented as the recommended solution (https://supabase.com/docs/reference/javascript/select#query-foreign-tables).\r\n> \r\n> Perhaps some insights could be gained from the way Prisma has implemented this. They have solved nested querying in their type resolving, you can simply run a query similar to the one below. This will return a type including all nested relations.\r\n> \r\n> ```ts\r\n> await prisma.movies.findMany({\r\n>     select: {\r\n>         name: true,\r\n>         id: true,\r\n>         actors: {\r\n>             name: true,\r\n>             birth_date: true\r\n>         },\r\n>         companies: true\r\n>     }\r\n> });\r\n> ```\r\n\r\nWhat I don't get is anyway the hyper complex resolution of the string. From a personal perspective: I love it because it shows that you can parse strings with TypeScript.\r\n\r\nHowever: I asked myself if this isn't making things overly complicated? I'm not saying one should get rid of the current solution - at all.\r\n\r\nI'm just saying: Have you thought about making this simpler? E.g. providing a few more helpers rather than overriding via `returns<>` which I personally find cumbersome because it's basically type casting.\r\n\r\nI don't want typecasting though but I'd love to give it more hints what the foreign tables are - if needed.\r\n\r\nI also like the object-based solution or an array-based solution. But at the end of the day it's probably just missing some recursion here and there.",
                    "author": {
                        "login": "activenode"
                    },
                    "createdAt": "2023-01-03T18:47:00Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1370109322"
                },
                {
                    "id": "IC_kwDODheSms5URRRt",
                    "body": "+1 \r\nThis feature is needed in order to use typescript proper.\r\nGreat work on everything else!",
                    "author": {
                        "login": "harryyaprakov"
                    },
                    "createdAt": "2023-02-02T14:15:22Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1413813357"
                },
                {
                    "id": "IC_kwDODheSms5URVJ3",
                    "body": "@harryyaprakov Absolutely. And I don't know why this is open for song long. Since this is a feature other DB clients offer by default, and is actually the reason you use typescript, to have inheriance and don't think about constructuing complex types properly. Same when you use GraphQL queries, you want the response types of them automatically generated. \r\n\r\nAlways having to think about to not only write the query but also construct types (which leads to huge duplications in code for complex queries actually was one of th main reasons which made me move away from using supabase-js and going all-in with prisma + trpc. Can only recommend it, as your application grows and you have more demand for complex queries.",
                    "author": {
                        "login": "kryptovergleichde"
                    },
                    "createdAt": "2023-02-02T14:26:04Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1413829239"
                },
                {
                    "id": "IC_kwDODheSms5UccMK",
                    "body": "+1",
                    "author": {
                        "login": "amorfati254"
                    },
                    "createdAt": "2023-02-04T12:37:34Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1416741642"
                },
                {
                    "id": "IC_kwDODheSms5VKCtu",
                    "body": "> @harryyaprakov Absolutely. And I don't know why this is open for song long. Since this is a feature other DB clients offer by default, and is actually the reason you use typescript, to have inheriance and don't think about constructuing complex types properly. Same when you use GraphQL queries, you want the response types of them automatically generated.\r\n> \r\n> Always having to think about to not only write the query but also construct types (which leads to huge duplications in code for complex queries actually was one of th main reasons which made me move away from using supabase-js and going all-in with prisma + trpc. Can only recommend it, as your application grows and you have more demand for complex queries.\r\n\r\nHow was the migration to prisma? I'm considering it but it seems like it's a pretty involved thing to do.",
                    "author": {
                        "login": "Murkrage"
                    },
                    "createdAt": "2023-02-13T21:16:14Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1428695918"
                },
                {
                    "id": "IC_kwDODheSms5VKKaU",
                    "body": "@Murkrage First it was a bit difficult to set it up to use the right postgresql connection string for DB access and migrations.\r\n\r\nCame out to be:\r\n\r\n```bash\r\nDATABASE_URL=\"postgres://postgres:PASSWORD@db.PROJECT_ID.supabase.co:6543/postgres?schema=public&pgbouncer=true&sslmode=require&connection_limit=1&trustServerCertificate=true\"\r\nMIGRATION_DATABASE_URL=\"postgres://postgres:PASSWORD@db.PROJECT_ID.supabase.co:5432/postgres\"\r\n```\r\n\r\nAlso, when using it with Prisma, just forget about RLS. It's somehow possible, but super flimsy.\r\n\r\nOther than that, once you've got the hang of it, you never want to go back doing DB requests on the client. But yeah, for an existing project, it would probably be pretty much work.\r\n\r\nBe aware that you'll loose certain supabase features such as real-time, though maybe you can implement that server side too, haven't tried yet.\r\n\r\nI'm still using supabase-js, but only for auth.",
                    "author": {
                        "login": "kryptovergleichde"
                    },
                    "createdAt": "2023-02-13T21:40:55Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1428727444"
                },
                {
                    "id": "IC_kwDODheSms5WJ_As",
                    "body": "We need a solution for this urgently. I upgraded my project to supabase-js V2, but it's impossible to build currently. We have hundreds of nested queries, impossible to use any kind of workaround... Do you guys know if there's a way to disable this  type generation out of select queries? ",
                    "author": {
                        "login": "gabrielsestrem"
                    },
                    "createdAt": "2023-02-26T20:21:45Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1445457964"
                },
                {
                    "id": "IC_kwDODheSms5WNc2x",
                    "body": "> @Murkrage First it was a bit difficult to set it up to use the right postgresql connection string for DB access and migrations.\r\n> \r\n> Came out to be:\r\n> \r\n> ```shell\r\n> DATABASE_URL=\"postgres://postgres:PASSWORD@db.PROJECT_ID.supabase.co:6543/postgres?schema=public&pgbouncer=true&sslmode=require&connection_limit=1&trustServerCertificate=true\"\r\n> MIGRATION_DATABASE_URL=\"postgres://postgres:PASSWORD@db.PROJECT_ID.supabase.co:5432/postgres\"\r\n> ```\r\n> \r\n> Also, when using it with Prisma, just forget about RLS. It's somehow possible, but super flimsy.\r\n> \r\n> Other than that, once you've got the hang of it, you never want to go back doing DB requests on the client. But yeah, for an existing project, it would probably be pretty much work.\r\n> \r\n> Be aware that you'll loose certain supabase features such as real-time, though maybe you can implement that server side too, haven't tried yet.\r\n> \r\n> I'm still using supabase-js, but only for auth.\r\n\r\n@kryptovergleichde are you using the shadowDb for migrations? I didn't manage to make it work ",
                    "author": {
                        "login": "mihaiandrei97"
                    },
                    "createdAt": "2023-02-27T13:57:22Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1446366641"
                },
                {
                    "id": "IC_kwDODheSms5WOT-8",
                    "body": "Hey folks, thanks for all the feedback here! Just a quick note that I'm going to hide the \"Migrate to Prisma\" related comments as `off topic` to allow us to focus on the issue at hand, I hope you understand. To further discuss that part I'd recommend you utilise [GitHub Discussions](https://github.com/supabase/supabase/discussions). \r\n\r\nDo note that we're actively working on this and will follow up with more details soon. Thank you \ud83d\udc9a \r\n\r\n@gabrielsestrem regarding\r\n> Do you guys know if there's a way to disable this type generation out of select queries?\r\n\r\nWould you be able to use https://supabase.com/docs/reference/javascript/db-returns for now?\r\n",
                    "author": {
                        "login": "thorwebdev"
                    },
                    "createdAt": "2023-02-27T16:00:21Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1446592444"
                },
                {
                    "id": "IC_kwDODheSms5WP-IE",
                    "body": "@thorwebdev I wasn't aware of this method, thanks for the heads up! It's still a bandaid but at least we can get some type safety out of it without having to do type guards :)",
                    "author": {
                        "login": "Murkrage"
                    },
                    "createdAt": "2023-02-27T20:20:33Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1447027204"
                },
                {
                    "id": "IC_kwDODheSms5WQAKE",
                    "body": "Thanks @thorwebdev I wasn't aware either. This `.returns<MyType>()` will save us for now. ",
                    "author": {
                        "login": "gabrielsestrem"
                    },
                    "createdAt": "2023-02-27T20:26:45Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1447035524"
                },
                {
                    "id": "IC_kwDODheSms5WR78B",
                    "body": "Hey all, sorry this issue has been open for so long - we're aware this is one of the major pain points when using supabase-js. The crux of the matter here is a foreign table can be either `T | null` or `T[]` depending on the cardinality.\r\n\r\nWhile we work on the proper solution for this, one bandaid I'd like to propose is to do what's suggested [here](https://github.com/supabase/postgrest-js/issues/406), which is to default to `T[]`, since preserving type correctness using `T[] | T | null` seems to be more trouble that it's worth. For cases where you need `T | null`, you can use `.returns<MyType>()`. What are your thoughts?\r\n\r\nAlso, the suggestion to move away from stringly-typed queries is noted - we're planning on using a more structured query format for the next major version of the library.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-02-28T04:03:31Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1447542529"
                },
                {
                    "id": "IC_kwDODheSms5WSC1A",
                    "body": "While `.returns<>()` can help circumvent the current flaws stemming from the unknown cardinality of tables' relationships, it throws out any typing already inferred by the query's string and requires us to redeclare everything form scratch while, in many cases, all that is needed is a little patching of the already provided type.\r\n\r\nCould we maybe get a way to derive the type instead of redeclaring everything form scratch? For illustration, see: https://github.com/supabase/supabase/discussions/12238. It's really not an ideal implementation, probably has many flaws as it stands, and I'm not claiming its should be taken as-is, but I feel this way of working could prove more relevant for many cases some people seem to face.",
                    "author": {
                        "login": "iolyd"
                    },
                    "createdAt": "2023-02-28T04:49:20Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1447570752"
                },
                {
                    "id": "IC_kwDODheSms5WVnpZ",
                    "body": "For me, the feature should handle all the scenarios. Sometimes we do big queries with many nested tables. Ideally I'd love to have all properties with types even if it's in a 3rd or 4th nested table. Upgrading to supabasejs-v2 it's changing already 150+ files and we are using `.returns<>()` when needed and sometimes using this approach [here](https://github.com/supabase/postgrest-js/issues/303#issuecomment-1328789058)\r\n\r\n\r\nJust to have an idea. This is one example of some sort of complex query:\r\n\r\n```    let { data, error: orderError } = await supabase\r\n        .from('reverse_orders')\r\n        .select(`id, organisation_id, order_id, collect_requested, invoices, client_tracking_option, retention_value, retention_type, retention_fee_value,\r\n        client: client_id(\r\n            name,\r\n            email,\r\n            phone,\r\n            document),\r\n        address: address_id(\r\n            country,\r\n            state,\r\n            city,\r\n            neighborhood,\r\n            street,\r\n            number,\r\n            description,\r\n            zipcode),\r\n        payment_bill: payment_bill_id(\r\n            id,\r\n            is_pix,\r\n            pix_type,\r\n            pix_key,\r\n            bank_code,\r\n            bank_agency,\r\n            bank_account,\r\n            document,\r\n            bank_account_type),\r\n        analyzed_by(\r\n            id,\r\n            username,\r\n            email),\r\n        reverse_tracking: reverse_tracking_id(\r\n            id,\r\n            status,\r\n            courier_company,\r\n            posted_date,\r\n            courier_tracking_code,\r\n            courier_collect_number,\r\n            delivery_date,\r\n            expected_delivery_date,\r\n            shipping_company: shipping_company_id(name),\r\n            customer_posting,\r\n            posting_address,\r\n            price,\r\n            locker),\r\n        status: status_id(\r\n            id,\r\n            name),\r\n        coupon: reverse_coupon_id(\r\n            id,\r\n            code,\r\n            description,\r\n            coupon_ecommerce_id,\r\n            validity,\r\n            value,\r\n            active,\r\n            was_used),\r\n        payment: reverse_payment_id(\r\n            id,\r\n            value,\r\n            action,\r\n            created_at,\r\n            payment_document),\r\n        organisation: organisation_id(\r\n            ecommerce_provider(\r\n                id,\r\n                name,\r\n                order_url,\r\n                refund_integration),\r\n            organisation_coupon_config(\r\n                code_prefix,\r\n                predefined_code,\r\n                deadline_days,\r\n                predefined_deadline,\r\n                sufix_code_random,\r\n                sufix_code),\r\n            organisation_rules(\r\n                refund_integration,\r\n                alias_not_allowed_refund_integration),\r\n            subdomain,\r\n            website),\r\n        order: order_id(\r\n            id,\r\n            items,\r\n            discount,\r\n            shipping_cost,\r\n            total_price,\r\n            channel_id,\r\n            payment_code,\r\n            is_bank_transfer,\r\n            sales_invoices),\r\n        reverse_items!reverse_items_reverse_order_id_fkey(\r\n            id,\r\n            hash,\r\n            sku,\r\n            description,\r\n            image_url,\r\n            quantity,\r\n            price,\r\n            is_exchange,\r\n            reason,\r\n            id_item,\r\n            is_removed,\r\n            received,\r\n            retained),\r\n        reverse_items_replaced(\r\n            id,\r\n            description,\r\n            quantity,\r\n            sku),\r\n        history:reverse_order_history(\r\n            id,\r\n            created_by(\r\n                email\r\n            ),\r\n            action(\r\n                id,\r\n                description\r\n            ),\r\n            details,\r\n            created_at),\r\n            ecommerce_number, created_at, price, refund_value, exchange_value, is_exception, second_reverse, is_complete, second_request`)\r\n        .eq('id', reverseOrderId)\r\n        .eq('organisation_id', organisationId)\r\n        .returns<any>()```\r\n\r\nAnd it makes sense because if I break quis query and many small ones, let's say: 5 ou 7 small queries. My API get's 5x slower ",
                    "author": {
                        "login": "gabrielsestrem"
                    },
                    "createdAt": "2023-02-28T16:45:59Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1448507993"
                },
                {
                    "id": "IC_kwDODheSms5Wohew",
                    "body": "Hello! I've found a workaround for this issue:\r\n```typescript\r\nimport { PostgrestFilterBuilder } from \"@supabase/postgrest-js\"\r\n\r\ndeclare module \"@supabase/postgrest-js\" {\r\n  class PostgrestFilterBuilder<Schema, Row, Result> {\r\n    fixToMany<K>(): PostgrestFilterBuilder<Schema, Row, FixToMany<Result, K>>\r\n    fixToOne<K>(): PostgrestFilterBuilder<Schema, Row, FixToOne<Result, K>>\r\n    fixToMaybeOne<K>(): PostgrestFilterBuilder<\r\n      Schema,\r\n      Row,\r\n      FixToMaybeOne<Result, K>\r\n    >\r\n  }\r\n}\r\n\r\ntype FixToMany<Result, K> = Result extends Array<infer T>\r\n  ? Array<FixToManyItem<T, K>>\r\n  : Result extends infer T | null\r\n  ? FixToManyItem<T, K> | null\r\n  : FixToManyItem<Result, K>\r\n\r\ntype FixToManyItem<T, Key> = Key extends keyof T\r\n  ? Omit<T, Key> & { [K in Key]: Extract<T[K], Array<T[K]>> }\r\n  : T\r\n\r\nPostgrestFilterBuilder.prototype.fixToMany = function fixToMany() {\r\n  return this\r\n}\r\n\r\ntype FixToOne<Result, K> = Result extends Array<infer T>\r\n  ? Array<FixToOneItem<T, K>>\r\n  : Result extends infer T | null\r\n  ? FixToOneItem<T, K> | null\r\n  : FixToOneItem<Result, K>\r\n\r\ntype FixToOneItem<T, Key> = Key extends keyof T\r\n  ? Omit<T, Key> & { [K in Key]: Exclude<T[K], Array<T[K]> | null> }\r\n  : T\r\n\r\nPostgrestFilterBuilder.prototype.fixToOne = function fixToOne() {\r\n  return this\r\n}\r\n\r\ntype FixToMaybeOne<Result, K> = Result extends Array<infer T>\r\n  ? Array<FixToMaybeOneItem<T, K>>\r\n  : Result extends infer T | null\r\n  ? FixToMaybeOneItem<T, K> | null\r\n  : FixToMaybeOneItem<Result, K>\r\n\r\ntype FixToMaybeOneItem<T, Key> = Key extends keyof T\r\n  ? Omit<T, Key> & { [K in Key]: Exclude<T[K], Array<T[K]>> }\r\n  : T\r\n\r\nPostgrestFilterBuilder.prototype.fixToMaybeOne = function fixToMaybeOne() {\r\n  return this\r\n}\r\n```\r\n\r\nYou can use it like this to get right return type:\r\n```typescript\r\nsupabase.from(\"books\")\r\n  .select(\"id, author(*), publisher:publishers(*), last_review(*), readers(*)\")\r\n  .fixToOne<\"author\" | \"publisher\">() // Omit<ResultItem, \"author\" | \"publischer\"> & { author: Database[\"public\"][\"Tables\"][\"users\"][\"Row\"], publisher: Database[\"public\"][\"Tables\"][\"publishers\"][\"Row\"] }\r\n  .fixToMaybeOne<\"last_review\">() // Omit<ResultItem, \"last_review\"> & { last_review: Database[\"public\"][\"Tables\"][\"reviews\"][\"Row\"] | null }\r\n  .fixToMany<\"readers\">() // Omit<ResultItem, \"readers\"> & { readers: Array<Database[\"public\"][\"Tables\"][\"users\"][\"Row\"]> }\r\n```\r\n\r\nHope, it helps find a real solution to this problem!",
                    "author": {
                        "login": "kinolaev"
                    },
                    "createdAt": "2023-03-03T12:30:06Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1453463472"
                },
                {
                    "id": "IC_kwDODheSms5WpS84",
                    "body": "> Hello! I've found a workaround for this issue:\r\n> \r\n> ```ts\r\n> import { PostgrestFilterBuilder } from \"@supabase/postgrest-js\"\r\n> \r\n> declare module \"@supabase/postgrest-js\" {\r\n>   class PostgrestFilterBuilder<Schema, Row, Result> {\r\n>     fixToMany<K>(): PostgrestFilterBuilder<Schema, Row, FixToMany<Result, K>>\r\n>     fixToOne<K>(): PostgrestFilterBuilder<Schema, Row, FixToOne<Result, K>>\r\n>     fixToMaybeOne<K>(): PostgrestFilterBuilder<\r\n>       Schema,\r\n>       Row,\r\n>       FixToMaybeOne<Result, K>\r\n>     >\r\n>   }\r\n> }\r\n> \r\n> type FixToMany<Result, K> = Result extends Array<infer T>\r\n>   ? Array<FixToManyItem<T, K>>\r\n>   : Result extends infer T | null\r\n>   ? FixToManyItem<T, K> | null\r\n>   : FixToManyItem<Result, K>\r\n> \r\n> type FixToManyItem<T, Key> = Key extends keyof T\r\n>   ? Omit<T, Key> & { [K in Key]: Extract<T[K], Array<T[K]>> }\r\n>   : T\r\n> \r\n> PostgrestFilterBuilder.prototype.fixToMany = function fixToMany() {\r\n>   return this\r\n> }\r\n> \r\n> type FixToOne<Result, K> = Result extends Array<infer T>\r\n>   ? Array<FixToOneItem<T, K>>\r\n>   : Result extends infer T | null\r\n>   ? FixToOneItem<T, K> | null\r\n>   : FixToOneItem<Result, K>\r\n> \r\n> type FixToOneItem<T, Key> = Key extends keyof T\r\n>   ? Omit<T, Key> & { [K in Key]: Exclude<T[K], Array<T[K]> | null> }\r\n>   : T\r\n> \r\n> PostgrestFilterBuilder.prototype.fixToOne = function fixToOne() {\r\n>   return this\r\n> }\r\n> \r\n> type FixToMaybeOne<Result, K> = Result extends Array<infer T>\r\n>   ? Array<FixToMaybeOneItem<T, K>>\r\n>   : Result extends infer T | null\r\n>   ? FixToMaybeOneItem<T, K> | null\r\n>   : FixToMaybeOneItem<Result, K>\r\n> \r\n> type FixToMaybeOneItem<T, Key> = Key extends keyof T\r\n>   ? Omit<T, Key> & { [K in Key]: Exclude<T[K], Array<T[K]>> }\r\n>   : T\r\n> \r\n> PostgrestFilterBuilder.prototype.fixToMaybeOne = function fixToMaybeOne() {\r\n>   return this\r\n> }\r\n> ```\r\n> \r\n> You can use it like this to get right return type:\r\n> \r\n> ```ts\r\n> supabase.from(\"books\")\r\n>   .select(\"id, author(*), publisher:publishers(*), last_review(*), readers(*)\")\r\n>   .fixToOne<\"author\" | \"publisher\">() // Omit<ResultItem, \"author\" | \"publischer\"> & { author: Database[\"public\"][\"Tables\"][\"users\"][\"Row\"], publisher: Database[\"public\"][\"Tables\"][\"publishers\"][\"Row\"] }\r\n>   .fixToMaybeOne<\"last_review\">() // Omit<ResultItem, \"last_review\"> & { last_review: Database[\"public\"][\"Tables\"][\"reviews\"][\"Row\"] | null }\r\n>   .fixToMany<\"readers\">() // Omit<ResultItem, \"readers\"> & { readers: Array<Database[\"public\"][\"Tables\"][\"users\"][\"Row\"]> }\r\n> ```\r\n> \r\n> Hope, it helps find a real solution to this problem!\r\n\r\nNeat idea man.",
                    "author": {
                        "login": "activenode"
                    },
                    "createdAt": "2023-03-03T15:04:41Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1453666104"
                },
                {
                    "id": "IC_kwDODheSms5WptEo",
                    "body": "My current workaround:\r\n\r\n```javascript\r\nexport const getSingle = <T>(input: T[] | T | null) => {\r\n    if (input === null) {\r\n        throw new Error(\"Input is null\");\r\n    }\r\n\r\n    if (Array.isArray(input)) {\r\n        if (input.length > 0) {\r\n            return input[0];\r\n        } else {\r\n            throw new Error(\"Array is empty\");\r\n        }\r\n    }\r\n\r\n    return input;\r\n};\r\n\r\nexport const getMaybeSingle = <T>(input: T[] | T | null) => {\r\n    if (Array.isArray(input)) {\r\n        if (input.length > 0) {\r\n            return input[0];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    return input;\r\n};\r\n\r\nexport const getArray = <T>(input: T[] | T | null) => {\r\n    if (input === null) {\r\n        throw new Error(\"Input is null\");\r\n    }\r\n\r\n    if (Array.isArray(input)) {\r\n        return input;\r\n    }\r\n\r\n    return [input];\r\n};\r\n```\r\n\r\nand then use it as\r\n\r\n```javascript\r\nconst { data } = await supabase.from(\"books\")\r\n  .select(\"id, author(*), publisher:publishers(*), last_review(*), readers(*)\").single();\r\n\r\nconst book = {\r\n    ...data,\r\n    author: getSingle(books.author),\r\n    last_review: getMaybeSingle(books.last_review),\r\n    readers: getArray(books.readers)\r\n}\r\n```\r\n\r\nIf you want to use it on many items, I add an additional `.map`. It also works well with nested queries, using additional `.map`s.  It has some runtime overhead, but that gives some extra safety. For me that's fine.",
                    "author": {
                        "login": "johanneskares"
                    },
                    "createdAt": "2023-03-03T16:19:11Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1453773096"
                },
                {
                    "id": "IC_kwDODheSms5WqXmB",
                    "body": "> Also, the suggestion to move away from stringly-typed queries is noted - we're planning on using a more structured query format for the next major version of the library.\r\n\r\n@soedirgo this is great news! I was worried with the current approach and its scalability. I really want to use supabase also for complex operations. When you look into this I hope you get the right inspirations from queryBuilders that already do a good  job of providing a typesafe powerful abstraction for postgres like e.g. [drizzle](https://github.com/drizzle-team/drizzle-orm). :-)",
                    "author": {
                        "login": "samuel-bach"
                    },
                    "createdAt": "2023-03-03T18:42:47Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1453947265"
                },
                {
                    "id": "IC_kwDODheSms5WuyeO",
                    "body": "I've found another solution based on types generated by Prisma. This function generates Postgrest's columns from Prisma's select object\r\n```typescript\r\nimport { Prisma } from \"@prisma/client\"\r\n\r\nexport function columnsFrom(modelName: Prisma.ModelName, select: any): string {\r\n  const { models } = Prisma.dmmf.datamodel\r\n  const model = models.find((m) => m.name === modelName)!\r\n  const fields: Array<string> = []\r\n  for (const name of Object.keys(select)) {\r\n    const value = select[name]\r\n    if (typeof value === \"object\" && value !== null) {\r\n      const field = model.fields.find((f) => f.name === name)!\r\n      const relModel = field.isList\r\n        ? models.find((m) => m.name === field.type)!\r\n        : model\r\n      const relField = field.isList\r\n        ? relModel.fields.find((f) => f.relationName === field.relationName)!\r\n        : field\r\n      const relName = relField.relationFromFields![0]\r\n      const children = columnsFrom(field.type as Prisma.ModelName, value.select)\r\n      fields.push(`${name}:${relModel.name}_${relName}_fkey(${children})`)\r\n    } else if (value) {\r\n      fields.push(name)\r\n    }\r\n  }\r\n  return fields.join(\",\")\r\n}\r\n```\r\nThen you can patch SupabseClient this way\r\n```typescript\r\nimport type { Prisma } from \"@prisma/client\"\r\nimport type { PostgrestFilterBuilder } from \"@supabase/postgrest-js\"\r\nimport { SupabaseClient } from \"@supabase/supabase-js\"\r\nimport { columnsFrom } from \"./supabase-prisma\"\r\nimport type { Database } from \"./supabase.database.types\"\r\n\r\ntype PublicFilterBuilder<T extends keyof Database[\"public\"][\"Tables\"], Payload> =\r\n  PostgrestFilterBuilder<Database[\"public\"], Database[\"public\"][\"Tables\"][T][\"Row\"], Array<Payload>>\r\n\r\ndeclare module \"@supabase/supabase-js\" {\r\n  class SupabaseClient<Database, SchemaName, Schema> {\r\n    fromProfilesSelect<Select extends Prisma.profilesSelect>(select: Select):\r\n      PublicFilterBuilder<\"profiles\", Prisma.profilesGetPayload<{ select: Select }>>\r\n  }\r\n}\r\n\r\nSupabaseClient.prototype.fromProfilesSelect = function fromProfilesSelect(select) {\r\n  return this.from(\"profiles\").select(columnsFrom(\"profiles\", select))\r\n}\r\n```\r\nAnd now you can use it like this\r\n```typescript\r\nimport type { Prisma } from \"@prisma/client\"\r\n\r\nconst profilesSelect = { name: true, posts: { select: { title: true } } } satisfies Prisma.profilesSelect\r\ntype ProfilesPayload = Prisma.profilesGetPayload<{ select: typeof profilesSelect }>\r\nconst { data }: { data: ProfilesPayload[] | null } = await supabase.fromProfilesSelect(profilesSelect)\r\n```",
                    "author": {
                        "login": "kinolaev"
                    },
                    "createdAt": "2023-03-05T14:21:01Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1455105934"
                },
                {
                    "id": "IC_kwDODheSms5cJ7m9",
                    "body": "> Hey all, sorry this issue has been open for so long - we're aware this is one of the major pain points when using supabase-js. The crux of the matter here is a foreign table can be either `T | null` or `T[]` depending on the cardinality.\r\n> \r\n> While we work on the proper solution for this, one bandaid I'd like to propose is to do what's suggested [here](https://github.com/supabase/postgrest-js/issues/406), which is to default to `T[]`, since preserving type correctness using `T[] | T | null` seems to be more trouble that it's worth. For cases where you need `T | null`, you can use `.returns<MyType>()`. What are your thoughts?\r\n> \r\n> Also, the suggestion to move away from stringly-typed queries is noted - we're planning on using a more structured query format for the next major version of the library.\r\n\r\nWhat is ETA on the new version? Or ETA on fixing this? It's pretty unusable for anyone who is serious about typesafety, the thing you recommend is very hard to maintain, other people suggested better solutions in this thread but in the end all of those are workarounds",
                    "author": {
                        "login": "Jaaneek"
                    },
                    "createdAt": "2023-05-12T18:10:36Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1546107325"
                },
                {
                    "id": "IC_kwDODheSms5c66AA",
                    "body": "Yes, we're so close! If #426 could be merged an released this would be great for our development.",
                    "author": {
                        "login": "rienheuver"
                    },
                    "createdAt": "2023-05-23T09:54:01Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1558945792"
                },
                {
                    "id": "IC_kwDODheSms5dGe6e",
                    "body": "Wrote a little workaround (type-level and custom now... but it gets the job done for now so I can at least generate types based on the query i am using and it will still be safe and parsed with error handling and such.\r\n\r\nI actually want the option to pre-define various types for validations and expectations before i make the query (make sure a user makes a query with expected joins etc) so I am using this in my own file to handle typing (would be nice to have these available as exports of the postgres-js, its an awesome utility!):\r\n\r\nhttps://gist.github.com/bradennapier/d7d53b087b214aef93a158840af7e15c\r\n\r\n<img width=\"411\" alt=\"image\" src=\"https://github.com/supabase/postgrest-js/assets/15365418/64376f43-492f-40b1-aba7-2c59ef9477f2\">\r\n\r\n\r\n\r\nIt is implemented so that `undefined` === current behavior and `{  many: false; null: false; single: false  }` === `never` so that `{ null: false }` === `Output | Output[]`, etc\r\n\r\n---\r\n\r\nExample, in the [`parse-query-parser.ts`](https://github.com/supabase/postgrest-js/blob/master/src/select-query-parser.ts) All you really need to do is add a generic:\r\n\r\n```\r\ntype OptFlags = { null?: boolean; single?: boolean; many?: boolean };\r\n\r\ntype ParseOptFlags<Output, Opts extends OptFlags> = [\r\n  Opts['null'] extends false ? never : null,\r\n  Opts['many'] extends false ? never : Output[],\r\n  Opts['single'] extends false ? never : Output,\r\n][number];\r\n\r\n```\r\n\r\nThen you make the modification and voila:\r\n\r\n```\r\ntype ConstructFieldDefinition<\r\n  Schema extends GenericSchema,\r\n  Row extends Record<string, unknown>,\r\n  Field,\r\n  Opts extends OptFlags\r\n> = Field extends {\r\n  star: true;\r\n}\r\n  ? Row\r\n  : Field extends { name: string; original: string; children: unknown[] }\r\n  ? {\r\n      [_ in Field['name']]: GetResultHelper<\r\n        Schema,\r\n        (Schema['Tables'] & Schema['Views'])[Field['original']]['Row'],\r\n        Field['children'],\r\n        unknown\r\n      > extends infer Child\r\n        ? ParseOptFlags<Child, Opts>\r\n        : never;\r\n    }\r\n  : Field extends { name: string; original: string }\r\n  ? { [K in Field['name']]: Row[Field['original']] }\r\n  : Field extends { name: string; type: infer T }\r\n  ? { [K in Field['name']]: T }\r\n  : Record<string, unknown>;\r\n```\r\n\r\n```\r\nGetResult<\r\n    Schema,\r\n    Row,\r\n    'col(id)',\r\n    { many: false; }\r\n  >; \r\n{\r\n    col: {\r\n        id: number;\r\n    } | null;\r\n}\r\n\r\nGetResult<\r\n    Schema,\r\n    Row,\r\n    'col(id)',\r\n    { many: false; null: false; }\r\n  >; \r\n{\r\n    col: {\r\n        id: number;\r\n    };\r\n}\r\n\r\nGetResult<\r\n    Schema,\r\n    Row,\r\n    'col(id)',\r\n    { single: false; null: false; }\r\n  >; \r\n{\r\n    col: {\r\n        id: number;\r\n    }[];\r\n}\r\n```\r\n\r\n> Would be fairly trivial to implement the generic so that it can handle multiple joins and even deep embedded joins by just making `Opts` iterable.",
                    "author": {
                        "login": "bradennapier"
                    },
                    "createdAt": "2023-05-24T21:59:09Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1561980574"
                },
                {
                    "id": "IC_kwDODheSms5dOYQd",
                    "body": ":tada: This issue has been resolved in version 1.7.0 :tada:\n\nThe release is available on:\n- [GitHub release](https://github.com/supabase/postgrest-js/releases/tag/v1.7.0)\n- [npm package (@latest dist-tag)](https://www.npmjs.com/package/@supabase/postgrest-js/v/1.7.0)\n\nYour **[semantic-release](https://github.com/semantic-release/semantic-release)** bot :package::rocket:",
                    "author": {
                        "login": "github-actions"
                    },
                    "createdAt": "2023-05-26T08:55:58Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1564050461"
                },
                {
                    "id": "IC_kwDODheSms5dO9gV",
                    "body": "Hey all, we've made some changes to improve the types of nested tables. Atm this is only available when generating types for the [local development database](https://supabase.com/docs/guides/getting-started/local-development) with `supabase gen types typescript --local`.\r\n\r\nIf you have the Supabase CLI set up, can you upgrade it to v1.64.1 and upgrade supabase-js v2.23.0 and give it a spin? \ud83d\ude4f If all goes well we'll release it on the platform and close this.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-05-26T10:48:33Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1564203029"
                },
                {
                    "id": "IC_kwDODheSms5dSC1F",
                    "body": "> Hey all, we've made some changes to improve the types of nested tables. Atm this is only available when generating types for the [local development database](https://supabase.com/docs/guides/getting-started/local-development) with `supabase gen types typescript --local`.\r\n> \r\n> If you have the Supabase CLI set up, can you upgrade it to v1.64.1 and upgrade supabase-js v2.23.0 and give it a spin? \ud83d\ude4f If all goes well we'll release it on the platform and close this.\r\n\r\nWorks great! Tested with: one to one, many to one, one to many. Great job! ",
                    "author": {
                        "login": "Jaaneek"
                    },
                    "createdAt": "2023-05-26T22:07:20Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1565011269"
                },
                {
                    "id": "IC_kwDODheSms5dVL2H",
                    "body": "Hello - Typescript newbie here. \r\nI'm trying to build an edge function.  My schema has TableA which has columns that reference two other tables TableB & TableC and TableD references TableA (such a star-join may not be great...).  Query is like:\r\n\r\n`await supabase.client.from('TableA').select(*, TableB(col1),TableC(col1,col2), TableD(*)).eq(c1,'val1').is(c2, null)`\r\n\r\nIf after type generation and migrating to 1.64.1 and upgrade to supabase-js v2.23.0, what would be the syntax for specifying the data type for the above select so that I can use Typescript types?\r\n\r\nI've tried: \r\n```\r\ntype NewType = Database[\"public\"][\"Tables\"][\"TableA\"][\"Row\"] & Database[\"public\"][\"Tables\"][\"TableB\"][\"Row\"]  & Database[\"public\"][\"Tables\"][\"TableC\"][\"Row\"]  & Database[\"public\"][\"Tables\"][\"TableD\"][\"Row\"] ;\r\n```\r\nI get a Typescript/deno error;\r\n```\r\n[{\r\n\t\"resource\": \"/Users/sheshadrimantha/SupabaseProjects/supabase/functions/collate-votes/index.ts\",\r\n\t\"owner\": \"deno\",\r\n\t\"code\": \"2743\",\r\n\t\"severity\": 8,\r\n\t\"message\": \"No overload expects 1 type arguments, but overloads do exist that expect either 0 or 2 type arguments.\",\r\n\t\"source\": \"deno-ts\",\r\n\t\"startLineNumber\": 40,\r\n\t\"startColumn\": 55,\r\n\t\"endLineNumber\": 40,\r\n\t\"endColumn\": 62\r\n}]\r\n```\r\n\r\nHow would I use the fix referenced in this issue to a query such as this? \r\nIs it better to create a DB View and use that view's generated type here?\r\nPlease advise or please point me to some examples of using Typescript types for Supabase / Deno so I can figure this out.\r\n",
                    "author": {
                        "login": "dhurbhat"
                    },
                    "createdAt": "2023-05-28T03:19:16Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1565834631"
                },
                {
                    "id": "IC_kwDODheSms5dVZey",
                    "body": "> Hello - Typescript newbie here. I'm trying to build an edge function. My schema has TableA which has columns that reference two other tables TableB & TableC and TableD references TableA (such a star-join may not be great...). Query is like:\r\n> \r\n> `await supabase.client.from('TableA').select(*, TableB(col1),TableC(col1,col2), TableD(*)).eq(c1,'val1').is(c2, null)`\r\n> \r\n> If after type generation and migrating to 1.64.1 and upgrade to supabase-js v2.23.0, what would be the syntax for specifying the data type for the above select so that I can use Typescript types?\r\n> \r\n> I've tried:\r\n> \r\n> ```\r\n> type NewType = Database[\"public\"][\"Tables\"][\"TableA\"][\"Row\"] & Database[\"public\"][\"Tables\"][\"TableB\"][\"Row\"]  & Database[\"public\"][\"Tables\"][\"TableC\"][\"Row\"]  & Database[\"public\"][\"Tables\"][\"TableD\"][\"Row\"] ;\r\n> ```\r\n> \r\n> I get a Typescript/deno error;\r\n> \r\n> ```\r\n> [{\r\n> \t\"resource\": \"/Users/sheshadrimantha/SupabaseProjects/supabase/functions/collate-votes/index.ts\",\r\n> \t\"owner\": \"deno\",\r\n> \t\"code\": \"2743\",\r\n> \t\"severity\": 8,\r\n> \t\"message\": \"No overload expects 1 type arguments, but overloads do exist that expect either 0 or 2 type arguments.\",\r\n> \t\"source\": \"deno-ts\",\r\n> \t\"startLineNumber\": 40,\r\n> \t\"startColumn\": 55,\r\n> \t\"endLineNumber\": 40,\r\n> \t\"endColumn\": 62\r\n> }]\r\n> ```\r\n> \r\n> How would I use the fix referenced in this issue to a query such as this? Is it better to create a DB View and use that view's generated type here? Please advise or please point me to some examples of using Typescript types for Supabase / Deno so I can figure this out.\r\n\r\nOh! I continued playing and figured out that I didn't need to typify the `.from` but could still leverage the generated types for accessing field elements that are returned from the query.\r\n\r\nOne question I do have no is, that TableA has the canonical `created_at` column with default for `now()` still the type that is generated is `string | null`.  This is causing my calling `Date.parse(created_at)` to barf with ```Argument of type 'string | null' is not assignable to parameter of type 'string'.\r\n  Type 'null' is not assignable to type 'string'.```\r\n\r\nAny suggestions?\r\n\r\n*apologies* if these questions are \"polluting\" this thread.",
                    "author": {
                        "login": "dhurbhat"
                    },
                    "createdAt": "2023-05-28T05:12:55Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1565890482"
                },
                {
                    "id": "IC_kwDODheSms5dV59G",
                    "body": "> > Hello - Typescript newbie here. I'm trying to build an edge function. My schema has TableA which has columns that reference two other tables TableB & TableC and TableD references TableA (such a star-join may not be great...). Query is like:\n> > \n> > `await supabase.client.from('TableA').select(*, TableB(col1),TableC(col1,col2), TableD(*)).eq(c1,'val1').is(c2, null)`\n> > \n> > If after type generation and migrating to 1.64.1 and upgrade to supabase-js v2.23.0, what would be the syntax for specifying the data type for the above select so that I can use Typescript types?\n> > \n> > I've tried:\n> > \n> > ```\n> > type NewType = Database[\"public\"][\"Tables\"][\"TableA\"][\"Row\"] & Database[\"public\"][\"Tables\"][\"TableB\"][\"Row\"]  & Database[\"public\"][\"Tables\"][\"TableC\"][\"Row\"]  & Database[\"public\"][\"Tables\"][\"TableD\"][\"Row\"] ;\n> > ```\n> > \n> > I get a Typescript/deno error;\n> > \n> > ```\n> > [{\n> > \t\"resource\": \"/Users/sheshadrimantha/SupabaseProjects/supabase/functions/collate-votes/index.ts\",\n> > \t\"owner\": \"deno\",\n> > \t\"code\": \"2743\",\n> > \t\"severity\": 8,\n> > \t\"message\": \"No overload expects 1 type arguments, but overloads do exist that expect either 0 or 2 type arguments.\",\n> > \t\"source\": \"deno-ts\",\n> > \t\"startLineNumber\": 40,\n> > \t\"startColumn\": 55,\n> > \t\"endLineNumber\": 40,\n> > \t\"endColumn\": 62\n> > }]\n> > ```\n> > \n> > How would I use the fix referenced in this issue to a query such as this? Is it better to create a DB View and use that view's generated type here? Please advise or please point me to some examples of using Typescript types for Supabase / Deno so I can figure this out.\n> \n> Oh! I continued playing and figured out that I didn't need to typify the `.from` but could still leverage the generated types for accessing field elements that are returned from the query.\n> \n> One question I do have no is, that TableA has the canonical `created_at` column with default for `now()` still the type that is generated is `string | null`.  This is causing my calling `Date.parse(created_at)` to barf with ```Argument of type 'string | null' is not assignable to parameter of type 'string'.\n>   Type 'null' is not assignable to type 'string'.```\n> \n> Any suggestions?\n> \n> *apologies* if these questions are \"polluting\" this thread.\n\nIt's a valid question and everyone ran into this as well. The most straight forward solution is to assert the type is not null: `Date.parse(created_at!)`. ",
                    "author": {
                        "login": "whollacsek"
                    },
                    "createdAt": "2023-05-28T09:09:17Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1566023494"
                },
                {
                    "id": "IC_kwDODheSms5d34jH",
                    "body": "UPDATE: Issue found: https://github.com/supabase/postgrest-js/issues/303#issuecomment-1586774233\r\n\r\n---\r\n\r\n@soedirgo Thanks for your work on this! I removed all of my own query relation builder helper types, upgraded the cli to `1.66.0` and supabase-js to `2.24.0` and everything works really well. Types for many and one are being infered correctly from select queries.\r\n\r\nI see that it also already works for hosted dbs when using the `--db-url` flag. I was using the `--project-id` option first and it did not generate the `Relationships` field. But I suppose that's on purpose.\r\n\r\nThanks again for your work!",
                    "author": {
                        "login": "kryptovergleichde"
                    },
                    "createdAt": "2023-06-03T12:58:13Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1574930631"
                },
                {
                    "id": "IC_kwDODheSms5d7F5R",
                    "body": "> @soedirgo Thanks for your work on this! I removed all of my own query relation builder helper types, upgraded the cli to `1.66.0` and supabase-js to `2.24.0` and everything works really well. Types for many and one are being infered correctly from select queries.\r\n> \r\n> I see that it also already works for hosted dbs when using the `--db-url` flag. I was using the `--project-id` option first and it did not generate the `Relationships` field. But I suppose that's on purpose.\r\n> \r\n> Thanks again for your work!\r\n\r\nI can't get this to work with the `--db-url` flag, it keeps telling me the connection string that i'm copying from the dashboard is invalid after i replace my password. It thinks the password is the port for some reason.",
                    "author": {
                        "login": "okmaklad"
                    },
                    "createdAt": "2023-06-04T23:18:38Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1575771729"
                },
                {
                    "id": "IC_kwDODheSms5ehIdI",
                    "body": "The following query appears to be correctly typed.\r\n```ts\r\nconst column = '*, messages(id)'\r\nconst {data, error} = await postgrest.from('channels').select(column)\r\n```\r\n\r\nWhat about this case?\r\n```ts\r\nconst column = '*, messages: channel_id(*)'\r\nconst {data} = await postgrest.from('messages').select(column)\r\n```",
                    "author": {
                        "login": "3ru"
                    },
                    "createdAt": "2023-06-10T17:20:32Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1585743688"
                },
                {
                    "id": "IC_kwDODheSms5elEDZ",
                    "body": "Update: I have found a case where the typings are not correct. My query:\r\n\r\n```ts\r\nconst { data, error } = await supabase\r\n  .from('cryptocurrencies')\r\n  .select(`\r\n    id, name, slug, symbol, \r\n    exchanges_livedata_pricings(\r\n      *,\r\n      exchanges(id)\r\n    )\r\n`)\r\n```\r\n\r\nWhen I now select `data?.[0].exchanges_livedata_pricings[0].exchanges` in JS, this returns an object, but the types indicate that it's an array.\r\n\r\nSo seems an issue about nested relations.",
                    "author": {
                        "login": "kryptovergleichde"
                    },
                    "createdAt": "2023-06-12T07:51:06Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1586774233"
                },
                {
                    "id": "IC_kwDODheSms5eoK7r",
                    "body": "We've updated our API so that `supabase gen types typescript [--linked|--project-id]` generates types for relationships. Thanks for the feedback everyone!\r\n\r\n> TableA has the canonical created_at column with default for now() still the type that is generated is string | null\r\n\r\n@dhurbhat another solution is to alter the column to be `not null`, the generated types will pick that up and generate `string`.\r\n\r\n> can't get this to work with the --db-url flag\r\n\r\n@okmaklad  can you create an issue on supabase/cli and share the error?\r\n\r\n> `*, messages: channel_id(*)`\r\n\r\n@3ru yeah I don't think we support this syntax atm, though you can do `messages!messages_channel_id_fkey(*)` as a workaround.\r\n\r\n> this returns an object, but the types indicate that it's an array\r\n\r\n@kryptovergleichde what are the foreign keys between `cryptocurrencies` <-> `exchanges_livedata_pricings` <-> `exchanges`? Will try to reproduce this on a sample repo.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-06-12T15:39:07Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1587588843"
                },
                {
                    "id": "IC_kwDODheSms5epQrA",
                    "body": "@soedirgo Why are nested types potentially `null` if their foreign key is required on a model?\r\n\r\nExample:\r\n```TS\r\n const response = await supabase\r\n      .from(\"brand_locations\")\r\n      .select(\"*, brands(*)\");\r\n```\r\n\r\nThe `brand_id` is required field on `brand_locations`, but the returned type for `brands` is potentially `null`.",
                    "author": {
                        "login": "davidchalifoux"
                    },
                    "createdAt": "2023-06-12T18:38:08Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1587874496"
                },
                {
                    "id": "IC_kwDODheSms5ezXOq",
                    "body": "@soedirgo Thanks for getting back on this, so the relation is:\r\n\r\ntable `exchanges_livedata_pricings`:\r\n\r\nrelation to `cryptocurrencies`\r\n- fkey: `exchanges_livedata_pricings_cryptocurrency_id_fkey`\r\n- relation: `FOREIGN KEY (cryptocurrency_id) REFERENCES cryptocurrencies(id) ON DELETE CASCADE`\r\n\r\nrelation to `exchanges`\r\n- fkey: `exchanges_livedata_pricings_exchange_id_fkey`\r\n- relation: `FOREIGN KEY (exchange_id) REFERENCES exchanges(id) ON DELETE CASCADE`\r\n\r\nso the table `exchanges_livedata_pricings` acts as a join table with some additional info.\r\n",
                    "author": {
                        "login": "kryptovergleichde"
                    },
                    "createdAt": "2023-06-14T06:00:51Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1590522794"
                },
                {
                    "id": "IC_kwDODheSms5fHdek",
                    "body": "With the newest version I get weird typescript type errors when doing nested query on a table that has multiple FK columns referencing the same table (user_id & companion_of columns):\r\n\r\nReturn Type of Query:\r\n![image](https://github.com/supabase/postgrest-js/assets/1148424/e8e3d837-38f6-4ad0-a62a-27eed19091e9)\r\n\r\nQuery:\r\n```typescript\r\nconst result2 = await supabase\r\n  .from('events')\r\n  .select(`\r\n\t  id, \r\n\t  guests: event_guests(companion_of, user:user_id(id, name))\r\n  `)\r\n```\r\n\r\nTable Definition:\r\n```sql\r\ncreate table public.events (\r\n    id uuid not null default uuid_generate_v4 (),\r\n    name text not null,\r\n    created_at timestamp with time zone null default now(),\r\n  );\r\n\r\ncreate table public.event_guests (\r\n    user_id uuid not null,\r\n    event_id uuid not null,\r\n    companion_of uuid null,\r\n    constraint event_guests_pkey primary key (user_id, event_id),\r\n    constraint event_guests_companion_of_fkey foreign key (companion_of) references users (id),\r\n    constraint event_guests_user_id_fkey foreign key (user_id) references users (id) on delete cascade,\r\n    constraint event_guests_event_id_fkey foreign key (event_id) references events (id) on delete cascade\r\n  );\r\n```\r\n",
                    "author": {
                        "login": "samuba"
                    },
                    "createdAt": "2023-06-17T15:43:24Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1595791268"
                },
                {
                    "id": "IC_kwDODheSms5fJc9T",
                    "body": "> > `*, messages: channel_id(*)`\r\n> \r\n> @3ru yeah I don't think we support this syntax atm, though you can do `messages!messages_channel_id_fkey(*)` as a workaround.\r\n\r\nThat synxtax is not supported yet @samuba \r\n\r\n\r\n",
                    "author": {
                        "login": "chhuang"
                    },
                    "createdAt": "2023-06-19T00:01:52Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1596313427"
                },
                {
                    "id": "IC_kwDODheSms5fp-MD",
                    "body": "Hi all,\r\n\r\nAnd how would it be the way to define the types from the query generated? Let's say I do:\r\n\r\n```TS\r\nconst { data, error } = await workoutsSB\r\n  .from('section')\r\n  .select('*, superset!inner (*, exercise!inner))')\r\n```\r\n\r\nMy IDE gets the correct object properties (e.g., it autocompletes `data[0].superset[0].name`), but I couldn't figure out how to define a type by myself that I could use in other method definitions... something like `(data: Section)` which allows me to \"use\" the nested table without TS complaining...\r\n\r\nThanks! ",
                    "author": {
                        "login": "presedo93"
                    },
                    "createdAt": "2023-06-23T19:55:08Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1604838147"
                },
                {
                    "id": "IC_kwDODheSms5gPJTy",
                    "body": "@presedo93 you can try something like this, assuming your code snippet was wrapped in a function called `myFunction`:\r\n```ts\r\nconst myFunction = () => {\r\n  return workoutsSB\r\n    .from('section')\r\n    .select('*, superset!inner (*, exercise!inner))')\r\n}\r\nexport type MyData = Awaited<ReturnType<typeof myFunction>>['data']\r\n```",
                    "author": {
                        "login": "cdimitroulas"
                    },
                    "createdAt": "2023-06-30T12:28:26Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1614583026"
                },
                {
                    "id": "IC_kwDODheSms5gPLlB",
                    "body": "@soedirgo \r\n\r\n>Hey all, we've made some changes to improve the types of nested tables. Atm this is only available when generating types for the [local development database](https://supabase.com/docs/guides/getting-started/local-development) with supabase gen types typescript --local.\r\n>\r\n>If you have the Supabase CLI set up, can you upgrade it to v1.64.1 and upgrade supabase-js v2.23.0 and give it a spin? \ud83d\ude4f If all goes well we'll release it on the platform and close this.\r\n\r\nJust upgraded supabase-js and this is much better now \ud83d\udc4d thanks for the update! It still seems like a non-nullable foreign key results in the joined data being potentially null. For example, this is the result from a simple query:\r\n```ts\r\n  const { data, error } = client\r\n    .from('transactions')\r\n    .select('amount, transcripts(form_number)');\r\n\r\n  // data is typed as: Array<{ amount: number; transcripts: { form_number: string } | null }>\r\n```",
                    "author": {
                        "login": "cdimitroulas"
                    },
                    "createdAt": "2023-06-30T12:37:11Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1614592321"
                },
                {
                    "id": "IC_kwDODheSms5gUknZ",
                    "body": "Upgrading worked for me. \r\n\r\nI did `paru -S supabase-git`, then killed the docker container, supabase stop (not sure why I had to do this), then `supabase start`. It showed postgres... upgraded, then `rm database.types.ts && supabase gen types typescript --local >> database.types.ts`",
                    "author": {
                        "login": "Feel-ix-343"
                    },
                    "createdAt": "2023-07-01T17:12:50Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1616005593"
                },
                {
                    "id": "IC_kwDODheSms5lpiZ6",
                    "body": "Not sure if I'm missing something but this is what I get with the following query:\r\n\r\n```tsx\r\nconst supabase = createServerComponentClient<Database>({ cookies });\r\n\r\nconst { data: threads_users } = await supabase\r\n    .from(\"threads_users\")\r\n    .select(`*, thread(*)`)\r\n    .eq(\"user\", user?.id);\r\n```\r\n\r\nTypes I get\r\n```tsx\r\nconst threads_users: {\r\n    created_at: string;\r\n    id: number;\r\n    thread: number & {}[];\r\n    user: string;\r\n}[] | null\r\n```\r\n\r\n`thread` has a weird type with an empty object. Am I missing something?\r\nI'm using `\"@supabase/supabase-js\": \"^2.33.1\"`\r\n",
                    "author": {
                        "login": "cdedreuille"
                    },
                    "createdAt": "2023-09-04T14:43:53Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1705387642"
                },
                {
                    "id": "IC_kwDODheSms5nQ0rA",
                    "body": "> Not sure if I'm missing something but this is what I get with the following query:\r\n> \r\n> ```tsx\r\n> const supabase = createServerComponentClient<Database>({ cookies });\r\n> \r\n> const { data: threads_users } = await supabase\r\n>     .from(\"threads_users\")\r\n>     .select(`*, thread(*)`)\r\n>     .eq(\"user\", user?.id);\r\n> ```\r\n> \r\n> Types I get\r\n> \r\n> ```tsx\r\n> const threads_users: {\r\n>     created_at: string;\r\n>     id: number;\r\n>     thread: number & {}[];\r\n>     user: string;\r\n> }[] | null\r\n> ```\r\n> \r\n> `thread` has a weird type with an empty object. Am I missing something? I'm using `\"@supabase/supabase-js\": \"^2.33.1\"`\r\n\r\nTry this\r\n```\r\nconst { data: threads_users } = await supabase\r\n    .from(\"threads_users\")\r\n    .select(`*, thread: threads!threads_users_thread_fkey(*)`)\r\n    .eq(\"user\", user?.id);\r\n```",
                    "author": {
                        "login": "gregfromstl"
                    },
                    "createdAt": "2023-09-24T02:59:10Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/303#issuecomment-1732463296"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5QMuF9",
            "number": 304,
            "title": "Support setting `Prefer: params=single-object` when making `.rpc()` call",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nWhen calling a Postgres function via `.rpc()` method, you can pass `Prefer: params=single-object` header to be able to pass JSON object as the parameter. Was wondering if this is something we want to support. \r\nhttps://postgrest.org/en/v9.0/api.html#calling-functions-with-a-single-json-parameter\r\n\r\n## Describe the solution you'd like\r\n\r\nAdd a flag or something to `.rpc()` maybe? Something like this:\r\n```typescript\r\n.rpc('my_function', {\r\n  name: 'Michael'\r\n}, { singleObject: true })\r\n```\r\n\r\n## Describe alternatives you've considered\r\n\r\nA developer can create a regular Postgres function with named parameters. \r\n\r\n## Additional context\r\n\r\nThis feature was requested on the Dart library, and wanted to bring the discussion over to the JS library. \r\nhttps://github.com/supabase-community/supabase-flutter/issues/197",
            "author": {
                "login": "dshukertjr"
            },
            "state": "OPEN",
            "createdAt": "2022-08-21T15:02:42Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/304",
            "comments": [
                {
                    "id": "IC_kwDODheSms5I3GQP",
                    "body": "Please also add: `Prefer: params=multiple-objects` https://postgrest.org/en/stable/api.html#bulk-call. However, this will require accepting an array of objects rather than just an object - kind of like insert.",
                    "author": {
                        "login": "dsyrstad"
                    },
                    "createdAt": "2022-08-22T13:59:22Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/304#issuecomment-1222403087"
                },
                {
                    "id": "IC_kwDODheSms5I5ujv",
                    "body": "@dsyrstad Could you instead use an array parameter for your function? `params=multiple-objects` doesn't have good performance and we thought it'd be better to not expose it to the clients. Likely it will be deprecated/removed from PostgREST as well.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-08-22T21:26:58Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/304#issuecomment-1223092463"
                },
                {
                    "id": "IC_kwDODheSms5I5_7W",
                    "body": "> @dsyrstad Could you instead use an array parameter for your function? `params=multiple-objects` doesn't have good performance and we thought it'd be better to not expose it to the clients. \r\n\r\n@steve-chavez I am only using `Prefer: params=single-object` right now. I just thought for completeness we would include `params=multiple-objects`, but I'm not using it. I'm okay with leaving it out.",
                    "author": {
                        "login": "dsyrstad"
                    },
                    "createdAt": "2022-08-22T21:56:27Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/304#issuecomment-1223163606"
                },
                {
                    "id": "IC_kwDODheSms5LDovR",
                    "body": "Curious, is there any downside to just using [a single unnamed parameter](https://postgrest.org/en/stable/api.html#calling-functions-with-a-single-unnamed-parameter)?\r\n\r\nPostgREST will do the right thing without needing `params=single-object` - other than needing to use `$1` instead of names in the function definition, I'm not sure of what value `params=single-object` gives.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-27T09:35:52Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/304#issuecomment-1259244497"
                },
                {
                    "id": "IC_kwDODheSms5LFe0d",
                    "body": "> Curious, is there any downside to just using [a single unnamed parameter](https://postgrest.org/en/stable/api.html#calling-functions-with-a-single-unnamed-parameter)?\r\n> \r\n> PostgREST will do the right thing without needing `params=single-object` - other than needing to use `$1` instead of names in the function definition, I'm not sure of what value `params=single-object` gives.\r\n\r\n@soedirgo Well, it seems that using the unnamed param method would require adding a `Content-Type: application/json` header, as described in the doc. So it just seems to be a trade-off in headers.\r\n\r\nI'm not sure what the resistance is to adding client SDK support for a header that is documented? I already have a workaround which does not require me to change the PG function. I'm looking for a built-in in solution that does not require a workaround.",
                    "author": {
                        "login": "dsyrstad"
                    },
                    "createdAt": "2022-09-27T16:10:45Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/304#issuecomment-1259728157"
                },
                {
                    "id": "IC_kwDODheSms5LH4u9",
                    "body": "We already supply `Content-Type: application/json` by default, so that shouldn't be an issue.\r\n\r\nNot all features supported upstream should be supported by the client lib - see also `params=multiple-objects` above.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-28T04:06:59Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/304#issuecomment-1260358589"
                },
                {
                    "id": "IC_kwDODheSms5LILNK",
                    "body": "@soedirgo Should we include a note about `single unnamed parameter` in the rpc section of the docs maybe?",
                    "author": {
                        "login": "dshukertjr"
                    },
                    "createdAt": "2022-09-28T06:11:23Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/304#issuecomment-1260434250"
                },
                {
                    "id": "IC_kwDODheSms5LKFNr",
                    "body": "Maybe we just need the ability to easily add arbitrary headers to the request. I know this is possible currently (not in the Dart SDK 1.0.0 though), but it is cumbersome.",
                    "author": {
                        "login": "dsyrstad"
                    },
                    "createdAt": "2022-09-28T13:40:57Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/304#issuecomment-1260933995"
                },
                {
                    "id": "IC_kwDODheSms5LPugr",
                    "body": "@dsyrstad Unfortunately exposing headers as public member on Dart SDK was more of a mistake than a feature, so it will not be reintroduced unless something similar is added to js client. Is there any reason why `single unnamed parameter` will not work for your case?",
                    "author": {
                        "login": "dshukertjr"
                    },
                    "createdAt": "2022-09-29T15:04:17Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/304#issuecomment-1262413867"
                },
                {
                    "id": "IC_kwDODheSms5LRfw_",
                    "body": "> @dsyrstad Unfortunately exposing headers as public member on Dart SDK was more of a mistake than a feature, so it will not be reintroduced unless something similar is added to js client. Is there any reason why `single unnamed parameter` will not work for your case?\r\n\r\nI _could_ use an unnamed parameter with `$1` and that ugliness. Before I'll do that, I'll just implement the extension workaround mentioned here: https://github.com/supabase-community/supabase-flutter/issues/179#issuecomment-1213081577. \r\n\r\nBut again, Postgrest supports a named JSON parameter in a POST request  and the client SDK seems to be missing the corresponding functionality.\r\n \r\nAlso, another person (@CodingSoot) had a use case for an arbitrary (non-Postgrest) header: https://github.com/supabase-community/supabase-flutter/issues/179#issuecomment-1212021311. I think if a couple of people have the requirement, why not support it instead of making the users of the SDK jump through hoops? We've probably spent more time talking about it than it would take to do it.",
                    "author": {
                        "login": "dsyrstad"
                    },
                    "createdAt": "2022-09-29T22:24:01Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/304#issuecomment-1262877759"
                },
                {
                    "id": "IC_kwDODheSms5LS-kz",
                    "body": "How about a method `setHeader(name: string, value: string)` on `PostgrestTransformBuilder` so you can set headers on each request? Willing to accept if you have a PR for it.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-30T08:21:52Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/304#issuecomment-1263266099"
                },
                {
                    "id": "IC_kwDODheSms5LUW65",
                    "body": "That sounds good, as long as we can retrieve a header as well. The `Prefer` header can be multi-valued, so you need to be able to tell if there's an existing value and concatenate on to it. The client does this internally right now.  Also, it looks like the `headers` are owned by `PostgrestBuilder`, so the method may need to go there.\r\n\r\nIf I do a PR, it will probably be on the Dart code base.",
                    "author": {
                        "login": "dsyrstad"
                    },
                    "createdAt": "2022-09-30T14:10:47Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/304#issuecomment-1263627961"
                },
                {
                    "id": "IC_kwDODheSms5Rq-Ht",
                    "body": "Any update to this? There doesn't seem to be documentation for `single unnamed parameter`",
                    "author": {
                        "login": "kylerummens"
                    },
                    "createdAt": "2023-01-03T20:59:49Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/304#issuecomment-1370218989"
                },
                {
                    "id": "IC_kwDODheSms5RrLZx",
                    "body": "@kylerummens I had punted on the 1.0 conversion at the time of my last message. Coincidentally, I'm just moving over to The Dart Supabase client 1.2.x today and encountering additional header issues. I've forked the postgrest repo to expose `headers` at this point. There's really no reason I shouldn't be able to do whatever I want with the headers. It's my client instance, after all.",
                    "author": {
                        "login": "dsyrstad"
                    },
                    "createdAt": "2023-01-03T22:06:53Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/304#issuecomment-1370273393"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5QSYNW",
            "number": 305,
            "title": "API returns 403 instead of 401 when making a request with a non-authenticated user",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nNot sure if this is a bug in PostgREST itself or a config problem in Supabase, but when a request is made from the Supabase JS client without an authenticated user against a stored procedure or view which does NOT allow access to the \"anon\" role, the returned HTTP status is 403 and NOT 401. \r\n\r\nAccording to the [PostgREST documentation](https://postgrest.org/en/latest/api.html#http-status-codes), a 42501 SQL error code should be translated to, quote: \"if authenticated 403, else 401\"\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Create a view on the public schema (e.g. 'my_view')\r\n2. Revoke permissions from the \"anon\" role so that ONLY authenticated users can access the view:\r\n```\r\nREVOKE ALL PRIVILEGES ON my_view FROM anon;\r\n```\r\n2. Try to access the view using the Supabase client without having an active user session.\r\n\r\n\r\n## Expected behavior\r\n\r\nSupabase/PostgREST returns an error with status code 401.\r\n\r\n## Actual behavior\r\n\r\nSupabase/PostgREST returns an error with status code 403.\r\n\r\n## Screenshots\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n## System information\r\n\r\n- Version of supabase-js: 1.28.5\r\n",
            "author": {
                "login": "chipilov"
            },
            "state": "CLOSED",
            "createdAt": "2022-01-03T13:51:11Z",
            "closedAt": "2022-09-27T07:34:06Z",
            "url": "https://github.com/supabase/postgrest-js/issues/305",
            "comments": [
                {
                    "id": "IC_kwDODheSms5I5n6u",
                    "body": "Hi, tried to look around and check what's going on, maybe for `authenticated` the PostgREST documentation means that a valid token is sent with the request and if no token is provided the state is unauthenticated and you get 401.\r\nCorrect me if i am wrong, thanks",
                    "author": {
                        "login": "antonioprudenzano"
                    },
                    "createdAt": "2022-08-22T18:52:09Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/305#issuecomment-1223065262"
                },
                {
                    "id": "IC_kwDODheSms5LDGZA",
                    "body": "AFAICT this is resolved on the currently deployed version of PostgREST, so closing this.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-27T07:34:06Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/305#issuecomment-1259103808"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5QSY4V",
            "number": 306,
            "title": "Function not found using rpc",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nI have created a function called `aggregated_track_analytics` with two parameters, it returns a table. When trying to get results from the function I get an error from the supabase client that the function could not be found.\r\n\r\n*TS Call*\r\n\r\n```ts\r\nconst { data } = await this._client\r\n      .rpc<DBAggregatedTrackAnalytics>(\r\n        DB_FUNCTIONS.aggregated_track_analytics,\r\n        {\r\n          _activity_type: filters.activityType ?? null,\r\n          _user_id: filters.userId ?? null,\r\n        }\r\n      )\r\n      .select();\r\n```\r\n\r\n*Error*\r\n```json\r\n{\r\n  message: 'Could not find the public.aggregated_track_analytics(_activity_type, _user_id) function or the public.aggregated_track_analytics function with a single unnamed json or jsonb parameter in the schema cache',\r\n  hint: 'If a new function was created in the database with this name and parameters, try reloading the schema cache.'\r\n}\r\n```\r\n\r\nIt has been 12 hours since I created this function and I have tried executing `NOTIFY pgrst, 'reload schema'`. I extracted the function schema so maybe you are able to see something important there?\r\n\r\n| specific_name                    | ordinal_position | parameter_mode | parameter_name   | data_type                   |\r\n| -------------------------------- | ---------------- | -------------- | ---------------- | --------------------------- |\r\n| aggregated_track_analytics_18428 | 1                | IN             | _activity_id     | text                        |\r\n| aggregated_track_analytics_18428 | 2                | IN             | _user_id         | uuid                        |\r\n| aggregated_track_analytics_18428 | 3                | OUT            | track_id         | text                        |\r\n| aggregated_track_analytics_18428 | 4                | OUT            | user_id          | uuid                        |\r\n| aggregated_track_analytics_18428 | 5                | OUT            | activity_type    | text                        |\r\n| aggregated_track_analytics_18428 | 6                | OUT            | play_count       | integer                     |\r\n| aggregated_track_analytics_18428 | 7                | OUT            | last_played_date | timestamp without time zone |\r\n| aggregated_track_analytics_18428 | 8                | OUT            | distance         | numeric                     |\r\n| aggregated_track_analytics_18428 | 9                | OUT            | ascent           | numeric                     |\r\n| aggregated_track_analytics_18428 | 10               | OUT            | descent          | numeric                     |\r\n| aggregated_track_analytics_18428 | 11               | OUT            | max_elevation    | numeric                     |\r\n| aggregated_track_analytics_18428 | 12               | OUT            | avg_velocity     | numeric                     |\r\n| aggregated_track_analytics_18428 | 13               | OUT            | max_velocity     | numeric                     |\r\n| aggregated_track_analytics_18428 | 14               | OUT            | avg_heartrate    | numeric                     |\r\n| aggregated_track_analytics_18428 | 15               | OUT            | avg_power        | numeric                     |\r\n| aggregated_track_analytics_18428 | 16               | OUT            | max_power        | numeric                     |\r\n| aggregated_track_analytics_18428 | 17               | OUT            | moving_duration  | numeric                     |\r\n\r\n## To Reproduce\r\n\r\nI don't think any steps I write here will actually be useful. I saw another closed issue https://github.com/supabase/supabase/issues/7327 so I presume it isn't an isolated issue.\r\n\r\n## Expected behavior\r\n\r\nThe function is found and can be used in a query via rpc as the docs suggest https://supabase.com/docs/guides/database/functions\r\n\r\n## Screenshots\r\n\r\nN/A\r\n\r\n## System information\r\n\r\n- OS: Supabase runs in server on Ubuntu (WSL2)\r\n- Browser: Edge\r\n- Version of supabase-js: 1.35.6 (first 1.35.4 but upgraded to validate)\r\n- Version of Node.js: 16.13.1\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "donocode"
            },
            "state": "CLOSED",
            "createdAt": "2022-08-22T11:07:13Z",
            "closedAt": "2022-08-23T15:21:38Z",
            "url": "https://github.com/supabase/postgrest-js/issues/306",
            "comments": [
                {
                    "id": "IC_kwDODheSms5I5pgQ",
                    "body": "You are calling it with a parameter name _activity_type, your dump shows the input name _activity_id.  They must match.\r\nIs the function in the public schema?",
                    "author": {
                        "login": "GaryAustin1"
                    },
                    "createdAt": "2022-08-22T20:19:58Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/306#issuecomment-1223071760"
                },
                {
                    "id": "IC_kwDODheSms5I-Dai",
                    "body": "Well this is an embarrassing case of parameter blindness. Thanks for noticing @GaryAustin1 \r\n\r\nA DX upgrade could be to list partially matching functions if there is no exact match, but I'll take that to PostgREST .",
                    "author": {
                        "login": "donocode"
                    },
                    "createdAt": "2022-08-23T15:21:38Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/306#issuecomment-1224226466"
                },
                {
                    "id": "IC_kwDODheSms5LE6Jq",
                    "body": "Hi, I'm getting the same error from all functions with parameters, and the parameters on JS are the same as the SQL function. I have no idea how to fix it. \r\n\r\n\r\nSQL\r\n```\r\nCREATE OR REPLACE FUNCTION getUserProfile(p_username varchar(15), p_userRequestingProfile varchar(15))\r\nRETURNS json\r\nLANGUAGE plpgsql\r\nAS $$\r\nBEGIN\r\n  RETURN (SELECT json_build_object(\r\n          'profile', ((SELECT row_to_json(p.*) FROM public.profile p WHERE p.username = p_username)),\r\n          'isFollowedByRequest', EXISTS(SELECT *\r\n                                        FROM public.follows f\r\n                                        WHERE f.followed = (SELECT userid\r\n                                                            FROM public.profile p\r\n                                                            WHERE p.username = p_username)\r\n                                        AND f.follower = (SELECT userid\r\n                                                            FROM public.profile p\r\n                                                            WHERE p.username = p_userRequestingProfile))\r\n  ));\r\nEND;\r\n$$;\r\n```\r\n\r\n\r\nJS\r\n```\r\nexport const getUserProfile = async (\r\n    username: string,\r\n    userRequestingProfile: string\r\n) => {\r\n    const { data, error } = await supabase.rpc(\"getuserprofile\", {\r\n        p_username: \"Test1\",\r\n        p_userRequestingProfile: \"Test2\",\r\n    });\r\n\r\n    console.log(data, error);\r\n};\r\n```\r\n\r\nError\r\n```\r\n{\r\n  \"message\": \"Could not find the public.getuserprofile(p_userRequestingProfile, p_username) function or the public.getuserprofile function with a single unnamed json or jsonb parameter in the schema cache\",\r\n  \"code\": \"PGRST202\",\r\n  \"details\": null,\r\n  \"hint\": \"If a new function was created in the database with this name and parameters, try reloading the schema cache.\"\r\n}\r\n```",
                    "author": {
                        "login": "AndreiSaliba"
                    },
                    "createdAt": "2022-09-27T14:18:01Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/306#issuecomment-1259577962"
                },
                {
                    "id": "IC_kwDODheSms5LE_Dw",
                    "body": "> p_userRequestingProfile\r\n\r\nI think you need to either quote the name in the SQL part or lower-case it in the JS part.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-27T14:32:52Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/306#issuecomment-1259598064"
                },
                {
                    "id": "IC_kwDODheSms5LFJEE",
                    "body": "@AndreiSaliba I'll be a bit stronger than soedirgo...\r\nDon't use capital letters in Postgres names for tables, columns or functions.  You will regret it, as it will bite you in the future when you forget the quotes somewhere.  There are many issues like yours, even from experienced SQL coders who miss it but don't see it before asking for help.  The only exception is if you have no choice due to something like Prisma.\r\n\r\nFor instance, when you get the function working, you when then hit a problem in the last WHERE as you don't have a name that uses capital letters quoted.  It will be turned to all lower case and not match.  Edit: I guess technically it will match in your case as both it\u2019s declaration and use will get converted to lowercase.\r\n\r\n",
                    "author": {
                        "login": "GaryAustin1"
                    },
                    "createdAt": "2022-09-27T15:01:56Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/306#issuecomment-1259639044"
                },
                {
                    "id": "IC_kwDODheSms5LGUE2",
                    "body": "Sorry to ask again but after updating 2 more procedures to remove uppercase letters I'm still getting the same error. I think the error is only happening with procedures, functions work fine. The procedures work when I call them through the sql editor or datagrip but don't work with rpc. \r\n\r\nProcedure 1\r\n```\r\nCREATE OR REPLACE PROCEDURE public.update_userprofile(\r\n\t_userid uuid,\r\n\t_name varchar(50),\r\n\t_username varchar(15),\r\n\t_location varchar(30),\r\n\t_description varchar(160),\r\n\t_url varchar(100),\r\n\t_profile_image_url varchar,\r\n\t_banner_image_url varchar)\r\nLANGUAGE plpgsql\r\nAS\r\n$$\r\nBEGIN\r\n    UPDATE public.profile p\r\n    SET \"name\" = COALESCE(_name, p.name),\r\n        \"username\" = COALESCE(_username, p.username),\r\n        \"location\" = COALESCE(_location, p.location),\r\n        \"description\" = COALESCE(_description, p.description),\r\n        \"url\" = COALESCE(_url, p.url),\r\n        \"profile_image_url\" = COALESCE(_profile_image_url, p.profile_image_url),\r\n        \"profile_banner_url\" = COALESCE(_banner_image_url, p.profile_banner_url)\r\n    WHERE p.userid = _userid;\r\n    COMMIT;\r\nEND\r\n$$;\r\n``` \r\nProcedure 2 \r\n``` \r\nCREATE OR REPLACE procedure public.follow_user(_followed uuid, _follower uuid)\r\nLANGUAGE plpgsql AS $$\r\nBEGIN\r\n    INSERT INTO public.follows(followed, follower)\r\n    VALUES(_followed, _follower);\r\n\r\n    UPDATE public.profile\r\n    SET followers_count = followers_count + 1\r\n    WHERE userid = _followed;\r\n\r\n    UPDATE public.profile\r\n    SET following_count = following_count + 1\r\n    WHERE userid = _follower;\r\n    COMMIT;\r\nEND\r\n$$;\r\n```\r\n\r\n\r\nJS 1\r\n```\r\nexport const updateUserProfile = async (\r\n    userID: string,\r\n    name: string,\r\n    username: string,\r\n    description: string,\r\n    location: string,\r\n    url: string,\r\n    profileImageURL: string,\r\n    bannerImageURL: string\r\n) => {\r\n    const { error } = await supabase.rpc(\"update_userprofile\", {\r\n        _userid: userID,\r\n        _name: name,\r\n        _username: username,\r\n        _location: location,\r\n        _description: description,\r\n        _url: url,\r\n        _profile_image_url: profileImageURL,\r\n        _banner_image_url: bannerImageURL,\r\n    });\r\n\r\n    error && console.log(error);\r\n};\r\n```\r\nJS 2 \r\n```\r\nexport const followUser = async (followedUser: string, follower: string) => {\r\n    const { error } = await supabase.rpc(\"follow_user\", {\r\n        _followed: followedUser,\r\n        _follower: follower,\r\n    });\r\n\r\n    error && console.log(error);\r\n};\r\n```",
                    "author": {
                        "login": "AndreiSaliba"
                    },
                    "createdAt": "2022-09-27T19:19:58Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/306#issuecomment-1259946294"
                },
                {
                    "id": "IC_kwDODheSms5LGg-v",
                    "body": "This kind of general debug stuff is better asked on Supabase Discord.  Lots of users to help there. \n\nSent from my iPhone\n\n> On Sep 27, 2022, at 1:20 PM, Andrei Saliba ***@***.***> wrote:\n> \n> \ufeff\n> Sorry to ask again but after updating 2 more procedures to remove uppercase letters I'm still getting the same error. I think the error is only happening with procedures, functions work fine. The procedures work when I call them through the sql editor or datagrip but don't work with rpc.\n> \n> Procedure 1\n> \n> CREATE OR REPLACE PROCEDURE public.update_userprofile(\n> \t_userid uuid,\n> \t_name varchar(50),\n> \t_username varchar(15),\n> \t_location varchar(30),\n> \t_description varchar(160),\n> \t_url varchar(100),\n> \t_profile_image_url varchar,\n> \t_banner_image_url varchar)\n> LANGUAGE plpgsql\n> AS\n> $$\n> BEGIN\n>     UPDATE public.profile p\n>     SET \"name\" = COALESCE(_name, p.name),\n>         \"username\" = COALESCE(_username, p.username),\n>         \"location\" = COALESCE(_location, p.location),\n>         \"description\" = COALESCE(_description, p.description),\n>         \"url\" = COALESCE(_url, p.url),\n>         \"profile_image_url\" = COALESCE(_profile_image_url, p.profile_image_url),\n>         \"profile_banner_url\" = COALESCE(_banner_image_url, p.profile_banner_url)\n>     WHERE p.userid = _userid;\n>     COMMIT;\n> END\n> $$;\n> Procedure 2\n> \n> CREATE OR REPLACE procedure public.follow_user(_followed uuid, _follower uuid)\n> LANGUAGE plpgsql AS $$\n> BEGIN\n>     INSERT INTO public.follows(followed, follower)\n>     VALUES(_followed, _follower);\n> \n>     UPDATE public.profile\n>     SET followers_count = followers_count + 1\n>     WHERE userid = _followed;\n> \n>     UPDATE public.profile\n>     SET following_count = following_count + 1\n>     WHERE userid = _follower;\n>     COMMIT;\n> END\n> $$;\n> JS 1\n> \n> export const updateUserProfile = async (\n>     userID: string,\n>     name: string,\n>     username: string,\n>     description: string,\n>     location: string,\n>     url: string,\n>     profileImageURL: string,\n>     bannerImageURL: string\n> ) => {\n>     const { error } = await supabase.rpc(\"update_userprofile\", {\n>         _userid: userID,\n>         _name: name,\n>         _username: username,\n>         _location: location,\n>         _description: description,\n>         _url: url,\n>         _profile_image_url: profileImageURL,\n>         _banner_image_url: bannerImageURL,\n>     });\n> \n>     error && console.log(error);\n> };\n> JS 2\n> \n> export const followUser = async (followedUser: string, follower: string) => {\n>     const { error } = await supabase.rpc(\"follow_user\", {\n>         _followed: followedUser,\n>         _follower: follower,\n>     });\n> \n>     error && console.log(error);\n> };\n> \u2014\n> Reply to this email directly, view it on GitHub, or unsubscribe.\n> You are receiving this because you were mentioned.\n",
                    "author": {
                        "login": "GaryAustin1"
                    },
                    "createdAt": "2022-09-27T20:15:31Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/306#issuecomment-1259999151"
                },
                {
                    "id": "IC_kwDODheSms5LGy45",
                    "body": "Ok thanks. ",
                    "author": {
                        "login": "AndreiSaliba"
                    },
                    "createdAt": "2022-09-27T21:27:15Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/306#issuecomment-1260072505"
                },
                {
                    "id": "IC_kwDODheSms5LH438",
                    "body": "Actually for this specific case, it's because we only support functions, not procedures.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-28T04:08:00Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/306#issuecomment-1260359164"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5QSfRA",
            "number": 307,
            "title": "`.from(table).delte()` not returning an error?",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\nWhen I'm deleting a row in my supabase table with `.from(table).delte().eq(\"id\", id);` the function is not returning an error when trying to access a resource the user is not allowed access to.\r\nI set up a table with a test row to delete and it worked. Then I set up `RLS` to make sure I catch any error that might happen. Therefore on purpose didn't set up an `RLS` for a row `DELETE` operation.\r\nWhen I try to run the below code on the client side it works without throwing any error. Why is it not throwing an error if the user attempts to access a resource he has no access to?\r\nIf I have an error at the moment, it seems like sometimes the error is in `const { data, error }` and sometime in the `catch (err)` block. Is there any logic to it I'm missing on when to catch an error where?\r\n\r\n## To Reproduce\r\n\r\n**Create a delete function:**\r\n```javascript\r\nasync function deleteContact(id: string) {\r\n    if (!id) throw Error(\"Can't delete contact of none.\");\r\n    console.log(\"delete Contact\");\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from(\"contacts\")\r\n        .delete()\r\n        .eq(\"id\", id);\r\n      if (error) {\r\n        console.log(\"error\", error);\r\n        throw Error(error);\r\n      }\r\n      return;\r\n    } catch (err) {\r\n      console.log(\"catchErr\", err);\r\n    }\r\n  }\r\n```\r\n\r\nEnable `RLS` for the table you're trying to access.\r\n\r\n## Expected behavior\r\nThrowing an Error 403 instead of protecting from deletion and returning no error.\r\n\r\nThis would help in general to display valuable messages for the front-end user and also help to work with libraries like TanStack React-Query. Which expects:\r\n\r\nA function that returns a promise that:\r\nResolves the data, or\r\nThrows an error\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser: Chrome\r\n- Version of supabase-js: \"@supabase/supabase-js\": \"^2.0.0-rc.2\",\r\n- Version of React: \"react\": \"18.2.0\",\r\n- Version of Next.js: \"next\": \"12.2.4\",\r\n\r\nThank you in advance.\r\n",
            "author": {
                "login": "bennik88"
            },
            "state": "CLOSED",
            "createdAt": "2022-08-18T12:52:32Z",
            "closedAt": "2022-09-27T09:31:34Z",
            "url": "https://github.com/supabase/postgrest-js/issues/307",
            "comments": [
                {
                    "id": "IC_kwDODheSms5I-bZ-",
                    "body": "> Then I set up RLS to make sure I catch any error that might happen. Therefore on purpose didn't set up an RLS for a row DELETE operation.\r\nWhen I try to run the below code on the client side it works without throwing any error. Why is it not throwing an error if the user attempts to access a resource he has no access to?\r\n\r\nWhen you enable RLS, it's restrictive by default - i.e. if there are no policies it'll act as if you have only one policy with the definition of `false`.\r\n\r\nAt the same time, a `DELETE` policy only affects *visibility* - with no policies in place, the `DELETE` \"sees\" an empty table, and thus finds no rows to delete, succeeding with a 204 No Content. Instead of returning an error when it tries to delete rows it has no access to, it can't even \"see\" the rows - returning an error is a security issue because attackers could find out which valid `id`s exist in the db by trying to delete one by one.\r\n\r\n> If I have an error at the moment, it seems like sometimes the error is in const { data, error } and sometime in the catch (err) block. Is there any logic to it I'm missing on when to catch an error where?\r\n\r\nIt should always return the error instead of throwing it - having the error thrown might signal a bug.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-08-23T16:40:05Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/307#issuecomment-1224324734"
                },
                {
                    "id": "IC_kwDODheSms5LDniA",
                    "body": "The notes [here](https://supabase.com/docs/reference/javascript/delete#notes) might be clearer than my explanation above.\r\n\r\nI'm not aware of a case where errors are thrown instead of returned, but if you have a reproducible example, please comment here and we'll reopen the issue.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-27T09:31:34Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/307#issuecomment-1259239552"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5QSfuv",
            "number": 308,
            "title": "upsert doesn't work even with primary key matching",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nTried to use upsert to update data from my express nodejs server\r\n\r\nsample code\r\n```\r\n    await supabase\r\n      .from('donation_submission')\r\n      .upsert({\r\n        id: parseInt(donation_submission_id),\r\n        transaction_meta: {\r\n          ...submissions[0].transaction_meta,\r\n          test: true,\r\n        }\r\n      })\r\n```\r\n\r\nIf I switch to update match it worked\r\n```\r\n    await supabase\r\n      .from('donation_submission')\r\n      .update({\r\n        transaction_meta: {\r\n          ...submissions[0].transaction_meta,\r\n          test: true,\r\n        }\r\n      })\r\n      .match({ id: parseInt(donation_submission_id) })\r\n\r\n```\r\n\r\nA clear and concise description of what the bug is.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Go to '\u2026'\r\n2. Click on '\u2026'\r\n3. Scroll down to '\u2026'\r\n4. See error\r\n\r\n## Expected behavior\r\n\r\nA clear and concise description of what you expected to happen.\r\n\r\n## Screenshots\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Version of supabase-js: 1.35.4\r\n- Version of Node.js: 14.18.3\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "pencilcheck"
            },
            "state": "CLOSED",
            "createdAt": "2022-08-20T07:40:43Z",
            "closedAt": "2022-08-31T02:17:55Z",
            "url": "https://github.com/supabase/postgrest-js/issues/308",
            "comments": [
                {
                    "id": "IC_kwDODheSms5I560c",
                    "body": "> Tried to use upsert to update data from my express nodejs server\r\n\r\nWhat was the error message?",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-08-22T21:47:56Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/308#issuecomment-1223142684"
                },
                {
                    "id": "IC_kwDODheSms5JdH72",
                    "body": "Closing as it can't be reproduced. Will reopen if there's more feedback.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-08-31T02:17:55Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/308#issuecomment-1232371446"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5QSid5",
            "number": 309,
            "title": "New Typescript docs incorrect for nested tables",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nOn the Typescript page for the next version (https://supabase.com/docs/reference/javascript/next/typescript-support) it states that:\r\n\r\n> For advanced queries such as nested tables, you may want to construct your own types.\r\n\r\n```\r\nimport supabase from '~/lib/supabase'\r\nimport type { Database } from '~/lib/database.types'\r\n\r\nasync function getMovies() {\r\n  return await supabase.from('movies').select('id, title, actors(*)')\r\n}\r\n\r\ntype actors = Database['public']['Tables']['actors']['Row']\r\ntype MoviesResponse = Awaited<ReturnType<typeof getMovies>>\r\ntype MoviesResponseSuccess = MoviesResponse['data'] & {\r\n  actors: actors[]\r\n}\r\n```\r\n\r\nThis is wrong, the above results in:\r\n\r\n```\r\nmovies: ({id: number} & {title: string} & {actors: unknown})[] & {actors?: {id: number | undefined}}\r\n```\r\n\r\nThe `actors` should be part of the `movies` array.\r\n\r\n## To Reproduce\r\n\r\nVisit https://supabase.com/docs/reference/javascript/next/typescript-support\r\n\r\n## Expected behavior\r\n\r\nThe typescript is correct\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "joesaunderson"
            },
            "state": "OPEN",
            "createdAt": "2022-08-21T18:29:51Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/309",
            "comments": []
        },
        {
            "id": "I_kwDODheSms5QSq3b",
            "number": 310,
            "title": "Upsert fails if field must be non-null",
            "body": "# Bug report\r\nI have this schema:\r\n\r\n`id, field_1, field_2, field_3` with field_1 as a non-null text column.\r\n\r\nI want to upsert an existing row with just id and field_3.\r\n\r\n## Describe the bug\r\n\r\n```\r\nawait supabase.from(\"example_table\").upsert([{id, field_3}]);\r\n>>>   message: 'null value in column \"field_1\" of relation \"example_table\" violates not-null constraint',\r\n```\r\n\r\nHowever, that row had a non-null entry in the `field_1` column.\r\n\r\nI had to go into Supabase and allow the column field_1 to be null, which is not what I intended for that column.\r\n\r\n## Expected behavior\r\n\r\nThe row would correctly update.",
            "author": {
                "login": "davidwitten"
            },
            "state": "CLOSED",
            "createdAt": "2022-08-22T22:19:19Z",
            "closedAt": "2022-09-27T09:57:00Z",
            "url": "https://github.com/supabase/postgrest-js/issues/310",
            "comments": [
                {
                    "id": "IC_kwDODheSms5I6-uZ",
                    "body": "If you know the row exists, just do update.  You must know it exists as you are not providing all data needed for an insert.\r\n\r\nIf you are not sure the row exists, then you have to provide not-null column info as it will attempt to do an insert AND THEN do an update if it can't because of a key conflict.  The problem is it can't try the insert if you have not-null column with no data as that is a constraint violation.   This is a Postgresql thing, not a Supabase thing.\r\n\r\n",
                    "author": {
                        "login": "GaryAustin1"
                    },
                    "createdAt": "2022-08-23T01:49:58Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/310#issuecomment-1223420825"
                },
                {
                    "id": "IC_kwDODheSms5I_qkq",
                    "body": "Ah sorry, the reason I used `upsert` is that I'm attempting to update 1000s of rows at once. \r\n\r\nIs there a better way of updating that many rows instead of just downloading all 1000s of rows and upserting them with all fields included?",
                    "author": {
                        "login": "davidwitten"
                    },
                    "createdAt": "2022-08-23T19:08:33Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/310#issuecomment-1224649002"
                },
                {
                    "id": "IC_kwDODheSms5JBbA6",
                    "body": "Related: #173",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-08-24T02:46:40Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/310#issuecomment-1225109562"
                },
                {
                    "id": "IC_kwDODheSms5JuASU",
                    "body": "~Looking closer, I believe what you need here is a default value for `field_1`. If you know all the rows already exists (wrt the `id`) then you don't need it, it'll just use the existing `field_1`, but otherwise you need a default value that is not `null`.~\r\n\r\nNvm - it still requires you to supply the value.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-05T10:03:24Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/310#issuecomment-1236796564"
                },
                {
                    "id": "IC_kwDODheSms5LDuko",
                    "body": "I'll close this in favor of #173.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-27T09:57:00Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/310#issuecomment-1259268392"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5QpC-B",
            "number": 315,
            "title": "Supabase inner join not working with Typescript.",
            "body": "```\r\nconst { data, error } = await supabase<Messages>\r\n  .from('messages')\r\n  .select('*, users!inner(*)')\r\n  .eq('users.username', 'Jane')\r\n```\r\nthis shows Type error at `users.username`",
            "author": {
                "login": "roker15"
            },
            "state": "OPEN",
            "createdAt": "2022-08-27T03:59:02Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/315",
            "comments": [
                {
                    "id": "IC_kwDODheSms5KAqEv",
                    "body": "Sorry for the late reply. Can you try this with `@supabase/supabase-js@rc`? We'll release this as v2 soon - v1 likely won't be updated from then on.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-09T08:45:16Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/315#issuecomment-1241686319"
                },
                {
                    "id": "IC_kwDODheSms5KArMF",
                    "body": "> Sorry for the late reply. Can you try this with `@supabase/supabase-js@rc`? We'll release this as v2 soon - v1 likely won't be updated from then on.\r\n\r\nWhat is rc? When u releasing v2",
                    "author": {
                        "login": "roker15"
                    },
                    "createdAt": "2022-09-09T08:49:36Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/315#issuecomment-1241690885"
                },
                {
                    "id": "IC_kwDODheSms5KAr39",
                    "body": "It's the release candidate for the new version: https://supabase.com/docs/reference/javascript/next/release-notes\r\n\r\nCurrent plan is to release v2 next week.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-09T08:52:12Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/315#issuecomment-1241693693"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5RHnSH",
            "number": 317,
            "title": "Type error when ordering by a foreign column",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nA type error is shown if trying to order by a foreign table.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n```ts\r\nlet baseQuery = getSupabaseClient()\r\n      .from<AuthorTypeWithBooks>(\"author\")\r\n      .select(\"*, books:book!authorId!inner(*)\")\r\n      .order(\"title\", { foreignTable: \"book\" });\r\n```\r\n\r\n=> `TS2345: Argument of type '\"title\"' is not assignable to parameter of type 'keyof AuthorType | \"books\"'.`\r\n\r\nRelevant type definitions:\r\n```ts\r\nexport type AuthorTypeWithBooks = AuthorType & {\r\n  books?: BookType[];\r\n};\r\n\r\nexport type AuthorType = {\r\n  id?: string;\r\n  name?: string;\r\n};\r\n\r\nexport type BookType = {\r\n  id?: string;\r\n  authorId?: string;\r\n  title?: string;\r\n};\r\n```\r\n## Expected behavior\r\n\r\nNo type error occurs.\r\n\r\n## Screenshots\r\n\r\nNot applicable.\r\n\r\n## System information\r\n\r\n- OS: Windows\r\n- Browser (if applies): chrome\r\n- Version of supabase-js: 1.35.6\r\n- Version of Node.js: v16.13.0\r\n\r\n## Additional context\r\n\r\nIt is possible to get around this with a workaround injecting `title` into the type:\r\n```ts\r\nlet baseQuery = getSupabaseClient()\r\n      .from<AuthorTypeWithBooks & { title: string }>(\"author\")\r\n      .select(\"*, books:book!authorId!inner(*)\")\r\n      .order(\"title\", { foreignTable: \"book\" });\r\n```\r\n",
            "author": {
                "login": "jojomatik"
            },
            "state": "OPEN",
            "createdAt": "2022-09-03T19:37:56Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/317",
            "comments": [
                {
                    "id": "IC_kwDODheSms5Jtqn4",
                    "body": "Can you do it with `@supabase/supabase-js@rc`? We'll be releasing it as `@2` in a few weeks. `@supabase/supabase-js@1` likely won't be updated anymore.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-05T08:42:12Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/317#issuecomment-1236707832"
                },
                {
                    "id": "IC_kwDODheSms5KDo1L",
                    "body": "Thanks for the quick reply. I haven't found the time to test yet and am going on vacation, I'll try to take a look afterwards",
                    "author": {
                        "login": "jojomatik"
                    },
                    "createdAt": "2022-09-09T21:01:26Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/317#issuecomment-1242467659"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5RKJzG",
            "number": 318,
            "title": "Allow overriding default schema in `from` and `rpc`",
            "body": "# Feature request\r\n> _This request was originally filed at https://github.com/supabase-community/supabase-flutter/issues/206_\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nCurrently it's only possible to use a single schema -- i.e. the one passed to the client upon instantiation.\r\n\r\n## Describe the solution you'd like\r\n\r\nIn some cases, I would like to run a query or invoke an rpc on a different schema than the one given to the client initially such as:\r\n\r\n```ts\r\nconst client = PostgrestClient('url', {schema: 'public'});\r\n\r\n// some where else in the app\r\nconst { data, error } = await supabase.from('table_name', 'schema_name' ).select()\r\n// or\r\nconst { data, error } = await supabase.rpc('function_name', 'another_schema_name')\r\n```\r\n\r\nIn both cases, if no schema is given, then the default schema from the client is used. \r\n\r\n## Describe alternatives you've considered\r\n\r\nCreating multiple clients (one per schema) seems like the only option but it'd be much easier and cleaner to use the same client. \r\n",
            "author": {
                "login": "osaxma"
            },
            "state": "CLOSED",
            "createdAt": "2022-09-05T08:53:55Z",
            "closedAt": "2022-09-05T09:53:37Z",
            "url": "https://github.com/supabase/postgrest-js/issues/318",
            "comments": [
                {
                    "id": "IC_kwDODheSms5Jt2er",
                    "body": "Does this look like what you want? https://github.com/supabase/postgrest-js/issues/280",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-05T09:26:42Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/318#issuecomment-1236756395"
                },
                {
                    "id": "IC_kwDODheSms5Jt9tl",
                    "body": "@soedirgo yeah I believe the same with different proposed solution(s) ... I'll close this and follow up there..\r\n\r\nThanks \ud83d\ude4f ",
                    "author": {
                        "login": "osaxma"
                    },
                    "createdAt": "2022-09-05T09:53:36Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/318#issuecomment-1236786021"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5RM5LR",
            "number": 319,
            "title": "Auto convert to JS `BigInt` when numbers are not safe integer",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nA clear and concise description of what the bug is.\r\ntype overflow bigint, seems that the client lib cannot handle bigint which causes some unexpected behaviour (overflow?)\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. SQL\r\n`create table test (\r\n  myfield int8\r\n);\r\ninsert into test (myfield) values (23849208278400758)`\r\n2.  JS\r\n\r\n```\r\nimport { createClient } from '@supabase/supabase-js'\r\nconst supabaseUrl: string = process.env.SUPABASE_URL ?? ''\r\nconst supabaseKey: string = process.env.SUPABASE_KEY ?? '' \r\nsupabase = createClient(supabaseUrl, supabaseKey)\r\n  console.log(\r\n    await supabase\r\n      .from('test')\r\n      .select('myfield')\r\n      .eq('myfield', '23849208278400758') // quotes->string as the number wont fit in 32bit mem);\r\n  ); \r\n```\r\n## Expected behavior\r\n\r\nexpected result to be 238492082784007**58**  or \"238492082784007**58**\" (automatic type conversion to prevent overflows\r\nobserved result  238492082784007**60**\r\n\r\n## Screenshots\r\n![image](https://user-images.githubusercontent.com/5968968/188461185-af4b82ab-e375-4480-86f4-6ff1dcd7dc92.png)\r\n\r\n\r\n## System information\r\n\r\n- OS: [Windows]\r\n- Browser (if applies chrome\r\n- Version of supabase-js: 1.35.6\"\r\n\r\n## Additional context\r\n\r\nnote: causes difficult to find issues\r\nnote: root cause of issue unknown (dep?).\r\nquasar v2",
            "author": {
                "login": "unknown1337"
            },
            "state": "OPEN",
            "createdAt": "2022-09-05T12:59:36Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/319",
            "comments": [
                {
                    "id": "IC_kwDODheSms5JxkRW",
                    "body": "See also https://github.com/supabase/postgrest-js/issues/273:\r\n\r\n> This is because numbers in JS are float64, so if your number is more than Number.MAX_SAFE_INTEGER === 9007199254740991 it won't be represented correctly.\r\n> An alternative is to cast it to text: supabase.from(table_name).select('id, num::text') and manually convert them to BigInt.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-06T06:52:23Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/319#issuecomment-1237730390"
                },
                {
                    "id": "IC_kwDODheSms5LDcCa",
                    "body": "Repurposing this issue to do auto-conversion to JS `BigInt` when numbers are `!Number.isSafeInteger(x)`",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-27T08:52:25Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/319#issuecomment-1259192474"
                },
                {
                    "id": "IC_kwDODheSms5cZYYh",
                    "body": "Postgrest is returning the number correctly in the `fetch` response:\r\n\r\n```ts\r\n[{\"id\":349506210296369153}]\r\n```\r\n\r\nBut it loses precision when the `response.text()` goes through `JSON.parse` in this library:\r\n\r\n```ts\r\n[{ id: 349506210296369150 }]\r\n```\r\n\r\nThis is the offending line: https://github.com/supabase/postgrest-js/blob/878034b686bcde9abd8fe9be34e393ef90c22f64/src/PostgrestBuilder.ts#L95\r\n\r\nWould you be open to adopting a different JSON parser that can transform ints bigger than `MAX_SAFE_INTEGER` or smaller than `MIN_SAFE_INTEGER` into `BigInt`s or `string`s? For example, [json-bigint](https://www.npmjs.com/package/json-bigint)?\r\n\r\nIt could be an opt-in feature per-request with a flag on `PostgrestBuilder`, though it seems safer out the box for the default behaviour to be to return correct values rather than truncated (wrong!) ones.\r\n\r\n(Note, eventually this should become possible in the web platform itself without having to use a whole external JSON parser, instead using just `reviver`! see https://github.com/tc39/proposal-json-parse-with-source)\r\n\r\nMore conversation here: https://github.com/PostgREST/postgrest/issues/498\r\n\r\nI imagine the `supabase gen types` command would need to be updated to change the generated TypeScript types to `number | string` or `number | BigInt` also.\r\n\r\nHope that helps!",
                    "author": {
                        "login": "bensalilijames"
                    },
                    "createdAt": "2023-05-16T18:24:42Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/319#issuecomment-1550157345"
                },
                {
                    "id": "IC_kwDODheSms5ccgZY",
                    "body": "> Would you be open to adopting a different JSON parser that can transform ints bigger than MAX_SAFE_INTEGER or smaller than MIN_SAFE_INTEGER into BigInts or strings?\r\n\r\nYes, but we consider this a breaking change so this will have to wait until the next major version.\r\n\r\nThe TC39 proposal looks interesting - thanks for sharing!",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-05-17T08:30:07Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/319#issuecomment-1550976600"
                },
                {
                    "id": "IC_kwDODheSms5cwiI-",
                    "body": "Ideally you would decide if you want to get `bigint` back always or `number | bigint` if you are going to offer both.  ",
                    "author": {
                        "login": "bradennapier"
                    },
                    "createdAt": "2023-05-21T17:05:27Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/319#issuecomment-1556226622"
                },
                {
                    "id": "IC_kwDODheSms5p_rqO",
                    "body": "Just want to point out that if you cast a bigint to text as recommended in https://github.com/supabase/postgrest-js/issues/273#issuecomment-1142480261 you end up breaking TS as seen in https://github.com/supabase/postgrest-js/issues/370",
                    "author": {
                        "login": "afk-mario"
                    },
                    "createdAt": "2023-10-25T00:55:30Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/319#issuecomment-1778301582"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5RSBUO",
            "number": 320,
            "title": "rpc: Setting the transaction isolation level",
            "body": "Hi, is it possible to set the transaction isolation level instead doing something like this?\r\n\r\n```plpgsql\r\n-- this comes with drawbacks, such as not being able to COMMIT or ROLLBACK\r\ncreate or replace procedure foo_proc()\r\nset default_transaction_isolation = 'serializable'\r\nas $$\r\nbegin\r\n    insert into tab1 values (1);\r\nend;\r\n$$ language plpgsql;\r\n```\r\n\r\nIn my particular case I need to use serializable transactions for a non-trivial use case. Better yet, is there a way to wrap any statements with a classic `BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE; <statements>; COMMIT;` transaction and set the isolation level outside?\r\n\r\n_Originally posted by @ricogallo in https://github.com/supabase/supabase/discussions/8798_\r\n\r\n---\r\n\r\nhttps://github.com/PostgREST/postgrest/issues/2468",
            "author": {
                "login": "steve-chavez"
            },
            "state": "CLOSED",
            "createdAt": "2022-09-06T18:42:57Z",
            "closedAt": "2023-05-20T01:23:16Z",
            "url": "https://github.com/supabase/postgrest-js/issues/320",
            "comments": [
                {
                    "id": "IC_kwDODheSms5J8V-J",
                    "body": "Maybe we can have an interface similar to what edgedb has done?\r\n\r\n```js\r\nconst email = \"timmy@edgedb.com\"\r\n\r\nawait client.transaction(async tx => {\r\n  await tx.execute(\r\n    `insert User { email := <str>$email }`,\r\n    { email },\r\n  )\r\n\r\n  await sendWelcomeEmail(email);\r\n\r\n  await tx.execute(\r\n    `insert LoginHistory {\r\n      user := (select User filter .email = <str>$email),\r\n      timestamp := datetime_current()\r\n    }`,\r\n    { email },\r\n  )\r\n})\r\n```\r\n\r\nOr maybe a more supabase-y approach might be:\r\n```js\r\nconst { data, error } = await supabase\r\n  .begin({ isolation: 'serializable', access: 'read-write' } )\r\n  .from('cities')\r\n  .insert([{ name: 'The Shire', country_id: 554 }])\r\n  .insert([{ name: 'Gondor', country_id: 555 }])\r\n  .savePoint()\r\n  .insert([{ name: 'Mordor', country_id: 556 }])\r\n  .commit();\r\n```\r\n",
                    "author": {
                        "login": "ricogallo"
                    },
                    "createdAt": "2022-09-08T10:55:00Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/320#issuecomment-1240555401"
                },
                {
                    "id": "IC_kwDODheSms5ctbRZ",
                    "body": "Just to point out this is possible on PostgREST v11 https://postgrest.org/en/stable/references/transactions.html#isolation-lvl. \r\n\r\nFor this you have to mark the SQL function with `default_transaction_isolation`.\r\n\r\n```sql\r\nCREATE OR REPLACE FUNCTION myfunc()\r\nRETURNS text as $$\r\n  SELECT 'hello';\r\n$$\r\nLANGUAGE SQL\r\nSET default_transaction_isolation TO 'serializable';\r\n```\r\n\r\nIt's also possible to change the isolation for all the role's requests.\r\n\r\nv11 should be deployed soon. Please subscribe [here](https://github.com/supabase/postgres/pull/628) for knowing when it's ready.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-05-20T01:23:16Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/320#issuecomment-1555412057"
                },
                {
                    "id": "IC_kwDODheSms5ctffU",
                    "body": "Thanks for your effort!",
                    "author": {
                        "login": "ricogallo"
                    },
                    "createdAt": "2023-05-20T02:20:22Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/320#issuecomment-1555429332"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5RSmYB",
            "number": 321,
            "title": "Bulk Delete",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nI want to bulk delete everything in the table, but it needs a where clause that I cannot fill with an empty clause.\r\n\r\n## Describe the solution you'd like\r\n\r\nA bulkdelete() function or a way to have an empty clause.\r\n\r\n## Describe alternatives you've considered\r\n\r\nI tried having different matching ids with regex or other things to delete the whole table content\r\n\r\n## Additional context\r\n\r\nNo Context.\r\n",
            "author": {
                "login": "ThijsDeR"
            },
            "state": "CLOSED",
            "createdAt": "2022-09-06T20:15:33Z",
            "closedAt": "2022-09-19T09:24:50Z",
            "url": "https://github.com/supabase/postgrest-js/issues/321",
            "comments": [
                {
                    "id": "IC_kwDODheSms5J1I8w",
                    "body": "> I want to bulk delete everything in the table, but it needs a where clause that I cannot fill with an empty clause.\r\n\r\nCould you share the error message you get? \r\n\r\nThis seems related to https://github.com/eradman/pg-safeupdate, but want to be certain.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-09-06T21:26:20Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/321#issuecomment-1238667056"
                },
                {
                    "id": "IC_kwDODheSms5J2CTZ",
                    "body": "If you're *really* sure about deleting all rows in the table, you can do:\r\n```ts\r\nawait supabase\r\n  .from('t')\r\n  .delete()\r\n  .eq('id', 42)\r\nawait supabase\r\n  .from('t')\r\n  .delete()\r\n  .neq('id', 42)\r\n```",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-07T04:43:19Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/321#issuecomment-1238901977"
                },
                {
                    "id": "IC_kwDODheSms5J2Gi_",
                    "body": "Limiting the amount of deleted rows could also be an option: https://postgrest.org/en/stable/api.html#limited-updates-deletions\r\n\r\nNot sure if safeupdate will allow that.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-09-07T05:20:09Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/321#issuecomment-1238919359"
                },
                {
                    "id": "IC_kwDODheSms5KjWX_",
                    "body": "To delete all rows in one request:\r\n```ts\r\nawait supabase\r\n  .from('t')\r\n  .delete()\r\n  .or('id.eq.0,id.neq.0')\r\n```\r\nAdjust according to your column name and type. Basically you just need filters that always evaluates to true.\r\n\r\nI'll close this for now, but feel free to reopen if that doesn't work.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-19T09:24:50Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/321#issuecomment-1250780671"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5RW8yl",
            "number": 323,
            "title": "Add support for relationship naming to avoid postgres from throwing multiple relationships error",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nI am a hasura user. I migrated from that to supabase. My biggest gripe yet with supabase is that there is no way that i can \"explicitly\" set what kind of relationship two tables have. In Hasura console, i not only could name the relationship but also decide individually, which one was which. This way, although complex, i still had the ability to fetch things like this : \r\n\r\n```gql\r\narticles {\r\n authors_to_articles {\r\n name \r\n}\r\nbookmarks_to_articles {\r\n  author {\r\n  name\r\n }\r\n}\r\n```\r\n\r\n\"bookmarks_to_articles\" and \"authors_to_articles\" are relationship names, not table names.  bookmarks and articles, both are linked to authors through these relationships. This confuses postgres since there is multiple relationship in same query , by default and i have witnessed it in supabase. there is a workround mentioned in documentation but i bet this would be a killer feature for enthusiasts.\r\n\r\n## Describe the solution you'd like\r\n\r\nallow us to specify name for relationship and its type (one to many, etc ) when we mention the table and column to link for foreign key.\r\n\r\n## Describe alternatives you've considered\r\n\r\nHasura, Directus both offer this in their admin panels respectively.\r\n",
            "author": {
                "login": "dukesx"
            },
            "state": "OPEN",
            "createdAt": "2022-09-07T15:45:58Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/323",
            "comments": [
                {
                    "id": "IC_kwDODheSms5J4-_g",
                    "body": "> allow us to specify name for relationship and its type (one to many, etc ) when we mention the table and column to link for foreign key.\r\n\r\nThis is possible with https://postgrest.org/en/stable/api.html#computed-relationships. You can specify the cardinality, join conditions and the name of the relationship with plain SQL functions.\r\n\r\n(The above feature is not yet deployed in Supabase)",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-09-07T17:22:00Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/323#issuecomment-1239674848"
                },
                {
                    "id": "IC_kwDODheSms5J5AiU",
                    "body": "> \"bookmarks_to_articles\" and \"authors_to_articles\" are relationship names, not table names. bookmarks and articles, both are linked to authors through these relationships.\r\n> This confuses postgres since there is multiple relationship in same query\r\n\r\nAdditionally, right now you can rename a foreign key and use it as a relationship name, this also avoids errors as the relationship is unambiguous. See https://postgrest.org/en/stable/api.html#target-disambiguation",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-09-07T17:28:56Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/323#issuecomment-1239681172"
                },
                {
                    "id": "IC_kwDODheSms5J5BX6",
                    "body": "> > allow us to specify name for relationship and its type (one to many, etc ) when we mention the table and column to link for foreign key.\r\n> \r\n> This is possible with https://postgrest.org/en/stable/api.html#computed-relationships. You can specify the cardinality, join conditions and the name of the relationship with plain SQL functions.\r\n> \r\n> (The above feature is not yet deployed in Supabase)\r\n\r\nyes that is an option but thats a real toll on development when the number of tables and features for your apps grow. I was hoping that you guys would have an ace up your sleeve, maybe consider checking out with how Hasura did this. I am building a blog like dev.to and i have just added a bookmarks table and this has now become a menace to handle postgres's confusions. Consider, that this is a very small scale i am working on, imagine if you guys could come up with an easier, friendlier, GUI based way like Hasura has, maybe this will save alot of people, alot of work. ",
                    "author": {
                        "login": "dukesx"
                    },
                    "createdAt": "2022-09-07T17:32:47Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/323#issuecomment-1239684602"
                },
                {
                    "id": "IC_kwDODheSms5J5Bip",
                    "body": "> > \"bookmarks_to_articles\" and \"authors_to_articles\" are relationship names, not table names. bookmarks and articles, both are linked to authors through these relationships.\r\n> > This confuses postgres since there is multiple relationship in same query\r\n> \r\n> Additionally, right now you can rename a foreign key and use it as a relationship name, this also avoids errors as the relationship is unambiguous. See https://postgrest.org/en/stable/api.html#target-disambiguation\r\n\r\nYes,  i have tried this and it doesn't help. Postgres is too intelligent to still figure out this.",
                    "author": {
                        "login": "dukesx"
                    },
                    "createdAt": "2022-09-07T17:33:31Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/323#issuecomment-1239685289"
                },
                {
                    "id": "IC_kwDODheSms5J5CpK",
                    "body": "> Yes, i have tried this and it doesn't help. Postgres is too intelligent to still figure out this.\r\n\r\nHere you mean that the SQL interface for renaming the foreign key is complex? Would a UI that allows renaming the foreign key relationships help?",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-09-07T17:38:48Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/323#issuecomment-1239689802"
                },
                {
                    "id": "IC_kwDODheSms5J5C7x",
                    "body": "> > Yes, i have tried this and it doesn't help. Postgres is too intelligent to still figure out this.\r\n> \r\n> Here you mean that the SQL interface for renaming the foreign key is complex? Would a UI that allows renaming the foreign key relationships help?\r\n\r\nNot at all, what i mean is, that i have tried this technique and it still threw me the same error. ",
                    "author": {
                        "login": "dukesx"
                    },
                    "createdAt": "2022-09-07T17:40:18Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/323#issuecomment-1239690993"
                },
                {
                    "id": "IC_kwDODheSms5J5ENz",
                    "body": "> Not at all, what i mean is, that i have tried this technique and it still threw me the same error.\r\n\r\nCould you share the error and the snippet you used?",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-09-07T17:46:26Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/323#issuecomment-1239696243"
                },
                {
                    "id": "IC_kwDODheSms5J5fC6",
                    "body": "> > \"bookmarks_to_articles\" and \"authors_to_articles\" are relationship names, not table names. bookmarks and articles, both are linked to authors through these relationships.\n> > This confuses postgres since there is multiple relationship in same query\n> \n> Additionally, right now you can rename a foreign key and use it as a relationship name, this also avoids errors as the relationship is unambiguous. See https://postgrest.org/en/stable/api.html#target-disambiguation\n\nPardon if I am asking the wrong question, but when I say relationship name, you do understand I meant constraint name? If not then I do apologise for the confusion. I mean we need raw sql to rename but in hasura we could do in GUI. ",
                    "author": {
                        "login": "dukesx"
                    },
                    "createdAt": "2022-09-07T19:50:13Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/323#issuecomment-1239806138"
                },
                {
                    "id": "IC_kwDODheSms5KlOnu",
                    "body": "Sorry for the late reply. Yes, here I meant you can rename the constraint \r\n\r\n```sql\r\nALTER TABLE orders\r\n   RENAME CONSTRAINT orders_billing_address_id_fkey  TO billing_address;\r\n```\r\n\r\nAnd then use it as\r\n\r\n```js\r\nconst { data, error } = await supabase.from('orders').select(`\r\n    name,\r\n    billing_address (\r\n      name\r\n    )\r\n  `)\r\n```",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-09-19T16:45:08Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/323#issuecomment-1251273198"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5RaHY4",
            "number": 324,
            "title": "Error is empty array when requested range is not satisfiable",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen using the `range()` filter on a select query, it is possible that the range will not be satisfiable. In that case the fetch library throws an error because of status code 416. This error is logged to the console, but not returned in the `error` object of the response, which is just an empty array.\r\n\r\nAlso, the TypeScript types do not reflect that this is a possibility.\r\n\r\n## To Reproduce\r\n\r\nThis is rougly my code:\r\n\r\n```typescript\r\ntry {\r\n  const { data, error, count } = await supabase\r\n    .from('games')\r\n    .select('*', { count: 'exact' })\r\n    .order(filter.sortBy ? filter.sortBy : 'updated_at', { ascending: filter.sortOrder === 'ascending' })\r\n    .range(filter.pageSize * (filter.page - 1), filter.pageSize * filter.page - 1);\r\n\r\n  if (error) {\r\n    console.error('[Games] Error during fetch', error);\r\n  } else {\r\n    this.games = data || [];\r\n    this.totalGamesCount = count || 0;\r\n  }\r\n} catch (error) {\r\n  console.error('[Games] Error during fetch', error);\r\n}\r\n```\r\n\r\n## Expected behavior\r\n\r\nIf the range is out-of-bounds, that should be properly reported in the `error` object.\r\n\r\n## Screenshots\r\n\r\nThe console output in such a situation:\r\n\r\n![image](https://user-images.githubusercontent.com/15160542/189072943-3d4c80cd-38bb-4059-9a8d-59b7cc8bb3a2.png)\r\n\r\n## System information\r\n\r\n- Browser: Brave\r\n- Version of supabase-js: 2.0.0-rc.9\r\n- Version of Node.js: v16.16.0\r\n",
            "author": {
                "login": "Curetix"
            },
            "state": "CLOSED",
            "createdAt": "2022-09-08T08:37:59Z",
            "closedAt": "2022-09-15T23:43:16Z",
            "url": "https://github.com/supabase/postgrest-js/issues/324",
            "comments": [
                {
                    "id": "IC_kwDODheSms5J75rs",
                    "body": "Thanks for reporting this, seems like a similar issue to #295. I'll close this in favor of that one.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-08T09:06:40Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/324#issuecomment-1240439532"
                },
                {
                    "id": "IC_kwDODheSms5J_UGq",
                    "body": "This is different from #295 because there is a error message on the response body coming from the server.\r\n\r\nI think we need to correct something on `postgrest-js` side.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-09-08T23:28:44Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/324#issuecomment-1241334186"
                },
                {
                    "id": "IC_kwDODheSms5KAWny",
                    "body": "There's no error message in this case though:\r\n```\r\n\u276f xhs get [...].supabase.co/rest/v1/t 'Authorization:Bearer [...]' 'apikey:[...]' 'Prefer:count=exact' offset==1000\r\nHTTP/2.0 416 Range Not Satisfiable\r\naccess-control-allow-origin: *\r\nalt-svc: h3=\":443\"; ma=86400, h3-29=\":443\"; ma=86400\r\ncf-cache-status: DYNAMIC\r\ncf-ray: 747e31fdab2a18ac-SIN\r\ncontent-location: /t?offset=1000\r\ncontent-profile: public\r\ncontent-range: */5\r\ncontent-type: application/json; charset=utf-8\r\ndate: Fri, 09 Sep 2022 07:26:22 GMT\r\nsb-gateway-version: 1\r\nserver: cloudflare\r\nvary: Accept-Encoding\r\nvia: kong/2.8.1\r\nx-kong-proxy-latency: 1\r\nx-kong-upstream-latency: 4\r\n\r\n[]\r\n```\r\n\r\nThis however does work properly:\r\n```\r\n\u276f xhs get [...].supabase.co/rest/v1/t 'Authorization:Bearer [...]' 'apikey:[...]' 'Prefer:count=exact' limit==-1\r\nHTTP/2.0 416 Range Not Satisfiable\r\naccess-control-allow-origin: *\r\nalt-svc: h3=\":443\"; ma=86400, h3-29=\":443\"; ma=86400\r\ncf-cache-status: DYNAMIC\r\ncf-ray: 747e36b39e8318ac-SIN\r\ncontent-type: application/json; charset=utf-8\r\ndate: Fri, 09 Sep 2022 07:29:35 GMT\r\nsb-gateway-version: 1\r\nserver: cloudflare\r\nvary: Accept-Encoding\r\nvia: kong/2.8.1\r\nx-kong-proxy-latency: 0\r\nx-kong-upstream-latency: 1\r\n\r\n{\r\n    \"code\": \"PGRST103\",\r\n    \"details\": null,\r\n    \"hint\": null,\r\n    \"message\": \"HTTP Range error\"\r\n}\r\n```",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-09T07:28:02Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/324#issuecomment-1241606642"
                },
                {
                    "id": "IC_kwDODheSms5KNMra",
                    "body": "@steve-chavez should we keep this one open? Or should we track it on the other issue and wait for upstream fix?",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-13T06:48:33Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/324#issuecomment-1244973786"
                },
                {
                    "id": "IC_kwDODheSms5KQCtw",
                    "body": "This one is also an upstream fix(different from the other issue), it's close to being merged https://github.com/PostgREST/postgrest/pull/2472\r\n\r\n**Edit**: Merged :rocket: ",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-09-13T17:26:04Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/324#issuecomment-1245719408"
                },
                {
                    "id": "IC_kwDODheSms5KgsvC",
                    "body": "> This one is also an upstream fix(different from the other issue), it's close to being merged [PostgREST/postgrest#2472](https://github.com/PostgREST/postgrest/pull/2472)\r\n> \r\n> **Edit**: Merged \ud83d\ude80\r\n\r\nThanks for the fix!",
                    "author": {
                        "login": "Curetix"
                    },
                    "createdAt": "2022-09-17T14:57:32Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/324#issuecomment-1250085826"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5RcCPO",
            "number": 325,
            "title": "Support bulk update with array of partial items",
            "body": "I am able to bulk update items (even without a filter) with an array of partial items.\r\nWorks fine but I had to cast my values `.update(values as unknown as Partial<T>)` while they are actually `Partial<T>[]`.\r\nLooking in the source code, it seems like `update` accept only a value at a time.",
            "author": {
                "login": "aiibe"
            },
            "state": "OPEN",
            "createdAt": "2022-09-08T13:12:28Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/325",
            "comments": [
                {
                    "id": "IC_kwDODheSms5KAqhS",
                    "body": "Does this work with `@supabase/postgrest-js@rc` or `@supabase/supabase-js@rc`? We'll be releasing these as new versions soon.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-09T08:46:58Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/325#issuecomment-1241688146"
                },
                {
                    "id": "IC_kwDODheSms5KAvzi",
                    "body": "@soedirgo Haven't test with `@supabase/postgrest-js@rc`. I used `@supabase/postgrest-js` latest release.",
                    "author": {
                        "login": "aiibe"
                    },
                    "createdAt": "2022-09-09T09:07:42Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/325#issuecomment-1241709794"
                },
                {
                    "id": "IC_kwDODheSms5LDksN",
                    "body": "~Actually, rereading this again, does bulk update actually work for you right now? AFAIK this is still a WIP upstream: https://github.com/PostgREST/postgrest/issues/1959~\r\n\r\n~cc @steve-chavez~\r\n\r\nI should've looked more closely :) from the same issue: https://github.com/PostgREST/postgrest/issues/1959#issuecomment-925385920\r\n\r\nSo bulk update is actually not supported atm.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-27T09:21:37Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/325#issuecomment-1259227917"
                },
                {
                    "id": "IC_kwDODheSms5LDtsp",
                    "body": "Thought we had an issue tracking this - sorry about that! I'll repurpose this issue to track the bulk update feature.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-27T09:53:47Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/325#issuecomment-1259264809"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5RyGla",
            "number": 327,
            "title": "[supabase-js 2.0] Passing a string to select() query that isnt \"*\" or leaving it as empty causes it to return a genericStringError",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen doing a select query with the supabase-js api, passing any string into the select query of an api call other than \"*\" or leaving it empty changes the return type to be genericStringError[]\r\n\r\n\r\n\r\n## To Reproduce\r\n\r\nDo a supabase api call and try to put in any random string as a parameter for the select() query.\r\n\r\n## Expected behavior\r\n\r\nReturn type should still stay as any[] and not be changed to genericStringError[]\r\n\r\n## Screenshots\r\n\r\n![image](https://user-images.githubusercontent.com/111782608/190016987-18a68bbc-3542-4d3d-8c0d-c34c5e039972.png)\r\n\r\n![image](https://user-images.githubusercontent.com/111782608/190017127-f92e1df9-5dec-46c2-8c8b-e949bcb3ecce.png)\r\n\r\n\r\n## System information\r\n\r\nMacOS\r\nSupabase-js 2.0\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "devlukedreamstage"
            },
            "state": "CLOSED",
            "createdAt": "2022-09-13T22:01:16Z",
            "closedAt": "2022-09-14T03:44:05Z",
            "url": "https://github.com/supabase/postgrest-js/issues/327",
            "comments": [
                {
                    "id": "IC_kwDODheSms5KR2ou",
                    "body": "See https://github.com/supabase/supabase-js/issues/551#issuecomment-1246189359 for explanation.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-14T03:44:05Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/327#issuecomment-1246194222"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5SjgG7",
            "number": 331,
            "title": "Docs Link Not Working and Docs Folder Empty",
            "body": "This repository points to docs in this folder https://supabase.github.io/postgrest-js/ which are empty.  It should point to https://supabase.github.io/postgrest-js/v1/ for now until you guys get v2 up.\r\n\r\nJ\r\n\r\n\r\n",
            "author": {
                "login": "jdgamble555"
            },
            "state": "CLOSED",
            "createdAt": "2022-09-25T14:03:25Z",
            "closedAt": "2023-08-03T13:53:42Z",
            "url": "https://github.com/supabase/postgrest-js/issues/331",
            "comments": [
                {
                    "id": "IC_kwDODheSms5K9aH3",
                    "body": ":+1: Thanks for the heads up!",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-26T07:35:30Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/331#issuecomment-1257611767"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5SljGA",
            "number": 332,
            "title": "Group By Method",
            "body": "# Feature request\r\n\r\nThis seems like a basic feature request I thought would already exist, but apparently not.\r\n\r\nIt would be nice to be able to say:\r\n\r\n```sql\r\nSELECT COUNT(*), PLAYER FROM GAMES GROUP BY PLAYER\r\n```\r\n\r\nTo supabase js:\r\n\r\n```typescript\r\nconst { data, error } = await supabase\r\n        .from('games')\r\n        .select('count(*), player'),group('player');\r\n```\r\n\r\nThis would need to work with nested values as well and should be repeatable.\r\n\r\nSeems like a decent request.\r\n\r\nJ\r\n",
            "author": {
                "login": "jdgamble555"
            },
            "state": "CLOSED",
            "createdAt": "2022-09-26T02:34:36Z",
            "closedAt": "2022-09-26T07:33:50Z",
            "url": "https://github.com/supabase/postgrest-js/issues/332",
            "comments": [
                {
                    "id": "IC_kwDODheSms5K9ZKf",
                    "body": "Hey @jdgamble555! This seems related to https://github.com/supabase/postgrest-js/issues/206, so closing this in favor of that one. It needs an upstream patch outside of the client lib.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-26T07:33:50Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/332#issuecomment-1257607839"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5So0QY",
            "number": 333,
            "title": "Sorting by foreignTable column dont work",
            "body": "# Bug report\r\n\r\nSorting an table with an foreignTable table column should work ([Doc example](https://supabase.com/docs/reference/javascript/order#with-embedded-resources))\r\n\r\nconst { data, error } = await supabase\r\n  .from('cities')\r\n  .select('name', 'country_id')\r\n  .order('id', { ascending: false })\r\n\r\nconst { data, error } = await supabase\r\n  .from('countries')\r\n  .select('name, cities(name)')\r\n  .eq('name', 'United States')\r\n  .order('name', {foreignTable: 'cities', ascending: false})\r\n\r\n## Describe the bug\r\n\r\nSorting an table with foreignTable columns dont work - Query result order is not changed.\r\n\r\n`const { data, error } = await supabase\r\n  .from('subscriptions')\r\n  .select('*, users(*)')\r\n  .order('firstname', {foreignTable: 'users', ascending: false })`\r\n\r\n`const { data, error } = await supabase\r\n  .from('subscriptions')\r\n  .select('*, users(*)')\r\n  .order('firstname', {foreignTable: 'users', ascending: true })`\r\n\r\n## To Reproduce\r\n\r\n1. Create table \"users\" (id[PK], firstname)\r\n`[\r\n{\r\nid: 1, firstname: \"Adam\"\r\n},\r\n{\r\nid: 1, firstname: \"Berta\"\r\n}\r\n]`\r\n3. Create table \"subscriptions\"  (id[PK], data, user_id[FK of users.id])\r\n`[\r\n{\r\nid: 1 , user_id: 1\r\n},\r\n{\r\nid: 2, user_id: 2\r\n},\r\n]`\r\n5. Query via supabase-js\r\n`\r\nconst { data, error } = await supabase\r\n  .from('subscriptions')\r\n  .select('*, users(*)')\r\n  .order('firstname', {foreignTable: 'users', ascending: false })\r\n`\r\nand \r\n`\r\nconst { data, error } = await supabase\r\n  .from('subscriptions')\r\n  .select('*, users(*)')\r\n  .order('firstname', {foreignTable: 'users', ascending: true })\r\n`\r\n\r\n\r\nResults are in the same order - no sorting by table users column \"firstname\" ascending or descending (see screenshots)\r\n\r\n## Expected behavior\r\n\r\nThe query result of the subscription table should be sorted by the foreign table \"users\" column \"firstname\" (ascending or descending)\r\n\r\n\r\n## Screenshots\r\n(The tablenames in the screens are prefixed for demo perps.)\r\n\r\nPayload with ascending false\r\n![image](https://user-images.githubusercontent.com/4113182/182946804-7ac82ea3-99ba-456f-8782-190cb5c219fd.png)\r\n\r\nResponse with ascending false\r\n![image](https://user-images.githubusercontent.com/4113182/182947688-ce0aa425-e27b-4afb-86f2-b458074673e5.png)\r\n\r\n---\r\n\r\nPayload with ascending true\r\n\r\n![image](https://user-images.githubusercontent.com/4113182/182946854-7b84cb83-4000-418c-a6ae-633100f1d3e5.png)\r\n\r\nResponse with ascending true\r\n![image](https://user-images.githubusercontent.com/4113182/182947749-99cec196-b1e9-4195-8ade-9cdde4aa71c8.png)\r\n\r\n## System information\r\n\r\n- OS: Mint OS\r\n- Browser Chome (lastest)\r\n- Version of supabase-js: 1.35.5\r\n- Version of Node.js: v16.13.0\r\n\r\n## Additional Informations\r\nSorting also do not work, if the foreign Table column \"firstname\" is a number\r\n\r\nPS: Sorry for my bad english\r\n",
            "author": {
                "login": "IgoPeg"
            },
            "state": "CLOSED",
            "createdAt": "2022-08-04T20:53:10Z",
            "closedAt": "2022-09-27T05:16:50Z",
            "url": "https://github.com/supabase/postgrest-js/issues/333",
            "comments": [
                {
                    "id": "IC_kwDODheSms5LCqYF",
                    "body": "Hey @IgoPeg, the ordering on foreign tables doesn't affect the ordering on parent tables at the moment. Closing this as duplicate of https://github.com/supabase/postgrest-js/issues/198.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-27T05:16:44Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/333#issuecomment-1258989061"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5So0rL",
            "number": 334,
            "title": "Whether the data return can customize the field",
            "body": "I am using the restApi of subs. The current data return format is to return data directly, but I want to return data formats like {code: 200, data: [], msg: ''}. Can I ask if the subs support user-defined return formats",
            "author": {
                "login": "LRboyz"
            },
            "state": "CLOSED",
            "createdAt": "2022-09-26T11:10:56Z",
            "closedAt": "2022-09-27T05:19:32Z",
            "url": "https://github.com/supabase/postgrest-js/issues/334",
            "comments": [
                {
                    "id": "IC_kwDODheSms5LCq2d",
                    "body": "Hey there, we don't support this at the client library level, but you should be able to use helper functions to mold the response format as you like.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-27T05:19:32Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/334#issuecomment-1258991005"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5So_bG",
            "number": 335,
            "title": "Add UUID Encode / Decode to Base58 for Friendlier URLS",
            "body": "# Feature request\r\n\r\n`398073a0-2859-4ff4-94ff-662a70cb15a0` <--> `86qJ3nXSvhBPUbmdaMwUeb`\r\n\r\nWhich one looks more URL friendly?\r\n\r\nIt would be nice if we could encode this within our supabase-js sdk.  Perhaps something like:\r\n\r\n```typescript\r\nsupabase.from('posts').select('*, author!inner(*)', { encode: ['id', 'author.id'] }).eq('id', pid);\r\n```\r\nThis could be an array or a string for the UUID type(s).  It would use these codes to convert back and forth between **BASE58**:\r\n\r\n```typescript\r\nconst DASH_REGEXP = /-/g\r\nconst BASE58 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\r\nconst BASE = BigInt(BASE58.length)\r\nconst ONE = BigInt(1)\r\nconst ZERO = BigInt(0)\r\nconst UUID_INDEXES = [0, 8, 12, 16, 20]\r\n\r\n// https://github.com/sagefy/uuid58\r\n\r\nexport function encode(uuid: string) {\r\n  try {\r\n    let b = BigInt('0x' + uuid.replace(DASH_REGEXP, ''))\r\n    let u58 = ''\r\n    do {\r\n      u58 = BASE58[b % BASE as any] + u58\r\n      b = b / BASE\r\n    } while (b > 0)\r\n    return u58\r\n  } catch (e) {\r\n    return uuid\r\n  }\r\n}\r\n\r\nexport function decode(uuid58: string) {\r\n  try {\r\n    const parts = Array.from(uuid58).map(x => BASE58.indexOf(x))\r\n    if (parts.some(inc => inc < 0)) return uuid58\r\n    const max = uuid58.length - 1\r\n    const b = parts.reduce(\r\n      (acc, inc, pos) => (acc + BigInt(inc)) * (pos < max ? BASE : ONE),\r\n      ZERO\r\n    )\r\n    const hex = b.toString(16).padStart(32, '0')\r\n    return UUID_INDEXES.map((p, i, a) => hex.substring(p, a[i + 1])).join('-')\r\n  } catch (e) {\r\n    return uuid58\r\n  }\r\n}\r\n```\r\n\r\nWe would do the same thing for decoding:\r\n\r\n```typescript\r\nsupabase.from('posts').upsert(new_data, { decode: 'id' }).select().single();\r\n```\r\n\r\nThus, friendly UUID types built-in. \r\n\r\nJ\r\n",
            "author": {
                "login": "jdgamble555"
            },
            "state": "CLOSED",
            "createdAt": "2022-09-24T20:19:51Z",
            "closedAt": "2022-09-27T09:14:50Z",
            "url": "https://github.com/supabase/postgrest-js/issues/335",
            "comments": [
                {
                    "id": "IC_kwDODheSms5LAZnv",
                    "body": "Uuh yes please this looks really interesting\n\nLike the syntax allowing for multiple fields to be used \ud83d\udc4f\n\nAlso would be amazing to have `pg_idkit` available\n\nSome discussion around the interest in shorter IDs: [discord](https://discord.com/channels/839993398554656828/1023156088654282802)",
                    "author": {
                        "login": "CanRau"
                    },
                    "createdAt": "2022-09-25T04:33:51Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/335#issuecomment-1258396143"
                },
                {
                    "id": "IC_kwDODheSms5LDfCd",
                    "body": "I don't think we'll be doing this in the client lib itself. This could be done via helper functions, e.g.:\r\n\r\n```ts\r\nconst preProcess = (data) => {\r\n  // decode id in data if exists\r\n  // return data with decoded id\r\n}\r\nconst postProcess = async (client) => {\r\n  // const { data, error } = await client\r\n  // encode id\r\n  // return { data, error }\r\n}\r\n\r\nconst { data, error } = await postProcess(\r\n  supabase.from('my_table').select()\r\n)\r\n\r\nawait supabase.from('my_table').insert(preProcess({ id: 'some-base58' }))\r\n```\r\n\r\nAlternatively if this could be done on the database side (e.g. with plv8 on a `text` primary key column) that should be preferred.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-27T09:03:12Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/335#issuecomment-1259204765"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5Swike",
            "number": 336,
            "title": "Help: `Could not find the function with a single unnamed json or jsonb parameter in the schema cache`?",
            "body": "create or replace function saveData1(voteid integer) returns text\r\n  language plpgsql\r\n  as $$\r\ndeclare\r\n  creator text;\r\nbegin\r\n  \r\n  creator := current_setting('request.headers', true)::json->>'x-real-ip';\r\n  insert into voteDetail(ip, voteid)\r\n  values (creator, saveData1.voteid);\r\n  RETURN creator;\r\nend\r\n$$;\r\n\r\nand here is the way that I am using it:\r\n```javascript\r\nconst res = await getSupabase().rpc('saveData1', { voteid: 1 });\r\nconsole.log({ data });\r\nconsole.log({ error });\r\n```\r\n\r\nIs it an issue with the database function itself? It seems odd that it would save fine, and I can view the API documentation on how to use it, however I receive an error telling me that the function can't be found?</div>",
            "author": {
                "login": "sunyf1"
            },
            "state": "CLOSED",
            "createdAt": "2022-09-27T10:33:53Z",
            "closedAt": "2022-09-28T03:11:14Z",
            "url": "https://github.com/supabase/postgrest-js/issues/336",
            "comments": [
                {
                    "id": "IC_kwDODheSms5LHBwC",
                    "body": "Try it with `savedata1`(all lowercase):\r\n\r\n```js\r\nconst res = await getSupabase().rpc('savedata1', { voteid: 1 });\r\nconsole.log({ data });\r\nconsole.log({ error });\r\n```\r\n\r\nfunctions in postgres are converted to lowercase unless you double quote them\r\n\r\n```sql\r\ncreate or replace function \"saveData1\"(voteid integer) returns text\r\n```",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-09-27T22:24:27Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/336#issuecomment-1260133378"
                },
                {
                    "id": "IC_kwDODheSms5LHx24",
                    "body": "thank you@steve-chavez\uff0ci solved my problem",
                    "author": {
                        "login": "sunyf1"
                    },
                    "createdAt": "2022-09-28T03:11:14Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/336#issuecomment-1260330424"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5SyBRg",
            "number": 337,
            "title": "MongoDB's selection filter for query serializing / building",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nI wanted to wrap and abstract away my usage of supabase from it's consumers, while still maintaining the ability to receive abstract queries, from the consumers and or have serializable queries.\r\n\r\n## Describe the solution you'd like\r\n\r\nRoughly adopt MongoDB's query language, and receive it as a parameter like today's [match](https://github.com/supabase/postgrest-js/blob/76a2926c058db81615af760bbd855786e43256f2/src/lib/PostgrestFilterBuilder.ts#L463) I know enough about Mongo's query language to know it runs deep, the point here is not to be 1:1 feature complete but as a query serialization format. Maybe being able to log and audit queries? (you could technically do that with the query string already not a big improvement here)\r\n\r\nAnd, not sure if worth the effort, but maybe make the current builder pattern QueryBuilder class control it's internal state trough a mongo query object as well, might introduce some fixes such as eq'ing the same column, faster performance than concatenating strings? But mostly for reusing the new logic of building the Postgrest's query string.\r\n\r\n## Describe alternatives you've considered\r\n\r\n- Doing this as an alternate package with calls to the current query builder (good as a beta / POC?)\r\n- Receiving a callback that accepts the query builder instance \r\n  - very trashy, scope retention, memory leaks, and the coupling would remain high, the consumer would still be calling Supabase-js native methods directly\r\n\r\n## Additional context\r\n\r\nN/A\r\n",
            "author": {
                "login": "samuelhnrq"
            },
            "state": "OPEN",
            "createdAt": "2021-11-27T14:17:00Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/337",
            "comments": []
        },
        {
            "id": "I_kwDODheSms5SyPix",
            "number": 338,
            "title": ".range() should give end of list flag",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nNot a problem per se.\r\nUse case: when having a lazy load for data, lets say comments (when reaching the end of page or clicking button \"load more\").\r\n\r\n## Describe the solution you'd like\r\n\r\nGetting flag in the return payload received from query requests with .range() letting us know we reached the end of list and there is not more to fetch.\r\n\r\n## Describe alternatives you've considered\r\n\r\n- **Loading COUNT of rows and then keep track of reaching the end.** - Not a good solution because it takes unnecessary call.\r\n- **Loading one more to see if I receive more rows and if not I can stop loading** - Not a good solution because user is expecting data when shown loader or when clicking on \"load more\" manualy.\r\n",
            "author": {
                "login": "riancz"
            },
            "state": "CLOSED",
            "createdAt": "2021-12-01T17:52:27Z",
            "closedAt": "2022-09-28T08:05:56Z",
            "url": "https://github.com/supabase/postgrest-js/issues/338",
            "comments": [
                {
                    "id": "IC_kwDODheSms5LIkla",
                    "body": "This can be done by querying one more item than we're actually using, e.g. instead of `range(0, 9)`, `range(10, 19)`, etc., do `.range(0, 10)`, `.range(10, 20)`, etc. and ignore the last item.\r\n\r\nTo check if we are at the end, just do `data.length` - in this case we are at the end if and only if `data.length === 11`.\r\n\r\nP.S. and sorry for the late reply!",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-28T08:05:56Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/338#issuecomment-1260538202"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5Sy3Hr",
            "number": 339,
            "title": "findOrCreate Method",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\nWhile working on a project that leverages inbound hooks I find that I need to regularly leverage a function that is essentially a `findOrCreate` operation. It is frequent enough that I\u2019m wondering if it would be considered for inclusion in the Supabase client\r\n\r\n## Describe the solution you'd like\r\nThe ability to run a findOrCreate operation against a value and additional arguments.\r\n\r\nThe function would either return existing data from a matching key or create that value and return the inserted object.\r\n\r\n## Describe alternatives you've considered\r\nI am presently writing helper functions that preforms a fetch operation ahead of an insert operation to check for existing values.\r\n\r\nI have checked the docs search but nothing has popped up in issues or docs that I found. If this exists and I missed it, I apologize in advance. \r\n\r\n## Additional context\r\nThis is particularly valuable when dealing with webhook based endpoints to help manage idempotency \r\n",
            "author": {
                "login": "jdcauley"
            },
            "state": "CLOSED",
            "createdAt": "2021-12-01T17:02:53Z",
            "closedAt": "2022-09-28T10:07:12Z",
            "url": "https://github.com/supabase/postgrest-js/issues/339",
            "comments": [
                {
                    "id": "IC_kwDODheSms5LJH5a",
                    "body": "Sorry for the super late reply!\r\n\r\nUnfortunately I don't think this is something that can be supported by the client lib itself - it needs to be supported by the upstream REST server ([PostgREST](https://github.com/postgrest/postgrest)), you might have better luck creating a feature request there.\r\n\r\nThe alternative I recommend is exactly what you're doing, i.e. doing the logic in an `rpc`. Or if your use case is simple enough, you can try `upsert()`, specifying only the primary key:\r\n\r\n```sql\r\ncreate table my_table (\r\n  id int8 primary key,\r\n  created_at timestamptz default now()\r\n);\r\n```\r\n\r\n```ts\r\nconst { data, error } = await supabase\r\n  .from('my_table')\r\n  .upsert({ id: 42 })\r\n  .select()\r\n```\r\n\r\n```json\r\n{\r\n  \"data\": [\r\n    {\r\n      \"id\": 1,\r\n      \"created_at\": \"...\"\r\n    }\r\n  ],\r\n  \"status\": 201,\r\n  \"statusText\": \"Created\"\r\n}\r\n```\r\n\r\nThe limitation is you need to rely on default values on `create` - you can't supply other columns or it'll overwrite them. i.e. this is `updateOrCreate` and `find` the new/updated row, instead of `findOrCreate`.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-28T10:07:12Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/339#issuecomment-1260682842"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5S5F1v",
            "number": 340,
            "title": "Unable to query table if column type is changed",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\nWe are unable to query a table when the type of the column is changed.\r\n\r\nA clear and concise description of what the bug is.\r\nWe have a table of Orders which has primary key column type as int earlier which was later changed to type text and now we are unable to query via they primary key. We get the following error : \r\ninvalid input syntax for type integer: \"OD123\"\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\nCreate a table\r\nAdd few columns with primary key being int\r\nChange the type of primary key column to text\r\nTry querying and now you get int fighting string error\r\n## Expected behavior\r\nShould be able to query without trouble\r\n\r\nA clear and concise description of what you expected to happen.\r\n\r\n## Screenshots\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n## System information\r\n\r\n- OS: Linux\r\n- Browser Chrome\r\n- Version of supabase-js: 1.35.6\r\n- Version of Node.js: 16\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "akshg05"
            },
            "state": "CLOSED",
            "createdAt": "2022-08-30T16:18:17Z",
            "closedAt": "2023-08-03T13:57:14Z",
            "url": "https://github.com/supabase/postgrest-js/issues/340",
            "comments": [
                {
                    "id": "IC_kwDODheSms5LTp_C",
                    "body": "Hey there, sorry for the late response. Are you still having this issue? I couldn't replicate this on my side:\r\n\r\nhttps://user-images.githubusercontent.com/31685197/193258103-4cc1970a-68dd-4624-b643-b7f03d411670.mov\r\n\r\nBut as you can see, I had to make `id` a non-identity column first. Can you check if your column type has actually been altered successfully?",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-09-30T11:15:58Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/340#issuecomment-1263443906"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5TI8Hg",
            "number": 341,
            "title": ".select() says my returned data is a Parser error:  \"Unexpected input\" typescript error",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nThis may be an issue with my code or supabase's new TS changes.\r\n\r\nThe following select statement:\r\n```\r\n  const initOrder = useCallback(async (id: string) => {\r\n    const {data, error} = await supabase\r\n      .from('orders')\r\n      .select(\r\n        '*,attachments:orderAttachments(*),lineItems:orderLineItems(*,lineItem:lineItems(*)),sellerData:userData!sellerId(*),buyerData:userData!buyerId(*),listing:listings(*),kudosGiven:kudosGivenFromOrders(*))',\r\n      )\r\n      .match({\r\n        id,\r\n      })\r\n      .single();\r\n    if (error) {\r\n      //handle error\r\n    }\r\n    if (data) {\r\n      setOrder(data);\r\n      console.log({data});\r\n    }\r\n    setLoading(LOADING_STATE.IDLE);\r\n  }, []);\r\n```\r\n\r\nGives me an error, it predicts that `data` will be:\r\n`const data: ParserError<\"Unexpected input: )\"> | undefined`\r\n\r\nFor clarity, here is my select statement string:\r\n\r\n`*, attachments:orderAttachments(*),\r\nlineItems:orderLineItems(*,lineItem:lineItems(*)),\r\nsellerData:userData!sellerId(*),\r\nbuyerData:userData!buyerId(*),\r\nlisting:listings(*),\r\nkudosGiven:kudosGivenFromOrders(*))`\r\n\r\n## Expected behavior\r\n\r\nI expected the data to perhaps be typed as a row from my `orders` table, or `any` as I am doing some joins.\r\n\r\n## Screenshots\r\n<img width=\"998\" alt=\"Screenshot 2022-10-03 at 10 11 14\" src=\"https://user-images.githubusercontent.com/25225528/193603804-8929e81e-a5ff-4707-8e5f-525967c8f549.png\">\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Version of supabase-js: 2.0.0-rc.10\r\n\r\n## Additional context\r\n\r\nI'm using React native. The data that is returned is in fact correct, so the query doesn't seem to be broken?",
            "author": {
                "login": "lewisd1996"
            },
            "state": "CLOSED",
            "createdAt": "2022-10-03T14:38:17Z",
            "closedAt": "2022-10-03T15:43:41Z",
            "url": "https://github.com/supabase/postgrest-js/issues/341",
            "comments": [
                {
                    "id": "IC_kwDODheSms5LcGnT",
                    "body": "You have an extraneous `)` at the very end. Shame the error message couldn't pinpoint the location of the error though...",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-10-03T15:40:10Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/341#issuecomment-1265658323"
                },
                {
                    "id": "IC_kwDODheSms5LcHoW",
                    "body": "Wow, nice one. I messed up on this one haha. Thanks for the reply.",
                    "author": {
                        "login": "lewisd1996"
                    },
                    "createdAt": "2022-10-03T15:43:41Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/341#issuecomment-1265662486"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5TbxlW",
            "number": 343,
            "title": "Upsert on conflict with more than one row returns undefined with 2.0.0-rc.10",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nA clear and concise description of what the bug is.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\nMinimum Verified Reproducible Example:\r\n```\r\n                                     Table \"public.projects\"\r\n   Column   |           Type           | Collation | Nullable |             Default              \r\n------------+--------------------------+-----------+----------+----------------------------------\r\n id         | bigint                   |           | not null | generated by default as identity\r\n created_at | timestamp with time zone |           |          | now()\r\n name       | text                     |           |          | \r\nIndexes:\r\n    \"projects_pkey\" PRIMARY KEY, btree (id)\r\nReferenced by:\r\n    TABLE \"interactive_experiences\" CONSTRAINT \"fk_projects\" FOREIGN KEY (project_id) REFERENCES projects(id)\r\n\r\n                               Table \"public.interactive_experiences\"\r\n   Column   |  Type   | Collation | Nullable |                       Default                        \r\n------------+---------+-----------+----------+------------------------------------------------------\r\n idd        | integer |           | not null | nextval('interactive_experiences_idd_seq'::regclass)\r\n project_id | bigint  |           | not null | \r\n message    | text    |           |          | \r\nIndexes:\r\n    \"pk_interactive_experiences\" PRIMARY KEY, btree (project_id, idd)\r\nForeign-key constraints:\r\n    \"fk_projects\" FOREIGN KEY (project_id) REFERENCES projects(id)\r\n```\r\nCreate a row in projects e.g `INSERT INTO projects (id, name) VALUES (3,'Foo')`\r\n\r\nThen create a row in interactive_experiences:\r\n\r\n`INSERT INTO projects (idd, project_id, message) VALUES (1,3, 'message')`\r\n\r\nThen, you run the client:\r\n\r\n```\r\nlet { data: data, error } = await supabase\r\n  .from(\"interactive_experiences\")\r\n  .upsert([\r\n    { idd: 1, project_id: 3, message: 'updated msg 2' }],{ onConflict: 'idd,project_id'});\r\n    \r\n```\r\n## Expected behavior\r\n\r\nThe client response should inform that the upsert was successful. \r\n\r\n\r\n## System information\r\n\r\n- OS: [e.g. macOS, Windows]. macOS/Windows/GNU\\/Linux\r\n- Browser (if applies) N/A\r\n- Version of supabase-js: 2.0.0-rc.10\r\n- Version of Node.js:v18.10.0\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "mansueli"
            },
            "state": "CLOSED",
            "createdAt": "2022-10-06T14:48:26Z",
            "closedAt": "2022-10-19T18:19:08Z",
            "url": "https://github.com/supabase/postgrest-js/issues/343",
            "comments": [
                {
                    "id": "IC_kwDODheSms5MHSWZ",
                    "body": "Thanks! `.upsert()` [doesn't return rows](https://supabase.com/docs/reference/javascript/upsert) by default, so you need to do it like:\r\n\r\n```ts\r\nlet { data: data, error } = await supabase\r\n  .from(\"interactive_experiences\")\r\n  .upsert([\r\n    { idd: 1, project_id: 3, message: 'updated msg 2' }],{ onConflict: 'idd,project_id'})\r\n  .select();\r\n```",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-10-13T03:28:28Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/343#issuecomment-1276978585"
                },
                {
                    "id": "IC_kwDODheSms5Mofkr",
                    "body": "> The client response should inform that the upsert was successful.\r\n\r\nAlso even without `select()` the `error` key should contain a message if the upsert wasn't successful.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-10-20T14:52:18Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/343#issuecomment-1285683499"
                },
                {
                    "id": "IC_kwDODheSms5MqPEo",
                    "body": "@mansueli and @soedirgo Thank you for looking into this issue for me.\r\n\r\nI'm still having difficulty however getting the permissions correct. My tables are setup essentially as you have described above (except the `id` fields are `uuid` type).\r\n\r\nWhen I attempt to do an upsert I get an error unless I have given the `READ` permission to the `anon` user.\r\n\r\n```typescript\r\nconst updateStart = async (dateTime) => {      \r\n            const { data, error } = await analyticsConnection\r\n              .from(\"ie_experiences\")\r\n              .upsert(\r\n                {\r\n                  started: dateTime.toISO(),\r\n                  project: projectID,\r\n                  id: analyticsExperienceID,\r\n                },\r\n                { onConflict: \"id,project\" }\r\n              )\r\n        };\r\n```\r\n\r\nI'm trying to allow an `anon` user to insert/update entries in the table, but not be able to read all the entries.\r\nHere is the error message if `read` permission is not granted. Is read permission required to do an `upsert` if you aren't calling `select` afterwards?\r\n\r\n```\r\n{\r\n  code: \"42501\",\r\n  details: null,\r\n  hint: null,\r\n  message:\r\n    'new row violates row-level security policy for table \"ie_experiences\"',\r\n};\r\n```\r\n\r\n",
                    "author": {
                        "login": "eikonomega"
                    },
                    "createdAt": "2022-10-20T20:56:29Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/343#issuecomment-1286140200"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5Tdkwl",
            "number": 344,
            "title": "View fails to acknowledge the primary key of a table when using supabase.",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nselect() fails in certain situations to recognize to id of tables. \r\nThe following situation is between a view and 2 tables to explain the situation. \r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\nStarting by adding the following script to the sql table.\r\n\r\n```\r\nDROP TABLE IF EXISTS \"parents\";\r\nDROP TABLE IF EXISTS \"childs\";\r\n\r\nCREATE TABLE \"parents\" (\r\n    id uuid NOT NULL UNIQUE,\r\n    name text NOT NULL\r\n);\r\n\r\nCREATE TABLE \"childs\" (\r\n\tid uuid NOT NULL,\r\n\tname text NOT NULL,\r\n\tparent_id uuid NOT NULL\r\n);\r\n\r\nALTER TABLE ONLY \"childs\"\r\n\tADD CONSTRAINT \"childs_parent_fk_id\" FOREIGN KEY (\"parent_id\") REFERENCES \"parents\" (\"id\");\r\n\r\n\r\nINSERT INTO parents (id, name) VALUES ('185aa629-43a0-4f3e-851b-7f685e9c1dc1', 'test');\r\nINSERT INTO childs (id, name, parent_id) VALUES ('e2ef8d2a-b19c-4134-aa20-4ca1560df2b4', 'testing view', '185aa629-43a0-4f3e-851b-7f685e9c1dc1');\r\n\r\n-- TO FAIL\r\nCREATE OR REPLACE VIEW example_view AS\r\nSELECT\r\n\tchilds.id AS child_id,\r\n\tto_tsvector(\r\n\t\t'english', concat_ws(' ', parents.name, childs.name)) AS fts\r\nFROM\r\n\tchilds\r\n\tJOIN parents ON childs.parent_id = parents.id;\r\n```\r\n\r\nQuery for the supabase-js:\r\n\r\n```\r\nexport const searchText = async (text: string) => {\r\n  const query = supabase.from(\"example_view\").select(\"*,  child:childs(*)\");\r\n  const { data, error } = await query;\r\n  return { data, error };\r\n};\r\n```\r\n\r\nThis will fail. \r\n\r\n## Expected behavior\r\n\r\nI will show cases that will fail and cases that will not fail.\r\nLooking at the case to reproduce. The following select will fail to get the join of table and the view.\r\n\r\n<img width=\"1429\" alt=\"Screenshot 2022-10-06 at 17 30 00\" src=\"https://user-images.githubusercontent.com/10116142/194368397-332a7f31-7434-4b37-96cd-2bdf1e402ac1.png\">\r\n\r\nLooking at the SQL preview:\r\n\r\n```\r\nSELECT * FROM example_view JOIN childs on childs.id = example_view.child_id\r\n````\r\nResults in \r\n\r\n```\r\n  {\r\n    \"child_id\": \"e2ef8d2a-b19c-4134-aa20-4ca1560df2b4\",\r\n    \"fts\": \"'test':1,2 'view':3\",\r\n    \"id\": \"e2ef8d2a-b19c-4134-aa20-4ca1560df2b4\",\r\n    \"name\": \"testing view\",\r\n    \"parent_id\": \"185aa629-43a0-4f3e-851b-7f685e9c1dc1\"\r\n  }\r\n```\r\n\r\n###\r\n\r\nNow. If i had the foreign_key in the view as the result of the select it will work.\r\n\r\n```\r\nCREATE OR REPLACE VIEW example_view AS\r\nSELECT\r\n\tchilds.id AS child_id,\r\n\tchilds.parent_id AS parent_id, -- this line\r\n\tto_tsvector(\r\n\t\t'english', concat_ws(' ', parents.name, childs.name)) AS fts\r\nFROM\r\n\tchilds\r\n\tJOIN parents ON childs.parent_id = parents.id;\r\n```\r\n\r\nquerying the parents table will work.\r\n\r\n<img width=\"1423\" alt=\"Screenshot 2022-10-06 at 17 46 17\" src=\"https://user-images.githubusercontent.com/10116142/194371737-1b5770c7-0df5-4dea-8e89-c81a6efdd09f.png\">\r\n\r\nquerying both will fail even thought he manages to get the parents.\r\n\r\n<img width=\"1491\" alt=\"Screenshot 2022-10-06 at 17 51 38\" src=\"https://user-images.githubusercontent.com/10116142/194372656-1dbb7375-1f2a-4cd8-ab84-cf1bcaa783c2.png\">\r\n\r\nAnother example: \r\n\r\n```\r\nCREATE OR REPLACE VIEW example_view AS\r\nSELECT\r\n\tchilds.id AS child_id,\r\n\tparents.id AS parent_id,\r\n\tto_tsvector(\r\n\t\t'english', concat_ws(' ', parents.name, childs.name)) AS fts\r\nFROM\r\n\tchilds\r\n\tJOIN parents ON childs.parent_id = parents.id;\r\n```\r\nThis will make the parents also fail.\r\n\r\n<img width=\"1510\" alt=\"Screenshot 2022-10-06 at 17 57 17\" src=\"https://user-images.githubusercontent.com/10116142/194374243-a8468212-3add-411f-9c1c-1f26bc5e2909.png\">\r\n\r\nbut childs relationship starts working.\r\n<img width=\"1332\" alt=\"Screenshot 2022-10-06 at 18 01 16\" src=\"https://user-images.githubusercontent.com/10116142/194374627-1a2761fb-bf67-4d4e-9570-81f862e6f62d.png\">\r\n\r\n\r\nIt is worth noting that I didn't manage to get successful results while querying both the tables when both id are in the view.\r\n\r\nI tried different ways like parents!inner or parent!**variable** but with no success.\r\n\r\n\r\n\r\n## Screenshots\r\n\r\nAdded on the expected behavior.\r\n\r\n## System information\r\n\r\n- OS: [e.g. macOS]\r\n- Browser (if applies) [e.g. brave]\r\n- Version of supabase-js: [e.g. 1.35.7]\r\n- Version of Node.js: [e.g. 16.14.0]\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "pcardosolei"
            },
            "state": "CLOSED",
            "createdAt": "2022-10-06T17:24:28Z",
            "closedAt": "2022-10-07T00:15:37Z",
            "url": "https://github.com/supabase/postgrest-js/issues/344",
            "comments": [
                {
                    "id": "IC_kwDODheSms5LvJ23",
                    "body": "Detecting views foreign keys is a best effort right now - they follow the rules on https://postgrest.org/en/stable/api.html#embedding-views.\r\n\r\n```sql\r\nCREATE OR REPLACE VIEW example_view AS\r\nSELECT\r\n\tchilds.id AS child_id,\r\n\tto_tsvector(\r\n\t\t'english', concat_ws(' ', parents.name, childs.name)) AS fts\r\nFROM\r\n\tchilds\r\nJOIN parents ON childs.parent_id = parents.id;\r\n```\r\n\r\nThe `child_id` from the view above comes from the `childs` table(`childs.id`) and on the next snippet\r\n\r\n> export const searchText = async (text: string) => {\r\n>  const query = supabase.from(\"example_view\").select(\"*,  child:childs(*)\");\r\n>  const { data, error } = await query;\r\n>  return { data, error };\r\n> };\r\n> This will fail.\r\n\r\nYou do ` supabase.from(\"example_view\").select(\", child:childs()\")`, which try to embeds `childs`(where `example_view` comes from) with `childs`, since there's no FK relationship between `childs` and `childs` the detection will fail.\r\n\r\n> It is worth noting that I didn't manage to get successful results while querying both the tables when both id are in the view.\r\n\r\nTry including `childs.id`, `childs.parents_id` and `parents.parents_id` in your view for this to work.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-10-06T20:40:11Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/344#issuecomment-1270652343"
                },
                {
                    "id": "IC_kwDODheSms5LvM_F",
                    "body": "Q: If you're doing the JOIN inside the view already, why do you need to do the join client-side? For this case it'd be simpler to have it all on the view.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-10-06T20:46:10Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/344#issuecomment-1270665157"
                },
                {
                    "id": "IC_kwDODheSms5Lv6VT",
                    "body": "> Detecting views foreign keys is a best effort right now - they follow the rules on https://postgrest.org/en/stable/api.html#embedding-views.\r\n> \r\n> ```sql\r\n> CREATE OR REPLACE VIEW example_view AS\r\n> SELECT\r\n> \tchilds.id AS child_id,\r\n> \tto_tsvector(\r\n> \t\t'english', concat_ws(' ', parents.name, childs.name)) AS fts\r\n> FROM\r\n> \tchilds\r\n> JOIN parents ON childs.parent_id = parents.id;\r\n> ```\r\n> \r\n> The `child_id` from the view above comes from the `childs` table(`childs.id`) and on the next snippet\r\n> \r\n> > export const searchText = async (text: string) => {\r\n> > const query = supabase.from(\"example_view\").select(\"_,  child:childs(_)\");\r\n> > const { data, error } = await query;\r\n> > return { data, error };\r\n> > };\r\n> > This will fail.\r\n> \r\n> You do ` supabase.from(\"example_view\").select(\", child:childs()\")`, which try to embeds `childs`(where `example_view` comes from) with `childs`, since there's no FK relationship between `childs` and `childs` the detection will fail.\r\n> \r\n> > It is worth noting that I didn't manage to get successful results while querying both the tables when both id are in the view.\r\n> \r\n> Try including `childs.id`, `childs.parents_id` and `parents.parents_id` in your view for this to work.\r\n\r\nMakes sense. I was doing some extra tests + reading the documentation and I thought about it but was not 100% sure.\r\n\r\nThanks.",
                    "author": {
                        "login": "pcardosolei"
                    },
                    "createdAt": "2022-10-06T23:51:11Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/344#issuecomment-1270850899"
                },
                {
                    "id": "IC_kwDODheSms5Lv6r6",
                    "body": "> Q: If you're doing the JOIN inside the view already, why do you need to do the join client-side? For this case it'd be simpler to have it all on the view.\r\n\r\nI tried to do an approach to push the full text search out of the childs table because I tried to do some sort of combined FTS with combination of columns for the child table + parent table where most of the information came from the child table but a few important would also come from the parent table.\r\n\r\nNeed to think about a new way to do this then.  Maybe doing a query to get the FTS results and then another to get the information from the desired table.\r\n\r\nThanks.\r\n",
                    "author": {
                        "login": "pcardosolei"
                    },
                    "createdAt": "2022-10-06T23:54:23Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/344#issuecomment-1270852346"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5UBGLX",
            "number": 349,
            "title": "Should `update` use Partial<Row>?",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\nContext: https://github.com/supabase/postgrest-js/blob/v1.0.0/src/PostgrestQueryBuilder.ts#L248\r\n\r\nWhen updating, it currently asks for the whole columns.\r\n\r\nLooking at the source, there's a `PATCH` request which I assume updates only what's given to it.\r\n\r\nI could submit a PR adding `Partial<>` on it if it should be.\r\n\r\n## To Reproduce\r\n\r\n- generate types\r\n- do an update operation\r\n\r\n## Expected behavior\r\n\r\nAllow specific column to be updated\r\n\r\n## Screenshots\r\n\r\nNone\r\n\r\n## System information\r\n\r\n- OS: [e.g. macOS, Windows]\r\n- Browser (if applies) [e.g. chrome, safari]\r\n- Version of supabase-js: [e.g. 6.0.2]\r\n- Version of Node.js: [e.g. 10.10.0]\r\n\r\n## Additional context\r\n\r\nNone\r\n",
            "author": {
                "login": "xxRockOnxx"
            },
            "state": "CLOSED",
            "createdAt": "2022-10-14T16:14:31Z",
            "closedAt": "2022-10-17T16:52:32Z",
            "url": "https://github.com/supabase/postgrest-js/issues/349",
            "comments": [
                {
                    "id": "IC_kwDODheSms5MUEaz",
                    "body": "Do you have a repro case where it's not making columns optional? The typegen should be making `Relation['Update']` columns optional, e.g.:\r\n\r\nhttps://github.com/supabase/postgrest-js/blob/94db7098ef9d75766b8ca84b1e888f34a3eb759d/test/types.ts#L19-L24",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-10-17T06:00:42Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/349#issuecomment-1280329395"
                },
                {
                    "id": "IC_kwDODheSms5MXQxN",
                    "body": "@soedirgo the typegen on my end was wrong. i had to update some columns/properties manually and made a mistake. closing this now.\r\n\r\non a related note, is there a way to have typgen make some columns as `never`? e.g `created_at` or `user_id`\r\njust so we could avoid this kind of rookie mistake due to manual editing.",
                    "author": {
                        "login": "xxRockOnxx"
                    },
                    "createdAt": "2022-10-17T16:52:32Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/349#issuecomment-1281166413"
                },
                {
                    "id": "IC_kwDODheSms5MZsSf",
                    "body": "The types reflect the database, so if you make the column generated always, it'll be typed as `never`. E.g.:\r\n```plpgsql\r\ncreate table my_table (created_at timestamptz generated always as (now()) stored);\r\n```",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-10-18T04:34:18Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/349#issuecomment-1281803423"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5UCEM8",
            "number": 350,
            "title": "Extend contains/containedBy/overlap to be used in joins/embedded filters",
            "body": "# Feature request\r\n\r\nMy use case is that I'd like to have the \"in\" operator but with the function of an \"AND\". So use-case is - get all posts that have tag1 and tag2 (both)\r\n\r\nTable structure\r\n```\r\nposts (id, title)\r\npost_tag (post_id, tag_id)\r\ntags (id, title)\r\n```\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nThat's not a problem, I just can't use the feature I would like to have \ud83d\ude05.\r\n\r\n## Describe the solution you'd like\r\n\r\n```Javascript\r\nsupabase.from(\"posts\")\r\n  .select(\"*, filterTags:tags!inner(*), tags(*)\")\r\n  .contains(\"filterTags.id\", \"(1, 2)\")\r\n```\r\n\r\n## Describe alternatives you've considered\r\n\r\nTwo alternatives I'm considering\r\n\r\n1. A `rpc` method, but I'd like to dynamically filter my posts \r\n2. Change the data model so that each post holds an array of tag ids. This looks like a clean solution to me, but it's a trade-off (as always). \r\n\r\nAlso given the fact, that \"in\" could be used with embedded resources, I thought it's possible (and nice infor the sake of completeness) for contains as well.\r\nhttps://supabase.com/docs/reference/javascript/next/filter#filter-embedded-resources\r\n\r\n",
            "author": {
                "login": "wiesson"
            },
            "state": "OPEN",
            "createdAt": "2022-08-23T15:05:53Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/350",
            "comments": []
        },
        {
            "id": "I_kwDODheSms5UFYlV",
            "number": 351,
            "title": "NO Typing/ autocompletion hint working When filtering on Foreign keys -  V2. ",
            "body": "Here is [Example link](https://supabase.com/docs/reference/javascript/select#:~:text=table%20is%20not-,filtered,-out.) from supabase docs. \r\n\r\n```\r\nconst { data, error } = await supabase\r\n  .from('cities')\r\n  .select('name, countries(*)')\r\n  .eq('countries.name', 'Estonia')\r\n```\r\nIn above example **`countries.name`** shows error in types.  And no autocompletion available after` countries.`",
            "author": {
                "login": "roker15"
            },
            "state": "OPEN",
            "createdAt": "2022-10-14T08:13:58Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/351",
            "comments": [
                {
                    "id": "IC_kwDODheSms5MTP94",
                    "body": "I also have this issue. For example:\r\n```\r\nconst result = await supabaseClient\r\n    .from('Orders')\r\n    .select(`\r\n        order_id,\r\n        Customers (\r\n            name,\r\n            customer_id\r\n        )`)\r\n    .eq('Customers.customer_id, 10);\r\n```\r\n\r\n`result` has the return type\r\n```\r\nPostgrestResponse<{\r\n    order_status: number;\r\n    id: number;\r\n    created_at: string | null;\r\n    customer_id: number;\r\n} & {\r\n    Customers: unknown;\r\n}>\r\n```\r\n\r\nwhen I would expect the return type to be:\r\n```\r\nPostgrestResponse<{\r\n    order_status: number;\r\n    id: number;\r\n    created_at: string | null;\r\n    customer_id: number;\r\n} & {\r\n    Customers: {\r\n        name: string,\r\n        customer_id: number\r\n    }\r\n}>\r\n```\r\nWhere the type of Customers properties should be determined from the Database schema.\r\n\r\nThis bug means that `result.Customers.name` is not possible due to \"Customers\" being unknown type, instead it must be done something like:\r\n```\r\ntype Customer = Database['public']['Tables']['Customers']['Row'];\r\nconst customerName = (result.Customers as Customer).name;\r\n```\r\nWhich is not ideal, as this approach will allow properties from the db missed from the query (e.g. if the table has a \"email\" field in customers table, but we forgot to include it in the query, `(result.Customers as Customer).email` would compile with TypeScript but throw an error at runtime).",
                    "author": {
                        "login": "matt-winfield"
                    },
                    "createdAt": "2022-10-14T16:15:46Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/351#issuecomment-1280114552"
                },
                {
                    "id": "IC_kwDODheSms5MTP95",
                    "body": "I can second this.\r\n\r\nEven forcing on the from the type it does not work as <\"table\", Type>\r\nit works on the first one but always fails on relations.",
                    "author": {
                        "login": "pcardosolei"
                    },
                    "createdAt": "2022-10-15T00:57:09Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/351#issuecomment-1280114553"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5UJL9O",
            "number": 352,
            "title": "Support for EXPLAIN / Execution plan in postgrest-js",
            "body": "# Feature request\r\nIt should be easy for the users to take advantage of the new execution plan feature released on PostgREST v10. Pehaps a  modifier, command that would add the headers `Accept: application/vnd.pgrst.plan` when calling PostgREST. Example:\r\n\r\n\r\n\r\n[https://postgrest.org/en/stable/releases/v10.0.0.html?highlight=explain#execution-plan](https://postgrest.org/en/stable/releases/v10.0.0.html?highlight=explain#execution-plan\r\n)\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nI want this feature to be exposed in the postgrest-js client, to help uses to enhance queries/ investigate query performance easier. \r\n\r\n## Describe the solution you'd like\r\n\r\n```\r\nconst { data, error } = await supabase\r\n  .from('cities')\r\n  .select('name', 'country_id')\r\n  .order('id', { ascending: false })\r\n  .explain()\r\n\r\n```\r\n## Describe alternatives you've considered\r\nPassing the EXPLAIN when creating the client:\r\n\r\n```\r\nconst options = {\r\n  db: {\r\n    schema: 'public',\r\n  },\r\n  global: {\r\n    headers: { 'Accept': 'application/vnd.pgrst.plan' },\r\n  }\r\n}\r\nconst supabase = createClient(SUPABASE_URL, SUPABASE_KEY, options);\r\n```\r\n\r\n",
            "author": {
                "login": "mansueli"
            },
            "state": "CLOSED",
            "createdAt": "2022-10-17T14:34:27Z",
            "closedAt": "2022-10-17T15:36:21Z",
            "url": "https://github.com/supabase/postgrest-js/issues/352",
            "comments": [
                {
                    "id": "IC_kwDODheSms5MW5Ui",
                    "body": "This is already implemented: https://github.com/supabase/postgrest-js/blob/94db7098ef9d75766b8ca84b1e888f34a3eb759d/src/PostgrestTransformBuilder.ts#L168-L222\r\n\r\nIt's not available on the Supabase platform yet, since this is only available on PostgREST v10, while the currently deployed version is v9.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-10-17T15:36:21Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/352#issuecomment-1281070370"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5UJvQ9",
            "number": 353,
            "title": "Impossible to determine if the record was really deleted",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen RLS is enabled, if deletion is not allowed, it'll still return 200.\r\n\r\n## To Reproduce\r\n\r\n1. Create a table\r\n2. Enable RLS\r\n3. No policies needed, as deletion will be already not allowed\r\n4. Create a record in that table\r\n5. Do a DELETE request to delete a record from there\r\n\r\n## Expected behavior\r\n\r\nA 403 or something similar so that me (as a client) can notify the user that it wasn't successful.\r\n\r\n## System information\r\n\r\n- Version of supabase-js: the last one\r\n- Version of Node.js: 14\r\n\r\n",
            "author": {
                "login": "n-sviridenko"
            },
            "state": "CLOSED",
            "createdAt": "2022-10-17T16:05:00Z",
            "closedAt": "2022-12-17T05:07:08Z",
            "url": "https://github.com/supabase/postgrest-js/issues/353",
            "comments": [
                {
                    "id": "IC_kwDODheSms5MZubA",
                    "body": "This is working as intended - a 403 is not sufficient from a security perspective since that leaks the existence of the row.\r\n\r\nTo determine whether or not a `.delete()` actually has rows deleted, you can do a `.delete()` with [`.select()`](https://supabase.com/docs/reference/javascript/db-modifiers-select) which returns the deleted rows, if any.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-10-18T04:50:16Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/353#issuecomment-1281812160"
                },
                {
                    "id": "IC_kwDODheSms5Q04bL",
                    "body": "You can also use [single()](https://supabase.com/docs/reference/javascript/single) to err if you expect deleting a single row, this will be logged with a 406 Not Acceptable.\r\n\r\nAdditionally if you revoke the DELETE privilege\r\n\r\n```sql\r\nREVOKE DELETE ON <tbl> FROM authenticated;\r\n```\r\n\r\nYou'll always get a 403 when using `delete()`.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-12-17T05:07:08Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/353#issuecomment-1356039883"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5UMJBY",
            "number": 355,
            "title": "Seems like the types for many to many relationships are not working in v2",
            "body": "Consider following generated types:\r\n```typescript\r\nexport interface Database {\r\n  public: {\r\n    Tables: {\r\n      users_skills: {\r\n        Row: {\r\n          user_id: string;\r\n          skill_id: number;\r\n        };\r\n      };\r\n      users: {\r\n        Row: {\r\n          id: string;\r\n          created_at: string;\r\n          name: string | null;\r\n        };\r\n      };\r\n      skills: {\r\n        Row: {\r\n          id: number;\r\n          created_at: string;\r\n          name: string;\r\n        };\r\n      };\r\n    };\r\n  };\r\n}\r\n```\r\nwhen I try to `supabase.from(\"users\").select(\"*,skills(*)\")` I get\r\n```typescript\r\n{\r\n    id: string;\r\n    created_at: string;\r\n    name: string | null;\r\n} & {\r\n    skills: unknown;\r\n}\r\n```\r\nI tried some things from the postgrest docs but nothing is working. Am I doing something wrong or is this inference not ready yet?\r\n",
            "author": {
                "login": "mzalevski"
            },
            "state": "OPEN",
            "createdAt": "2022-10-16T08:04:44Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/355",
            "comments": [
                {
                    "id": "IC_kwDODheSms5MZ3Em",
                    "body": "Hey there, typings for embedded tables is still a WIP, but we have a [PR](https://github.com/supabase/postgrest-js/pull/345) that allows you to override the return type.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-10-18T05:51:17Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/355#issuecomment-1281847590"
                },
                {
                    "id": "IC_kwDODheSms5MaPYZ",
                    "body": "Thanks @soedirgo. I'll be waiting then :)",
                    "author": {
                        "login": "mzalevski"
                    },
                    "createdAt": "2022-10-18T07:42:20Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/355#issuecomment-1281947161"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5UUMkk",
            "number": 356,
            "title": "[Bug] `from` returns any type",
            "body": "# Bug report\r\n\r\nUsing the new supabase-js, the `from` function always returns the `any` type, while I have the `Database` interface given during initialisation.\r\n\r\n## To Reproduce\r\n\r\nDatabase.ts\r\n```ts\r\nexport type Json =\r\n  | string\r\n  | number\r\n  | boolean\r\n  | null\r\n  | { [key: string]: Json }\r\n  | Json[]\r\n\r\nexport interface Database {\r\n  public: {\r\n    Tables: {\r\n      themes: {\r\n        Row: {\r\n          id: string\r\n          name: string\r\n          color: string\r\n          image: string\r\n        }\r\n        Insert: {\r\n          id?: string\r\n          name: string\r\n          color: string\r\n          image: string\r\n        }\r\n        Update: {\r\n          id?: string\r\n          name?: string\r\n          color?: string\r\n          image?: string\r\n        }\r\n      }\r\n    },\r\n    Views: {\r\n      [_ in never]: never\r\n    }\r\n    Functions: {\r\n      [_ in never]: never\r\n    }\r\n    Enums: {\r\n      [_ in never]: never\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nfunction.ts\r\n```ts\r\nexport function supabaseClient() {\r\n  return createClient<Database>(environment.supabase.url, environment.supabase.key, {\r\n    auth: {\r\n      autoRefreshToken: true,\r\n      persistSession: true,\r\n    },\r\n  });\r\n}\r\n\r\nsupabase.from('themes').select('name,colors(*),images(*)').order('id').limit(1).single()\r\n```\r\n\r\nReturn message on `from`:\r\n```\r\n(method) SupabaseClient<Database, \"public\", { Tables: { themes: { Row: { id: string; name: string; color: string; image: string; }; Insert: { id?: string | undefined; name: string; color: string; image: string; }; Update: { ...; }; }; }; Views: {}; Functions: {}; Enums: {}; }>.from<\"themes\", {\r\n    Row: {\r\n        id: string;\r\n        name: string;\r\n        color: string;\r\n        image: string;\r\n    };\r\n    Insert: {\r\n        id?: string | undefined;\r\n        name: string;\r\n        color: string;\r\n        image: string;\r\n    };\r\n    Update: {\r\n        id?: string | undefined;\r\n        name?: string | undefined;\r\n        color?: string | undefined;\r\n        image?: string | undefined;\r\n    };\r\n}>(relation: \"themes\"): any (+2 overloads)\r\n```\r\n\r\n## Expected behavior\r\n\r\nI would expect `from` to return `PostgrestQueryBuilder<{ id: string; name: string; color: string; image: string; }>` (or something like that) to continue type safety\r\n\r\n## System information\r\n\r\n- OS: MacOS\r\n- Version of supabase-js: 2.0.0\r\n- Version of Node.js: v16.14.0\r\n",
            "author": {
                "login": "bastiaanv"
            },
            "state": "CLOSED",
            "createdAt": "2022-10-19T08:59:52Z",
            "closedAt": "2022-10-19T11:21:23Z",
            "url": "https://github.com/supabase/postgrest-js/issues/356",
            "comments": [
                {
                    "id": "IC_kwDODheSms5Mgzun",
                    "body": "Can you try updating `@supabase/supabase-js`? This might be related to https://github.com/supabase/supabase-js/issues/602 which we recently fixed",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-10-19T09:01:41Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/356#issuecomment-1283668903"
                },
                {
                    "id": "IC_kwDODheSms5Mhf-6",
                    "body": "It is. Thank you!",
                    "author": {
                        "login": "bastiaanv"
                    },
                    "createdAt": "2022-10-19T11:21:23Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/356#issuecomment-1283850170"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5Utagt",
            "number": 360,
            "title": "Database types on NX Monorepo",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nI'm trying to get the types of the database on postgrest client in a Nx monorepo and it's not working properly. I don't know if this is a NX problem or postgrest-js. Can someone help with this?\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Go to this [repo](https://github.com/digoburigo/pgrest)\r\n2. Clone it\r\n3. Install packages with `npm install`\r\n4. Check the postgrest client on the file `apps/pgrest/pages/index.tsx`\r\n5. You will find that the client it's not doing the auto completion\r\n\r\n## Expected behavior\r\n\r\nAutocomplete based on the Database type\r\n\r\n## Screenshots\r\n\r\n![image](https://user-images.githubusercontent.com/28462822/197591345-8d007f14-dc96-4cb0-91c5-67a2bfbc917d.png)\r\n\r\n## System information\r\n\r\n- OS: Linux Mint\r\n- \"@supabase/postgrest-js\": \"^1.1.0\",\r\n- Version of Node.js: 16.13.0",
            "author": {
                "login": "digoburigo"
            },
            "state": "CLOSED",
            "createdAt": "2022-10-24T17:44:45Z",
            "closedAt": "2022-10-31T03:30:06Z",
            "url": "https://github.com/supabase/postgrest-js/issues/360",
            "comments": [
                {
                    "id": "IC_kwDODheSms5M48Kk",
                    "body": "Are you writing the types manually? Some of the fields are mandatory even though you have none of them. An empty schema looks like:\r\n```ts\r\nexport type Json =\r\n  | string\r\n  | number\r\n  | boolean\r\n  | null\r\n  | { [key: string]: Json }\r\n  | Json[]\r\n\r\nexport interface Database {\r\n  public: {\r\n    Tables: {\r\n      [_ in never]: never\r\n    }\r\n    Views: {\r\n      [_ in never]: never\r\n    }\r\n    Functions: {\r\n      [_ in never]: never\r\n    }\r\n    Enums: {\r\n      [_ in never]: never\r\n    }\r\n  }\r\n}\r\n```",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-10-25T05:18:19Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/360#issuecomment-1289994916"
                },
                {
                    "id": "IC_kwDODheSms5M6Yow",
                    "body": "Oh ok, to make the types work properly I must use the supabase cli to generate the database types? I will try that to see. Thanks for the tip",
                    "author": {
                        "login": "digoburigo"
                    },
                    "createdAt": "2022-10-25T11:11:23Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/360#issuecomment-1290373680"
                },
                {
                    "id": "IC_kwDODheSms5M7fO_",
                    "body": "Yeah, now I'm getting the autocompletion, but for some reason in the method `select` it's only showing the `*` to get all the fields,  is there something more to configure? I pushed to the repo the change with the correct database type.",
                    "author": {
                        "login": "digoburigo"
                    },
                    "createdAt": "2022-10-25T14:39:26Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/360#issuecomment-1290662847"
                },
                {
                    "id": "IC_kwDODheSms5NKuBM",
                    "body": "Hmm I don't think autocomplete is supposed to work in `.select()`, but it should work for filters.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-10-28T08:08:48Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/360#issuecomment-1294655564"
                },
                {
                    "id": "IC_kwDODheSms5NMdLS",
                    "body": "Oh ok, so the ```select``` method don't have the autocompletion because of the vairous features provided by PosgREST? Thanks, Really apreciated the help! Feel free to close the issue",
                    "author": {
                        "login": "digoburigo"
                    },
                    "createdAt": "2022-10-28T15:04:21Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/360#issuecomment-1295110866"
                },
                {
                    "id": "IC_kwDODheSms5NRupb",
                    "body": ":+1: it's more to do with how the typings are implemented rather than what features PostgREST has",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-10-31T03:30:06Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/360#issuecomment-1296493147"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5VRQ9z",
            "number": 361,
            "title": "Getting 406s in network logs if `.maybeSingle()` returns no result",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen selecting using `.maybeSingle()`, I'm getting an error logged to console if there's 0 rows returned. There's no error if I remove `.maybeSingle()`, and there's no error if a row is returned.\r\n\r\nTo be clear, the query still returns successfully.\r\n\r\n![image](https://user-images.githubusercontent.com/11315492/199113146-911bb145-c6f3-40e3-ae05-854b22dfd1a8.png)\r\n\r\nThe stack trace seems to points to this line (probably a bad source map):\r\nhttps://github.com/supabase/postgrest-js/blob/84f151834a4e305508cd246cba9ea33e6affc0f2/src/PostgrestBuilder.ts#L102\r\n\r\n## To Reproduce\r\n\r\n```js\r\n\tconst profileResult = await supabaseClient\r\n\t\t.from('profiles')\r\n\t\t.select()\r\n\t\t.eq('id', session.user.id)\r\n\t\t.maybeSingle()\r\n```\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser: Brave\r\n- Version of supabase-js: 2.0.4\r\n- Version of Node.js: 16.15.0",
            "author": {
                "login": "probablykasper"
            },
            "state": "CLOSED",
            "createdAt": "2022-10-31T22:40:14Z",
            "closedAt": "2023-10-12T10:14:35Z",
            "url": "https://github.com/supabase/postgrest-js/issues/361",
            "comments": [
                {
                    "id": "IC_kwDODheSms5NXlkN",
                    "body": "> The stack trace seems to points to this line (probably a bad source map)\r\n\r\nHmm the trace points to `PostgrestBuilder.ts:70` which looks right:\r\n\r\nhttps://github.com/supabase/postgrest-js/blob/84f151834a4e305508cd246cba9ea33e6affc0f2/src/PostgrestBuilder.ts#L70\r\n\r\nSo it comes from the `fetch` invocation. I suspect the browser's native `fetch` is logging all `4xx`s - the way we do `maybeSingle()` is we do `single()` but ignore the error, so the `406` comes from PostgREST. Should be harmless, but noisy - I suppose we could instead treat it as a non-`single()` and just throw if there are >1 rows.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-11-01T04:58:15Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/361#issuecomment-1298028813"
                },
                {
                    "id": "IC_kwDODheSms5RnoVV",
                    "body": "> the way we do maybeSingle() is we do single() but ignore the error, so the 406 comes from PostgREST\r\n\r\nNot ideal to ignore the error on the client as the logs would also still contain the 406. I think https://github.com/PostgREST/postgrest/pull/2164#issuecomment-1165035270 would be the ideal solution.\r\n\r\n(basically a header that defines expected number of returned rows)",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-01-03T02:52:32Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/361#issuecomment-1369343317"
                },
                {
                    "id": "IC_kwDODheSms5R2WKd",
                    "body": "Gotcha, changing this issue to track refactoring the code to use that feature once it's out :+1:",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-01-06T06:37:00Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/361#issuecomment-1373201053"
                },
                {
                    "id": "IC_kwDODheSms5WuBD8",
                    "body": "Hi @soedirgo Any update on when this might be addressed? ",
                    "author": {
                        "login": "brentrobbins"
                    },
                    "createdAt": "2023-03-04T22:12:21Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/361#issuecomment-1454903548"
                },
                {
                    "id": "IC_kwDODheSms5cGd1U",
                    "body": "@brentrobbins can try to `npm update @supabase/postgrest-js`? This should fix most of the cases, the rest will need some changes on PostgREST proper",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-05-12T05:44:43Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/361#issuecomment-1545198932"
                },
                {
                    "id": "IC_kwDODheSms5hRLEw",
                    "body": "I am using `@supabase/postgrest-js@1.7.2` and I'm still having the issue where the API returns `406` errors when using `.maybeSingle()`.\r\n\r\nThis seems to be a mistake. I would expect this type of query to return a 200 status with a null result, as opposed to a non-200 status.",
                    "author": {
                        "login": "otang"
                    },
                    "createdAt": "2023-07-12T05:52:43Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/361#issuecomment-1631891760"
                },
                {
                    "id": "IC_kwDODheSms5oo4BB",
                    "body": "Any update on this? For us the issue appears to be this line: https://github.com/supabase/postgrest-js/blob/v0.37.4/src/lib/types.ts#L151 which contains hard coded `Results contain 0 rows`, currently the endpoint returns `The result contains 0 rows` in the details",
                    "author": {
                        "login": "francisace"
                    },
                    "createdAt": "2023-10-10T14:30:09Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/361#issuecomment-1755545665"
                },
                {
                    "id": "IC_kwDODheSms5os2_p",
                    "body": "On PostgREST 11.2.0, the format of the error got changed on https://github.com/PostgREST/postgrest/pull/2876 to \"The result contains 0 rows\".  \r\n\r\nI didn't know `postgrest-js` was relying on the messages. For now we could change the detection to `0 rows`. This should work for previous and newer versions.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-10-11T01:22:24Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/361#issuecomment-1756590057"
                },
                {
                    "id": "IC_kwDODheSms5o3TbW",
                    "body": ":tada: This issue has been resolved in version 1.8.5 :tada:\n\nThe release is available on:\n- [GitHub release](https://github.com/supabase/postgrest-js/releases/tag/v1.8.5)\n- [npm package (@latest dist-tag)](https://www.npmjs.com/package/@supabase/postgrest-js/v/1.8.5)\n\nYour **[semantic-release](https://github.com/semantic-release/semantic-release)** bot :package::rocket:",
                    "author": {
                        "login": "github-actions"
                    },
                    "createdAt": "2023-10-12T10:15:50Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/361#issuecomment-1759327958"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5VeWsz",
            "number": 362,
            "title": "Unable to delete multiple records",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nIt seems that it is not possible to delete multiple records with the supabase client.\r\n\r\nIn my project I have a table called `public.venue_access` with a composite primary key `(user_id, venue_id)` and my own users table with extra information `public.users`.\r\nI want to set which venues the user can alter in the venue access table. I want to it like in the following example.\r\n\r\n```typescript\r\nsupabase.from('venue_access').upsert([{user_id: 1, venue_id: 5}, {user_id: 1, venue_id: 6}])\r\nsupabase.from('venue_access').delete().eq('user_id', 1).neq('venue_id', [1,2,3]);\r\n```\r\n\r\nThe upsert part work perfectly and inserts the missing records.\r\nHowever the delete part fails and I get the following error\r\n\r\n```json\r\n{\r\n  \"code\":\"22P02\",\r\n  \"details\":null,\r\n  \"hint\":null,\r\n  \"message\":\"invalid input syntax for type bigint: \\\"1,2,3\\\"\"\r\n}\r\n```\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Create a user table with it's id as int8\r\n2. create a venue access table like descibed above\r\n3. Create some entries in both tables\r\n4. run the code in the example\r\n\r\n## Expected behavior\r\n\r\nI expected the records to be deleted with no errors.\r\n\r\n## Screenshots\r\n\r\nNot relavant\r\n\r\n## System information\r\n\r\n- OS: NixOS 22.05 (Linux kernel)\r\n- Browser: firefox\r\n- Version of supabase-js: 2.0.4\r\n- Version of Node.js: 16.16.0\r\n\r\n## Additional context\r\n\r\nThe http request is:\r\n\r\n```\r\nDELETE http://localhost:54321/rest/v1/venue_access?user_id=eq.1&venue_id=neq.1,2,3\r\n```",
            "author": {
                "login": "Alexnortung"
            },
            "state": "CLOSED",
            "createdAt": "2022-11-02T19:49:16Z",
            "closedAt": "2022-11-03T08:11:08Z",
            "url": "https://github.com/supabase/postgrest-js/issues/362",
            "comments": [
                {
                    "id": "IC_kwDODheSms5NlIf_",
                    "body": "> supabase.from('venue_access').delete().eq('user_id', 1).neq('venue_id', [1,2,3]);\r\n\r\nTry using [in](https://supabase.com/docs/reference/javascript/in) with [not](https://supabase.com/docs/reference/javascript/not) instead of `neq`.\r\n\r\n> {\r\n  \"code\":\"22P02\",\r\n  \"details\":null,\r\n  \"hint\":null,\r\n  \"message\":\"invalid input syntax for type bigint: \\\"1,2,3\\\"\"\r\n}\r\n\r\nThe error is telling that you can't compare with equality a bigint with a bigint array.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-11-03T02:39:31Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/362#issuecomment-1301579775"
                },
                {
                    "id": "IC_kwDODheSms5Nl1I6",
                    "body": "Thanks alot this works. I solved it by\r\n\r\n```typescript\r\nsupabase.from('venue_access').delete().eq('user_id', 1).not('venue_id', 'in', `(${[1,2,3].join(',')})`);\r\n```\r\n\r\nSorry I reported it as a bug, I guess the error description just didn't make sense to me",
                    "author": {
                        "login": "Alexnortung"
                    },
                    "createdAt": "2022-11-03T08:11:08Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/362#issuecomment-1301762618"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5VnLDN",
            "number": 363,
            "title": "How to handle timeouts",
            "body": "# Feature request : How to handle timeouts\r\n\r\nThis is my first project using Supabase, and I just realised that:\r\n\r\n- If I do an `upsert` with my wifi shut down for some seconds, then I immediately get a CORS error from Firefox, and the callback in `then` is executed, in which I can access the `error` field of the passed object ( `{ message: \"FetchError: NetworkError when attempting to fetch resource.\", details: \"\", hint: \"\", \u2026 }` ).\r\n\r\n- If I do the same but less than seconds after cutting internet access, then, I don't get the CORS error, and it seems there is no timeout. Only when I connect back do I get the CORS error, and can handle the error in the `then`.\r\n\r\nFor my UX, I need to know if that request failed in seconds. I could implement my own timeout logic in the app, e.g. if I didn't get an answer in 3 seconds show a warning that the backend is unresponsive, but I don't think that's the best way to do it.\r\n\r\nCould supabase-js provide an option to set the timeout for fetch, either globally or per-request?\r\n\r\nOtherwise, I've seen it is possible to provide a custom fetch implementation during the initialization, I could just provide a fetch with the timeout value that I want. I don't know if this is intended for my use-case, as setting the timeout value seems basic enough and I would have expected a simple option.\r\n\r\nThanks for that awesome project in any case.",
            "author": {
                "login": "supafana"
            },
            "state": "OPEN",
            "createdAt": "2022-11-04T15:31:19Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/363",
            "comments": [
                {
                    "id": "IC_kwDODheSms5Od4GF",
                    "body": "I think you can use [`.abortSignal()`](https://supabase.com/docs/reference/javascript/db-abortsignal) with [`AbortSignal.timeout()`](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/timeout) for this (we should put this on the docs tbh):\r\n\r\n```ts\r\nconst { data, error } = await supabase\r\n  .from('some_table')\r\n  .select()\r\n  .abortSignal(AbortSignal.timeout(3000))\r\n```\r\n\r\nWe put off timeout support for now because, as noted in the MDN link, it's not possible to combine multiple signals atm (which is the way we thought about implementing it).",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-11-16T06:41:18Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/363#issuecomment-1316454789"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5WQRdI",
            "number": 367,
            "title": "Return `undefined` instead of `null` for `data` and `error` result properties",
            "body": "# Feature request\r\n\r\nI considered opening a PR for this, but thought I should open it up for discussion first, because it would in fact be a breaking change.\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nSort of. When calling supabase and there's no data in the response, probably because there was an error, `data` will be set to `null`. Likewise, `error` will be set to `null` if there's no error in the response. This makes it easy to destructure into a `{data, error}` tuple, but it unfortunately also makes it a little awkward to apply defaults, for example if you don't care for the error, or want to destructure the returned values. For example, this doesn't work:\r\n\r\n```js\r\nconst { data: [userprofile] = [], error } = await supabase\r\n  .from('userprofile')\r\n  .select('id, metadata, identities')\r\n  .eq(`name`, name)\r\n```\r\n\r\nThis will always cause an error when `data` is `null`, because `null` is not iterable. The `= []` default does nothing, because it'd only apply when `data` is `undefined`.\r\n\r\nThis particular code can be fixed fairly easily, by adding the relatively new `maybeSingle` modifier:\r\n\r\n```js\r\nconst { data: userprofile, error } = await supabase\r\n  .from('userprofile')\r\n  .select('id, metadata, identities')\r\n  .eq(`name`, name)\r\n  .maybeSingle()\r\n```\r\n\r\nThis may seem contrived, and this particular case is easily solved, but when `data` and `error` always return as `null` and never as `undefined`, it's pretty much impossible to destructure these objects further because doing so will always cause errors one way another. So you have to store away the `data` and `error` variables to destructure them later, like so:\r\n\r\n```js\r\nconst { data, error } = await supabase\r\n  .from('userprofile')\r\n  .select('id, metadata, identities')\r\n  .eq(`name`, name)\r\n\r\nconst [userprofile] = data ?? []\r\n```\r\n\r\nNot that big of a deal, until you start having more than one query in the same scope:\r\n\r\n```js\r\nconst { data: data1 } = await supabase.from('a').select('stuff')\r\nconst { data: data2 } = await supabase.from('b').select('moarstuff')\r\n\r\nconst { stuff } = data1 ?? {}\r\nconst { moar } = data2 ?? {}\r\n\r\nconst togetherNow = { ...stuff, ...moar }\r\n```\r\n\r\nIf `data` instead was returned as `undefined`, the above could be written more succinctly:\r\n\r\n\r\n```js\r\nconst { data: { stuff } = {} } = await supabase.from('a').select('stuff')\r\nconst { data: { moar } = {} } = await supabase.from('b').select('moarstuff')\r\n\r\nconst togetherNow = { ...stuff, ...moar }\r\n```\r\n\r\n## Describe the solution you'd like\r\n\r\nReturn `undefined` instead of `null` for `data` and `error`, when it makes sense. E.g. `data` is never defined when there's an error, and `error` is never defined when there's `data`.\r\n\r\n## Describe alternatives you've considered\r\n\r\nAlternatives are described above, essentially use the nullish operation on the returned result properties.\r\n\r\n## Additional context\r\n\r\nPresumably this should be considered a breaking change. Most checks on these properties probably do simple falsy checks, or optional chaining, e.g.:\r\n\r\n```js\r\nif (!data) {\r\n  // Do stuff\r\n}\r\n\r\nconst whatever = data?.stuff\r\nconst { things } = data ?? {}\r\nconst [first, ...rest] = data ?? []\r\n```\r\n\r\nIf however, someone does a strict check for `null`, their code will break:\r\n\r\n```js\r\nif (data === null) {\r\n  // This won't work if data is undefined\r\n}\r\n```",
            "author": {
                "login": "mstade"
            },
            "state": "OPEN",
            "createdAt": "2022-11-13T22:02:32Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/367",
            "comments": [
                {
                    "id": "IC_kwDODheSms5PMSpV",
                    "body": "Hey, sorry for the late response, and thanks for the detailed proposal!\r\n\r\nSo we actually made the change for supabase-js v2, but it was [reverted](https://github.com/supabase/postgrest-js/pull/342) to make it consistent with all the other client libraries.\r\n\r\n> This makes it easy to destructure into a {data, error} tuple, but it unfortunately also makes it a little awkward to apply defaults\r\n\r\nTIL! Somehow I've survived years of JS without knowing you can set defaults like this \ud83d\ude05\r\n\r\nAs you mentioned, this would be a breaking change, so it's likely slated for supabase-js v3 - but this is one of the items under consideration, not just for postgrest-js but also the other libs.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-11-28T06:53:35Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/367#issuecomment-1328622165"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5WgPG-",
            "number": 370,
            "title": "Query parser can't parse `id::text`",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nI have BigInt id columns that I have to query with `id::text` everywhere due to overflow issues (related: #319). However, these queries breaks the `ParseQuery` type.\r\n\r\n## To Reproduce\r\n\r\nBacked by a column of type `BigInt`, write a query and typecheck with TypeScript:\r\n\r\n```ts\r\n  let { data, error } = await supabase\r\n      .from(\"subscriptions\")\r\n      .select(\"id\");\r\n```\r\n\r\nHover over `data` to see the inferred type.\r\n\r\n## Expected behavior\r\n\r\nAs a result of the query above, `id` type is computed as `string`.\r\n\r\n## Screenshots\r\n<img width=\"741\" alt=\"image\" src=\"https://user-images.githubusercontent.com/111265/202151538-7eda23c6-4e01-4872-9687-90812f1e9aa6.png\">\r\n<img width=\"440\" alt=\"image\" src=\"https://user-images.githubusercontent.com/111265/202151616-3e0f257a-2d58-45c0-8692-13818a9e3b4b.png\">\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Version of @supabase/postgrest-js: 1.1.0\r\n- Version of @supabase/supabase-js: 2.1.0\r\n- Version of Node.js: v16.14.0\r\n",
            "author": {
                "login": "ozanmakes"
            },
            "state": "OPEN",
            "createdAt": "2022-11-16T10:13:01Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/370",
            "comments": []
        },
        {
            "id": "I_kwDODheSms5WsB6U",
            "number": 371,
            "title": "Queries that contain a colon return null",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nPerforming the following query returns a null result.\r\n\r\nA query using supabase-js that contains a colon (\":\") returns a null result.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n```js\r\nsupabase.from('profile').select('*').eq('username', 'test:user').single()\r\n```\r\n\r\n## Expected behavior\r\n\r\nTo work like SQL equivalent\r\n\r\n```sh\r\nselect * from profile where username = 'test:user'\r\n```\r\n\r\n## Screenshots\r\n\r\nN/A\r\n\r\n## System information\r\n\r\n- OS: macOS 13.0.1\r\n- Version of supabase-js: 2.1.0\r\n- Version of Node.js: v16.15.1\r\n\r\n",
            "author": {
                "login": "roboncode"
            },
            "state": "CLOSED",
            "createdAt": "2022-11-17T22:08:55Z",
            "closedAt": "2022-11-18T03:47:52Z",
            "url": "https://github.com/supabase/postgrest-js/issues/371",
            "comments": [
                {
                    "id": "IC_kwDODheSms5Opgjj",
                    "body": "Can't reproduce with plain curl calls or postgrest-js:\r\n\r\n```bash\r\ncurl 'localhost:3000/projects?name=eq.foo:bar'\r\n\r\n[{\"id\":6,\"name\":\"foo:bar\",\"client_id\":null}]\r\n```\r\n\r\n```js\r\nconst { PostgrestClient } = require('.')\r\nconst postgrest = new PostgrestClient('http://localhost:3000')\r\n\r\npostgrest.from('projects').select('*').eq('name','foo:bar').\r\nthen(({ data, error }) => console.log(data, error))\r\n\r\n[ { id: 6, name: 'foo:bar', client_id: null } ] \r\n```",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-11-18T03:42:26Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/371#issuecomment-1319504099"
                },
                {
                    "id": "IC_kwDODheSms5OphIu",
                    "body": "@roboncode I suggest to try different `eq` values and see if it's indeed a problem with colons or maybe no result is returned due to RLS. ",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-11-18T03:47:52Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/371#issuecomment-1319506478"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5XFDHz",
            "number": 372,
            "title": "Cannot use filter or modifiers on rpc call",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen chaining filters or modifiers to an rpc function as documented [here](https://supabase.com/docs/reference/javascript/rpc#call-a-postgres-function-with-filters) the filter and modifiers are ignored and all records are returned.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Create a table `options` with 50 records [id, value]\r\n2. Create a function `fetch_options` that fetches all records in the `options` table\r\n3. Call the function with `await supabase.rpc('fetch_options').ilike('%' + 'some partial value' + '%').limit(25);`\r\n\r\n## Expected behavior\r\n\r\nOnly records matching the filter and modifier are returned instead of all records.\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser: chrome\r\n- Version of supabase-js: 2.1.0\r\n- Version of Node.js: 16.15.0\r\n",
            "author": {
                "login": "N00nDay"
            },
            "state": "CLOSED",
            "createdAt": "2022-11-20T18:27:35Z",
            "closedAt": "2022-11-24T01:18:45Z",
            "url": "https://github.com/supabase/postgrest-js/issues/372",
            "comments": [
                {
                    "id": "IC_kwDODheSms5O8m7I",
                    "body": "After doing a few more tests I have found the following filters and modifiers do not work chaining on to rpc as documented:\r\n- `eq` (filter)\r\n- `like` (filter)\r\n- `ilike` (filter) but interestingly enough it loses case insensitivity\r\n- `limit` (modifier)",
                    "author": {
                        "login": "N00nDay"
                    },
                    "createdAt": "2022-11-20T18:44:53Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/372#issuecomment-1324510920"
                },
                {
                    "id": "IC_kwDODheSms5O8m7K",
                    "body": "Can you show your function?  \r\neq,ilike,limit all work for me on an rpc call with `returns setof mytable as`\r\n\r\nFrom PostgREST docs: `A function that returns a table type response can be shaped using the same filters as the ones used for tables and views:`",
                    "author": {
                        "login": "GaryAustin1"
                    },
                    "createdAt": "2022-11-20T19:16:34Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/372#issuecomment-1324510922"
                },
                {
                    "id": "IC_kwDODheSms5O8m7N",
                    "body": "@GaryAustin1  here is the function. If I am doing something incorrectly any information would be appreciated.\r\n\r\n```\r\nCREATE OR REPLACE FUNCTION fetch_customers()\r\nRETURNS TABLE ( id bigint, value text, subtext text) AS \r\n$BODY$\r\n  BEGIN\r\n      RETURN QUERY EXECUTE format(\r\n        'SELECT id, full_name, address FROM customers ORDER BY full_name ASC;');\r\n  END;\r\n$BODY$\r\nLANGUAGE plpgsql;\r\n```",
                    "author": {
                        "login": "N00nDay"
                    },
                    "createdAt": "2022-11-20T19:49:13Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/372#issuecomment-1324510925"
                },
                {
                    "id": "IC_kwDODheSms5O8m7P",
                    "body": "Tried SETOF Record with the following and it is still not working:\r\n\r\n```\r\ncreate or replace function fetch_customers()\r\nRETURNS SETOF Record\r\nlanguage sql\r\nsecurity definer\r\nset search_path = public\r\nstable\r\nas $$\r\n    SELECT id, full_name as value, address as subtext FROM customers ORDER BY full_name ASC;\r\n$$;\r\n```",
                    "author": {
                        "login": "N00nDay"
                    },
                    "createdAt": "2022-11-21T01:15:24Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/372#issuecomment-1324510927"
                },
                {
                    "id": "IC_kwDODheSms5O8m7Q",
                    "body": "   ``` CREATE OR REPLACE FUNCTION get_records()\r\n    RETURNS SETOF messages AS\r\n    $$\r\n        select * from messages;\r\n    $$ LANGUAGE sql;\r\n```\r\n```\r\nlet {data:data1,error:error1,count} = await supabase1\r\n        .rpc('get_records')\r\n        .select('*')\r\n        .ilike('message','Hi there')\r\n        .limit(5)\r\n```\r\n```\r\n{id: 39, created_at1: '2022-07-28T23:42:17.130425+00:00', message: 'hi there', message2: null, tags: null, \u2026}\r\n{id: 40, created_at1: '2022-07-28T23:43:34.705675+00:00', message: 'hi there', message2: null, tags: null, \u2026}\r\n{id: 41, created_at1: '2022-07-29T15:21:30.432956+00:00', message: 'hi there', message2: null, tags: null, \u2026}\r\n{id: 42, created_at1: '2022-07-29T15:21:40.915049+00:00', message: 'hi there', message2: null, tags: null, \u2026}\r\n{id: 43, created_at1: '2022-07-30T00:09:33.404916+00:00', message: 'hi there', message2: null, tags: null, \u2026}\r\n```\r\n\r\nSupabase-js 2.1.0\r\nThere is not easy way to know which server PostgREST version is running and it was supposed to move from 9.x to 10.x over past month.\r\n\r\nI did not think SETOF RECORD or TABLE should impact it, but I only tested with SETOF tablename...\r\n\r\n",
                    "author": {
                        "login": "GaryAustin1"
                    },
                    "createdAt": "2022-11-21T01:26:24Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/372#issuecomment-1324510928"
                },
                {
                    "id": "IC_kwDODheSms5O8m7S",
                    "body": "I have a feeling it has to do with me coercing the data. My columns are `id, full_name, address` but I am returning them as `id, value, subtext` as this is what all options are read as in my front-end. That's the only difference I can see between what you are doing and what I am doing.",
                    "author": {
                        "login": "N00nDay"
                    },
                    "createdAt": "2022-11-21T01:29:39Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/372#issuecomment-1324510930"
                },
                {
                    "id": "IC_kwDODheSms5O8m7U",
                    "body": "It is possible.  Hopefully narrowed it down enough a dev will know.   I'm dropping out.  Luck.",
                    "author": {
                        "login": "GaryAustin1"
                    },
                    "createdAt": "2022-11-21T01:35:54Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/372#issuecomment-1324510932"
                },
                {
                    "id": "IC_kwDODheSms5O8m7Z",
                    "body": "Tried creating a view with:\r\n```\r\nCREATE OR REPLACE VIEW fetch_customers as\r\nSELECT id, full_name as value, address as subtext FROM customers ORDER BY full_name ASC\r\n```\r\n\r\nAnd a function with:\r\n```\r\nCREATE OR REPLACE FUNCTION fetch_customers()\r\nRETURNS SETOF fetch_customers as\r\n$$\r\n    SELECT id, value, subtext FROM fetch_customers;\r\n$$ LANGUAGE SQL;\r\n```\r\n\r\nWhich is having the same effect as everything I have tried above.",
                    "author": {
                        "login": "N00nDay"
                    },
                    "createdAt": "2022-11-21T02:43:41Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/372#issuecomment-1324510937"
                },
                {
                    "id": "IC_kwDODheSms5O8m7b",
                    "body": "Currently, I have a workaround, albeit unpleasant, it is working. I am just encapsulating the entire function including the chaining, not ideal but it works.",
                    "author": {
                        "login": "N00nDay"
                    },
                    "createdAt": "2022-11-21T14:02:36Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/372#issuecomment-1324510939"
                },
                {
                    "id": "IC_kwDODheSms5O8nnm",
                    "body": "@N00nDay Could you provide a reproducible example? Table with sample data, the function plus a JS snippet would be great.\r\n\r\nNote: RPC filters [are tested](https://github.com/supabase/postgrest-js/blob/master/test/filters.ts#L554-L567) to work.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-11-23T03:48:23Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/372#issuecomment-1324513766"
                },
                {
                    "id": "IC_kwDODheSms5O-Ztf",
                    "body": "> @N00nDay Could you provide a reproducible example? Table with sample data, the function plus a JS snippet would be great.\n> \n> \n> \n> Note: RPC filters [are tested](https://github.com/supabase/postgrest-js/blob/master/test/filters.ts#L554-L567) to work.\n\n2 things I noticed when looking at the tested function in the link you provided - 'get_username_and_status':\n\n1. The function is expressly set as immutable. \n2. The table columns being returned matches the table columns being queried. \n\nCould either of these be the cause? I will work on a reproduction but I am curious if either of those jump out as a possible issue/difference that may be causing this. ",
                    "author": {
                        "login": "N00nDay"
                    },
                    "createdAt": "2022-11-23T12:23:08Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/372#issuecomment-1324981087"
                },
                {
                    "id": "IC_kwDODheSms5O_bLI",
                    "body": "> Could either of these be the cause? \r\n> 1. The function is expressly set as immutable.\r\n\r\nNot really, there tests done at the REST level [here](https://github.com/PostgREST/postgrest/blob/315b01ebf7da143a0756748d33fb37d7a953c8c0/test/spec/Feature/Query/RpcSpec.hs#L209-L217) with a function [that's not immutable](https://github.com/PostgREST/postgrest/blob/315b01ebf7da143a0756748d33fb37d7a953c8c0/test/spec/fixtures/schema.sql#L999-L1003).\r\n\r\n> The table columns being returned matches the table columns being queried.\r\n\r\nThat's strange. \r\n\r\n> CREATE OR REPLACE FUNCTION fetch_customers()\r\nRETURNS TABLE ( id bigint, value text, subtext text) AS \r\n$BODY$\r\n  BEGIN\r\n      RETURN QUERY EXECUTE format(\r\n        'SELECT id, full_name, address FROM customers ORDER BY full_name ASC;');\r\n  END;\r\n$BODY$\r\nLANGUAGE plpgsql;\r\n\r\nWhy do you need to change the `SELECT` columns inside the function if `supabase-js` can do it? Usually users use dynamic sql for things like GROUP BY which cannot be done directly with `supabase-js`.\r\n\r\nThat could be the issue, we could confirm with a reproducible example.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-11-23T15:24:27Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/372#issuecomment-1325249224"
                },
                {
                    "id": "IC_kwDODheSms5PBo6S",
                    "body": "> > Could either of these be the cause?\r\n> > \r\n> > 1. The function is expressly set as immutable.\r\n> \r\n> Not really, there tests done at the REST level [here](https://github.com/PostgREST/postgrest/blob/315b01ebf7da143a0756748d33fb37d7a953c8c0/test/spec/Feature/Query/RpcSpec.hs#L209-L217) with a function [that's not immutable](https://github.com/PostgREST/postgrest/blob/315b01ebf7da143a0756748d33fb37d7a953c8c0/test/spec/fixtures/schema.sql#L999-L1003).\r\n> \r\n> > The table columns being returned matches the table columns being queried.\r\n> \r\n> That's strange.\r\n> \r\n> > CREATE OR REPLACE FUNCTION fetch_customers()\r\n> > RETURNS TABLE ( id bigint, value text, subtext text) AS\r\n> > BODY\r\n> > BEGIN\r\n> > RETURN QUERY EXECUTE format(\r\n> > 'SELECT id, full_name, address FROM customers ORDER BY full_name ASC;');\r\n> > END;\r\n> > BODY\r\n> > LANGUAGE plpgsql;\r\n> \r\n> Why do you need to change the `SELECT` columns inside the function if `supabase-js` can do it? Usually users use dynamic sql for things like GROUP BY which cannot be done directly with `supabase-js`.\r\n> \r\n> That could be the issue, we could confirm with a reproducible example.\r\n\r\nI don't know why I never thought of this and you are completely right which I love because I would prefer to avoid `rpc` as much as possible to keep all my database calls in one place. You sir are a genius.",
                    "author": {
                        "login": "N00nDay"
                    },
                    "createdAt": "2022-11-24T01:18:35Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/372#issuecomment-1325829778"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5XQGrF",
            "number": 374,
            "title": "Return typings for RPCs with the JavaScript-client",
            "body": "### Discussed in https://github.com/supabase/supabase/discussions/10464\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **ameesme** November 22, 2022</sup>\r\nWe are using Supabase with a couple of RPCs and noticed that TypeScript return-types are defined as `Record<string,unknown>[]` instead of the actual return-values described in the Postgres function-definition.\r\n\r\nIs this expected behavior?\r\n\r\n## Example\r\n### Postgres Function\r\n```sql\r\nCREATE OR REPLACE FUNCTION public.job_get_recommendations(\r\n\tskills bigint[],\r\n\tweekly_hours integer,\r\n\tlocation_geo json,\r\n\ttravel_distance_kilometers integer\r\n) RETURNS TABLE(\r\n \tid integer,\r\n \ttitle character varying,\r\n \tdescription character varying,\r\n \tskills bigint[],\r\n \ttravel_distance_kilometers integer,\r\n \tlocation_geo json,\r\n \tscore integer,\r\n \treason recommendation_reasons[]\r\n)\r\n```\r\n\r\n### Generated Typescript-definition\r\n```js\r\njob_get_recommendations: {\r\n  Args: {\r\n    skills: unknown\r\n    weekly_hours: number\r\n    location_geo: Json\r\n    travel_distance_kilometers: number\r\n  }\r\n  Returns: Record<string, unknown>[]\r\n}\r\n```</div>",
            "author": {
                "login": "steve-chavez"
            },
            "state": "CLOSED",
            "createdAt": "2022-11-24T21:50:30Z",
            "closedAt": "2022-11-25T05:58:24Z",
            "url": "https://github.com/supabase/postgrest-js/issues/374",
            "comments": [
                {
                    "id": "IC_kwDODheSms5PGTck",
                    "body": "Closing in favor of https://github.com/supabase/cli/issues/635",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-11-25T05:58:24Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/374#issuecomment-1327052580"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5XlKh_",
            "number": 375,
            "title": "`unknown` type for properties in two level deep nested query",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\nWhen I do a query with a nested query inside a nested query the type for the second nested properties is `unknown`.\r\n\r\n## To Reproduce\r\nSo this query:\r\n```typescript\r\nconst { data } = await supabase\r\n  .from('events')\r\n  .select(`name,  guests: event_guests(attending, user: user_id(name))`)\r\n```\r\n\r\nWill result in the following type for the `data` variable. We see that `guests.user.name` is `unknown` but `guests.attending` is properly typed:\r\n```typescript\r\n{\r\n  name: string;\r\n} & {\r\n  guests: (\r\n    { attending: string; } & \r\n    { user: { name: unknown; } | { name: unknown; }[]; }\r\n  ) | (\r\n    { attending: string; } & \r\n    { user: { name: unknown; } | { name: unknown; }[]; }\r\n  )[];\r\n}[]\r\n```\r\n\r\n## Expected behavior\r\n`guests.user.name` should have the proper type inferred. `string` in this example.\r\n\r\n\r\n## System information\r\n- Version of postgrest-js: 1.1.0\r\n- Version of supabase-js: 2.1.1",
            "author": {
                "login": "samuba"
            },
            "state": "OPEN",
            "createdAt": "2022-11-30T10:00:03Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/375",
            "comments": []
        },
        {
            "id": "I_kwDODheSms5YkoFC",
            "number": 376,
            "title": "Error when deleting record by UUID: \"invalid input syntax for type bigint\"",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nI'm unable to delete a record by its UUID (v4) from the JS SDK.\r\n\r\nI call the function as described [here](https://supabase.com/docs/reference/javascript/delete)\r\n\r\n```typescript\r\nawait supabase.from(\"objectives\").delete().eq(\"id\", \"7AD4D995-DBE8-4BB6-B40E-02459086A24D\");\r\n```\r\n\r\nThe URL generated is: `https://<...>.supabase.co/rest/v1/objectives?id=eq.7AD4D995-DBE8-4BB6-B40E-02459086A24D`\r\n\r\nThe error is: `invalid input syntax for type bigint: \"7AD4D995-DBE8-4BB6-B40E-02459086A24D\"`\r\n\r\nI don't see what this has to do with a bigint, the field is defined as UUID \ud83e\udd14 \r\n\r\nI also tried to change the `id` field type from `uuid` to `text` but I get the same error.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Create a table with the `id` column configured as UUID\r\n2. Add a row with a custom UUID (v4)\r\n3. Call `supabase.from('your_table').delete().eq('id', 'your_v4_uuid')`\r\n4. See error\r\n\r\n## Expected behavior\r\n\r\nThe item should be deleted without error.\r\n\r\n## Screenshots\r\n\r\nHere is the configuration of the field.\r\n\r\n![Supabase Delete Error](https://user-images.githubusercontent.com/19408/206483096-10bf9771-1050-4f76-ad6b-999dff020aad.png)\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser: Latest Edge\r\n- Version of supabase-js: 2.1.3\r\n- Version of Node.js: 16.17.0\r\n\r\n",
            "author": {
                "login": "ByScripts"
            },
            "state": "CLOSED",
            "createdAt": "2022-12-08T15:21:23Z",
            "closedAt": "2022-12-09T16:36:37Z",
            "url": "https://github.com/supabase/postgrest-js/issues/376",
            "comments": [
                {
                    "id": "IC_kwDODheSms5QGYJ4",
                    "body": "As an additional information, `update` is working correctly:\r\n\r\n```typescript\r\nawait supabase.from(\"objectives\").update({ name: \"Edited\" }).eq(\"id\", \"7AD4D995-DBE8-4BB6-B40E-02459086A24D\");\r\n```\r\n\r\nThe generated URL is exactly the same. The only difference is that it is called with `PATCH` method instead of `DELETE`",
                    "author": {
                        "login": "ByScripts"
                    },
                    "createdAt": "2022-12-08T15:26:43Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/376#issuecomment-1343849080"
                },
                {
                    "id": "IC_kwDODheSms5QGYNe",
                    "body": "Interesting - does it work if you surround it with quotes? i.e. `'\"7AD4D995-DBE8-4BB6-B40E-02459086A24D\"'`",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-12-09T04:59:03Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/376#issuecomment-1343849310"
                },
                {
                    "id": "IC_kwDODheSms5QHj7v",
                    "body": "When adding quotes (single or double) they are part of the error: `invalid input syntax for type bigint: \"'7AD4D995-DBE8-4BB6-B40E-02459086A24D'\"`\r\n\r\nAs a workaround for now, I added a new auto incremented integer column (called it `tmp_id`)\r\n\r\n~Also, it's strange that the previous message mentioned \"bigint\" and since the creation of the new column the error mentions \"integer\".~ (my mystake, it still mention \"bigint\")",
                    "author": {
                        "login": "ByScripts"
                    },
                    "createdAt": "2022-12-09T11:01:58Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/376#issuecomment-1344159471"
                },
                {
                    "id": "IC_kwDODheSms5QH4xW",
                    "body": "Just to check if the column is a uuid and not a bigint, can you try running this on the [SQL editor](https://app.supabase.com/project/_/sql)?\r\n\r\n```sql\r\nselect\r\n  data_type\r\nfrom\r\n  information_schema.columns\r\nwhere\r\n  table_name = 'objectives'\r\n  and column_name = 'id';\r\n```\r\n\r\nIf it does return uuid I suggest you file a ticket on [support](https://app.supabase.com/support/new) - I couldn't reproduce the issue on my project.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2022-12-09T12:25:26Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/376#issuecomment-1344244822"
                },
                {
                    "id": "IC_kwDODheSms5QIO_I",
                    "body": "It does return \"uuid\".\r\n\r\nSo i made somes tests:\r\n\r\n1. Create a new table \"objective_new\" with ID as UUID => \u2705\r\n2. Duplicate \"objectives\" table + entries to \"objectives_duplicate\" => \u2705 \ud83e\udd14\r\n3. Rename \"objectives\" to \"objectives_renamed\" => \u2705 \ud83e\udd2f\r\n4. Renamed \"objective_duplicate\" to \"objectives\" => \ud83d\udeab\r\n5. Delete \"objectives\" then created a new \"objectives\" table => \ud83d\udeab\r\n\r\nConclusion: The problem is not the table itself... it's the table name (at least on my project).\r\n\r\nI'll file a ticket. Thank you for your time.",
                    "author": {
                        "login": "ByScripts"
                    },
                    "createdAt": "2022-12-09T13:53:43Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/376#issuecomment-1344335816"
                },
                {
                    "id": "IC_kwDODheSms5QI7im",
                    "body": "There's no assumption of `bigint`(or any type) on the postgREST/postgrest-js side.\r\n\r\n> Conclusion: The problem is not the table itself... it's the table name (at least on my project).\r\n\r\nSeeing that those duplicated names look alike, it could be that you did `select` on an old table that had the id as bigint and did `update` on a new one.\r\n\r\nWill close this for now but if you can provide a reproduction(with a sample `CREATE TABLE..`) we'll reopen.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-12-09T16:36:37Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/376#issuecomment-1344518310"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5Y-coP",
            "number": 377,
            "title": "Function interface type",
            "body": "# Bug report\r\n```ts\r\nexport type Json =\r\n  | string\r\n  | number\r\n  | boolean\r\n  | null\r\n  | { [key: string]: Json }\r\n  | Json[];\r\n\r\nexport interface Database {\r\n  cadastro: {\r\n    Tables: {\r\n      [_ in never]: never;\r\n    };\r\n    Views: {\r\n      [_ in never]: never;\r\n    };\r\n    Functions: {\r\n      aval_imoveis: {\r\n        Args: { inscricao_imobiliaria: string };\r\n        Returns: Example;\r\n      };\r\n    };\r\n    Enums: {\r\n      [_ in never]: never;\r\n    };\r\n  };\r\n}\r\n\r\n\r\ninterface Example {\r\n  prop: string;\r\n}\r\n```\r\n## Describe the bug\r\n\r\nWhy putting an interface on the `Returns` property I get an array type when using the postgrest client?\r\n\r\n\r\n\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\nJust add a custom Interface on the \u00b4Returns` property and use the client with the specific function\r\n\r\n## Expected behavior\r\n\r\nI don't know if it's a bug or I'm using the interface of the supabase client wrong\r\n\r\n## Screenshots\r\n\r\n![image](https://user-images.githubusercontent.com/28462822/207153386-79907a0a-2dec-42a2-b65c-e08404e7c056.png)\r\n\r\n## System information\r\n\r\n- Version of supabase-js: `\"@supabase/postgrest-js\": \"^1.1.0\",`\r\n- Version of Node.js: `\"16.18.1,`\r\n",
            "author": {
                "login": "digoburigo"
            },
            "state": "OPEN",
            "createdAt": "2022-12-12T21:04:19Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/377",
            "comments": []
        },
        {
            "id": "I_kwDODheSms5ZGi_8",
            "number": 378,
            "title": "Can't apply filter on JOIN table as it returns array(ANTI JOIN)",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nI was trying to implement a query which would normally be a subquery. The setup is something like this:\r\n\r\nTable 1: `articles(id, title, ...)`\r\n\r\nTable 2, join table (many to many): `ratings(article_id, user_id, was_rated)` -> `article_id` and `user_id` = compound primary key\r\n\r\nI need to get all articles which are not listed in `ratings`.\r\nAs we can't use subqueries I was thinking of a join table and a simple filter like described in the docs.\r\n\r\nWritten in SQL it would look like this: \r\n\r\n```SQL\r\nselect * from articles full join ratings on id = ratings.article_id where ratings.was_rated is null\r\n```\r\n\r\nWorks \u2705 The join is also correct as I can see the column `was_rated` with value `null`\r\n\r\nSo I assume that this should work in supabase:\r\n\r\n```js\r\nclient\r\n  .from('articles')\r\n  .select(`id, title, ratings(*)`)\r\n  .is('ratings.was_rated', null)\r\n```\r\n\r\nDoesn't work \u274c\r\n\r\nAs far as I understand this should be the exact translation of the SQL query, right?\r\n\r\nAfter some investigation I found out that it doesn't work because `ratings` is returned as an empty array `[]` instead of null. That's why the filter for `null` is not working. I also found out that an inner join returns the value like expected. But I can't work with inner joins for this use case.\r\n\r\nI may miss something because I am still new to supabase (and PostgREST) but I would consider this a bug.\r\n\r\n## Expected behavior\r\n\r\nExpect \r\n\r\n```js\r\nclient\r\n  .from('articles')\r\n  .select(`id, title, ratings(*)`)\r\n```\r\n\r\nNOT to return `[]` for `rating` but single value like the SQL query does.\r\n\r\n## Additional context\r\n\r\nAlso happy for suggestions how to structure my data to get all `articles` which are not listed in `ratings`.\r\n",
            "author": {
                "login": "sasweb"
            },
            "state": "CLOSED",
            "createdAt": "2022-12-07T13:19:44Z",
            "closedAt": "2022-12-16T23:40:08Z",
            "url": "https://github.com/supabase/postgrest-js/issues/378",
            "comments": [
                {
                    "id": "IC_kwDODheSms5QbheZ",
                    "body": "> I need to get all articles which are not listed in ratings.\r\n\r\nSeems you want an anti-join(left). This [feature](https://github.com/PostgREST/postgrest/pull/2584) is on master(not yet deployed):\r\n\r\n```js\r\nclient\r\n  .from('articles')\r\n  .select(`id, title, ratings(*)`)\r\n  .is('ratings', null)\r\n```\r\n\r\nYou'll be able to try this on the CLI soon.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-12-13T18:15:45Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/378#issuecomment-1349392281"
                },
                {
                    "id": "IC_kwDODheSms5Q0Evm",
                    "body": "[Anti-joins](https://supabase.com/blog/postgrest-11-prerelease#anti-joins) are available on the CLI for now but you can request on production by emailing to support@supabase.com.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2022-12-16T23:40:08Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/378#issuecomment-1355828198"
                },
                {
                    "id": "IC_kwDODheSms5Q1U8j",
                    "body": "> [Anti-joins](https://supabase.com/blog/postgrest-11-prerelease#anti-joins) are available on the CLI for now but you can request on production by emailing to [support@supabase.com](mailto:support@supabase.com).\r\n\r\nReally cool. Thank you very much!",
                    "author": {
                        "login": "sasweb"
                    },
                    "createdAt": "2022-12-17T10:25:47Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/378#issuecomment-1356156707"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5ZgR7j",
            "number": 381,
            "title": "Error is an empty object",
            "body": "# Bug report\r\n\r\nI'm making a request like this:\r\n```\r\nconst res = await postgrest.from('surveys').select('*').eq('id', 'abc')\r\nconsole.log(res)\r\n```\r\n\r\nThe HTTP request to the relevant URL (`localhost:5001/surveys?id=eq.abc&select=*`) returns a 404 status code and this JSON:\r\n```json\r\n{\"code\":\"22P02\",\"details\":null,\"hint\":null,\"message\":\"invalid input syntax for type uuid: \\\"abc\\\"\"}\r\n```\r\n\r\n## Describe the bug\r\n\r\nWhen I print `res`, `res.error` is an empty object, instead of the expected object containing the JSON response data.\r\n\r\n## Screenshots\r\n\r\n<img width=\"426\" alt=\"image\" src=\"https://user-images.githubusercontent.com/11166947/208269402-99fbeaac-d2e2-4272-b1bb-47020611c2c8.png\">\r\n\r\n## System information\r\n\r\n- OS: windows\r\n- Browser: chrome\r\n- Version of postgrest-js: v1.1.1\r\n",
            "author": {
                "login": "alexkreidler"
            },
            "state": "OPEN",
            "createdAt": "2022-12-17T23:16:03Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/381",
            "comments": [
                {
                    "id": "IC_kwDODheSms5R2Vm3",
                    "body": "The screenshot seems to say that `error` contains something - can you click the dropdown button there?\r\n\r\nAlso wrt the `invalid input syntax` error, can you make sure that you're querying the right table and that `id` has the type you expect? See also: https://github.com/supabase/postgrest-js/issues/376#issuecomment-1344518310",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-01-06T06:32:48Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/381#issuecomment-1373198775"
                },
                {
                    "id": "IC_kwDODheSms5ZeAVZ",
                    "body": "Sorry for my late response.\r\n\r\n![image](https://user-images.githubusercontent.com/11166947/230754422-d89ddec5-e904-4019-b594-8c66788623ff.png)\r\n\r\nAs you can see, that's simply Chrome DevTools' representation of an empty object. And yes I am querying the right table, but purposefully with a bad string id `\"abc\"` for the reproducibility of this bug. If you try writing any error-inducing code with library that results in a PostgREST-level error, unfortunately the library will not return it to the user. This is a pretty critical issue for me.",
                    "author": {
                        "login": "alexkreidler"
                    },
                    "createdAt": "2023-04-09T04:32:34Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/381#issuecomment-1501037913"
                },
                {
                    "id": "IC_kwDODheSms5aMXzG",
                    "body": "Ah got it, so the issue is the error from PostgREST isn't being populated on the `error` field - the invalid UUID format in the example is intentional. Can you see if it helps to update the library version? If not, can you put up a repo so I can reproduce this? We have tests on the error response so it's odd that this happens.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-04-18T13:48:30Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/381#issuecomment-1513192646"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5aafIy",
            "number": 382,
            "title": "Allow for custom indexes in `onConflict` upsert parameter",
            "body": "# Feature request\r\n\r\n## Is your feature request related to a problem? Please describe.\r\n\r\nThe [`upsert`](https://supabase.com/docs/reference/javascript/upsert) method has an optional `onConflict` which is described in the docs as:\r\n\r\n> Comma-separated UNIQUE column(s) to specify how duplicate rows are determined. Two rows are duplicates if all the `onConflict` columns are equal.\r\n\r\nI'm trying to do the following:\r\n\r\n```typescript\r\nconst { data, error } = await this.supabase.client\r\n    .from('my_table')\r\n    .upsert(my_data, { onConflict: 'my_custom_unique_index', ignoreDuplicates: true })\r\n    .select('*');\r\n```\r\n\r\nand I am getting the following error:\r\n\r\n> column \"my_custom_unique_index\" does not exist\r\n\r\nLooking under the hood, it looks like the PostgreSQL is being generated like this:\r\n\r\n```sql\r\nON CONFLICT(\"my_custom_unique_index\") DO NOTHING\r\n```\r\n\r\nThe above sql would work without the double quotes around the index name.\r\n\r\n## Describe the solution you'd like\r\n\r\nA way to specify a unique index to be used in the ON CONFLICT statement, instead of a column name.\r\n\r\nI don't know what the js would look like, but an example could be:\r\n\r\n```typescript\r\nconst { data, error } = await this.supabase.client\r\n    .from('my_table')\r\n    .upsert(my_data, { onConflict: 'my_custom_unique_index', onConflictType: 'index', ignoreDuplicates: true })\r\n    .select('*');\r\n```\r\n",
            "author": {
                "login": "kylerummens"
            },
            "state": "OPEN",
            "createdAt": "2023-01-03T03:35:18Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/382",
            "comments": [
                {
                    "id": "IC_kwDODheSms5Rr_mm",
                    "body": "> The above sql would work without the double quotes around the index name.\r\n\r\nCan you show an example of that working in plain SQL?\r\n\r\nAccording to [postgresql docs](https://www.postgresql.org/docs/current/sql-insert.html#SQL-ON-CONFLICT), `on conflict` only works on column names or constraint names.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-01-04T04:55:39Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/382#issuecomment-1370487206"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5agCLp",
            "number": 383,
            "title": "Computed relationships: Could not find a relationship",
            "body": "# Bug report\r\nComputed relationships: Could not find a relationship\r\n\r\n## Describe the bug\r\nTry to get computed relationships from `foreigndb_fdw` server by create a local table name `loans` that has `order_id` and create a function call `orders`\r\n\r\nThis is loans table\r\n![image](https://user-images.githubusercontent.com/19757130/210260810-9051eca9-1aaf-487d-8cc5-99ebbfe0aecc.png)\r\n\r\n`orders` function\r\n![image](https://user-images.githubusercontent.com/19757130/210261007-977c8d2a-ff0e-4ae2-b6ab-18aefed9d1bd.png)\r\n\r\n`product_orders`  from `foreigndb_fdw` server \r\n![image](https://user-images.githubusercontent.com/19757130/210261064-2c198f4b-e470-4ee1-b111-579ebec8bbd5.png)\r\n\r\n## To Reproduce\r\n\r\nCall RESTApi url `/rest/v1/loans?select=*,orders` i got one-to-one relationship \r\nhttps://postgrest.org/en/stable/api.html#computed-cols \r\n![image](https://user-images.githubusercontent.com/19757130/210261182-f02174cc-b6c0-4fa4-9303-74ce3dbfecf0.png)\r\n\r\nCall RESTApi with url `/rest/v1/loans?select=*,orders(*)`\r\nhttps://postgrest.org/en/stable/api.html#computed-relationships\r\n![image](https://user-images.githubusercontent.com/19757130/210261468-78ebdaed-8587-400a-86c6-f94606af9c72.png)\r\n\r\n\r\n## Expected behavior\r\nIt should return setof relationship table \r\nhttps://postgrest.org/en/stable/api.html#computed-relationships\r\n\r\n## Additional context\r\nAny way, I try to define the opposite one-to-many relationship\r\n![image](https://user-images.githubusercontent.com/19757130/210261821-870068a6-5f5b-43db-9779-a70681011e45.png)\r\n\r\nthan return multiple row instead of one-to-many\r\n![image](https://user-images.githubusercontent.com/19757130/210262008-d1877f36-90df-4199-bc28-68c3247ba11e.png)\r\n\r\n\r\n\r\n",
            "author": {
                "login": "putheng"
            },
            "state": "CLOSED",
            "createdAt": "2023-01-02T17:15:21Z",
            "closedAt": "2023-01-09T16:50:20Z",
            "url": "https://github.com/supabase/postgrest-js/issues/383",
            "comments": [
                {
                    "id": "IC_kwDODheSms5R8FqR",
                    "body": "Could you share your postgREST version? It can be done as mentioned [here](https://github.com/supabase/postgrest-js/issues/223#issuecomment-1333137399).\r\n\r\nAlso try doing `NOTIFY pgrst, 'reload schema';`.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-01-08T04:31:36Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/383#issuecomment-1374706321"
                },
                {
                    "id": "IC_kwDODheSms5SAowB",
                    "body": "This is my version\r\n\"info\": {\r\n        \"description\": \"standard public schema\",\r\n        \"title\": \"PostgREST API\",\r\n        \"version\": \"9.0.1.20220717 (pre-release) (d2df289)\"\r\n    }",
                    "author": {
                        "login": "putheng"
                    },
                    "createdAt": "2023-01-09T16:20:41Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/383#issuecomment-1375898625"
                },
                {
                    "id": "IC_kwDODheSms5SAynD",
                    "body": "Solved by upgrading PostgREST to 10.1.1 (aaa4fbc)",
                    "author": {
                        "login": "putheng"
                    },
                    "createdAt": "2023-01-09T16:50:20Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/383#issuecomment-1375939011"
                },
                {
                    "id": "IC_kwDODheSms5UMe4m",
                    "body": "I'm using a self-hosted Supabase and I switched out the postgrest container to `postgrest/postgrest:v10.1.1.20221215`, but I'm still seeing an issue with queries using `!inner` returning an array of 1 instead of an object. For those that have successfully got this working, any thoughts?",
                    "author": {
                        "login": "kevinmlong"
                    },
                    "createdAt": "2023-02-01T18:55:44Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/383#issuecomment-1412558374"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5a1PN7",
            "number": 384,
            "title": "Mismatch with join subquery between SQL execution and Postgrest results",
            "body": "# Bug report\r\n\r\nDisclaimer: I may be doing something wrong, or I might be missing something, somewhere. In this case, this may be a nice example of a not-that-trivial-yet-not-that-rare use case to include in the docs? :D\r\n\r\n## Describe the bug\r\n\r\nWhen calling a SQL function with a join on a subquery, those results are not shown in the Postgrest response, while they are there when the same function is called directly in SQL.\r\n\r\n## To Reproduce\r\n\r\nLet's start with some context. This is a stripped-down example DB representation.\r\n\r\n`languages` table\r\n| id | label   |\r\n|----|---------|\r\n| en | English |\r\n| fr | French |\r\n\r\n`cards` table\r\n| id      |\r\n|---------|\r\n| 01DE001 |\r\n| 01DE002 |\r\n\r\n`localized_cards` table (PK is made of `card_id` and `language_id` and they are both FKs)\r\n| card_id | language_id | name        | description        |\r\n|---------|-------------|-------------|--------------------|\r\n| 01DE001 | en          | Test name 1 | Test description 1 |\r\n| 01DE002 | en          | Test name 2 | Test description 2 |\r\n\r\n`regions` table\r\n| id | code        |\r\n|----|-------------|\r\n| 1  | region1code |\r\n| 2  | region2code |\r\n\r\n`localized_regions` table (PK is made of `region_id` and `language_id` and they are both FKs)\r\n| region_id | language_id | name     |\r\n|-----------|-------------|----------|\r\n| 1         | en          | Region 1 name |\r\n| 2         | en          | Region 2 name |\r\n\r\n`pivot_cards_regions` table, which keeps track of the many-to-many relationship between `cards` and `regions` (PK is made of `card_id` and `region_id` and they are both FKs)\r\n| card_id | region_id |\r\n|---------|-----------|\r\n| 01DE001 | 1         |\r\n| 01DE001 | 2         |\r\n\r\nI created a SQL function that, given a `card_id` and a `language_id` is able to return a row that contains the card id, the localized name and description for the card with the provided card id, and the language with the provided language id, and the list of regions related to that card, formatted as an array of region names translated in the provided language.\r\nBelow is the function implementation and a test result when run through SQL directly.\r\n```\r\ncreate or replace function get_localized_card(_card_id text, _language_id text)\r\n  returns table(\r\n    id text,\r\n    name text,\r\n    description text,\r\n    regions text[]\r\n  )\r\nas $$\r\nselect\r\n  cards.id,\r\n  localized_cards.name,\r\n  localized_cards.description,\r\n  rg.regions\r\nfrom cards\r\njoin localized_cards on localized_cards.card_id = cards.id\r\n-- join regions\r\nleft join (\r\n  select pivot_cards_regions.card_id, array_agg(localized_regions.name) as regions\r\n  from pivot_cards_regions\r\n  join regions on regions.id = pivot_cards_regions.region_id\r\n  join localized_regions on localized_regions.region_id = regions.id and localized_regions.language_id = _language_id\r\n  group by pivot_cards_regions.card_id\r\n) rg on cards.id = rg.card_id\r\nlocalized_card_subtypes.language_id = _language_id\r\nwhere cards.id = _card_id\r\nand localized_cards.language_id = _language_id;\r\n$$ language sql stable;\r\n```\r\n\r\nExample of query run\r\n`select get_localized_card('01DE001', 'en')`\r\nQuery result, as seen in Supabase SQL editor\r\n`(01DE001,\"Test name 1\",\"Test description 1\",{\"Region 1 name\", \"Region 2 name\"})`\r\n\r\nIf I run the same function via Supabase JS client or via a direct request to the Supabase Postgrest endpoint, I get this result:\r\n`[\r\n\t{\r\n\t\t\"id\": \"01DE001\",\r\n\t\t\"name\": \"Test name 1\",\r\n\t\t\"description\": \"Test description 1\",\r\n\t\t\"regions\": null\r\n\t}\r\n]`\r\n\r\nIt looks like the query is right on itself, but the result is not correctly exposed through Postgrest.\r\nHere is an example of the GET request made directly via Supabase Postgrest endpoint:\r\n`https://xxx.supabase.co/rest/v1/rpc/get_localized_card?_card_id=01DE001&_language_id=en`\r\n\r\n## Expected behavior\r\n\r\nI'd expect to have an array of `regions` instead of a `null` value.\r\n",
            "author": {
                "login": "Edo-San"
            },
            "state": "CLOSED",
            "createdAt": "2023-01-07T15:13:40Z",
            "closedAt": "2023-01-10T08:55:48Z",
            "url": "https://github.com/supabase/postgrest-js/issues/384",
            "comments": [
                {
                    "id": "IC_kwDODheSms5SD8zg",
                    "body": "Do you have RLS policies on the `regions` table?\r\n\r\nTry doing this to reproduce on plain SQL:\r\n\r\n```sql\r\nbegin;\r\nset local role authenticated;\r\nselect get_localized_card('01DE001', 'en');\r\nend;\r\n```",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-01-10T05:51:29Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/384#issuecomment-1376767200"
                },
                {
                    "id": "IC_kwDODheSms5SEjt9",
                    "body": "Hey, @steve-chavez thanks for the answer! :D\r\nI knew I was overlooking something.. you are indeed right, I still had to set up RLS policies on the newly joined tables.\r\n\r\nEverything is working as expected, now.\r\nWill close this, TYVM!",
                    "author": {
                        "login": "Edo-San"
                    },
                    "createdAt": "2023-01-10T08:55:48Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/384#issuecomment-1376926589"
                },
                {
                    "id": "IC_kwDODheSms5W0OFj",
                    "body": "Just wasted an embarrassing amount of time from this. I wish the \"no active RLS\" message on the top right was like super obvious and red or something. blinking would be even better.  ",
                    "author": {
                        "login": "TylerAHolden"
                    },
                    "createdAt": "2023-03-06T17:02:30Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/384#issuecomment-1456529763"
                },
                {
                    "id": "IC_kwDODheSms5W0nZm",
                    "body": "@TylerAHolden Good suggestion. Perhaps showing the role on the SQL editor with a \"RLS not applied\" notice. Will pass this feedback to the frontend team.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-03-06T17:49:36Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/384#issuecomment-1456633446"
                },
                {
                    "id": "IC_kwDODheSms5W0zj4",
                    "body": "> @TylerAHolden Good suggestion. Perhaps showing the role on the SQL editor with a \"RLS not applied\" notice. Will pass this feedback to the frontend team.\n\nOoh yes because for me, I was making a Postgres function but the client would show null values. Then I would try the functions select query on its own in the SQL editor and everything would work as expected.. so what would be nice is for every table written/referenced in the query editor that doesn't have an RLS, show a warning or something. Because in the query editor it would all run fine but client side is where it \"strangely doesn't work\"! ",
                    "author": {
                        "login": "TylerAHolden"
                    },
                    "createdAt": "2023-03-06T18:10:18Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/384#issuecomment-1456683256"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5a8g6I",
            "number": 386,
            "title": "daterange column input is modified before writing to db",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen writing to a `daterange` column with a range like `\"[2022-12-28, 2022-12-28]\"` the column is modified to look like `\"[2022-12-28,2022-12-29)\"`.\r\n\r\nThere are _two_ problems.\r\n\r\n1. The end date has been incremented by one day\r\n2. The upper bound of the range has been modified from _exclusive_ to _exclusive_\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Create a table with the following schema\r\n```\r\nCREATE TABLE periods (\r\n  id              text        PRIMARY KEY DEFAULT uuid_generate_v4(),\r\n  dates           daterange   NOT NULL,\r\n  EXCLUDE USING gist (dates WITH &&)\r\n);\r\n\r\n```\r\n\r\n2. Try to update it with the following code\r\n\r\n```js\r\nconst { data, error } = await this.supabase\r\n      .from('periods')\r\n      .insert({\r\n        dates: \"[2022-12-28, 2022-12-28]\",\r\n      })\r\n      .select()\r\n```\r\n\r\nLook at the returned data, or the data in the database, and see that the range has been modified.\r\n\r\n## Expected behavior\r\n\r\nThe input should not be tampered with. If the input is invalid an error should be thrown.\r\n\r\n## Screenshots\r\n\r\nHere is a screenshot of the debugger, showing a function that happens to be taking in the same date twice.\r\n\r\n![image](https://user-images.githubusercontent.com/1187432/209881036-1a4e32b6-7525-4eb5-9fb8-931ee2665479.png)\r\n\r\nYou can see in the watch panel that the `demo` value is the same one sent to `supabase.insert`, and that the `data` result in the watch panel is not the same.\r\n\r\n## System information\r\n- Version of supabase-js: `2.2.2`\r\n\r\n## Additional Context\r\n\r\nIf you enter this value into the web UI postgres interprets the range as `empty`. This seems like a valid result, but I am not sure if the webUI is just making a different modification.\r\n",
            "author": {
                "login": "kyeotic"
            },
            "state": "OPEN",
            "createdAt": "2022-12-28T22:38:44Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/386",
            "comments": [
                {
                    "id": "IC_kwDODheSms5WLtgi",
                    "body": "Hey @kyeotic, `[2022-12-28, 2022-12-28]` is equivalent to `[2022-12-28, 2022-12-29)` - the latter is just how Postgres decides to display the value. You can try running this on the SQL editor:\r\n\r\n```\r\nselect '[2022-12-28, 2022-12-28]'::daterange\r\n```\r\n\r\nThe two problems negate each other - if only one is present, the value would be incorrect.\r\n\r\nIn general, you can't expect the original text formatting of values to be preserved - you'll need a separate `text` column for that.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-02-27T08:33:42Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/386#issuecomment-1445910562"
                },
                {
                    "id": "IC_kwDODheSms5WOp4N",
                    "body": "@soedirgo Thank you for the response!\r\n\r\nI don't expect the values to be preserved as entered, I do want them converted into a range because I am doing range-based queries on the data. However, this statement is not correct\r\n\r\n> the latter is just how Postgres decides to display the value\r\n\r\nThe value is being modified _clientside_ before being sent to postgres. You can see this in the screenshot, which shows the data in the body of the HTTP request being sent. **This modification produces an error**.\r\n\r\nThe Web UI also modifies the input, but it modifies it to `empty`. This modification does not produce an error.\r\n\r\nThese behaviors are not aligned, and one of them produces an error. I believe this constitutes a bug in the JS library. If the JS library behaved like the Web UI and sent `empty` instead, the request would succeed.",
                    "author": {
                        "login": "kyeotic"
                    },
                    "createdAt": "2023-02-27T16:51:44Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/386#issuecomment-1446682125"
                },
                {
                    "id": "IC_kwDODheSms5WSfpR",
                    "body": "Are you sure it behaves differently on the dashboard? I can't seem to reproduce that (same result using the Table Editor):\r\n\r\n```\r\nselect '[2022-12-28, 2022-12-28]'::daterange as same_day_inclusive, '[2022-12-28, 2022-12-29)'::daterange as next_day_exclusive, '[2022-12-28, 2022-12-28)'::daterange as same_day_exclusive;\r\n```\r\n\r\n```\r\n| same_day_inclusive      | next_day_exclusive      | same_day_exclusive |\r\n| ----------------------- | ----------------------- | ------------------ |\r\n| [2022-12-28,2022-12-29) | [2022-12-28,2022-12-29) | empty              |\r\n```\r\n\r\nThere shouldn't be any client-side modification happening in the library.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-02-28T07:09:31Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/386#issuecomment-1447688785"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5bTld4",
            "number": 387,
            "title": "rcp() return type does not match SQL function return type",
            "body": "# Bug report\r\n\r\nI have a SQL function that returns a boolean  and Supabase CLI generates the TypeScript types as expected:\r\n```ts\r\nFunctions: {\r\n    some_function: {\r\n        Args: Record<PropertyKey, never>;\r\n        Returns: boolean;\r\n    };\r\n}\r\n```\r\n\r\nBut when I call the function, `data` has the type `boolean[] | null`, while I would expect `boolean | null`.\r\n```ts\r\nconst { data } = supabaseClient.rpc('some_function')\r\n```\r\n",
            "author": {
                "login": "joeldomke"
            },
            "state": "CLOSED",
            "createdAt": "2022-12-22T14:45:13Z",
            "closedAt": "2023-02-06T03:31:04Z",
            "url": "https://github.com/supabase/postgrest-js/issues/387",
            "comments": [
                {
                    "id": "IC_kwDODheSms5Ui_cC",
                    "body": ":tada: This issue has been resolved in version 1.3.1 :tada:\n\nThe release is available on:\n- [GitHub release](https://github.com/supabase/postgrest-js/releases/tag/v1.3.1)\n- [npm package (@latest dist-tag)](https://www.npmjs.com/package/@supabase/postgrest-js/v/1.3.1)\n\nYour **[semantic-release](https://github.com/semantic-release/semantic-release)** bot :package::rocket:",
                    "author": {
                        "login": "github-actions"
                    },
                    "createdAt": "2023-02-06T03:32:18Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/387#issuecomment-1418458882"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5bVUx5",
            "number": 388,
            "title": "Incorrect handling of union types in `PostgrestResponseSuccess<T>` type",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\n`await supabase.from(tableName).select(\"*\")` returns a type `PostgrestResponse<T>`, which could be of type `PostgrestResponseSuccess<T>`.\r\n\r\nCurrently `PostgrestResponseSuccess<T>` is defined as:\r\n```ts\r\ninterface PostgrestResponseSuccess<T> extends PostgrestResponseBase {\r\n    error: null;\r\n    data: T[];\r\n    count: number | null;\r\n}\r\n```\r\n\r\nNote that the generic type `T` above has no handling of union types. For example, for `PostgrestResponseSuccess<A | B>`, `data` is of type `(A | B)[]`, when it should be of type `A[] | B[]`.\r\n\r\nThis is problematic because `(A | B)[]`, an array that contains both type `A` and `B` entries, isn't a valid return type for a database `SELECT` query, while the correct type, `A[] | B[]`, generates a type error.\r\n\r\n## To Reproduce\r\n\r\nTo illustrate, consider a generic `useTable` hook which takes in `tableName` and returns a Tanstack Query `useQuery` hook that loads a table from Supabase.\r\n\r\n```ts\r\nimport { useQuery } from \"@tanstack/react-query\";\r\nimport { useSupabaseClient } from \"@supabase/auth-helpers-react\";\r\nimport { PostgrestError } from \"@supabase/supabase-js\";\r\n\r\n// Database types\r\ninterface Research {\r\n    id: string;\r\n    research: string;\r\n}\r\n\r\ninterface Link {\r\n    id: string;\r\n    link: string;\r\n}\r\n\r\ninterface Result {\r\n    id: string;\r\n    result: string;\r\n}\r\n\r\ntype TableName = \"researches\" | \"links\" | \"results\";\r\n\r\ntype Response = {\r\n    data: Research[] | Link[] | Result[] | null;\r\n    error: PostgrestError | null;\r\n};\r\n\r\ntype Query<T> = {\r\n    isLoading: boolean;\r\n    data:\r\n    | (T extends \"researches\"\r\n        ? Research[]\r\n        : T extends \"links\"\r\n        ? Link[]\r\n        : T extends \"results\"\r\n        ? Result[]\r\n        : any[])\r\n    | null | undefined;\r\n}\r\n\r\nexport default function useTable<T extends TableName>(tableName: T) {\r\n    const supabase = useSupabaseClient();\r\n\r\n    const { isLoading, data }: Query<T> = useQuery({\r\n        queryKey: [tableName],\r\n        queryFn: async () => {\r\n            /*    Type error here!\r\n                  vvvvvvvvvvvvvvv  */\r\n            const { data, error }: Response = await supabase\r\n                .from(tableName)\r\n                .select(\"*\");\r\n            if (error) throw error;\r\n            return data;\r\n        },\r\n    });\r\n\r\n    return { isLoading, data };\r\n}\r\n```\r\n\r\nThe full type error generated is as follows:\r\n```\r\nType 'PostgrestResponse<Research | Link | Result>' is not assignable to type 'Response'.\r\n  Type 'PostgrestResponseSuccess<Research | Link | Result>' is not assignable to type 'Response'.\r\n    Types of property 'data' are incompatible.\r\n      Type '(Research | Link | Result)[]' is not assignable to type 'Research[] | Link[] | Result[] | null'.\r\n        Type '(Research | Link | Result)[]' is not assignable to type 'Research[]'.\r\n          Type 'Research | Link | Result' is not assignable to type 'Research'.\r\n```\r\n\r\n## Expected behaviour\r\n\r\nIn a nutshell, our supplied `Response` generates the correct type, `Research[] | Link[] | Result[] | null`, which is what we expect returned from the database.\r\n\r\nHowever, Typescript tries to assign it to `(Research | Link | Result)[]`, an array that mixes `Research`, `Link`, and `Result` entries. This should, in no circumstance, be returned from the database. Hence, the type handling here is incorrect.\r\n\r\n## The fix\r\n\r\nThe fix is to allow the generic type `T` of `PostgrestResponseSuccess<T>` to be transformed into a distributive type if `T` is a union type. This can be implemented by adding a type `ToArray<T>`, as follows:\r\n\r\n```ts\r\ntype ToArray<T> = T extends any ? T[] : never;\r\n\r\ninterface PostgrestResponseSuccess<T> extends PostgrestResponseBase {\r\n    error: null;\r\n    data: ToArray<T>;\r\n    count: number | null;\r\n}\r\n```\r\n\r\nWith the fix in place, `PostgrestResponseSuccess<Research | Link | Result>` can be assigned correctly to `Response`.\r\n\r\n## References\r\n\r\nDistributive Conditional Types: https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#distributive-conditional-types\r\n\r\n",
            "author": {
                "login": "leohku"
            },
            "state": "OPEN",
            "createdAt": "2023-01-13T13:35:31Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/388",
            "comments": []
        },
        {
            "id": "I_kwDODheSms5cvB66",
            "number": 392,
            "title": "Unsupported Media Type on .explain query",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\n`.explain` results in media error.\r\n\r\n## To Reproduce\r\n\r\n```ts\r\nconst query = await supabase.from('test').select('*').explain();\r\n```\r\n\r\nresults in \r\n\r\n```ts\r\n{\r\n  error: {\r\n    code: 'PGRST107',\r\n    details: null,\r\n    hint: null,\r\n    message: 'None of these media types are available: application/vnd.pgrst.plan+text'\r\n  },\r\n  data: null,\r\n  count: null,\r\n  status: 415,\r\n  statusText: 'Unsupported Media Type'\r\n}\r\n```\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser: Chrome\r\n- Version of supabase-js: 2.4.1\r\n- Version of Node.js: 16\r\n",
            "author": {
                "login": "jsbrain"
            },
            "state": "CLOSED",
            "createdAt": "2023-01-24T10:48:22Z",
            "closedAt": "2023-01-26T06:47:10Z",
            "url": "https://github.com/supabase/postgrest-js/issues/392",
            "comments": [
                {
                    "id": "IC_kwDODheSms5TnZ-Y",
                    "body": "Might be related to https://github.com/supabase/supabase-js/issues/691",
                    "author": {
                        "login": "jsbrain"
                    },
                    "createdAt": "2023-01-24T10:50:39Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/392#issuecomment-1402838936"
                },
                {
                    "id": "IC_kwDODheSms5TomKn",
                    "body": "Hello, to use explain first you need to enable server side with:\r\n\r\n```sql\r\nalter role authenticator set pgrst.db_plan_enabled to true;\r\nnotify pgrst, 'reload config';\r\n```\r\n\r\nLet me know if that works.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-01-25T06:19:29Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/392#issuecomment-1403151015"
                },
                {
                    "id": "IC_kwDODheSms5To7cP",
                    "body": "Thanks @steve-chavez  for the clarification.\r\n\r\nProbably worth adding this to [the docs](https://supabase.com/docs/reference/javascript/introduction).\r\n\r\nLooks like so far `.explain` isn't documented at all!?",
                    "author": {
                        "login": "jsbrain"
                    },
                    "createdAt": "2023-01-25T08:13:50Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/392#issuecomment-1403238159"
                },
                {
                    "id": "IC_kwDODheSms5To9mq",
                    "body": "And unfortunately no, it did not work ... also restarted the deployment after I ran the commands but no change.\r\n\r\nI'm on self-hosted btw. with [this config](https://github.com/supabase/supabase/blob/f3031fa24fd4a65e7d48f079db45a0cd3ee0311c/docker/docker-compose.yml).",
                    "author": {
                        "login": "jsbrain"
                    },
                    "createdAt": "2023-01-25T08:22:55Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/392#issuecomment-1403247018"
                },
                {
                    "id": "IC_kwDODheSms5TrXRD",
                    "body": "If you're on self-hosted, you can add `PGRST_DB_PLAN_ENABLED: true` [here](https://github.com/supabase/supabase/blob/f3031fa24fd4a65e7d48f079db45a0cd3ee0311c/docker/docker-compose.yml#L110-L114).",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-01-25T16:21:36Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/392#issuecomment-1403876419"
                },
                {
                    "id": "IC_kwDODheSms5TrtpT",
                    "body": "Still the same error ...\r\n\r\nI tried to send a request directly to postgrest via Postman, setting the accept error as: [shown here](https://postgrest.org/en/stable/configuration.html?highlight=PGRST_DB_PLAN_ENABLED#db-plan-enabled:~:text=Accept%3A%20application/vnd.pgrst.plan).\r\n\r\nOutput:\r\n\r\n```\r\n{\r\n    \"code\": \"PGRST107\",\r\n    \"details\": null,\r\n    \"hint\": null,\r\n    \"message\": \"None of these media types are available: application/vnd.pgrst.plan+json\"\r\n}\r\n```\r\n\r\nSomething is odd ... \ud83e\udd14 ",
                    "author": {
                        "login": "jsbrain"
                    },
                    "createdAt": "2023-01-25T17:21:34Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/392#issuecomment-1403968083"
                },
                {
                    "id": "IC_kwDODheSms5Tstau",
                    "body": "You're using an old version https://github.com/supabase/supabase/blob/f3031fa24fd4a65e7d48f079db45a0cd3ee0311c/docker/docker-compose.yml#L104\r\n\r\nChange it to v10.1.1",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-01-25T21:11:57Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/392#issuecomment-1404229294"
                },
                {
                    "id": "IC_kwDODheSms5TuL28",
                    "body": "Well, that solves the mystery. I was somehow under the impression that the docker-compose is up to date with the js clients.\r\n\r\nThanks so much for your help!",
                    "author": {
                        "login": "jsbrain"
                    },
                    "createdAt": "2023-01-26T06:47:10Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/392#issuecomment-1404616124"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5cwHq8",
            "number": 393,
            "title": "`URI too long` error when supplying a sufficiently large filter",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nGET request fails on large queries\r\n\r\n## To Reproduce\r\n\r\n```javascript\r\nasync function getData(table: string, objectIds: string[], limit: number): Promise<Object[]> {\r\n    const data = await supabase.from(table).select('*').limit(limit).in('id', objectIds)\r\n    return data\r\n}\r\n```\r\n\r\nRun with more than ~10-15 object IDs and it fails because the URL becomes too long for a GET request.\r\n\r\n## Expected behavior\r\n\r\nIf the URL exceeds a certain length, this should be submitted as a POST request instead, with the IDs in the body of the request\r\n",
            "author": {
                "login": "kevinschaich"
            },
            "state": "OPEN",
            "createdAt": "2023-01-23T09:46:22Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/393",
            "comments": [
                {
                    "id": "IC_kwDODheSms5Tr4bn",
                    "body": "Linking https://github.com/PostgREST/postgrest/issues/2125.\r\n\r\n> If the URL exceeds a certain length, this should be submitted as a POST request instead, with the IDs in the body of the request\r\n\r\nPlanning to use the HTTP SEARCH method instead.\r\n\r\nFor now you can workaround this with [rpc()](https://supabase.com/docs/reference/javascript/rpc) as described [here](https://github.com/supabase/supabase-js/issues/678#issuecomment-1373336589), example [here](https://github.com/PostgREST/postgrest-docs/issues/417#issuecomment-895366999).",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-01-25T17:56:17Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/393#issuecomment-1404012263"
                },
                {
                    "id": "IC_kwDODheSms5mACHw",
                    "body": "I have the same issue.\r\n\r\n```js\r\n    const response = await supabase\r\n      .from('team_profile')\r\n      .select('id, team_id, profile!inner( identifier )')\r\n      .in('profile.identifier', identifiers)\r\n      .eq('team_id', teamId);\r\n```\r\n\r\nif identifiers are too many, or if they are too long, this will triggers `Error: URI too long`.\r\nBecause this code generate a get request, and it exceeds the maximum URI Length accepted by the server.",
                    "author": {
                        "login": "Micka33"
                    },
                    "createdAt": "2023-09-08T08:29:59Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/393#issuecomment-1711284720"
                },
                {
                    "id": "IC_kwDODheSms5q6na2",
                    "body": "Seeing this on the flutter web side.",
                    "author": {
                        "login": "MichealReed"
                    },
                    "createdAt": "2023-11-05T14:18:22Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/393#issuecomment-1793750710"
                },
                {
                    "id": "IC_kwDODheSms5rAn4M",
                    "body": "Same here, I have to batch my updates in order to avoid this issue which is pretty annoying.",
                    "author": {
                        "login": "bragagia"
                    },
                    "createdAt": "2023-11-06T16:16:00Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/393#issuecomment-1795325452"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5eqHmc",
            "number": 398,
            "title": "Integrate Prettify to get rid of intersection types",
            "body": "# Bug report\r\n\r\nHi, this is an improvement suggestion and I have first opened a documentation thread for this but it has not seen any activity since I opened it last week so I figure I'd reopen it here to give it a chance to get some attention. \r\n\r\n## Describe the bug\r\n\r\nWhen using Postgrest `.select('a,b,c')` we get an intersection type back: `{ a: type; } & { b: type } & { c: type }`.\r\n\r\n## To Reproduce\r\n\r\n1. Check out https://github.com/supabase/postgrest-js\r\n2. Add this code snippet to `index.test-d.ts`:\r\n   ```typescript\r\n   {\r\n     const { data, error } = await postgrest\r\n       .from('users')\r\n       .select('username,data,status')\r\n     if (error) {\r\n       throw new Error(error.message)\r\n     }\r\n     expectType<{ username: string; data: Json; status: \"ONLINE\" | \"OFFLINE\" | null; }[]>(data)\r\n   }\r\n   ```\r\n3. Hover over `data` to see its real type\r\n4. Observe the inferred type is an intersection type\r\n\r\n## Expected behavior\r\n\r\nI am hoping we can incorporate this to make the type non-intersected:\r\n\r\n```typescript\r\ntype Prettify<T> = { [K in keyof T]: T[K] } & {};\r\n```\r\n\r\nCredit goes to https://twitter.com/mattpocockuk/status/1622730173446557697.\r\n\r\n## Screenshots\r\n\r\nCurrently we get this inferred type when hovering over `data` from `select`:\r\n\r\n```typescript\r\n{\r\n    username: string;\r\n} & {\r\n    data: Json;\r\n} & {\r\n    status: \"ONLINE\" | \"OFFLINE\" | null;\r\n}\r\n```\r\n\r\nWith `Prettify` hovering over the `select` response `data` we'll see this inferred type:\r\n\r\n```typescript\r\n{\r\n    username: string;\r\n    data: Json;\r\n    status: \"ONLINE\" | \"OFFLINE\" | null;\r\n}\r\n```\r\n",
            "author": {
                "login": "TomasHubelbauer"
            },
            "state": "CLOSED",
            "createdAt": "2023-02-16T17:34:31Z",
            "closedAt": "2023-02-21T06:59:02Z",
            "url": "https://github.com/supabase/postgrest-js/issues/398",
            "comments": [
                {
                    "id": "IC_kwDODheSms5Veh9g",
                    "body": "Hey, this looks great! Would definitely want this in the lib :)",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-02-17T04:04:32Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/398#issuecomment-1434066784"
                },
                {
                    "id": "IC_kwDODheSms5VfPdZ",
                    "body": "Amazingly, I managed to write all this text and yet forgot to include a link to the original discussion thread :D \r\nhttps://github.com/supabase/supabase/discussions/12292\r\n\r\nI already tried implementing this but ran into a problem. Citing myself from that thread:\r\n\r\n> I am hoping `Prettify` could be somehow integrated into the `postgrest-js` types so I looked at `src/types.ts`. I clicked through `data` and `error` to `PostgrestResponseSuccess` and `PostgrestResponseFailure`.\r\n\r\n> I cannot just extend `PostgrestResponseSuccess` like so because the response is potentially an array:> \r\n```diff\r\n+ type Prettify<T> = { [K in keyof T]: T[K] } & {};\r\n  export interface PostgrestResponseSuccess<T> extends PostgrestResponseBase {\r\n    error: null\r\n-   data: T\r\n+   data: Prettify<T>\r\n    count: number | null\r\n  }\r\n```\r\n\r\n> I tried extending `PostgrestSingleResponse<T>` instead:\r\n```diff\r\n  type Prettify<T> = { [K in keyof T]: T[K] } & {};\r\n  export type PostgrestSingleResponse<T> =\r\n-   | PostgrestResponseSuccess<T>\r\n+   | PostgrestResponseSuccess<Prettify<T>>\r\n    | PostgrestResponseFailure\r\n```\r\n\r\n> This didn't work, the inferred type was still intersected. I also tried wrapping `T` in `PostgrestMaybeSingleResponse` and `PostgrestResponse` but the result was the same.\r\n\r\n> I see these response types are only exported from the package but not really used internally.\r\n\r\n> Where else should I look to integrate `Prettify`? I realize that `select` is not the only endpoint returning possibly interesected types, DB functions will probably do it, too? How can I enumerate all of the possible places `Prettify` could be added to?\r\n\r\nCan you help me out with where to put `Prettify`?",
                    "author": {
                        "login": "TomasHubelbauer"
                    },
                    "createdAt": "2023-02-17T07:46:18Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/398#issuecomment-1434253145"
                },
                {
                    "id": "IC_kwDODheSms5VfjIZ",
                    "body": "I see, so I guess it only works on one layer.\r\n\r\nCan you try this diff?\r\n\r\n```diff\r\ndiff --git a/src/select-query-parser.ts b/src/select-query-parser.ts\r\nindex dc90ec7..5f8c5a7 100644\r\n--- a/src/select-query-parser.ts\r\n+++ b/src/select-query-parser.ts\r\n@@ -1,6 +1,6 @@\r\n // Credits to @bnjmnt4n (https://www.npmjs.com/package/postgrest-query)\r\n \r\n-import { GenericSchema } from './types'\r\n+import { GenericSchema, Prettify } from './types'\r\n \r\n type Whitespace = ' ' | '\\n' | '\\t'\r\n \r\n@@ -342,7 +342,7 @@ type GetResultHelper<\r\n   ? GetResultHelper<Schema, Row, [], ConstructFieldDefinition<Schema, Row, R> & Acc>\r\n   : Fields extends [infer R, ...infer Rest]\r\n   ? GetResultHelper<Schema, Row, Rest, ConstructFieldDefinition<Schema, Row, R> & Acc>\r\n-  : Acc\r\n+  : Prettify<Acc>\r\n \r\n /**\r\n  * Constructs a type definition for an object based on a given PostgREST query.\r\ndiff --git a/src/types.ts b/src/types.ts\r\nindex f9bbf66..f2464d3 100644\r\n--- a/src/types.ts\r\n+++ b/src/types.ts\r\n@@ -69,3 +69,5 @@ export type GenericSchema = {\r\n   Views: Record<string, GenericView>\r\n   Functions: Record<string, GenericFunction>\r\n }\r\n+\r\n+export type Prettify<T> = { [K in keyof T]: T[K] } & {}\r\n```",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-02-17T08:58:32Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/398#issuecomment-1434333721"
                },
                {
                    "id": "IC_kwDODheSms5VgObt",
                    "body": "It works!!!\r\n\r\n![image](https://user-images.githubusercontent.com/6831144/219640453-bfefcde3-5c60-45e0-ab6c-47d631082977.png)\r\n\r\nVery epic, PR incoming!",
                    "author": {
                        "login": "TomasHubelbauer"
                    },
                    "createdAt": "2023-02-17T11:30:33Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/398#issuecomment-1434511085"
                },
                {
                    "id": "IC_kwDODheSms5VtVnE",
                    "body": ":tada: This issue has been resolved in version 1.4.1 :tada:\n\nThe release is available on:\n- [GitHub release](https://github.com/supabase/postgrest-js/releases/tag/v1.4.1)\n- [npm package (@latest dist-tag)](https://www.npmjs.com/package/@supabase/postgrest-js/v/1.4.1)\n\nYour **[semantic-release](https://github.com/semantic-release/semantic-release)** bot :package::rocket:",
                    "author": {
                        "login": "github-actions"
                    },
                    "createdAt": "2023-02-21T07:00:15Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/398#issuecomment-1437948356"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5evbBz",
            "number": 400,
            "title": "Exclude generated columns from the insert type",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nPostgres allows the creation of generated columns: https://www.postgresql.org/docs/current/ddl-generated-columns.html. Inserting a value into such a column throws an error: https://www.tutorialsteacher.com/postgresql/generated-always. Supabase includes these columns in its `table['Insert']` type which goes against the functionality of postgres.\r\n\r\n## To Reproduce\r\n\r\n- create generated column\r\n- generate types\r\n\r\n## Expected behavior\r\n\r\nExclude generated columns.",
            "author": {
                "login": "yannxaver"
            },
            "state": "OPEN",
            "createdAt": "2023-02-05T10:13:38Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/400",
            "comments": [
                {
                    "id": "IC_kwDODheSms5VhLHK",
                    "body": "Yeah, this would be amazing. I don't see any use case for having the generated columns there. They shouldn't even be queryable by the Supabase Client IMO. ",
                    "author": {
                        "login": "juanvilladev"
                    },
                    "createdAt": "2023-02-17T00:23:31Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/400#issuecomment-1434759626"
                },
                {
                    "id": "IC_kwDODheSms5Vt0X6",
                    "body": "Hmm, I thought we already do exclude it: https://github.com/supabase/postgres-meta/blob/df5df091c2b33eaea2e747bdb5bce3d18f74dad6/src/server/templates/typescript.ts#L103\r\n\r\nDo you have an example schema I could reproduce this with?",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-02-21T08:49:29Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/400#issuecomment-1438074362"
                },
                {
                    "id": "IC_kwDODheSms5WLjd_",
                    "body": "Tried reproducing this - here's what I got:\r\n\r\n```sql\r\ncreate table t (id int8 generated always as identity);\r\n```\r\n\r\n```ts\r\nexport type Json =\r\n  | string\r\n  | number\r\n  | boolean\r\n  | null\r\n  | { [key: string]: Json }\r\n  | Json[]\r\n\r\nexport interface Database {\r\n  public: {\r\n    Tables: {\r\n      t: {\r\n        Row: {\r\n          id: number\r\n        }\r\n        Insert: {\r\n          id?: never\r\n        }\r\n        Update: {\r\n          id?: never\r\n        }\r\n      }\r\n    }\r\n    Views: {\r\n      [_ in never]: never\r\n    }\r\n    Functions: {\r\n      [_ in never]: never\r\n    }\r\n    Enums: {\r\n      [_ in never]: never\r\n    }\r\n    CompositeTypes: {\r\n      [_ in never]: never\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nThe type is replaced with `undefined`, which is acceptable because `undefined` values are stripped out on `JSON.stringify()`. But you'll see an error if you supply a number there.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-02-27T08:02:07Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/400#issuecomment-1445869439"
                },
                {
                    "id": "IC_kwDODheSms5WusTZ",
                    "body": "If I run\r\n```sql\r\nalter table foo\r\nadd column bar numeric GENERATED ALWAYS AS (col_a + col_b) STORED\r\n```\r\nthe generated type becomes\r\n```ts\r\nInsert: {\r\n  bar?: number | null\r\n}\r\n\r\n// same for update\r\n```",
                    "author": {
                        "login": "yannxaver"
                    },
                    "createdAt": "2023-03-05T12:40:30Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/400#issuecomment-1455080665"
                },
                {
                    "id": "IC_kwDODheSms5Wxqsv",
                    "body": "Ah, thanks - I was able to reproduce this.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-03-06T10:20:56Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/400#issuecomment-1455860527"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5evbNR",
            "number": 401,
            "title": "Database function RPC result has incorrect typing",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nUsing supabase-js@2.8.0, when I call a database function that is supposed to return an array of records, the typing of the data incorrectly appears as an array of arrays of records, but is actually just an array of records.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Create a database function that returns a table:\r\n```sql\r\nCREATE OR REPLACE FUNCTION \"getEvents\"(\r\n  \"userId\" uuid DEFAULT NULL,\r\n  search text = '',\r\n  \"limit\" int = 0,\r\n  ascending boolean = true\r\n)\r\nRETURNS TABLE (\r\n  \"id\" uuid,\r\n  \"name\" text,\r\n  \"startDate\" date,\r\n  \"startTime\" time,\r\n  \"locationName\" text,\r\n  \"timeZone\" text,\r\n  \"organizer_id\" uuid,\r\n  \"organizer_avatar\" text,\r\n  \"organizer_firstName\" text,\r\n  \"organizer_lastName\" text\r\n) as $$\r\n  // ... skipping irrelevant details\r\n  return plv8.execute(query, params);\r\n$$ language plv8;\r\n```\r\n2. Generate types with the Supabase CLI, which yields:\r\n```typescript\r\nexport interface Database {\r\n  public: {\r\n    Functions: {\r\n      getEvents: {\r\n        Args: {\r\n          userId?: string;\r\n          search?: string;\r\n          limit?: number;\r\n          ascending?: boolean;\r\n        };\r\n        Returns: {\r\n          id: string;\r\n          name: string;\r\n          startDate: string;\r\n          startTime: string;\r\n          locationName: string;\r\n          timeZone: string;\r\n          organizer_id: string;\r\n          organizer_avatar: string;\r\n          organizer_firstName: string;\r\n          organizer_lastName: string;\r\n        }[];\r\n      };\r\n    };\r\n  };\r\n}\r\n```\r\n3. Call the database function using the Supabase JS library:\r\n```typescript\r\nconst { data, error } = await supabaseClientInstance.rpc('getEvents', args);\r\n```\r\n4. `data` property of response object is typed as a 2-dimensional array:\r\n```typescript\r\nconst data: {\r\n    id: string;\r\n    name: string;\r\n    startDate: string;\r\n    startTime: string;\r\n    locationName: string;\r\n    timeZone: string;\r\n    organizer_id: string;\r\n    organizer_avatar: string;\r\n    organizer_firstName: string;\r\n    organizer_lastName: string;\r\n}[][] | null\r\n```\r\n5. If I `console.log(data)`, it prints as a 1-dimensional array.\r\n\r\n## Expected behavior\r\n\r\nThe type of the `data` property on the RPC response object should be correct.\r\n\r\n## System information\r\n\r\n- OS: Linux\r\n- Version of supabase-js: 2.8.0\r\n- Version of Node.js: 18.14.0",
            "author": {
                "login": "chris-at-fabius-labs"
            },
            "state": "CLOSED",
            "createdAt": "2023-02-17T00:00:01Z",
            "closedAt": "2023-02-27T07:48:24Z",
            "url": "https://github.com/supabase/postgrest-js/issues/401",
            "comments": [
                {
                    "id": "IC_kwDODheSms5VhLSU",
                    "body": "I am able to work-around this issue by calling `data.flat(1)`, which has no real effect on the already-flat array, but satisfies TypeScript's type-checker that the array is definitely 1-dimensional.",
                    "author": {
                        "login": "chris-at-fabius-labs"
                    },
                    "createdAt": "2023-02-17T00:06:49Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/401#issuecomment-1434760340"
                },
                {
                    "id": "IC_kwDODheSms5Vt2nl",
                    "body": "Can you try `npm update @supabase/postgrest-js` (it's a dependency of supabase-js)? There was an issue with how `.rpc()` return types are handled, but it needs an update on both the CLI (which seems to be up-to-date here) and the client library.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-02-21T08:53:38Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/401#issuecomment-1438083557"
                },
                {
                    "id": "IC_kwDODheSms5WLfez",
                    "body": "Closing this now, but let us know if updating the client library doesn't resolve it.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-02-27T07:48:24Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/401#issuecomment-1445853107"
                },
                {
                    "id": "IC_kwDODheSms5WOXmy",
                    "body": "Confirmed that updating `@supabase/postgrest-js` resolved the issue. Thank you!",
                    "author": {
                        "login": "chris-at-fabius-labs"
                    },
                    "createdAt": "2023-02-27T16:08:23Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/401#issuecomment-1446607282"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5eyNnz",
            "number": 402,
            "title": "textSearch() uses only English dictionary instead of 'simple' as a default",
            "body": "In my Supabase collection I have created to_tsvector using  'simple' parameter [dictionary](https://www.postgresql.org/docs/current/textsearch-dictionaries.html) as I need multi languages searching.  Testis in Supabase SQL  editor using to_tsquery('simple', ...) work just fine. \r\n\r\nBut using client  textSearch()  method gives highly incorrect results. \r\n\r\nI believe the problem and the reason is  that Supabase uses only 'english' dictionary as a hidden to_tsvector  parameter for textSearch() method. Is there any way how to specify in textSearch()  the dictionary language parameter?  I would guess 'simple' dictionary should be the default one instead. Why this \"imperial English supremacy\" ?  \r\n\r\nAnyway textSearch()  should accept the parameter specifying the language for to_tsvector.",
            "author": {
                "login": "kvetoslavnovak"
            },
            "state": "OPEN",
            "createdAt": "2023-02-17T22:41:09Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/402",
            "comments": [
                {
                    "id": "IC_kwDODheSms5Vj-Dy",
                    "body": "> Anyway textSearch() should accept the parameter specifying the language for to_tsvector.\r\n\r\nSee https://supabase.com/docs/reference/javascript/textsearch, you can set the dictionary in the `config` param.\r\n\r\n> const { data, error } = await supabase\r\n  .from('quotes')\r\n  .select('catchphrase')\r\n  .textSearch('catchphrase', `'fat' & 'cat'`, {\r\n    config: 'english'\r\n  })",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-02-18T05:50:23Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/402#issuecomment-1435492594"
                },
                {
                    "id": "IC_kwDODheSms5Vt5pz",
                    "body": "Thanks @kvetoslavnovak, in hindsight we should default to `'simple'` instead - we'll make the change on the next major version of the library.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-02-21T09:00:56Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/402#issuecomment-1438095987"
                },
                {
                    "id": "IC_kwDODheSms5ai4Be",
                    "body": "Thank you very much @soedirgo . And big thank to @steve-chavez for the tip.",
                    "author": {
                        "login": "kvetoslavnovak"
                    },
                    "createdAt": "2023-04-23T15:21:02Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/402#issuecomment-1519091806"
                },
                {
                    "id": "IC_kwDODheSms5phAVX",
                    "body": "default to 'simple' is merged or is still use 'english' as default?",
                    "author": {
                        "login": "siisee11"
                    },
                    "createdAt": "2023-10-19T07:53:03Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/402#issuecomment-1770259799"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5fAMnq",
            "number": 403,
            "title": "Upserts do not seem to work on partial index on postgres",
            "body": "### Discussed in https://github.com/supabase/supabase/discussions/12565\r\n\r\n<div type='discussions-op-text'>\r\n\r\n<sup>Originally posted by **beacoding** February 20, 2023</sup>\r\nLooks like we cannot specify an `onConflict` and `where` together when we set a partial index on our postgres db.\r\n\r\n\r\nWe end up getting a  `unique or exclusion constraint matching the ON CONFLICT` when a partial index is used and we specify the key to use it for.\r\n\r\nThe solution to fix this is to filter on the index_predicate, but the client does not allow us to do this\r\nhttps://stackoverflow.com/questions/42022362/no-unique-or-exclusion-constraint-matching-the-on-conflict\r\n\r\nAre there any plans to support upserts of partial indices?\r\n</div>",
            "author": {
                "login": "steve-chavez"
            },
            "state": "OPEN",
            "createdAt": "2023-02-21T17:54:23Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/403",
            "comments": []
        },
        {
            "id": "I_kwDODheSms5fG6A8",
            "number": 404,
            "title": "statusText returns as empty string",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\nI have tested upsert and insert, and upon success, receive this response:\r\n\r\n`{error: null, data: null, count: null, status: 201, statusText: ''}`\r\n\r\nI am trying to use statusText to determine whether a row has been created or updated.\r\n\r\n## To Reproduce\r\n```\r\n  async function createUser() {\r\n    const res = await supabase\r\n      .from(\"users\")\r\n      .insert(\r\n        { username: username },\r\n      );\r\n\r\n    if (res.error) {\r\n      throw res.error;\r\n    }\r\n    console.log(res)\r\n  }\r\n```\r\n\r\n## Expected behavior\r\nstatusText returns information as per documentation\r\n<img width=\"478\" alt=\"Screen Shot 2023-02-22 at 10 56 38 AM\" src=\"https://user-images.githubusercontent.com/7978022/220680560-b771405f-8359-459f-8e02-6709da0e0889.png\">\r\n\r\n## System information\r\n\r\n- macOS\r\n- Brave\r\n- supabase-js: [^2.2.2]\r\n- Node.js: [18.4.0]\r\n",
            "author": {
                "login": "pfeffer629"
            },
            "state": "CLOSED",
            "createdAt": "2023-02-22T16:31:03Z",
            "closedAt": "2023-02-23T04:01:41Z",
            "url": "https://github.com/supabase/postgrest-js/issues/404",
            "comments": [
                {
                    "id": "IC_kwDODheSms5V5tEw",
                    "body": "Closing as duplicate of #405 ",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-02-23T04:01:41Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/404#issuecomment-1441190192"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5fINgd",
            "number": 405,
            "title": "statusText returns as empty string",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\nI have tested upsert and insert, and upon success, receive this response:\r\n\r\n`{error: null, data: null, count: null, status: 201, statusText: ''}`\r\n\r\nI am trying to use statusText to determine whether a row has been created or updated.\r\n\r\n## To Reproduce\r\n```\r\n  async function createUser() {\r\n    const res = await supabase\r\n      .from(\"users\")\r\n      .insert(\r\n        { username: username },\r\n      );\r\n\r\n    if (res.error) {\r\n      throw res.error;\r\n    }\r\n    console.log(res)\r\n  }\r\n```\r\n\r\n## Expected behavior\r\nstatusText returns information as per documentation\r\n<img width=\"478\" alt=\"Screen Shot 2023-02-22 at 10 56 38 AM\" src=\"https://user-images.githubusercontent.com/7978022/220680560-b771405f-8359-459f-8e02-6709da0e0889.png\">\r\n\r\n## System information\r\n\r\n- macOS\r\n- Brave\r\n- supabase-js: [^2.2.2]\r\n- Node.js: [18.4.0]\r\n",
            "author": {
                "login": "pfeffer629"
            },
            "state": "OPEN",
            "createdAt": "2023-02-22T15:57:14Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/405",
            "comments": [
                {
                    "id": "IC_kwDODheSms5V497f",
                    "body": "I transferred this over to Postgrest-js.\r\nI don't see any code in Postgrest-js to handle generating statusText for 201 responses like it does for 200 and 204 responses.\r\nSo either the code (and all clients?) need to add statusText for 201, or the documentation needs to change (less optimal as this user's case wants to use that text).",
                    "author": {
                        "login": "GaryAustin1"
                    },
                    "createdAt": "2023-02-22T23:27:44Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/405#issuecomment-1440997087"
                },
                {
                    "id": "IC_kwDODheSms5V5uQn",
                    "body": "The `status` is retrieved directly from the PostgREST response, and `statusText` comes from `fetch` I believe. But I can't reproduce this on Node 18.4.0.\r\n\r\nAre you also seeing this on 200 responses (e.g. when doing `.select()`)? Also, is this code running in Node or in the browser? It'd also help if you have an example GitHub repo where I can try to reproduce this.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-02-23T04:13:12Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/405#issuecomment-1441195047"
                },
                {
                    "id": "IC_kwDODheSms5V8nZR",
                    "body": "I was mistaken on status for 200, I saw in the code postgrest-js seems to add \"OK\" to some requests without results...\r\n\r\nhttps://github.com/supabase/postgrest-js/blob/8ce5da43e4129eed0fdf919b03ef5a1ccf223dd2/src/PostgrestBuilder.ts#L129\r\n\r\nBut did not really study what it was up to and assumed it added OK on successful requests.  The OP was doing an insert with no response coming back.\r\n\r\nThe response on insert:\r\n![image](https://user-images.githubusercontent.com/54564956/220947008-a29a45ca-dce6-42f6-9cf9-49dd63e0a1ec.png)\r\n\r\nNote the OP is commenting on Supabase's docs which say \"Created\" is returned.\r\n![image](https://user-images.githubusercontent.com/54564956/220946468-b3a23e2b-1f43-4169-90a0-ea6d2db71ea3.png)\r\n\r\nSeems like then the documentation needs to be updated as it implies there is a statusText with meaning.\r\n\r\nBut need to confirm there is no status supposed to be returned as in docs.",
                    "author": {
                        "login": "GaryAustin1"
                    },
                    "createdAt": "2023-02-23T15:11:05Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/405#issuecomment-1441953361"
                },
                {
                    "id": "IC_kwDODheSms5WDxpy",
                    "body": "All my requests are being sent through the browser. \r\n\r\nFurther context on my use case for statusText: on upserts, the status code returns as 201 regardless of whether it is an insert or an update (instead of 204). \r\n\r\nIMHO, I believe statusText could be inferred from the status code and error messages, in which case, simply removing statusText and updating the documentation seems like a good solution.",
                    "author": {
                        "login": "pfeffer629"
                    },
                    "createdAt": "2023-02-24T15:15:24Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/405#issuecomment-1443830386"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5fT0w1",
            "number": 406,
            "title": "Unexpected type for foreign table query?",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen doing a foreign table query, for some reason the type is `T | T[] | null`.\r\n\r\n## To Reproduce\r\n\r\nWith the following code\r\n```\r\n\tconst { data, error } = await supabaseClient\r\n\t\t.from('pages')\r\n\t\t.select(`*, profiles ( id )`)\r\n\t\t.eq('name', event.params.page)\r\n\r\n\t\tif (data) {\r\n\t\t\tconst { profiles, ...page } = data[0]\r\n\t\t}\r\n```\r\n\r\nI get this type shown when I hover over the `profiles` variable:\r\n```\r\nconst profiles: {\r\n    id: string;\r\n} | {\r\n    id: string;\r\n}[] | null\r\n```\r\n\r\n## Expected behavior\r\n\r\nIf supabase-js doesn't have enough information to tell how many results the foreign query can give, I'd expect the type to only be `T[]`.\r\n\r\nIf supabase-js does know that only `0-1` records can be returned, then I'd expect the type to only be `T | null`.\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Version of supabase-js: 2.8.0\r\n- Version of Node.js: 18.13.0",
            "author": {
                "login": "probablykasper"
            },
            "state": "OPEN",
            "createdAt": "2023-02-24T08:49:36Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/406",
            "comments": []
        },
        {
            "id": "I_kwDODheSms5fybd_",
            "number": 407,
            "title": "Typescript - Fetched data is type is not being inferred correctly based on injected data types",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nWhen querying the database context in Typescript, the data returned is always of type `any` instead inferring the correct type from the injected database types. Previously, the correct types would be returned in the data object.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Create a database context using type injection as documented [here](https://supabase.com/docs/reference/javascript/typescript-support#injecting-type-definitions)\r\n2. Using the context, query a table with a know injected type\r\n`\r\nconst { data, error } = supabaseClient.from('authors').select()\r\n`\r\n3. Observe returned `data` object type\r\n\r\n## Expected behavior\r\n\r\nThe expected behavior, and what previously happened, is that the `data` object type would be correctly inferred as an `Author[]` object based on injected data types. Instead the `data` object is of type `any[]\r\n\r\n## Screenshots\r\n\r\n![image](https://user-images.githubusercontent.com/45540592/222479643-439ad482-b982-4ce6-ac41-dfe939c37b6d.png)\r\n\r\n## System information\r\n\r\n- OS: MacOS 13.0.1\r\n- Version of supabase-js: 2.8.0\r\n- Version of Node.js: 16.16.0\r\n",
            "author": {
                "login": "mikeschneiderdotme"
            },
            "state": "OPEN",
            "createdAt": "2023-03-02T15:51:52Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/407",
            "comments": [
                {
                    "id": "IC_kwDODheSms5Ylg_7",
                    "body": "I've got the exact same issue:\r\n\r\n<img width=\"722\" alt=\"Screenshot 2023-03-28 at 10 02 13 am\" src=\"https://user-images.githubusercontent.com/22231370/228107758-4e142518-e60d-4fa0-bcee-92d697371dcf.png\">\r\n\r\nI've noticed the various PostgrestBuilder objects aren't noticing the typings, however the supabase client object is:\r\n\r\n<img width=\"1009\" alt=\"Screenshot 2023-03-28 at 10 03 32 am\" src=\"https://user-images.githubusercontent.com/22231370/228107937-c9ba6e9f-5921-45dc-97de-3c4a276b58f5.png\">\r\n\r\nOddly enough, if I specify the columns manually the types carry over fine, but not when using the wildcard *\r\n\r\n<img width=\"773\" alt=\"Screenshot 2023-03-28 at 1 18 09 pm\" src=\"https://user-images.githubusercontent.com/22231370/228135444-20f25271-a0f0-456c-bb33-23f17bdc9bd2.png\">\r\n\r\nAny insight would be greatly appreciated.",
                    "author": {
                        "login": "Frame1910"
                    },
                    "createdAt": "2023-03-28T05:15:34Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/407#issuecomment-1486229499"
                },
                {
                    "id": "IC_kwDODheSms5ru71L",
                    "body": "Same here. Doesn't work with the Supabase docs' suggestions either.\r\n\r\n```\r\nconst supabase = createClient<Database>(supabaseUrl, supabaseKey);\r\n\r\nexport function modelStoreFactory<T extends keyof Database['public']['Tables']>(tableName: string) {\r\n  const tbl = supabase.from(tableName);\r\n\r\n  type TRow = Database['public']['Tables'][T]['Row'];\r\n  type TInsert = Database['public']['Tables'][T]['Insert'];\r\n\r\n  async function insertItem(item: TInsert): Promise<TRow> {\r\n    const result: PostgrestSingleResponse<TRow> = await tbl.insert(item).select();\r\n  }\r\n}\r\n```\r\n\r\nResult:\r\n```\r\n 1. Type 'PostgrestSingleResponse<any[]>' is not assignable to type 'PostgrestSingleResponse<TRow>'.\r\n      Type 'PostgrestResponseSuccess<any[]>' is not assignable to type 'PostgrestSingleResponse<TRow>'.\r\n        Type 'PostgrestResponseSuccess<any[]>' is not assignable to type 'PostgrestResponseSuccess<TRow>'.\r\n          Type 'any[]' is not assignable to type 'TRow'.\r\n```\r\n\r\nEdit: The Supabase JS Client docs were not super clear on this, but I fixed the error in this case by using `.limit(1).single()` to return only one updated object, as I expected.",
                    "author": {
                        "login": "galaxyblur"
                    },
                    "createdAt": "2023-11-13T04:37:49Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/407#issuecomment-1807465803"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5gEfy6",
            "number": 408,
            "title": "Database typings are not correct on table join for entity to one relationship",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nTypings are not correct when joining tables that are always NOT an array. For example, in my application we use the following query to fetch data about `figma_comments` and link to `figma_users` and `figma_files`:\r\n\r\n```ts\r\nconst { data: comments } = await supabase\r\n    .from('figma_comments')\r\n    .select(\r\n      'created_at, resolved_at, comment, node_id, user:figma_users(handle, img_url, email), file:figma_files(file_key, name)',\r\n    )\r\n    .order('created_at', { ascending: false });\r\n```\r\n\r\nFrom this query, I would expect the built in typings to have both `user` and `file` to be an entity of a singular user and a singular file. Since the constraints I set up in Postgres won\u2019t allow it to be multiple entries because the foreign key is unique on the joinable tables.\r\n\r\nHere is an overview of the types being generated by supabase CLI:\r\n\r\n```ts\r\nTables: {\r\n      figma_comments: {\r\n        Row: {\r\n          comment: string;\r\n          created_at: string;\r\n          figma_user_id: string;\r\n          file_key: string;\r\n          id: number;\r\n          node_id: string;\r\n          order_id: number | null;\r\n          parent_id: string | null;\r\n          resolved_at: string | null;\r\n        };\r\n        Insert: {\r\n          comment: string;\r\n          created_at?: string;\r\n          figma_user_id: string;\r\n          file_key: string;\r\n          id?: number;\r\n          node_id: string;\r\n          order_id?: number | null;\r\n          parent_id?: string | null;\r\n          resolved_at?: string | null;\r\n        };\r\n        Update: {\r\n          comment?: string;\r\n          created_at?: string;\r\n          figma_user_id?: string;\r\n          file_key?: string;\r\n          id?: number;\r\n          node_id?: string;\r\n          order_id?: number | null;\r\n          parent_id?: string | null;\r\n          resolved_at?: string | null;\r\n        };\r\n      };\r\n      figma_files: {\r\n        Row: {\r\n          editor_type: string | null;\r\n          figma_project_id: number | null;\r\n          file_key: string;\r\n          id: number;\r\n          last_modified: string;\r\n          name: string;\r\n          thumbnail_url: string;\r\n          version: string | null;\r\n        };\r\n        Insert: {\r\n          editor_type?: string | null;\r\n          figma_project_id?: number | null;\r\n          file_key: string;\r\n          id?: number;\r\n          last_modified: string;\r\n          name: string;\r\n          thumbnail_url: string;\r\n          version?: string | null;\r\n        };\r\n        Update: {\r\n          editor_type?: string | null;\r\n          figma_project_id?: number | null;\r\n          file_key?: string;\r\n          id?: number;\r\n          last_modified?: string;\r\n          name?: string;\r\n          thumbnail_url?: string;\r\n          version?: string | null;\r\n        };\r\n      };\r\n      figma_users: {\r\n        Row: {\r\n          email: string;\r\n          figma_id: string;\r\n          handle: string;\r\n          id: number;\r\n          img_url: string;\r\n        };\r\n        Insert: {\r\n          email: string;\r\n          figma_id: string;\r\n          handle: string;\r\n          id?: number;\r\n          img_url: string;\r\n        };\r\n        Update: {\r\n          email?: string;\r\n          figma_id?: string;\r\n          handle?: string;\r\n          id?: number;\r\n          img_url?: string;\r\n        };\r\n      };\r\n    };\r\n```\r\n\r\n## Expected behavior\r\n\r\nI would expect the built in typings to know that user and file in the case of my query is an object if the entity, not an array of objects. This is because `figma_files.file_key` and `figma_users.figma_id` are set to UNIQUE.\r\n\r\nI understand that making this work might be extremely difficult, but does anyone have any suggestions on how to make the typings work for me so I do not have to cast these types?\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Version of supabase-js: 2.10.0\r\n- Version of Node.js: v16.13.0\r\n",
            "author": {
                "login": "niels-bosman"
            },
            "state": "OPEN",
            "createdAt": "2023-03-05T18:07:03Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/408",
            "comments": [
                {
                    "id": "IC_kwDODheSms5Xhed_",
                    "body": ":+1: \r\n\r\nAnd also looking for an elegant way to deal with all the `{} | {}[] | null` in the types.",
                    "author": {
                        "login": "selbyk"
                    },
                    "createdAt": "2023-03-14T16:08:49Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/408#issuecomment-1468393343"
                },
                {
                    "id": "IC_kwDODheSms5Xh5EZ",
                    "body": "Hey @selbyk, I managed to fix it for now by chaining with the `.returns<T>();` method. This will overwrite the type that is returned (so it is not really that safe).\r\n\r\n```ts\r\ntype Tables = IDatabase['public']['Tables'];\r\ntype TeamsTable = Tables['figma_teams']['Row'];\r\ntype FigmaUsersTable = Tables['figma_users']['Row'];\r\n\r\nexport type Team = {\r\n  team: {\r\n    id: TeamsTable['id'];\r\n    name: TeamsTable['name'];\r\n    projects: [\r\n      {\r\n        files: [\r\n          {\r\n            comments: [\r\n              {\r\n                member: { img_url: FigmaUsersTable['img_url'] };\r\n              },\r\n            ];\r\n          },\r\n        ];\r\n      },\r\n    ];\r\n  };\r\n};\r\n\r\nconst { data, error } = await (client ?? supabase)\r\n    .from('user_has_figma_team')\r\n    .select(\r\n      `team:figma_teams(\r\n         id,\r\n         name,\r\n         projects:figma_projects(\r\n           files:figma_files(\r\n             comments:figma_comments(\r\n               member:figma_users(img_url)\r\n             )\r\n           )\r\n         )\r\n      )`,\r\n    )\r\n    .eq('user_id', user?.id)\r\n    .returns<Team[]>()\r\n    .order('created_at', { foreignTable: 'figma_teams', ascending: false });\r\n```",
                    "author": {
                        "login": "niels-bosman"
                    },
                    "createdAt": "2023-03-14T17:11:41Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/408#issuecomment-1468502297"
                },
                {
                    "id": "IC_kwDODheSms5cJwky",
                    "body": "I am seeing the return types be correct as the #223 states, but the typescript types are still totally ambiguous between array or single response which makes the return types somehow even less useful? Is there a way to get the types to match the return type?",
                    "author": {
                        "login": "imownbey"
                    },
                    "createdAt": "2023-05-12T17:26:57Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/408#issuecomment-1546062130"
                },
                {
                    "id": "IC_kwDODheSms5cJxS8",
                    "body": "Ah I see #303 is really where the discussion on this is happening.",
                    "author": {
                        "login": "imownbey"
                    },
                    "createdAt": "2023-05-12T17:29:57Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/408#issuecomment-1546065084"
                },
                {
                    "id": "IC_kwDODheSms5k-6HM",
                    "body": "> Ah I see #303 is really where the discussion on this is happening.\r\n\r\nThat issue was recently closed in favor of this one.\r\n\r\n> \ud83d\udc4d\r\n> \r\n> And also looking for an elegant way to deal with all the `{} | {}[] | null` in the types.\r\n\r\nAny updates on this? \r\n\r\nApart from the original problem described in this issue, selecting from a foreign table returns the type `{} | {}[] | null` for that field, although it must be strictly `{}[]`.\r\n\r\nConsider the scenario where we have two tables called `students` and `books`, and we have 1:N relationship between these two. The books table has a foreign key referring to the primary key of the students table. So we expect to see multiple books associated with a single student.\r\n\r\n\r\n```ts\r\nconst { data } = await supabase.from(\"students\").select(\"*, books (*)\");\r\n```\r\n\r\n\r\n- The result of this query must have an array type, that is `{}[]`.\r\n- It **cannot** be a single object (without an array), that is `{}`.\r\n- The type of the field `books` must be an array, that is `{}[]`.\r\n- The type of the field `books` **cannot** be a single object, that is `{}`.\r\n- I assume it also **cannot** be null, as the database returned a response.\r\n\r\nCan I safely assume that these points hold true?\r\n\r\nIf so, I will use a workaround and override these types, until a fix for this problem is implemented.\r\n\r\n\r\n",
                    "author": {
                        "login": "arinmirza"
                    },
                    "createdAt": "2023-08-26T07:30:09Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/408#issuecomment-1694212556"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5garxN",
            "number": 409,
            "title": "Delete RLS violations return 204 not 403 ",
            "body": "# Bug report\r\nSQL/API Delete row-level security policy violations return 204 not 403 like with inserts. \r\n\r\n## Describe the bug\r\nThis may be a design decision but it is very unintuitive and  significantly increases time to debug access control. \r\n\r\n## To Reproduce\r\n\r\n1. Create a table where with no DELETE policy but RLS is enabled \r\n2. Insert some data in the dashboard\r\n3. Try to delete data from the JS client / CURL api \r\n4. API will return 204  but nothing gets deleted in the DB \r\n\r\n## Expected behavior\r\n\r\nWhen deletes fail do to RLS a 4xx http code should be returned specifically 403 \r\n\r\n",
            "author": {
                "login": "reisepass"
            },
            "state": "CLOSED",
            "createdAt": "2023-03-09T16:40:08Z",
            "closedAt": "2023-05-09T05:31:41Z",
            "url": "https://github.com/supabase/postgrest-js/issues/409",
            "comments": [
                {
                    "id": "IC_kwDODheSms5XKmZH",
                    "body": "This is expected behavior as discussed in this issue in postgrest-js:\r\n\r\nhttps://github.com/supabase/postgrest-js/issues/307\r\n\r\nThis is probably more a documentation issue than a bug.\r\n\r\nMoving to Postgrest-js for devs to decide on proper documentation if appropriate.",
                    "author": {
                        "login": "GaryAustin1"
                    },
                    "createdAt": "2023-03-09T16:47:09Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/409#issuecomment-1462396487"
                },
                {
                    "id": "IC_kwDODheSms5Z7Qqo",
                    "body": "Same for inserting data, very confusing when debugging.\r\nGraphQL also started to get backlash due to only returning 200s, making it hard to debug",
                    "author": {
                        "login": "Netail"
                    },
                    "createdAt": "2023-04-14T14:56:21Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/409#issuecomment-1508706984"
                },
                {
                    "id": "IC_kwDODheSms5anC1T",
                    "body": "To detect RLS errors on update and delete, I check the response.count field. Something like: \r\n```\r\nconst response = await client\r\n  .from(\"table\")\r\n  .delete({ count: \"estimated\" })\r\n  .eq(\"id\", rowIdToDelete);\r\n\r\nif (response.count !== 1) {\r\n  // detected RLS error\r\n}\r\n```\r\nseems like it works, but if someone has a better solution, please let me know",
                    "author": {
                        "login": "pompep"
                    },
                    "createdAt": "2023-04-24T13:41:49Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/409#issuecomment-1520184659"
                },
                {
                    "id": "IC_kwDODheSms5bwemR",
                    "body": "Closing as duplicate of #307 - the answer in that issue still applies.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-05-09T05:31:41Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/409#issuecomment-1539434897"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5gd0Ok",
            "number": 411,
            "title": "Cannot import postgres-js as an ESM module in node.",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\nA clear and concise description of what the bug is.\r\n\r\n## To Reproduce\r\n\r\n1. Create a new package and install postgres-js:\r\n   ```\r\n   mkdir test-package && cd test-package\r\n   echo '{}' > package.json\r\n   npm install @supabase/postgrest-js@latest\r\n   ```\r\n1.  Create a module that tries to import a named export from postgrest-js:\r\n  ```\r\n   echo 'import { PostgrestClient } from \"@supabase/postgrest-js\"'  > test.mjs\r\n  ```\r\n3. Try to run the module with node:\r\n   ```\r\n   node test.mjs\r\n  ```\r\n4. Note the error trying to import a commonjs module.\r\n\r\n## Expected behavior\r\n\r\nI expect the above import to work and import an ESM module.\r\n\r\n## Screenshots\r\n\r\n```\r\n\u276f node test.mjs                                                           \r\nfile:///.../test.mjs:1\r\nimport { PostgrestClient } from \"@supabase/postgrest-js\"\r\n         ^^^^^^^^^^^^^^^\r\nSyntaxError: Named export 'PostgrestClient' not found. The requested module '@supabase/postgrest-js' is a CommonJS module, which may not support all module.exports as named exports.\r\nCommonJS modules can always be imported via the default export, for example using:\r\n\r\nimport pkg from '@supabase/postgrest-js';\r\nconst { PostgrestClient } = pkg;\r\n\r\n    at ModuleJob._instantiate (node:internal/modules/esm/module_job:123:21)\r\n    at async ModuleJob.run (node:internal/modules/esm/module_job:189:5)\r\n\r\nNode.js v19.6.0\r\n\r\n```\r\n\r\n## System information\r\n\r\n- Version of supabase-js: 1.4.1\r\n- Version of Node.js: v19.6.0\r\n\r\n## Additional context\r\n\r\nIt appears that node only looks at the `main` entrypoint in `package.json`, and not `module`. It also specifies a newer and more complex way of specifying see [here](https://nodejs.org/api/packages.html#package-entry-points) for details.\r\n",
            "author": {
                "login": "tomprince"
            },
            "state": "OPEN",
            "createdAt": "2023-03-10T06:21:00Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/411",
            "comments": []
        },
        {
            "id": "I_kwDODheSms5hP5qn",
            "number": 412,
            "title": ".returns() should not allow .single() to be chained",
            "body": "# Bug report\r\n\r\n## Describe the bug\r\n\r\n.returns() should not allow .single() to be chained otherwise it'll produce incorrect types.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Go to '\u2026'\r\n2. Click on '\u2026'\r\n3. Scroll down to '\u2026'\r\n4. See error\r\n\r\n## Expected behavior\r\n\r\nA clear and concise description of what you expected to happen.\r\n\r\n## Screenshots\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n## System information\r\n\r\n- OS: [e.g. macOS, Windows]\r\n- Browser (if applies) [e.g. chrome, safari]\r\n- Version of supabase-js: [e.g. 6.0.2]\r\n- Version of Node.js: [e.g. 10.10.0]\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "whollacsek"
            },
            "state": "OPEN",
            "createdAt": "2023-03-17T05:23:43Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/412",
            "comments": [
                {
                    "id": "IC_kwDODheSms5YElke",
                    "body": "You'll want to pass an array type to `.returns()` here so the types work properly on `.single()`. We also fall back to `never` if you pass a non-array type to `.returns()` so this shouldn't be an issue:\r\n\r\nhttps://github.com/supabase/postgrest-js/blob/9fb56c7e73cd4b7e81e2c8ee4ce5dab55a2f0147/src/PostgrestTransformBuilder.ts#L136-L138\r\n\r\nLet me know if you think this is insufficient.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-03-21T10:30:16Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/412#issuecomment-1477597470"
                },
                {
                    "id": "IC_kwDODheSms5YEynp",
                    "body": "Hi thanks for the explanation, however I feel as a user it's better to have\n.returns and .single to be mutually exclusive as it guarantee there's only\none way of doing things which leads to less confusion.\n\nOn Tue, Mar 21, 2023, 17:30 Bobbie Soedirgo ***@***.***>\nwrote:\n\n> You'll want to pass an array type to .returns() here so the types work\n> properly on .single(). We also fall back to never if you pass a non-array\n> type to .returns() so this shouldn't be an issue:\n>\n>\n> https://github.com/supabase/postgrest-js/blob/9fb56c7e73cd4b7e81e2c8ee4ce5dab55a2f0147/src/PostgrestTransformBuilder.ts#L136-L138\n>\n> Let me know if you think this is insufficient.\n>\n> \u2014\n> Reply to this email directly, view it on GitHub\n> <https://github.com/supabase/postgrest-js/issues/412#issuecomment-1477597470>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAGJQUAQVFDAJLVRX4PIGQ3W5F7MFANCNFSM6AAAAAAWAWXMXM>\n> .\n> You are receiving this because you authored the thread.Message ID:\n> ***@***.***>\n>\n",
                    "author": {
                        "login": "whollacsek"
                    },
                    "createdAt": "2023-03-21T11:11:19Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/412#issuecomment-1477650921"
                },
                {
                    "id": "IC_kwDODheSms5dDVgY",
                    "body": "So for clarity's sake, this is what you should do?\r\n```\r\nconst postId = 1;\r\nawait supabase.from('posts').select('name, comments(description)').eq('id', postId).limit(1).returns<Post[]>().single();\r\n```\r\nBecause that's not very intuitive. I wrote it as `.single().returns<Post>()` because I expected `.returns` to be the last in the chain. If this works it's okay, but some documentation on this would be very helpful. And a solution where the order I'd prefer would be even better ;-)",
                    "author": {
                        "login": "rienheuver"
                    },
                    "createdAt": "2023-05-24T13:28:13Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/412#issuecomment-1561155608"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5hdLhS",
            "number": 413,
            "title": "Typing ParserError when selecting JSONB field with double quotes",
            "body": "# Bug report\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nWhen selecting a JSONB field using `jsonb_column->\"field_name\"`, the type cannot be determined. Whereas using `jsonb_column->field_name` works.\r\n\r\n## To Reproduce\r\n\r\n```\r\nauthReadOnly\r\n        .from('projects')\r\n        .select(\r\n          `\r\n          id,\r\n          infrastructure_config->\"region\"\r\n        `\r\n        )\r\n```\r\n\r\n>  Property 'region' does not exist on type 'ParserError<\"Unexpected input: ->\\\"region\\\"\">'.\r\n\r\n## Expected behavior\r\n\r\nThe type should be parsed correctly, even when using double quotes.\r\n",
            "author": {
                "login": "kevcodez"
            },
            "state": "CLOSED",
            "createdAt": "2023-03-22T04:36:30Z",
            "closedAt": "2023-04-07T09:13:54Z",
            "url": "https://github.com/supabase/postgrest-js/issues/413",
            "comments": [
                {
                    "id": "IC_kwDODheSms5YJ09H",
                    "body": "This should be purely a `postgrest-js` issue.  postgREST does allow quoting when using the arrow operators:\r\n\r\n```bash\r\ncurl 'localhost:3000/complex_items?select=settings->foo->\"bar\"'\r\n\r\n[{\"bar\":\"baz\"},\r\n {\"bar\":\"baz\"},\r\n {\"bar\":\"baz\"}]\r\n```",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-03-22T06:07:48Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/413#issuecomment-1478971207"
                },
                {
                    "id": "IC_kwDODheSms5YJ1Q4",
                    "body": "@steve-chavez +1 - the code executes just fine, it's only the types that are off \ud83d\udc4c ",
                    "author": {
                        "login": "kevcodez"
                    },
                    "createdAt": "2023-03-22T06:09:41Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/413#issuecomment-1478972472"
                },
                {
                    "id": "IC_kwDODheSms5ZYfkC",
                    "body": "I think, this also got fixed by https://github.com/supabase/postgrest-js/commit/c69ef50e633e5bf96da8856d769b9f9a11b0e34d .",
                    "author": {
                        "login": "tvogel"
                    },
                    "createdAt": "2023-04-06T20:35:50Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/413#issuecomment-1499592962"
                },
                {
                    "id": "IC_kwDODheSms5ZacXK",
                    "body": "Yup, looking good @tvogel \ud83e\udd73 ",
                    "author": {
                        "login": "kevcodez"
                    },
                    "createdAt": "2023-04-07T09:13:54Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/413#issuecomment-1500104138"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5iA121",
            "number": 414,
            "title": "Max content lenght for single-row inserts not defined",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [X] I confirm this is a bug with Supabase, not with my own application. \r\n- [X] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n- [X] I also confirm to search for max size/length in PostgREST directly: https://postgrest.org/en/stable/\r\n## Describe the bug\r\nInserting silently fails with no reason for large inputs. \r\n\r\n## To Reproduce\r\nSet up:\r\n1. Create this table:\r\n```sql\r\ncreate table saved_pages (\r\n  id uuid not null primary key default uuid_generate_v4(),\r\n  created_at timestamp with time zone default timezone('utc'::text, now()) not null,\r\n  archived boolean not null default false,\r\n  url text not null,\r\n  html jsonb not null,\r\n  title text not null,\r\n  authors text not null,\r\n  reading_time int,\r\n  published_at timestamp\r\n);\r\n```\r\n\r\n----\r\n1. Go to https://www.youtube.com/watch?v=LVxL_p_kToc\r\n2. Define the variable: `const data_html = JSON.stringify({ data: document.documentElement.innerHTML})`\r\n3. Make the following call:\r\n```js\r\nconst data_html `{\"data\":\"<head>\\x3Cscript data-original-src=\\\\\"/s/player/ace4(....)`\r\nconst table_data = {\r\n  url: \"http://example.org\",\r\n  html: JSON.stringify(data_html),\r\n  title: \"Test\",\r\n  authors: \"Person\",\r\n  reading_time: 6,\r\n  published_at: new Date().toISOString()\r\n  }\r\n\r\nconst { data: response, error } = await supabase.from(\"saved_pages\").insert(table_data, {count:null});\r\n\r\n\r\n```\r\n## Expected behavior\r\nIf it is not possible to use a JSON of roughly 5mb, then there should be a limitation specified in postgREST about this limitation.\r\n \r\n## Screenshots\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Version of supabase-js: 2.12.1\r\n- Version of Node.js: v19.8.1\r\n\r\n## Additional context\r\nIt is possible to insert these directly by changing the format to HTML and changing the raw format to accept HTML, but not possible to insert this as a JSONB object within a table. \r\nhttps://postgrest.org/en/stable/configuration.html?#raw-media-types",
            "author": {
                "login": "mansueli"
            },
            "state": "OPEN",
            "createdAt": "2023-03-28T17:32:25Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/414",
            "comments": []
        },
        {
            "id": "I_kwDODheSms5jAQwg",
            "number": 418,
            "title": "No error details reported when a connection is refused",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\nWhen trying to connect to a PostgREST server and the connection gets refused (wrong port, unreachable host etc), no error is returned from the promise.\r\n\r\nFor example, when executing the following code:\r\n```typescript\r\nconst { data, error } = await sql.from('apikeys').select();\r\n```\r\n\r\nand a connection error occurs, it only shows the following details inside of `error`:\r\n```\r\n{\r\n  message: 'FetchError: fetch failed',\r\n  details: '',\r\n  hint: '',\r\n  code: ''\r\n}\r\n```\r\n\r\nBy modifying `PostgrestBuilder.js` line `152` from `details: ''` to `details: `${fetchError}`` I was able to get this output instead, showing me that the connection was refused:\r\n\r\n```\r\ndetails: TypeError: fetch failed\r\n      at fetch (D:\\coding\\service\\node_modules\\undici\\index.js:109:13)\r\n      at processTicksAndRejections (node:internal/process/task_queues:95:5)\r\n      at fetch (D:\\coding\\service\\node_modules\\@miniflare\\core\\src\\standards\\http.ts:883:19)\r\n      at WebSocketPlugin.<anonymous> (D:\\coding\\service\\node_modules\\@miniflare\\core\\src\\standards\\http.ts:981:15)\r\n      at fetch (D:\\coding\\service\\node_modules\\@miniflare\\web-sockets\\src\\plugin.ts:44:22)\r\n      at generateApiKey (C:\\Users\\HYPHER~1\\AppData\\Local\\Temp\\tmp-14568-8EAAC6s274Mq\\src\\clients\\claptrack.ts:40:29)\r\n      at C:\\Users\\HYPHER~1\\AppData\\Local\\Temp\\tmp-14568-8EAAC6s274Mq\\src\\routes\\claptrackroutecontroller.ts:18:27\r\n      at C:\\Users\\HYPHER~1\\AppData\\Local\\Temp\\tmp-14568-8EAAC6s274Mq\\node_modules\\hono\\dist\\middleware\\cors\\index.js:40:7\r\n      at C:\\Users\\HYPHER~1\\AppData\\Local\\Temp\\tmp-14568-8EAAC6s274Mq\\node_modules\\hono\\dist\\hono.js:205:50\r\n      at ServiceWorkerGlobalScope.[kDispatchFetch] (D:\\coding\\service\\node_modules\\@miniflare\\core\\src\\standards\\event.ts:385:13) {\r\n    cause: Error: connect ECONNREFUSED ::1:8858\r\n        at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1494:16)\r\n        at TCPConnectWrap.callbackTrampoline (node:internal/async_hooks:130:17) {\r\n      errno: -4078,\r\n      code: 'ECONNREFUSED',\r\n      syscall: 'connect',\r\n      address: '::1',\r\n      port: 8858\r\n    }\r\n  }\r\n  ```\r\n\r\nIf I missed something that can enable this, I'm sorry\r\n\r\n## Expected behavior\r\nI expect the real error to be returned in some sort of way, for easier troubleshooting...\r\n\r\n## System information\r\n\r\n- OS: Windows\r\n- Version of Node.js: v18.15.0\r\n\r\n\r\n## Additional context\r\nI have a local PostgreSQL and PostgREST server running for a development environment\r\n",
            "author": {
                "login": "hypherionmc"
            },
            "state": "CLOSED",
            "createdAt": "2023-04-10T16:09:28Z",
            "closedAt": "2023-04-18T06:56:49Z",
            "url": "https://github.com/supabase/postgrest-js/issues/418",
            "comments": []
        },
        {
            "id": "I_kwDODheSms5jH1rb",
            "number": 419,
            "title": "supabase javascript lib returns incorrect numeric value for bigint column",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x ] I confirm this is a bug with Supabase, not with my own application. \r\n- [ x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nThe value returned by the javascript supabase lib for a column of type bigint is wrong for large integer values. It seems to be rounded. Maybe because of overflow in javascript's numeric type.\r\n\r\nMaybe related to supabase/supabase#13612.\r\n\r\nHere is my code in my Create React App:\r\n\r\n``` Python\r\n        supabase.from('NewThoughts').select('*').then(response => {\r\n            console.log(\"THOUGHTS:\");\r\n            console.log(response.data);\r\n        });\r\n```\r\n([screenshot of code](https://user-images.githubusercontent.com/228998/231244552-1cb49647-e7e3-472b-bb43-b54e0345c4af.png))\r\n\r\n\r\nHere is the result in my browser console:\r\n<img width=\"897\" alt=\"image\" src=\"https://user-images.githubusercontent.com/228998/231244417-8ccb4287-ea77-40bb-9bea-883ccbe4312d.png\">\r\n\r\nHere is my table in supabase\r\n\r\n<img width=\"1137\" alt=\"image\" src=\"https://user-images.githubusercontent.com/228998/231244282-086530ef-45f7-401c-8462-99135b54e182.png\">\r\n\r\nBut if (per the advice in [this stackoverflow post](https://stackoverflow.com/questions/74549311/how-to-use-bigint-safely-with-supabase-js)) i change the code to:\r\n```python\r\n        supabase.from('NewThoughts').select('id::text').then(response => {\r\n            console.log(\"THOUGHTS:\");\r\n            console.log(response.data);\r\n        });\r\n```\r\n\r\nthe values returned from the lib seems correct\r\n\r\n<img width=\"514\" alt=\"image\" src=\"https://user-images.githubusercontent.com/228998/231246393-8bbf8adb-8af9-4232-9a55-946c64da9690.png\">\r\n\r\n\r\n# Env\r\n\r\n- OS: macOS\r\n- Browser (if applies) Chrome Version 111.0.5563.146 (Official Build) (arm64)\r\n- Version of supabase-js: 2.15.0\r\n- Version of Node: 19.8.1\r\n- Version of npm: 9.6.2\r\n\r\n## Additional context\r\n```\r\n> npm list\r\nheadlong@0.1.0 /Users/andyk/Development/headlong/frontend\r\n\u251c\u2500\u2500 @emotion/react@11.10.6\r\n\u251c\u2500\u2500 @emotion/styled@11.10.6\r\n\u251c\u2500\u2500 @mui/material@5.11.16\r\n\u251c\u2500\u2500 @mui/styled-engine-sc@5.11.11\r\n\u251c\u2500\u2500 @supabase/supabase-js@2.15.0\r\n\u251c\u2500\u2500 axios@0.19.2\r\n\u251c\u2500\u2500 cra-build-watch@1.4.1\r\n\u251c\u2500\u2500 react-scripts@5.0.1\r\n\u251c\u2500\u2500 react-window@1.8.8\r\n\u251c\u2500\u2500 socket.io-client@4.6.1\r\n\u2514\u2500\u2500 styled-components@5.3.9\r\n\r\n> npm --version\r\n9.6.2\r\n> node --version\r\nv19.8.1\r\n```",
            "author": {
                "login": "andyk"
            },
            "state": "CLOSED",
            "createdAt": "2023-04-11T17:44:30Z",
            "closedAt": "2023-04-12T05:54:12Z",
            "url": "https://github.com/supabase/postgrest-js/issues/419",
            "comments": [
                {
                    "id": "IC_kwDODheSms5Zo2ob",
                    "body": "JavaScript does not support bigint.  You can cast to a string.  \r\nsupabase.from('table_name').select('id, num::text');",
                    "author": {
                        "login": "GaryAustin1"
                    },
                    "createdAt": "2023-04-11T18:23:39Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/419#issuecomment-1503881755"
                },
                {
                    "id": "IC_kwDODheSms5Zrrhm",
                    "body": "Makes sense. Could the lib check the column type and throw an error instead of returning incorrect values?",
                    "author": {
                        "login": "andyk"
                    },
                    "createdAt": "2023-04-12T04:56:57Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/419#issuecomment-1504622694"
                },
                {
                    "id": "IC_kwDODheSms5Zr9pM",
                    "body": "Thanks @andyk - let's track this on https://github.com/supabase/postgrest-js/issues/319.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-04-12T05:54:12Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/419#issuecomment-1504696908"
                },
                {
                    "id": "IC_kwDODheSms5Zr93h",
                    "body": "Sounds great ",
                    "author": {
                        "login": "andyk"
                    },
                    "createdAt": "2023-04-12T05:55:25Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/419#issuecomment-1504697825"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5jguSL",
            "number": 420,
            "title": "Javascript RPC Typescript error: Argument of type 'string' is not assignable to parameter of type...",
            "body": "# Bug report\r\n\r\n- [ x] I confirm this is a bug with Supabase, not with my own application. \r\n- [ x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nIn the Javascript documentation an example is given for using rpc to call custom functions:\r\nhttps://supabase.com/docs/reference/javascript/using-filters\r\n`const { data, error } = await supabase.rpc('hello_world')`\r\n\r\nIn typescript, the following error is thrown: \r\n`Argument of type 'string' is not assignable to parameter of type 'never'.ts(2345)`\r\n\r\nTo mitigate the error I had to add a custom typescript definition for the supabase client:\r\n\r\n```\r\n// supabaseCustom.d.ts\r\n\r\nimport { PostgrestBuilder } from '@supabase/postgrest-js';\r\nimport { SupabaseClient } from '@supabase/supabase-js';\r\n\r\ndeclare module '@supabase/supabase-js' {\r\n  interface SupabaseClient {\r\n    rpc<ResponseType, ParamsType>(\r\n      fn: string,\r\n      params?: ParamsType\r\n    ): PostgrestBuilder<ResponseType>;\r\n  }\r\n}\r\n```\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. attempt to use this code `const { data, error } = await supabase.rpc('hello_world')`\r\n2. \r\n## Expected behavior\r\n\r\nThere should be no ts error\r\n\r\n",
            "author": {
                "login": "hichana"
            },
            "state": "OPEN",
            "createdAt": "2023-04-15T09:06:32Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/420",
            "comments": [
                {
                    "id": "IC_kwDODheSms5aPuNN",
                    "body": "Hi, can you put up a repo so I can reproduce the issue? We have a test [here](https://github.com/supabase/postgrest-js/blob/ad746086ceb7a56c126e547f1aec9c01e0b54286/test/index.test-d.ts#L60) which doesn't have the issue above, so not sure how that happens.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-04-19T03:08:28Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/420#issuecomment-1514070861"
                },
                {
                    "id": "IC_kwDODheSms5nla_7",
                    "body": "Experiencing the same issue using: \r\n    \"@supabase/auth-helpers-nextjs\": \"^0.7.4\",\r\n    \"@supabase/auth-ui-shared\": \"^0.1.7\",\r\n    \"@supabase/supabase-js\": \"^2.33.2\",\r\n    \r\n Specifically, I'm using the createClientComponentClient from \"@supabase/auth-helpers-nextjs\" ",
                    "author": {
                        "login": "abeisleem"
                    },
                    "createdAt": "2023-09-27T18:11:47Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/420#issuecomment-1737863163"
                },
                {
                    "id": "IC_kwDODheSms5nojNR",
                    "body": "@hichana ... I am no longer facing this issue. Make sure your generated types are up-to-date with the database. Generate with `supabase gen types typescript --project-id abcdefghijklmnopqrst > database.types.ts` (or without `--project-id` if local). This will create a `hello_world` Function for you database.types.ts. I'm assuming you're initializing your supabase client with the Database type (ex. `createClient<Database>(...)`.  This is what's causing that error since your database.types.ts is not up-to-date with the db. ",
                    "author": {
                        "login": "abeisleem"
                    },
                    "createdAt": "2023-09-28T08:12:56Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/420#issuecomment-1738683217"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5kdZUk",
            "number": 422,
            "title": "Cannot partially update table record with `not null` postgres domain",
            "body": "# Bug report\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nThe supabase client fails to update records from a table with a column defined as a `domain` with a `not null` constraint.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Create domain, table and seed data:\r\n```sql\r\ncreate domain dimensions as real [] not null check (cardinality(value) = 3);\r\n\r\ncreate table public.products (\r\n  id bigint primary key generated by default as identity,\r\n  sku text unique not null check (\"sku\" <> ''),\r\n  dimensions dimensions,\r\n  archived boolean default false not null\r\n);\r\n\r\ninsert into public.products (sku, dimensions, archived)\r\nvalues ('sku-1', array [1,2,3], false);\r\n```\r\n\r\n2. Update the record from the supabase client:\r\n```js\r\nsupabase.from('products').update({ archived: true }).eq('id', 1);\r\n```\r\n\r\n3. See error: \"\"domain dimensions does not allow null values\".\r\n\r\n## Expected behavior\r\n\r\nThe record should be updated with no error.\r\n\r\n## Screenshots\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\nIt doesn't seem to be a postgres restriction as the below SQL query works just fine:\r\n```sql\r\nupdate public.products set archived = true where id = 1;\r\n```\r\n\r\n## System information\r\n\r\n- OS: Windows 11\r\n- Browser (if applies) Chrome version 112.0.5615.138\r\n- Version of supabase-js: 2.21.0\r\n- Version of Node.js: 18.12.1\r\n\r\n## Additional context\r\n\r\nFor now, the below workaround works for me (move `not null` from the domain definition to the table column):\r\n```sql\r\ncreate domain dimensions as real [] check (cardinality(value) = 3);\r\n\r\ncreate table public.products (\r\n  id bigint primary key generated by default as identity,\r\n  sku text unique not null check (\"sku\" <> ''),\r\n  dimensions dimensions not null,\r\n  archived boolean default false not null\r\n);\r\n\r\ninsert into public.products (sku, dimensions, archived)\r\nvalues ('sku-1', array [1,2,3], false);\r\n```\r\n\r\nThe issue has also been [posted on Discord](https://discord.com/channels/839993398554656828/1006358244786196510/threads/1100684746369007646).",
            "author": {
                "login": "cohlar"
            },
            "state": "CLOSED",
            "createdAt": "2023-04-26T07:29:03Z",
            "closedAt": "2023-04-29T16:36:13Z",
            "url": "https://github.com/supabase/postgrest-js/issues/422",
            "comments": [
                {
                    "id": "IC_kwDODheSms5a0yZh",
                    "body": "I just realized that the below works fine, so the issue is only with **partial update** of records.\r\n\r\n```js\r\nsupabase.from('products').update({ \r\n   id:1,\r\n   sku: 'sku-1',\r\n   dimensions: [1,2,3],\r\n   archived: true ,\r\n}).eq('id', 1);\r\n```",
                    "author": {
                        "login": "cohlar"
                    },
                    "createdAt": "2023-04-26T07:41:19Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/422#issuecomment-1523787361"
                },
                {
                    "id": "IC_kwDODheSms5a0yZr",
                    "body": "Hey @cohlar, strange that the partial update doesn't seem to be working for that column. I'm going to transfer this to the PostgREST JS repo.",
                    "author": {
                        "login": "gregnr"
                    },
                    "createdAt": "2023-04-26T17:19:18Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/422#issuecomment-1523787371"
                },
                {
                    "id": "IC_kwDODheSms5a2m79",
                    "body": "> 3. See error: \"\"domain dimensions does not allow null values\".\r\n\r\nCan you post the full error message? Including `code`, `details` and `hint` keys. ",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-04-27T00:14:50Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/422#issuecomment-1524264701"
                },
                {
                    "id": "IC_kwDODheSms5bIAa7",
                    "body": "Sorry I am unable to reproduce the error. I reverted my `dimensions` domain back to `not null` and no longer get the error I used to get. I'm not sure exactly what happened in my database - I'll close this issue for now, if it ever re-occurs I'll follow up.",
                    "author": {
                        "login": "cohlar"
                    },
                    "createdAt": "2023-04-29T16:36:12Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/422#issuecomment-1528825531"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5klpMR",
            "number": 423,
            "title": ".in() filter maximum filter size receives \"URI too long\" error",
            "body": "# Bug report\r\n\r\nIn the below query `pdfIds.length` is 800 items long. This causes the query to fail.\r\n\r\n```\r\n    supabase\r\n      .from('pdfs')\r\n      .select('*')\r\n      .in('id', pdfIds)\r\n```\r\n\r\nThe error is...\r\n\r\n```\r\n{ message: 'URI too long\\n' }\r\n```\r\n\r\n\r\n## Expected behavior\r\n\r\nI would expect supabase to make use of the POST body of requests and not just append filters onto the URI. This would allow for these longer queries.\r\n\r\n",
            "author": {
                "login": "danrasmuson"
            },
            "state": "CLOSED",
            "createdAt": "2023-04-27T21:06:24Z",
            "closedAt": "2023-05-08T05:43:49Z",
            "url": "https://github.com/supabase/postgrest-js/issues/423",
            "comments": [
                {
                    "id": "IC_kwDODheSms5a_V02",
                    "body": "Thanks for the report. For now as a workaround you can use an [RPC](https://supabase.com/docs/reference/javascript/rpc). RPC uses POST, you can send an big array there and pass it to a SQL query(with `col = ANY(<parameter>)`.\r\n\r\n> I would expect supabase to make use of the POST body of requests and not just append filters onto the URI. \r\n\r\nYes, we're planning to switch to the HTTP SEARCH method. This will be transparent to the `supabase-js` functions.\r\n\r\nRelated https://github.com/supabase/postgrest-js/issues/292",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-04-27T21:48:28Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/423#issuecomment-1526553910"
                },
                {
                    "id": "IC_kwDODheSms5bqLtn",
                    "body": "Closing in favor of https://github.com/supabase/postgrest-js/issues/393",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-05-08T05:43:48Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/423#issuecomment-1537784679"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5mLL6z",
            "number": 425,
            "title": "Bulk upsert not working (typescript)",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\nWhen upserting data \r\n```typescript\r\nlet bugExample = [ {id: 1, title: \"Hello\" }, { id: 2, title: \"WOrld\" } ];\r\n const { error } = await supabase\r\n        .from(\"modules\")\r\n        .upsert(bugExample);\r\n// 'record \"new\" has no field \"updated_at\"' , code: 42703\r\n\r\nbugExample = bugExample.map((elem) => ({...elem, updated_at: Date.now()}));\r\n....\r\n// table modules has no column updated_at\r\n\r\n```\r\nThese errors come through. Records exist, and actually all data is supplied again. \r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Version of supabase-js: 2.10.0\r\n- Version of Node.js: 18.15.0\r\n",
            "author": {
                "login": "dejoma"
            },
            "state": "CLOSED",
            "createdAt": "2023-05-16T20:04:20Z",
            "closedAt": "2023-05-18T20:35:26Z",
            "url": "https://github.com/supabase/postgrest-js/issues/425",
            "comments": [
                {
                    "id": "IC_kwDODheSms5cfGng",
                    "body": "> 'record \"new\" has no field \"updated_at\"' , code: 42703\r\n\r\nThat sounds like an outdated trigger in your table which contains an `updated_at` column",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-05-17T15:56:43Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/425#issuecomment-1551657440"
                },
                {
                    "id": "IC_kwDODheSms5cfcSC",
                    "body": "What I tried to do for further debugging:\r\n* Create new table and one by one add columns\r\n* Decouple my \"foreign key\" table (e.g. modules_books where foreign keys of both tables were mentioned)\r\n* Update \"new table\" until it was exactly the same as the old table\r\n\r\nAnd then it suddenly worked. I compared my MR's afterwards: the supabase generated typescript DB file was exactly the same.",
                    "author": {
                        "login": "dejoma"
                    },
                    "createdAt": "2023-05-17T16:49:17Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/425#issuecomment-1551746178"
                },
                {
                    "id": "IC_kwDODheSms5clJrN",
                    "body": "> the supabase generated typescript DB file was exactly the same.\r\n\r\nThe typescript types won't detect errors inside triggers. The CLI would have to parse the internal SQL function to do that. I don't think any ORM does it.\r\n\r\n@soedirgo Do you think the above would be possible? Or if it should be done?",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-05-18T15:35:47Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/425#issuecomment-1553242829"
                },
                {
                    "id": "IC_kwDODheSms5cmkLS",
                    "body": "@soedirgo Nvm, I think this should be fixed at the database side. I'll open an issue on `supabase/postgres`.\r\n\r\n---\r\n### Problem\r\n\r\nThis is a pure SQL repro. Using the example [here](https://www.postgresqltutorial.com/postgresql-triggers/creating-first-trigger-postgresql/):\r\n\r\n```sql\r\nCREATE TABLE employees(\r\n   id INT GENERATED ALWAYS AS IDENTITY,\r\n   first_name VARCHAR(40) NOT NULL,\r\n   last_name VARCHAR(40) NOT NULL,\r\n   PRIMARY KEY(id)\r\n);\r\n\r\nCREATE TABLE employee_audits (\r\n   id INT GENERATED ALWAYS AS IDENTITY,\r\n   employee_id INT NOT NULL,\r\n   last_name VARCHAR(40) NOT NULL,\r\n   changed_on TIMESTAMP(6) NOT NULL\r\n);\r\n\r\nCREATE OR REPLACE FUNCTION log_last_name_changes()\r\n  RETURNS TRIGGER\r\n  LANGUAGE PLPGSQL\r\n  AS\r\n$$\r\nBEGIN\r\n\tIF NEW.last_name <> OLD.last_name THEN\r\n\t\t INSERT INTO employee_audits(employee_id,last_name,changed_on)\r\n\t\t VALUES(OLD.id,OLD.last_name,now());\r\n\tEND IF;\r\n\r\n\tRETURN NEW;\r\nEND;\r\n$$;\r\n```\r\n\r\nWe'll break the trigger with this:\r\n\r\n```sql\r\nalter table employees rename COLUMN last_name TO lastname;\r\n```\r\n\r\nAn UPDATE should now give a similar error to OP's:\r\n\r\n```sql\r\nUPDATE employees SET lastname = 'Brown' WHERE ID = 2;\r\n\r\nERROR:  record \"new\" has no field \"last_name\"\r\nCONTEXT:  PL/pgSQL function log_last_name_changes() line 3 at IF\r\n```\r\n\r\n### Solution\r\n\r\nThis can be detected with plpgsql_check, which is already in Supabase:\r\n\r\n```sql\r\ncreate extension plpgsql_check ;\r\n\r\nselect * from plpgsql_check_function('log_last_name_changes', 'employees');\r\n                  plpgsql_check_function\r\n----------------------------------------------------------\r\n error:42703:3:IF:record \"new\" has no field \"last_name\"\r\n Context: SQL expression \"NEW.last_name <> OLD.last_name\"\r\n```\r\n\r\nWe could try enabling an event trigger that uses `plgpsql_check` for every trigger.\r\n\r\n### Notes\r\n\r\nBEGIN ATOMIC already checks dependencies in functions, but it only works on pure SQL functions. Triggers do not work with SQL: `\"ERROR: SQL functions cannot return type trigger\"`.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-05-18T20:35:26Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/425#issuecomment-1553613522"
                },
                {
                    "id": "IC_kwDODheSms5cu7tH",
                    "body": "Thanks for looking into this \ud83d\udc4d\ud83c\udffb ",
                    "author": {
                        "login": "dejoma"
                    },
                    "createdAt": "2023-05-20T07:40:29Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/425#issuecomment-1555807047"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5mafDI",
            "number": 427,
            "title": "No way to retrieve column list for an empty table",
            "body": "# Bug report\r\n\r\n- [X] I confirm this is a bug with Supabase, not with my own application. \r\n- [X] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nWhen querying an empty table, you get an empty array. There is no way to access column names. In a normal table, you can access the keys of the first row object.\r\n\r\n## To Reproduce\r\n\r\n```\r\nconst result = await supabase.from(\"an_empty_table\").select(\"*\");\r\n```\r\n\r\nresult.data and result.error work normally but produce no information about columns\r\n\r\n## Expected behavior\r\n\r\nPerhaps behind a flag, like count?\r\n\r\n```\r\nconst { data } = await supabase.from(\"an_empty_table\").select(\"*\", { columns: true });\r\nconsole.assert(data.columns?.length > 0);\r\n```\r\n\r\n## System information\r\n\r\n- Version of supabase-js: 2.13.1\r\n\r\n## Additional context\r\n\r\nWhy? Because I want to show an empty table view with the columns printed out as a loading state before a user adds a row.\r\n\r\nE.g., in my case, they are adding a \"person\" to a \"people\" table and when people.length == 0 I still want to show the fields as <th> table headers so visually get an impression of the table, without it directly into the code, and I'm not using the typescript client with generated types, etc., in any case it's a reused component that needs to do so regardless of the model being passed to it.\r\n\r\nI noticed you all added this to the Studio codebase a couple years ago:\r\n\r\nhttps://github.com/supabase/supabase/issues/94",
            "author": {
                "login": "zachblume"
            },
            "state": "OPEN",
            "createdAt": "2023-04-01T21:56:04Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/427",
            "comments": [
                {
                    "id": "IC_kwDODheSms5cvdnO",
                    "body": "Can I work on this @zachblume ?",
                    "author": {
                        "login": "itsajay1029"
                    },
                    "createdAt": "2023-04-06T06:43:54Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/427#issuecomment-1555945934"
                },
                {
                    "id": "IC_kwDODheSms5cvdnR",
                    "body": "Hey @zachblume, this is outside the scope of the client library - the response from the query to the REST server doesn't include column information. For this you'd need to query the database directly via SQL (e.g. from [information_schema.columns](https://www.postgresql.org/docs/current/infoschema-columns.html)), or you can use the OpenAPI response from the REST server which you can get from:\r\n\r\n```\r\ncurl '<your API URL>/rest/v1/' -H 'apikey: <your API key>'\r\n```",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-04-06T09:41:01Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/427#issuecomment-1555945937"
                },
                {
                    "id": "IC_kwDODheSms5cvdnS",
                    "body": "Thanks for the pointer the that endpoint, didn\u2019t realize there was a programmatic one. Should wrap it in a handler for the clients and document it is my $.02\r\n\r\nIn the end I wrote an RPC to query info schema as you said, but this is better",
                    "author": {
                        "login": "zachblume"
                    },
                    "createdAt": "2023-04-06T15:15:54Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/427#issuecomment-1555945938"
                },
                {
                    "id": "IC_kwDODheSms5cvdnT",
                    "body": "It would be useful to implement a method in supabase-js to query the /rest/v1/ endpoint without having to extract the API key and bearer token and manually make the fetch call, especially when your app uses custom roles in PostgreSQL.\r\nIn such cases, you can provide information to your frontend to generate menus in a dashboard based on tables and views visibility, which varies based on user privileges with PostgREST.\"",
                    "author": {
                        "login": "Nidroide"
                    },
                    "createdAt": "2023-05-20T09:39:20Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/427#issuecomment-1555945939"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5mx9st",
            "number": 428,
            "title": "Match at least one filter not working as expected",
            "body": "\r\n## Describe the bug\r\n\r\nI am trying to use the `.or` method to match at least one filter. It works with strings and also json objects, but doesn't seem to work for json arrays. However the syntax does work with the `.filter` method.\r\n\r\n## To Reproduce\r\n\r\nI have a table ``table_name`` with a jsonb column named ``data``. The content of this column is:\r\n```\r\n{\r\n  \"one\": {\r\n    \"value\": [\r\n      {\r\n        \"label\": \"Red\",\r\n        \"value\": \"red\"\r\n      }\r\n    ]\r\n  },\r\n  \"two\": {\r\n    \"value\": [\r\n      {\r\n        \"label\": \"Green\",\r\n        \"value\": \"green\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\nThis query works as expected, fetching the one row:\r\n```\r\nlet two = await supabase\r\n.from(\"table_name\")\r\n.select(\"*\")\r\n.filter(\"data->one->value\", \"cs\", '[{\"label\":\"Red\",\"value\":\"red\"}]');\r\nconsole.log(two);\r\n```\r\n\r\nHowever this query fails with an error:\r\n```\r\nlet one = await supabase\r\n.from(\"table_name\")\r\n.select(\"*\")\r\n.or('data->one->value.cs.[{\"label\":\"Red\",\"value\":\"red\"}]');\r\nconsole.log(one);\r\n```\r\nError being:\r\n```\r\n{\"code\":\"PGRST100\",\"details\":\"unexpected \\\":\\\" expecting \\\"->>\\\", \\\"->\\\" or delimiter (.)\",\"hint\":null,\"message\":\"\\\"failed to parse logic tree ((data->one->value.cs.[{\\\"label\\\":\\\"Red\\\",\\\"value\\\":\\\"red\\\"}]))\\\" (line 1, column 47)\"}\r\n```\r\nIf I replace the `.or` with this I no longer see an error, but it also doesn't fetch a row:\r\n```\r\n.or('data->one->value.cs.{\"label\":\"Red\",\"value\":\"red\"}');\r\n```\r\n\r\n## Expected behavior\r\n\r\nI'd like to be able to use match one filter (or perhaps match all filters) with an array of objects. Something like:\r\n```\r\nlet one = await supabase\r\n.from(\"table_name\")\r\n.select(\"*\")\r\n.or('data->one->value.cs.[{\"label\":\"Red\",\"value\":\"red\"}], data->two->value.cs.[{\"label\":\"Green\",\"value\":\"green\"}]');\r\nconsole.log(one);\r\n```\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Version of supabase-js: 2.22.0\r\n- Version of Node.js: 19.7.0",
            "author": {
                "login": "nCrafts"
            },
            "state": "OPEN",
            "createdAt": "2023-05-23T21:11:13Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/428",
            "comments": [
                {
                    "id": "IC_kwDODheSms5l5jUR",
                    "body": "Any news on that?\r\nDid you find a workaround @nCrafts?",
                    "author": {
                        "login": "Alexays"
                    },
                    "createdAt": "2023-09-07T07:01:01Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/428#issuecomment-1709585681"
                },
                {
                    "id": "IC_kwDODheSms5l6ka0",
                    "body": "@Alexays I did not. My use-case got more complex so I ended up writing a custom function instead.",
                    "author": {
                        "login": "nCrafts"
                    },
                    "createdAt": "2023-09-07T09:49:12Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/428#issuecomment-1709852340"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5nDenP",
            "number": 430,
            "title": "`rpc` not automatically typing response",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nThe supabase client is not automatically typing RPC functions all responses based on the generated Database type.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Create a DB function in your database\r\n2. Generate DB types with CLI\r\n3. Create a supabase client, type with generated Database type.\r\n```ts\r\nexport const supabase = createClient<Database>(\r\n  env.SUPABASE_URL,\r\n  env.SUPABASE_ANON_KEY,\r\n);\r\n```\r\n4. Use the RPC function with the client.\r\n```tsx\r\nconst response = await supabase.rpc('my_function', data);\r\n```\r\n6. Response is untyped\r\n\r\n## Expected behavior\r\n\r\nThe supabase client automatically types the RPC response based on the Database schema types\r\n\r\n## Screenshots\r\n\r\n![image](https://github.com/supabase/supabase-js/assets/44002321/b23d5c15-1722-4a13-add0-ad273766c38f)\r\n\r\nWorking if the types are explicitly passed:\r\n\r\n![image](https://github.com/supabase/supabase-js/assets/44002321/cdf8cb15-477c-4706-8b09-2e281c62d169)\r\n\r\n## System information\r\n\r\n- OS: [e.g. macOS, Windows]\r\n- Browser (if applies) [e.g. chrome, safari]\r\n- Version of supabase-js: [e.g. 6.0.2]\r\n- Version of Node.js: [e.g. 10.10.0]\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "bombillazo"
            },
            "state": "CLOSED",
            "createdAt": "2023-05-26T14:58:06Z",
            "closedAt": "2023-06-09T04:29:55Z",
            "url": "https://github.com/supabase/postgrest-js/issues/430",
            "comments": [
                {
                    "id": "IC_kwDODheSms5djiT0",
                    "body": "Can you provide your CLI version & supabase-js/postgrest-js versions? We have a test for RPC return types so not sure how this happened.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-05-31T06:53:57Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/430#issuecomment-1569596660"
                },
                {
                    "id": "IC_kwDODheSms5eaU-F",
                    "body": "i think this is solved, probably an intermediary cli version was fixed and now works. closing :)",
                    "author": {
                        "login": "bombillazo"
                    },
                    "createdAt": "2023-06-09T04:29:54Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/430#issuecomment-1583959941"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5nDe9m",
            "number": 431,
            "title": "Updating row returns error code PGRST116",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nI encountered this issue only when the edge function I'm using is deployed. I've written some code where I insert a record and a few lines of code after I update the same record. It happens sometimes that updates return this error:\r\n```js\r\n{\r\n  code: \"PGRST116\",\r\n  details: \"Results contain 0 rows, application/vnd.pgrst.object+json requires 1 row\",\r\n  hint: null,\r\n  message: \"JSON object requested, multiple (or no) rows returned\"\r\n}\r\n```\r\n\r\nThis is in mainly the code compiled from multiple files:\r\n```js\r\nimport { Database } from '../../database.types.ts';\r\nimport { supabaseConfig } from './config.ts';\r\nimport { createClient } from '@supabase/supabase-js';\r\nconst supabaseClient = createClient<Database>(supabaseConfig.SB_URL, supabaseConfig.SB_KEY);\r\nconst chaptersDB = supabaseClient.from('chapter');\r\nconst { data: chapter, error } = await chaptersDB\r\n  .insert({\r\n    --columns here--\r\n  })\r\n  .select()\r\n  .single();\r\nconst { id } = chapter;\r\nconst { error } = await chaptersDB.update({ --columns here-- }).eq('id', id);\r\nconst { error } = await chaptersDB.update({ --other columns here-- }).eq('id', id);\r\n```\r\nWhat am I doing wrong?\r\n\r\nIt feels like those queries run in different transactions and the first one doesn't end after the insert.\r\n\r\nDo I need to somehow destroy the supabase client after each edge function execution? This does not happen right after deploying the function, but after a couple of runs.",
            "author": {
                "login": "vladgardus"
            },
            "state": "OPEN",
            "createdAt": "2023-05-27T19:45:03Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/431",
            "comments": [
                {
                    "id": "IC_kwDODheSms5mFYiY",
                    "body": "same error here, with `update`.\r\n`posteresti-js` v1.7.2",
                    "author": {
                        "login": "bitlab-code"
                    },
                    "createdAt": "2023-09-10T02:12:04Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/431#issuecomment-1712687256"
                },
                {
                    "id": "IC_kwDODheSms5mFwtG",
                    "body": "After investigating we notice that the problem was a computed field (in the select) that returns `null`. \r\n\r\nRewrite `.select('*, computed_field')` into `.select('*, computed_field(*)')` solve the issue for us. \r\n\r\n@vladgardus check if this is your case",
                    "author": {
                        "login": "bitlab-code"
                    },
                    "createdAt": "2023-09-10T11:15:31Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/431#issuecomment-1712786246"
                },
                {
                    "id": "IC_kwDODheSms5q_NFS",
                    "body": "FYI, Same here with `udpate`, I fixed it by updating the policies.",
                    "author": {
                        "login": "winoooops"
                    },
                    "createdAt": "2023-11-06T14:27:37Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/431#issuecomment-1794953554"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5nPvh8",
            "number": 432,
            "title": "Using reserved words as column name",
            "body": "This has already been reported and closed elsewhere\r\n\r\nhttps://github.com/supabase/supabase/issues/12539\r\n\r\nThe solution was to update documentation but I think, if possible, a better solution would be to add this to the runtime error message, as it's not easy or intuitive to find in the documentation, and if it was directly in the error message I would have easily avoided many hours of troubleshooting.",
            "author": {
                "login": "hamishjohnson"
            },
            "state": "OPEN",
            "createdAt": "2023-05-30T05:04:30Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/432",
            "comments": [
                {
                    "id": "IC_kwDODheSms5df-wL",
                    "body": "Q: Is your column named \"order\"?\r\n\r\nRegardless of whether we can err(which I'm not opposed to), that could be trouble when using it inside a SQL query. You would have to quote \"order\" everywhere.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-05-30T15:42:33Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/432#issuecomment-1568664587"
                },
                {
                    "id": "IC_kwDODheSms5dmgtP",
                    "body": "Yeah, exactly - I was using order. The point of this PR is just that I couldn't understand why for a long time, and the documentation is not clear on it. I think an error message would make this a lot clearer.",
                    "author": {
                        "login": "hamishjohnson"
                    },
                    "createdAt": "2023-05-31T14:44:51Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/432#issuecomment-1570376527"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5n6ioD",
            "number": 434,
            "title": "One-to-one relationship typescript types",
            "body": "# Bug report\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nI have a problem with one-to-one relationships. I have 3 tables:\r\n\r\n- problems\r\n- problem_stats\r\n- problem_votes\r\n\r\nHere are the SQL definitions extracted from Supabase (simplified columns):\r\n\r\n### `problems` table\r\n```sql\r\ncreate table problems (\r\n    id bigint generated by default as identity not null,\r\n    owner uuid not null default auth.uid (),\r\n    constraint problems_pkey primary key (id),\r\n    constraint problems_id_key unique (id),\r\n  ) tablespace pg_default;\r\n```\r\n\r\n### `problem_stats` table\r\n```sql\r\ncreate table problem_stats (\r\n    id bigint generated by default as identity not null,\r\n    constraint problem_stats_pkey primary key (id),\r\n    constraint problem_stats_id_key unique (id),\r\n    constraint problem_stats_id_fkey foreign key (id) references problems (id) on delete cascade\r\n  ) tablespace pg_default;\r\n```\r\n\r\n### `problem_votes` table\r\n```sql\r\ncreate table problem_votes (\r\n    id bigint not null,\r\n    user_id uuid not null default auth.uid (),\r\n    constraint problem_reactions_pkey primary key (id, user_id),\r\n    constraint problem_votes_id_fkey foreign key (id) references problems (id),\r\n  ) tablespace pg_default;\r\n```\r\n\r\nSo the relations are as follows:\r\n\r\n- one-to-one between `problems` and `problem_stats`\r\n- one-to-many between `problems` and `problem_votes`\r\n\r\nThis is the query:\r\n\r\n```typescript\r\n  const { data: problem } = await client\r\n    .from('problems')\r\n    .select(\r\n      `\r\n      id,\r\n     problem_stats (*),\r\n     problem_votes (*)\r\n      `\r\n    )\r\n    .single();\r\n```\r\n\r\nThis is the query response:\r\n```typescript\r\n{\r\n  id: 1,\r\n  problem_stats: { ... },\r\n  problem_votes: [\r\n    {\r\n      ...\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\n> Notice how the response correctly returns a one-to-one relationship for `stats` (object) and a one-to-many relationship for `votes` (array of objects)\r\n\r\nHere are the typescript types:\r\n\r\n```typescript\r\nconst problem: {\r\n    id: number;\r\n    problem_stats: {\r\n        ...\r\n    }[];\r\n    problem_votes: {\r\n        ...\r\n    }[];\r\n} | null\r\n```\r\n\r\n`problem_stats` is represented as an array (although the response is an object because of the one-to-one relationship).\r\n`problem_votes` is correctly represented as an array.\r\n\r\nI've noticed that when I select from `problem_stats` (instead of `problems`) the type is inferred correctly (one-to-one).\r\n\r\n```typescript\r\n  const { data: stats } = await client.from('problem_stats').select(`*, problems(*)`).single();\r\n```\r\n\r\nNow it has type:\r\n```typescript\r\nconst stats: {\r\n    id: number;\r\n    problems: {\r\n        ...\r\n    } | null;\r\n} | null\r\n```\r\n\r\nNow it correctly represents the problems value as an object (one-to-one).",
            "author": {
                "login": "mitjans"
            },
            "state": "OPEN",
            "createdAt": "2023-06-06T08:52:46Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/434",
            "comments": [
                {
                    "id": "IC_kwDODheSms5e1QMi",
                    "body": "Any update on this @soedirgo ?\r\n\r\nI would love to help, but I'm not that good with Typescript types.",
                    "author": {
                        "login": "mitjans"
                    },
                    "createdAt": "2023-06-14T11:33:11Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/434#issuecomment-1591018274"
                },
                {
                    "id": "IC_kwDODheSms5fcXZ-",
                    "body": "I believe this has been fixed, you need to use a db-url to generate the types locally for now https://github.com/supabase/postgrest-js/pull/426",
                    "author": {
                        "login": "imownbey"
                    },
                    "createdAt": "2023-06-21T17:15:08Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/434#issuecomment-1601271422"
                },
                {
                    "id": "IC_kwDODheSms5fcX50",
                    "body": "@imownbey I created this issue after adding a [comment](https://github.com/supabase/postgrest-js/pull/426#issuecomment-1571797546) to that PR, so that it doesn't get lost in closed PR",
                    "author": {
                        "login": "mitjans"
                    },
                    "createdAt": "2023-06-21T17:16:45Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/434#issuecomment-1601273460"
                },
                {
                    "id": "IC_kwDODheSms5fcezZ",
                    "body": "Oh woops! My bad",
                    "author": {
                        "login": "imownbey"
                    },
                    "createdAt": "2023-06-21T17:37:57Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/434#issuecomment-1601301721"
                },
                {
                    "id": "IC_kwDODheSms5hB8rO",
                    "body": "Any update on this @soedirgo ?",
                    "author": {
                        "login": "hawkcookie"
                    },
                    "createdAt": "2023-07-10T01:04:39Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/434#issuecomment-1627900622"
                },
                {
                    "id": "IC_kwDODheSms5pCZaT",
                    "body": "This is actually a pretty gnarly issue because postgrest returns the child object not wrapped in an array but typescript now thinks it is in an array. This makes runtime errors very easy to run into and it hard to trust the typescript types.",
                    "author": {
                        "login": "imownbey"
                    },
                    "createdAt": "2023-10-13T21:14:22Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/434#issuecomment-1762236051"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5oWlE2",
            "number": 435,
            "title": "`value` type for `.contains()` is not specific enough",
            "body": "I have a `uuid[]` field, and i have to filter data using `contains` method.\r\n\r\nVSCode shows the .contains() accept a ` string | Record<string, unknown> | unknown[]` as second param, but it will errors when i pass a `string` value,\r\n\r\n```\r\n{\r\n  code: \"22P02\",\r\n  details: 'Array value must start with \"{\" or dimension information.',\r\n  hint: null,\r\n  message: 'malformed array literal: \"06591b00-2d5f-4af1-8203-2324323c5ff2\"'\r\n}\r\n```\r\n\r\nIf i pass an `string[]`, everything looks good.\r\n\r\nMaybe the generated type schema wrong? Or the JS lib not correctly handle them.\r\n\r\n- Runtime: Edge Functions\r\n- supabase-js: 2.22.0\r\n- Supabase CLI: 1.64.3",
            "author": {
                "login": "laeo"
            },
            "state": "OPEN",
            "createdAt": "2023-06-09T02:32:34Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/435",
            "comments": [
                {
                    "id": "IC_kwDODheSms5esWpz",
                    "body": "Thanks! We could definitely be more specific here - `string` is valid for range types, `Record<string, unknown>` is for `json`/`jsonb`, and `unknown[]` is for array types.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-06-13T07:15:01Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/435#issuecomment-1588685427"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5ojXlM",
            "number": 437,
            "title": "support type casts in query typings",
            "body": "**Describe the bug**\r\nEmbeddings type definition has been updated to `string` -- it is represented internally as a `vector`, and in code often as a `number[]` -- I think `number[]` would be a more apt definition of the type in typescript.\r\n\r\n<img width=\"402\" alt=\"Screenshot 2023-06-01 at 2 03 54 PM\" src=\"https://github.com/supabase/cli/assets/3606778/5fd6fb97-349b-406d-83d4-32a484cd82ad\">\r\n",
            "author": {
                "login": "mosnicholas"
            },
            "state": "OPEN",
            "createdAt": "2023-06-01T11:05:34Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/437",
            "comments": [
                {
                    "id": "IC_kwDODheSms5esBrS",
                    "body": "This used to work... Trying to track down the change but can't seem to find it... Pretty frustrating that you haven't even got a response on a breaking change like this...\r\n\r\n@codesnik any thoughts?",
                    "author": {
                        "login": "ChuckJonas"
                    },
                    "createdAt": "2023-06-13T02:33:20Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/437#issuecomment-1588599506"
                },
                {
                    "id": "IC_kwDODheSms5esBrZ",
                    "body": "The change should be in [postgres-meta](https://github.com/supabase/postgres-meta) repo. @soedirgo do we need a new patch release for pgmeta?",
                    "author": {
                        "login": "sweatybridge"
                    },
                    "createdAt": "2023-06-13T02:36:04Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/437#issuecomment-1588599513"
                },
                {
                    "id": "IC_kwDODheSms5esBrk",
                    "body": "here is the PR: https://github.com/supabase/postgres-meta/pull/559\r\n\r\nI've been creating records and calling `rpc` using `number[]`, but did just check the result of a query and it's a `string` so I don't really get what's going on.\r\n",
                    "author": {
                        "login": "ChuckJonas"
                    },
                    "createdAt": "2023-06-13T02:50:34Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/437#issuecomment-1588599524"
                },
                {
                    "id": "IC_kwDODheSms5esBro",
                    "body": "As mentioned in the PR, `vector` is represented as a JSON string in the response, so we type it as `string`. You'd need to do a cast like `embedding::_float4`, though the query typings don't support this atm.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-06-13T04:31:52Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/437#issuecomment-1588599528"
                },
                {
                    "id": "IC_kwDODheSms5esBrt",
                    "body": "Converting this issue to supporting casts in query typings",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-06-13T06:03:21Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/437#issuecomment-1588599533"
                },
                {
                    "id": "IC_kwDODheSms5esYOB",
                    "body": "> @codesnik any thoughts?\r\n\r\n@ChuckJonas you probably wanted to mention someone else?",
                    "author": {
                        "login": "codesnik"
                    },
                    "createdAt": "2023-06-13T07:19:54Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/437#issuecomment-1588691841"
                },
                {
                    "id": "IC_kwDODheSms5evjle",
                    "body": "@codesnik ya sorry! \r\n\r\nFor some reason, when I typed `@soedirgo` github shows your username as the first option \ud83e\udd37 ",
                    "author": {
                        "login": "ChuckJonas"
                    },
                    "createdAt": "2023-06-13T15:17:16Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/437#issuecomment-1589524830"
                },
                {
                    "id": "IC_kwDODheSms5evkxW",
                    "body": "@soedirgo do you have any idea why it actually still works to pass an array of numbers to the supabase client?  I'm guessing maybe the supabase client calls `JSON.stringify` if it receives a javascript object?  \r\n\r\nIt's fairly annoying to have to convert, when the results from any vector operation is always going to be an `number[]`. ",
                    "author": {
                        "login": "ChuckJonas"
                    },
                    "createdAt": "2023-06-13T15:20:12Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/437#issuecomment-1589529686"
                },
                {
                    "id": "IC_kwDODheSms5ey4z8",
                    "body": "@steve-chavez does PostgREST convert the JSON array into `real[]` when inserting into a `vector` column? I noticed that with plain SQL `array[1,2,3]` works, but `'[1,2,3]'::jsonb` doesn't.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-06-14T03:25:10Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/437#issuecomment-1590398204"
                },
                {
                    "id": "IC_kwDODheSms5ezPYR",
                    "body": "@soedirgo No. All it does is pass the json body to `json_populate_recordset`. ",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-06-14T05:25:05Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/437#issuecomment-1590490641"
                },
                {
                    "id": "IC_kwDODheSms5ezwA2",
                    "body": "OK, so it seems like some numeric types can be converted to `vector`, which is why the RPC using `number[]` works. But `vector` doesn't have a cast to `json`, so the text representation is used instead [0].\r\n\r\nAs an alternative to casting, you can add create a [computed column](https://postgrest.org/en/stable/references/api/tables_views.html#computed-virtual-columns) like so:\r\n\r\n```sql\r\nalter table mytable add embedding_arr float4[] generated always as (embedding) stored;\r\n```\r\n\r\nWhen you query that column it'll be typed as `number[]`.\r\n\r\n[0] from the `to_json[b]` [function description](https://www.postgresql.org/docs/current/functions-json.html#FUNCTIONS-JSON-CREATION-TABLE)",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-06-14T07:24:31Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/437#issuecomment-1590624310"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5pOi5d",
            "number": 438,
            "title": "How to set RPC to send by GET with query params",
            "body": "# Improve documentation\r\n\r\n## Link \r\nhttps://supabase.github.io/postgrest-js/v2/classes/PostgrestClient.html#rpc\r\n\r\nHow to make a RPC call with GET and query params\r\n\r\n## Describe the problem\r\n\r\nDon't have an example or how to do it\r\n\r\nExample:\r\n`GET https://postgrest-url.domain/rpc/{function}?{param}={value}...`",
            "author": {
                "login": "digoburigo"
            },
            "state": "CLOSED",
            "createdAt": "2023-06-20T13:32:01Z",
            "closedAt": "2023-06-23T07:02:13Z",
            "url": "https://github.com/supabase/postgrest-js/issues/438",
            "comments": [
                {
                    "id": "IC_kwDODheSms5fT0Kg",
                    "body": "What's the use case for doing GET with `postgrest-js`? Right now it only does RPC through POST.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-06-20T15:32:49Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/438#issuecomment-1599029920"
                },
                {
                    "id": "IC_kwDODheSms5fUSqs",
                    "body": "My use case is a postgrest connected to a replica database for read only, so POST requests don't work.\r\nError that occurs is referenced in this [StackOverflow issue](https://stackoverflow.com/questions/24384407/cannot-set-transaction-read-write-mode-during-recovery-error), for example\r\n",
                    "author": {
                        "login": "digoburigo"
                    },
                    "createdAt": "2023-06-20T16:48:19Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/438#issuecomment-1599154860"
                },
                {
                    "id": "IC_kwDODheSms5fUj4W",
                    "body": "@digoburigo If you mark your functions with `STABLE` or `IMMUTABLE`:\r\n\r\n```sql\r\nCREATE FUNCTION --.. \r\n$$;\r\nLANGUAGE SQL STABLE;\r\n```\r\n\r\nThen PostgREST will run it under a `READ ONLY` access mode. That should avoid that error.\r\n\r\nFor more details, see https://postgrest.org/en/stable/references/transactions.html#access-mode.\r\n\r\n---\r\n\r\nThat being said I think we could add a parameter to `rpc` for using a GET. Maybe on `options` (`{options: { get: true} }`.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-06-20T17:31:20Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/438#issuecomment-1599225366"
                },
                {
                    "id": "IC_kwDODheSms5fandF",
                    "body": "@steve-chavez oh nice, thanks for the info. Must have looked better in postgrest docs.\r\nFor the options in the `postgrest-js` would be nice to have.\r\nFeel free to close this issue then!",
                    "author": {
                        "login": "digoburigo"
                    },
                    "createdAt": "2023-06-21T13:13:36Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/438#issuecomment-1600812869"
                },
                {
                    "id": "IC_kwDODheSms5nY5TH",
                    "body": "@soedirgo thanks\u2014do you know which release this will be in, or even just the PR/commit so I can track it through?\r\n\r\nEdit: or maybe I misunderstood the conversation above and we didn't resolve to add the option?\r\n\r\nAnother use-case: we use RPC for dashboard widget data functions that take abstracted/common params (date range, granularity, etc.).  Our CDN can cache this data nicely at the edge for `GET` requests, but not for `POST`.  Most CDNs have a similar dichotomy, I believe.",
                    "author": {
                        "login": "markalexander"
                    },
                    "createdAt": "2023-09-25T23:02:53Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/438#issuecomment-1734579399"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5ptX5E",
            "number": 440,
            "title": "Querying nth table by joining n-1 tables.",
            "body": "# Improve documentation\r\n\r\n## Link\r\n\r\nhttps://supabase.com/docs/reference/javascript/select\r\n\r\n## Describe the problem\r\n\r\nI recently encountered a scenario where I needed to join three tables - product, supplier, and manufacturer - and filter the results based on a column in the manufacturer table.\r\n\r\n**schema**\r\n> Product Table:\r\nproduct_id (Primary Key)\r\nsupplier_id (Foreign Key to Supplier Table)\r\n\r\n>Supplier Table:\r\nsupplier_id (Primary Key)\r\nmanufacturer_id (Foreign Key to Manufacturer Table)\r\n\r\n>Manufacturer Table:\r\nmanufacturer_id (Primary Key)\r\nmax_capacity\r\n\r\nHowever, I found the documentation to be inadequate for my needs. While it provided guidance for querying a single foreign key-constrained table, it didn't offer any information on how to accomplish this with multiple nested tables in the same format.\r\n\r\n## Describe the improvement\r\n\r\nTo assist users facing similar issues, I suggest adding an example to the documentation. This would enable them to efficiently join multiple nested tables in the desired format and filter the results according to their requirements.\r\n\r\n```SQL\r\n      db\r\n       .from(\"products\")\r\n        .select(`\r\n            product_id,\r\n            suppliers (\r\n                supplier_id,\r\n                manufacturers (\r\n                    max_capacity\r\n                )\r\n            )\r\n        `)\r\n        .eq(\"suppliers.manufacturers.max_capacity\", maxCapacity)\r\n```\r\n\r\n## Additional context\r\n\r\nIt is also applicable for `n` nested tables.",
            "author": {
                "login": "KamaniBhavin"
            },
            "state": "OPEN",
            "createdAt": "2023-03-26T04:53:29Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/440",
            "comments": [
                {
                    "id": "IC_kwDODheSms5fvcGF",
                    "body": "I think there is a bug, I tried filter results based on nested foreign table key, but without passing `!inner` results were not filtered out properly\r\n```js\r\ndb.from(\"products\").select(`\r\n   product_id,\r\n      suppliers (\r\n         supplier_id,\r\n            manufacturers!inner(\r\n               max_capacity\r\n            )\r\n         )\r\n    `)\r\n    .eq(\"suppliers.manufacturers.max_capacity\", maxCapacity)\r\n```",
                    "author": {
                        "login": "KajSzy"
                    },
                    "createdAt": "2023-06-25T09:08:29Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/440#issuecomment-1606271365"
                },
                {
                    "id": "IC_kwDODheSms5f20S4",
                    "body": "@KajSzy By default all nested objects are LEFT JOINed, so that is actually expected behavior. As you mention `!inner` is needed for a deep filter.\r\n\r\nInternally we've been discussing a `supabase-js` abstraction for nested objects (a `join` method). This could default to `!inner` for preventing confusion.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-06-26T20:34:37Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/440#issuecomment-1608205496"
                },
                {
                    "id": "IC_kwDODheSms5f6Dqd",
                    "body": "I think it can be left as is (no abstraction needed), but I covering this topic (querying foreign tables and filtering through foreign columns) would be extremly helpful. \r\nI've spent like hour or so just browsing GitHub issues and discussions.\r\nAlso selecting many-to-many table omitting joining table is covered only in [Querying joins and nested tables](https://supabase.com/docs/guides/api/joins-and-nesting)\r\n\r\nOverall I think that `@supabase/supabase-js` is working great but have many _magic_ moments where things are so easy to implement but it's hard to find documentation on it",
                    "author": {
                        "login": "KajSzy"
                    },
                    "createdAt": "2023-06-27T08:41:39Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/440#issuecomment-1609054877"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5sC-6D",
            "number": 445,
            "title": "ParserError: Expected identifier at `)` when using relation with no columns selected",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nWhen using anti-join and not selecting any columns, `ParserError` is shown.\r\n\r\nQuery:\r\n\r\n```js\r\nawait supabase\r\n  .from('cars')\r\n  .select('id, car_images()')\r\n  .is('car_images', null)\r\n```\r\n\r\nError:\r\n\r\n<img width=\"516\" alt=\"image\" src=\"https://github.com/supabase/supabase-js/assets/6711845/9a9ff1d8-d23f-4a11-840c-de12b47f7ad2\">\r\n\r\nThe query is working and returns correct results, only typescript is showing this error with no types as a result. After adding any field (for example `car_images(id)`) the error disappears and typings are correct.\r\n\r\nArticle with similar example (`nominations` relation): https://supabase.com/blog/postgrest-11-prerelease#anti-joins\r\n\r\n## Expected behavior\r\n\r\nNo typescript typings error, return type should not have this relation.\r\n\r\n## Screenshots\r\n\r\n<img width=\"516\" alt=\"image\" src=\"https://github.com/supabase/supabase-js/assets/6711845/9a9ff1d8-d23f-4a11-840c-de12b47f7ad2\">\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser (if applies) [e.g. chrome, safari]\r\n- Version of supabase-js: 2.26.0\r\n- Version of Node.js: 18.16.0\r\n- Version of Typescript: 5.1.6\r\n\r\n",
            "author": {
                "login": "vladshcherbin"
            },
            "state": "OPEN",
            "createdAt": "2023-07-19T18:15:54Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/445",
            "comments": [
                {
                    "id": "IC_kwDODheSms5iD8jJ",
                    "body": "Thanks @vladshcherbin! This is a new feature from PostgREST v11 (using `nested()` in v10 would result in an error), so flagging this as a feature request.",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-07-21T08:22:20Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/445#issuecomment-1645201609"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5sJuk-",
            "number": 447,
            "title": "Type error: referencing missing column `count`",
            "body": "# Bug report\r\n\r\n\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nAfter upgrading `@supabase/supabase-js` to `2.26.0`, I'm now getting a type error when querying `count` for a nested relationship. The API is returning the count exactly as before, so it's only a type issue.\r\n\r\n\r\n\r\n## To Reproduce\r\n\r\n- Query the `count` of a nested relationship.\r\n- Try to reference said value\r\n\r\nExample query:\r\n```js\r\nconst response = await supabase\r\n    .from(\"brands\")\r\n    .select(\r\n      \"*, brand_categories!brands_category_id_fkey(*), brand_subcategories(*, brand_categories(*)), brand_statuses(*), brand_locations(count)\",\r\n      { count: \"estimated\", head: false }\r\n    );\r\n```\r\nIn this example, `brand_locations(count)` is what's causing the error.\r\nThe returned type for that field is `SelectQueryError` even though no error is thrown from the API.\r\n\r\n## Expected behavior\r\n\r\nThe returned type of a `count` should not be `SelectQueryError`.\r\n\r\n## Screenshots\r\n\r\n![Screenshot 2023-07-20 at 10 23 40 AM](https://github.com/supabase/supabase-js/assets/3289533/c7a6bb45-5217-4388-bc40-c52affd38e34)\r\n\r\n## System information\r\n\r\n- OS: macOS 13.5\r\n- Version of supabase-js: `v2.26.0`\r\n- Version of Node.js: `v18.17.0`\r\n",
            "author": {
                "login": "davidchalifoux"
            },
            "state": "OPEN",
            "createdAt": "2023-07-20T14:40:58Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/447",
            "comments": [
                {
                    "id": "IC_kwDODheSms5iDjpP",
                    "body": "Thanks David, I'll try to reproduce this. Is `count` a normal column of `brand_locations`? Or a computed column etc.?",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-07-21T07:19:57Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/447#issuecomment-1645099599"
                },
                {
                    "id": "IC_kwDODheSms5iFbz7",
                    "body": "@soedirgo Thank you!\r\nNo, it is not a normal or computed column.",
                    "author": {
                        "login": "davidchalifoux"
                    },
                    "createdAt": "2023-07-21T13:31:37Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/447#issuecomment-1645591803"
                },
                {
                    "id": "IC_kwDODheSms5iFh6F",
                    "body": "It's actually happening to me with a much simpler query:\r\n```ts\r\nconst res = await supabase\r\n      .from(\"brand_locations\")\r\n      .select(\"count\", { count: \"estimated\", head: true })\r\n      .eq(\"brand_id\", brandId);\r\n```\r\n\r\nAgain, it's returning `SelectQueryError<\"Referencing missing column `count`\">`.\r\nI also tested it on other tables in my database, and it's happening with every one of them.\r\nCould it be an issue with `supabase gen types`?\r\n\r\nEDIT: Nevermind, I forgot you don't need to select count if it's not a foreign table.",
                    "author": {
                        "login": "davidchalifoux"
                    },
                    "createdAt": "2023-07-21T13:45:12Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/447#issuecomment-1645616773"
                },
                {
                    "id": "IC_kwDODheSms5iHgqz",
                    "body": "This is happening to me with this query:\r\n```typescript\r\n  const someQuery = await supabase\r\n    .from('someTable')\r\n    .select(\r\n      `id,\r\n       fk:foreign_key_id(id, name)\r\n      `\r\n    )\r\n```\r\n\r\nI believe it has to do with [this pr](https://github.com/supabase/postgrest-js/pull/436)\r\n\r\nI've verified that my types file is correct, the column `name` exists on the foreign table, and `foreign_key_id` is configured as a foreign key to the table I expect it to be referencing(confirmed in types file). Also, at runtime, this works completely as expected with no issues.\r\n\r\nI believe the expected behaviour is that `fk` should be `unknown`, or `{}[]`? This works fine if I put `*` instead of specifying columns. Not 100% sure on what the intended behavior is, or if my issue is directly related to this one. I'm just getting the same error, and they seem very similar",
                    "author": {
                        "login": "jasonpanosso"
                    },
                    "createdAt": "2023-07-21T19:10:22Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/447#issuecomment-1646135987"
                },
                {
                    "id": "IC_kwDODheSms5ivNv3",
                    "body": "@soedirgo did you ever get a chance to test? Curious if this is intended behavior, or a bug",
                    "author": {
                        "login": "jasonpanosso"
                    },
                    "createdAt": "2023-07-29T03:57:26Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/447#issuecomment-1656544247"
                },
                {
                    "id": "IC_kwDODheSms5i7j_c",
                    "body": "I have the same problem after upgrading. Also this seems to be a duplicate: https://github.com/supabase/postgrest-js/issues/449",
                    "author": {
                        "login": "samuba"
                    },
                    "createdAt": "2023-08-01T08:05:23Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/447#issuecomment-1659781084"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5scire",
            "number": 449,
            "title": "Latest update produces an inferred type error on select statements with a table join",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nAn error with Typescript type interpretation with supabase-js select query with table join.\r\nThis error occurred when updating from 2.26.0 to 2.29.0. (But I think it was the dependencies updating that broke it, i just changed the supabase version from `^2.26.0` to `^2.29.0`.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Use Supabase-js with TypeScript.\r\n2. Generate supabase types. See https://supabase.com/docs/reference/javascript/typescript-support\r\n3. Make a select query with a table join.\r\n```ts\r\n  const { data, error } = await supabase\r\n    .from('show_members')\r\n    .select(\r\n      `role_flag, show_id \r\n      (\r\n      team_id\r\n      )`\r\n    )\r\n    .eq('user_id', userId)\r\n    .eq('show_id', showId)\r\n    .maybeSingle();\r\n```\r\n4. Observe the returned data has an issue in the type interpretation of the joined column\r\nInferred Type:\r\n``` ts\r\nconst data: {\r\n    role_flag: string;\r\n    show_id: SelectQueryError<\"Referencing missing column `team_id`\">[];\r\n} | null\r\n```\r\n\r\nSecond example inferred type:\r\n```ts\r\nconst shows: {\r\n    id: string;\r\n    created_at: string;\r\n    title: string;\r\n    team_id: SelectQueryError<\"Referencing missing column `description`\">[];\r\n}[] | null\r\n```\r\n\r\n## Expected behavior\r\n\r\nNo type error to occur\r\nExpected Inferred Type:\r\n``` ts\r\nconst data: {\r\n    role_flag: string;\r\n    show_id: {\r\n        team_id: unknown\r\n    }[];\r\n} | null\r\n```\r\n\r\nSecond example expected inferred type:\r\n```ts\r\nconst shows: {\r\n    id: string;\r\n    created_at: string;\r\n    title: string;\r\n    team_id: {\r\n        description: unknown\r\n        }[];\r\n}[] | null\r\n```\r\n\r\nThis error occurred when updating from 2.26.0 to 2.29.0\r\n\r\n## System information\r\n\r\n- OS: Ubuntu 22.04.2 LTS\r\n- Version of supabase-js: 2.29.0\r\n- Version of Node.js: 16.7.1\r\n\r\nI had some issues getting it back to how it was working before with all the version changes, but here is the supabase-js section of my `yarn.lock`. This configuration works:\r\n```\r\n\"@supabase/supabase-js@^2.26.0\":\r\n  version \"2.29.0\"\r\n  resolved \"https://registry.yarnpkg.com/@supabase/supabase-js/-/supabase-js-2.29.0.tgz#7bc9983188d01f37cf53e2afcf1a1ad14a772129\"\r\n  integrity sha512-Lb/7sxsTLAzYl6Op1CL+hH+9NC3FUAj1FfgUUbCBysJlAF39/kbdrimq/JMFOAnN1/cqpkR3rR/1WmU9ARS29g==\r\n  dependencies:\r\n    \"@supabase/functions-js\" \"^2.1.0\"\r\n    \"@supabase/gotrue-js\" \"2.43.1\"\r\n    \"@supabase/postgrest-js\" \"^1.7.0\"\r\n    \"@supabase/realtime-js\" \"^2.7.3\"\r\n    \"@supabase/storage-js\" \"^2.5.1\"\r\n    cross-fetch \"^3.1.5\"\r\n    \r\n\"@supabase/functions-js@^2.1.0\":\r\n  version \"2.1.1\"\r\n  resolved \"https://registry.yarnpkg.com/@supabase/functions-js/-/functions-js-2.1.1.tgz#31eb64734d59e6da84927e6f50f627ad5e03c519\"\r\n  integrity sha512-bIR1Puae6W+1/MzPfYBWOG/SCWGo4B5CB7c0ZZksvliNEAzhxNBJ0UFKYINcGdGtxG8ZC+1xr3utWpNZNwnoRw==\r\n  dependencies:\r\n    cross-fetch \"^3.1.5\"\r\n\r\n\"@supabase/gotrue-js@2.43.1\":\r\n  version \"2.43.1\"\r\n  resolved \"https://registry.yarnpkg.com/@supabase/gotrue-js/-/gotrue-js-2.43.1.tgz#4623791433f0b7ef4c17f0d880fba1f0307b4c81\"\r\n  integrity sha512-HVjjElEPbM5sDoK1pXry/H181X7A1a9G9O68PZwN276y/EUwWOw3pA8KKKSRTaTSiK+41BPC8HUfsfbe7470RQ==\r\n  dependencies:\r\n    cross-fetch \"^3.1.5\"\r\n\r\n\"@supabase/postgrest-js@^1.7.0\":\r\n  version \"1.7.0\"\r\n  resolved \"https://registry.yarnpkg.com/@supabase/postgrest-js/-/postgrest-js-1.7.0.tgz#69ffb605d083d4761d9c30075c04b10e32cc7fd0\"\r\n  integrity sha512-wLADHZ5jm7LljF4GigK0H2vc1wGupBY2hGYfb4fVo0UuyMftmA6tOYy+ZpMH/vPq01CUFwXGwvIke6kyqh/QDg==\r\n  dependencies:\r\n    cross-fetch \"^3.1.5\"\r\n\r\n\"@supabase/realtime-js@^2.7.3\":\r\n  version \"2.7.3\"\r\n  resolved \"https://registry.yarnpkg.com/@supabase/realtime-js/-/realtime-js-2.7.3.tgz#cbcb84181add681ab99c87032bfe88101c6863b3\"\r\n  integrity sha512-c7TzL81sx2kqyxsxcDduJcHL9KJdCOoKimGP6lQSqiZKX42ATlBZpWbyy9KFGFBjAP4nyopMf5JhPi2ZH9jyNw==\r\n  dependencies:\r\n    \"@types/phoenix\" \"^1.5.4\"\r\n    \"@types/websocket\" \"^1.0.3\"\r\n    websocket \"^1.0.34\"\r\n\r\n\"@supabase/storage-js@^2.5.1\":\r\n  version \"2.5.1\"\r\n  resolved \"https://registry.yarnpkg.com/@supabase/storage-js/-/storage-js-2.5.1.tgz#16c4c088996e0395034717836e626f14df63a349\"\r\n  integrity sha512-nkR0fQA9ScAtIKA3vNoPEqbZv1k5B5HVRYEvRWdlP6mUpFphM9TwPL2jZ/ztNGMTG5xT6SrHr+H7Ykz8qzbhjw==\r\n  dependencies:\r\n    cross-fetch \"^3.1.5\"\r\n```\r\n\r\nHere is a diff of the two yarn.lock files, the original (which works) has had supabase-js incrementally updated, the new one has been freshly rebuilt (removed links):\r\n```diff\r\n\"@supabase/functions-js@^2.1.0\":\r\n-  version \"2.1.1\"\r\n+ version \"2.1.2\"\r\n  dependencies:\r\n    cross-fetch \"^3.1.5\"\r\n\r\n\"@supabase/gotrue-js@2.43.1\":\r\n  version \"2.43.1\"\r\n  resolved \"https://registry.yarnpkg.com/@supabase/gotrue-js/-/gotrue-js-2.43.1.tgz#4623791433f0b7ef4c17f0d880fba1f0307b4c81\"\r\n  integrity sha512-HVjjElEPbM5sDoK1pXry/H181X7A1a9G9O68PZwN276y/EUwWOw3pA8KKKSRTaTSiK+41BPC8HUfsfbe7470RQ==\r\n  dependencies:\r\n    cross-fetch \"^3.1.5\"\r\n\r\n\"@supabase/postgrest-js@^1.7.0\":\r\n-  version \"1.7.0\"\r\n+  version \"1.7.2\"\r\n  resolved \"https://registry.yarnpkg.com/@supabase/postgrest-js/-/postgrest-js-1.7.0.tgz#69ffb605d083d4761d9c30075c04b10e32cc7fd0\"\r\n  integrity sha512-wLADHZ5jm7LljF4GigK0H2vc1wGupBY2hGYfb4fVo0UuyMftmA6tOYy+ZpMH/vPq01CUFwXGwvIke6kyqh/QDg==\r\n  dependencies:\r\n    cross-fetch \"^3.1.5\"\r\n\r\n\"@supabase/realtime-js@^2.7.3\":\r\n  version \"2.7.3\"\r\n  dependencies:\r\n    \"@types/phoenix\" \"^1.5.4\"\r\n    \"@types/websocket\" \"^1.0.3\"\r\n    websocket \"^1.0.34\"\r\n\r\n\"@supabase/storage-js@^2.5.1\":\r\n  version \"2.5.1\"\r\n  dependencies:\r\n    cross-fetch \"^3.1.5\"\r\n\r\n\"@supabase/supabase-js@^2.26.0\":\r\n  version \"2.29.0\"\r\n  dependencies:\r\n    \"@supabase/functions-js\" \"^2.1.0\"\r\n    \"@supabase/gotrue-js\" \"2.43.1\"\r\n    \"@supabase/postgrest-js\" \"^1.7.0\"\r\n    \"@supabase/realtime-js\" \"^2.7.3\"\r\n    \"@supabase/storage-js\" \"^2.5.1\"\r\n    cross-fetch \"^3.1.5\"\r\n```\r\n\r\n",
            "author": {
                "login": "Aerilym"
            },
            "state": "OPEN",
            "createdAt": "2023-07-25T01:01:07Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/449",
            "comments": [
                {
                    "id": "IC_kwDODheSms5iR71g",
                    "body": "This seems to be the offending commit: https://github.com/supabase/postgrest-js/commit/aeb2ce9f1bdca64d0a0d12812c777b0e76df24ae\r\nI used to get type unknown on joins, but now with this error type, I can't use joins on the newer versions. Have I been using joins incorrectly or is this an issue with the type generation?",
                    "author": {
                        "login": "Aerilym"
                    },
                    "createdAt": "2023-07-25T02:09:51Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/449#issuecomment-1648868704"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5smGKF",
            "number": 450,
            "title": "Types for column name disambiguation",
            "body": "# Bug report\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nPostgREST allows disambiguating relationships by using a column name as the target directly (see column name section of https://postgrest.org/en/stable/references/api/resource_embedding.html#embedding-disambiguation). However, select query parser in postgrest-js does not support this yet.\r\n\r\nPersonally I find column name disambiguation to be the superior method for embeds, so it would be nice to have this\r\n\r\n## To Reproduce\r\n\r\nUse column name instead of foreign key constraint name or relation name as the target, i.e. `.select('user:username(*)')` instead of `.select('user:users(*)')`",
            "author": {
                "login": "wyozi"
            },
            "state": "OPEN",
            "createdAt": "2023-07-26T09:08:46Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/450",
            "comments": []
        },
        {
            "id": "I_kwDODheSms5sshFo",
            "number": 452,
            "title": "Upsert doesn't return data when row already exists",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nHi Team, when doing an upsert on an existing record, the select returns an empty array.\r\n\r\n## To Reproduce\r\n\r\nThis is my code\r\n```\r\nconst {data, error} = supabase\r\n.from('chats')\r\n.upsert(data, { onConflict: ['user_id', 'listing_id'], ignoreDuplicates: true })\r\n.select()\r\n```\r\nRunning this the first time returns data\r\n```\r\n{\r\n  error: null,\r\n  data: [\r\n    {\r\n      id: 7,\r\n      created_at: '2023-07-25T19:19:03.942503+00:00',\r\n      updated_at: '2023-07-25T19:19:03.942503+00:00',\r\n      listing_id: 1,\r\n      user_id: 'bf21737c-8684-49af-944c-94b126f90f55'\r\n    }\r\n  ],\r\n  count: null,\r\n  status: 201,\r\n  statusText: 'Created'\r\n}\r\n```\r\nRunning it second time with the same values for listing_id and user_id returns \r\n```\r\n{\r\n  error: null,\r\n  data: [],\r\n  count: null,\r\n  status: 201,\r\n  statusText: 'Created'\r\n}\r\n```\r\n\r\n## Expected behavior\r\n\r\nThe second call should return the same result as the first one. \r\n\r\n## Additional context\r\n\r\nIf the behaviour is normal, how should I get the id of the newly inserted / existing row? Typically I would run this code and redirect the user to the chat screen with id returned in data. The idea is to not make an extra call to the database.\r\n",
            "author": {
                "login": "mrkpatchaa"
            },
            "state": "OPEN",
            "createdAt": "2023-07-25T19:31:42Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/452",
            "comments": [
                {
                    "id": "IC_kwDODheSms5ihWks",
                    "body": "Could you assign this issue to me? I would like to work upon this.",
                    "author": {
                        "login": "avi1737"
                    },
                    "createdAt": "2023-07-26T10:30:12Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/452#issuecomment-1652910380"
                },
                {
                    "id": "IC_kwDODheSms5ihWku",
                    "body": "@avi1737 I cannot assign. Maybe an admin can help with that. ",
                    "author": {
                        "login": "mrkpatchaa"
                    },
                    "createdAt": "2023-07-26T10:36:34Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/452#issuecomment-1652910382"
                },
                {
                    "id": "IC_kwDODheSms5ihX4D",
                    "body": "> .upsert(data, { onConflict: ['user_id', 'listing_id'], ignoreDuplicates: true })\r\n\r\nIMO this behavior is pretty clear from the `ignoreDuplicates: true` usage, I don't see how it's a bug.\r\n\r\nYou should remove `ignoreDuplicates` or set it to `false` if you want the result to be returned.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-07-27T04:58:57Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/452#issuecomment-1652915715"
                },
                {
                    "id": "IC_kwDODheSms5ijN7O",
                    "body": "@steve-chavez when I set ignoreDuplicates to false, I get this\r\n```\r\n{\r\n  error: null,\r\n  data: null,\r\n  count: null,\r\n  status: 201,\r\n  statusText: 'Created'\r\n}\r\n```",
                    "author": {
                        "login": "mrkpatchaa"
                    },
                    "createdAt": "2023-07-27T11:07:42Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/452#issuecomment-1653399246"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5ssjIK",
            "number": 453,
            "title": "supabase-js rpc call error:  message: 'a column definition list is required for functions returning \"record\"'",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nFollowing this documentation leads to an error on `rpc` call: https://supabase.com/docs/guides/database/extensions/postgis \r\n\r\n```js\r\n{\r\n    \"code\": \"42601\",\r\n    \"details\": null,\r\n    \"hint\": null,\r\n    \"message\": \"a column definition list is required for functions returning \\\"record\\\"\"\r\n}\r\n```\r\n\r\n\r\n\r\n## To Reproduce\r\n\r\nSQL on the website dashboard: \r\n\r\n```sql\r\ncreate table if not exists public.restaurants (\r\n\tid int generated by default as identity primary key,\r\n\tname text not null,\r\n\tlocation geography(POINT) not null\r\n);\r\n\r\ncreate index restaurants_geo_index\r\n  on public.restaurants\r\n  using GIST (location);\r\n\r\ninsert into public.restaurants\r\n  (name, location)\r\nvalues\r\n  ('Supa Burger', st_point(-73.946823, 40.807416)),\r\n  ('Supa Pizza', st_point(-73.94581, 40.807475)),\r\n  ('Supa Taco', st_point(-73.945826, 40.80629));\r\n\r\n\r\ncreate or replace function nearby_restaurants(lat float, long float)\r\nreturns setof record\r\nlanguage sql\r\nas $$\r\n  select id, name, st_astext(location) as location, st_distance(location, st_point(long, lat)::geography) as dist_meters\r\n  from public.restaurants\r\n  order by location <-> st_point(long, lat)::geography;\r\n$$;\r\n\r\n```\r\n\r\nand now in the app:\r\n```js\r\nconst { data, error } = await supabase.rpc('nearby_restaurants', {\r\n  lat: 40.807313,\r\n  long: -73.946713,\r\n})\r\n\r\nconsole.log('rpc restaurant', data, error);\r\n```\r\n\r\n## Expected behavior\r\n\r\nList of results\r\n\r\n## Screenshots\r\n\r\n![image](https://github.com/supabase/supabase/assets/19957924/0b44f4c9-fa5a-42a2-8aec-0c19c6eb1168)\r\n\r\n\r\n## System information\r\n\r\n- OS: [windows]\r\n- Browser (if applies) [chrome]\r\n- Version of supabase-js: [2.26.0]\r\n- Version of Node.js: [18.16.1]\r\n\r\n",
            "author": {
                "login": "bbagherian"
            },
            "state": "CLOSED",
            "createdAt": "2023-07-26T15:28:43Z",
            "closedAt": "2023-08-17T18:42:25Z",
            "url": "https://github.com/supabase/postgrest-js/issues/453",
            "comments": [
                {
                    "id": "IC_kwDODheSms5ihYZ9",
                    "body": "Running as query is ok by the way, the api call is broken I believe:\r\n\r\n![image](https://github.com/supabase/supabase-js/assets/19957924/79fb0d37-daef-4c61-98dd-a078be9cc2f6)\r\n",
                    "author": {
                        "login": "bbagherian"
                    },
                    "createdAt": "2023-07-26T16:20:57Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/453#issuecomment-1652917885"
                },
                {
                    "id": "IC_kwDODheSms5ihai3",
                    "body": "> Running as query is ok by the way\r\n\r\nTry it in SQL as:\r\n\r\n```sql\r\nselect * from nearby_restaurants(40, -73);\r\n```\r\n\r\nAnd you'll see it fail in the same way as the RPC.\r\n\r\n`ERROR:  a column definition list is required for functions returning \"record\"`\r\n\r\n---\r\n\r\nWhen you declare a `SETOF` function, it is a table-valued function and thus a `SELECT * FROM func()` is the most suitable query for it.\r\n\r\nAdditionally:\r\n\r\n- look at the `select nearby_restaurants()` result. It has the tuple format `(3, \\\"..)` which is not suitable for a web application.\r\n- If you don't declare types for your table-valued function, then typescript types can't also be generated (@soedirgo CMIIW).\r\n\r\n---\r\n\r\nAlthough a better error message could be generated.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-07-27T05:17:18Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/453#issuecomment-1652926647"
                },
                {
                    "id": "IC_kwDODheSms5in5IC",
                    "body": "The root cause of this issue seems to be this guide https://supabase.com/docs/guides/database/extensions/postgis#order-by-distance\r\n\r\nThis [discussion](https://github.com/orgs/supabase/discussions/16075) reports it used to work before? Will check that out.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-07-27T21:43:18Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/453#issuecomment-1654624770"
                },
                {
                    "id": "IC_kwDODheSms5ipZ-a",
                    "body": "Tracking this on https://github.com/PostgREST/postgrest/issues/2881",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-07-28T05:07:03Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/453#issuecomment-1655021466"
                },
                {
                    "id": "IC_kwDODheSms5itlZn",
                    "body": "I'll fix this on https://github.com/PostgREST/postgrest/issues/2881 and go back to the previous behavior. So this worked before because PostgREST considered a `setof record` as scalar to avoid OP's error.\r\n\r\nHowever this method has the disadvantage of not being able to `select` particular columns from it:\r\n\r\n```sql\r\ncreate or replace function setof_record() returns setof record as $$\r\n  select * from projects;\r\n$$ language sql;\r\n```\r\n\r\n```sql\r\ncurl 'localhost:3000/rpc/setof_record?select=id'\r\n{\"code\":\"42703\",\"details\":null,\"hint\":null,\"message\":\"column setof_record.id does not exist\"}\r\n```\r\n\r\nConsidering that, it would be better to fix the PostGIS guide to use this function signature:\r\n\r\n```sql\r\ncreate or replace function nearby_restaurants(lat float, long float)\r\nreturns TABLE (id public.restaurants.id%TYPE, name public.restaurants.name%TYPE, location text, dist_meters float)\r\nlanguage sql\r\nas $$\r\n  select id, name, st_astext(location) as location, st_distance(location, st_point(long, lat)::geography) as dist_meters\r\n  from public.restaurants\r\n  order by location <-> st_point(long, lat)::geography;\r\n$$;\r\n```\r\n\r\nThe above should work on the current version.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-07-28T18:02:55Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/453#issuecomment-1656116839"
                },
                {
                    "id": "IC_kwDODheSms5jfAND",
                    "body": "> I'll fix this on [PostgREST/postgrest#2881](https://github.com/PostgREST/postgrest/issues/2881) and go back to the previous behavior. So this worked before because PostgREST considered a `setof record` as scalar to avoid OP's error.\r\n> \r\n> However this method has the disadvantage of not being able to `select` particular columns from it:\r\n> \r\n> ```sql\r\n> create or replace function setof_record() returns setof record as $$\r\n>   select * from projects;\r\n> $$ language sql;\r\n> ```\r\n> \r\n> ```sql\r\n> curl 'localhost:3000/rpc/setof_record?select=id'\r\n> {\"code\":\"42703\",\"details\":null,\"hint\":null,\"message\":\"column setof_record.id does not exist\"}\r\n> ```\r\n> \r\n> Considering that, it would be better to fix the PostGIS guide to use this function signature:\r\n> \r\n> ```sql\r\n> create or replace function nearby_restaurants(lat float, long float)\r\n> returns TABLE (id public.restaurants%TYPE, name public.restaurants%TYPE, location text, dist_meters float)\r\n> language sql\r\n> as $$\r\n>   select id, name, st_astext(location) as location, st_distance(location, st_point(long, lat)::geography) as dist_meters\r\n>   from public.restaurants\r\n>   order by location <-> st_point(long, lat)::geography;\r\n> $$;\r\n> ```\r\n> \r\n> The above should work on the current version.\r\n\r\nThanks for the solution. Btw I changed a little this because it was returning invalid sql error then I removed public schema name and wrote types hardcoded instead of variables (%TYPE) and here it's:\r\n\r\n```sql\r\ncreate or replace function nearby_restaurants(lat float, long float)\r\nreturns TABLE (id int, name varchar, location text, dist_meters float)\r\nlanguage sql\r\nas $$\r\n  select id, name, st_astext(location) as location, st_distance(location, st_point(long, lat)::geography) as dist_meters\r\n  from restaurants\r\n  order by location <-> st_point(long, lat)::geography;\r\n$$;\r\n```",
                    "author": {
                        "login": "srht"
                    },
                    "createdAt": "2023-08-08T07:34:43Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/453#issuecomment-1669071683"
                },
                {
                    "id": "IC_kwDODheSms5kB06e",
                    "body": "FYI, this is already fixed on [PostgREST v11.2.0](https://github.com/PostgREST/postgrest/releases/tag/v11.2.0) (not deployed to Supabase yet).",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-08-14T23:03:46Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/453#issuecomment-1678200478"
                },
                {
                    "id": "IC_kwDODheSms5kTUO9",
                    "body": "Deploy with the fix is already approved https://github.com/supabase/postgres/pull/720. \r\n\r\nAdditionally the docs have been updated https://github.com/supabase/supabase/pull/16177",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-08-17T18:42:25Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/453#issuecomment-1682785213"
                },
                {
                    "id": "IC_kwDODheSms5kdF4c",
                    "body": "Hello, i have this problem that suddenly appear on my app. When will the fix be deployed in supabase?",
                    "author": {
                        "login": "KA-devl"
                    },
                    "createdAt": "2023-08-20T17:29:59Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/453#issuecomment-1685347868"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5tvK7A",
            "number": 456,
            "title": "!inner should make the relation non-nullable",
            "body": "## Describe the bug\r\n\r\nWhen a relation has the `!inner` hint, the relationship can be considered to always exist due to the embedded resource being included as an inner join. Therefore, `null` can be dropped from the result type union.\r\n\r\n## To Reproduce\r\n\r\n```ts\r\nconst test = supabase().from(\"people\").select(\"id, site:sites!inner(name)\").then(r => r.data);\r\n/* type:\r\n{\r\n    id: string;\r\n    site: {\r\n        name: string | null;\r\n    } | null;\r\n}\r\n*/\r\n```\r\n\r\n## Expected behavior\r\n\r\n```ts\r\nconst test = supabase().from(\"people\").select(\"id, site:sites!inner(name)\").then(r => r.data);\r\n/* type:\r\n{\r\n    id: string;\r\n    site: {\r\n        name: string | null;\r\n    };\r\n}\r\n*/\r\n```\r\n",
            "author": {
                "login": "wyozi"
            },
            "state": "OPEN",
            "createdAt": "2023-08-08T11:01:13Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/456",
            "comments": []
        },
        {
            "id": "I_kwDODheSms5uCSb-",
            "number": 459,
            "title": "Spread operator causes Typescript ParserError",
            "body": "# Bug report\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nUsing the new PostgREST spread operator works, but leads to a Typescript error:\r\n\r\n`error TS2339: Property 'invitees' does not exist on type 'ParserError<\"Expected identifier at `...contact(id,name,email,contact_user_id))`\">`\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Add spread (`...`) to a `select()`.\r\n2. Compile with `tsc`\r\n\r\n## Expected behavior\r\n\r\nTypes should successfully be generated when queries include the spread operator.\r\n\r\n## System information\r\n\r\n- Version of supabase-js: 2.32.0\r\n- Version of Node.js: Cloudflare Workers",
            "author": {
                "login": "KrisBraun"
            },
            "state": "OPEN",
            "createdAt": "2023-08-09T19:47:04Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/459",
            "comments": [
                {
                    "id": "IC_kwDODheSms5pvqRC",
                    "body": "I am facing the same issue. Although it works, the typescript is all fked up. Is there any workaround besides forcing the type?",
                    "author": {
                        "login": "nathantew14"
                    },
                    "createdAt": "2023-10-22T13:52:27Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/459#issuecomment-1774101570"
                },
                {
                    "id": "IC_kwDODheSms5r1Woe",
                    "body": "Getting the same \r\n```\r\nProperty 'number' does not exist on type 'ParserError<\"Expected identifier at `...chapters(title, number) \\n  `\">'.ts(2339)\r\n```\r\n\r\n## Version\r\n```\r\n    \"@supabase/auth-helpers-nextjs\": \"^0.8.7\",\r\n    \"@supabase/supabase-js\": \"^2.38.4\",\r\n```\r\n\r\n```\r\nimport { Database } from '@/supabase'\r\nimport { createServerComponentClient } from '@supabase/auth-helpers-nextjs'\r\nimport { cookies } from 'next/headers'\r\nimport Link from 'next/link'\r\n\r\nexport default async function UserPage() {\r\n  const supabase = createServerComponentClient<Database>({ cookies })\r\n\r\n  const { data, error } = await supabase.from('favorites').select(`\r\n    id, ...chapters(title, number) \r\n  `)\r\n\r\n  if (!data) {\r\n    return <h2>No chapters</h2>\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className='m-auto max-w-4xl'>\r\n        <h3>favorites</h3>\r\n        <div className='flex flex-col'>\r\n          {data.map(f => {\r\n            return (\r\n              <Link href={`/chapters/${String(f.number)}`} key={f.id}>\r\n                {f.title}\r\n              </Link>\r\n            )\r\n          })}\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n```",
                    "author": {
                        "login": "destinio"
                    },
                    "createdAt": "2023-11-13T21:22:55Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/459#issuecomment-1809148446"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5uSQHd",
            "number": 460,
            "title": "Support nulls=stripped introduced by PostgREST 11.2.0",
            "body": "PostgREST 11.2.0 introduced stripping of null value properties in JSON results for arrays and single object responses. To support that functionality in [postgrest-js](https://github.com/supabase/postgrest-js) a method like `stripNulls()`could be introduced. For instance: `client.from('table').select().stripNulls()`.\r\n\r\nFurther information:\r\n\r\nhttps://github.com/PostgREST/postgrest/releases/tag/v11.2.0 (see \"Resource Representation\")\r\nhttps://postgrest.org/en/stable/references/api/resource_representation.html#stripped-nulls\r\nhttps://github.com/PostgREST/postgrest/blob/main/test/spec/Feature/Query/NullsStrip.hs\r\n\r\nhttps://github.com/PostgREST/postgrest/issues/1601\r\nhttps://github.com/PostgREST/postgrest/pull/2894\r\nhttps://github.com/PostgREST/postgrest/pull/2899\r\n\r\n_Originally posted by @vrilcode in https://github.com/supabase/supabase/discussions/16479_",
            "author": {
                "login": "steve-chavez"
            },
            "state": "OPEN",
            "createdAt": "2023-08-14T18:02:11Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/460",
            "comments": [
                {
                    "id": "IC_kwDODheSms5kX0_D",
                    "body": "Great addition. Thank you for the continuous improvement and maintenance.\r\n\r\nMy two cents: I would also like if it could be set as a global option.",
                    "author": {
                        "login": "imageck"
                    },
                    "createdAt": "2023-08-18T14:01:56Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/460#issuecomment-1683967939"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5u2Q7H",
            "number": 461,
            "title": "`.delete().single()` can delete multiple rows",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\n`.single()` or `.maybeSingle()` returns an error if multiple rows are affected. However the query still runs, which means `.delete().single()` can delete many rows. I'd consider this unexpected behavior.\r\n\r\nThe documentation does not state or imply this behavior.\r\n\r\n```\r\n{\r\n    code: 'PGRST116',\r\n    details: 'Results contain 2 rows, application/vnd.pgrst.object+json requires 1 row',\r\n    hint: null,\r\n    message: 'JSON object requested, multiple (or no) rows returned'\r\n  }\r\n```\r\n\r\n## To Reproduce\r\n\r\n```\r\nconst result = await supabase.from('example').delete().single();\r\nconsole.log(result);\r\n```\r\n\r\n## Expected behavior\r\n\r\nIf the `.delete().single()` / `.delete().maybeSingle()` affects multiple rows, the query should not execute.\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Version of supabase-js: 2.32.0\r\n- Version of Node.js: 18.17.1",
            "author": {
                "login": "probablykasper"
            },
            "state": "CLOSED",
            "createdAt": "2023-08-20T20:31:10Z",
            "closedAt": "2023-08-22T00:22:39Z",
            "url": "https://github.com/supabase/postgrest-js/issues/461",
            "comments": [
                {
                    "id": "IC_kwDODheSms5kkLBU",
                    "body": ":x: Can't reproduce :\r\n\r\n```bash\r\n$ curl 'localhost:3000/complex_items'\r\n\r\n[{\"id\":1,\"name\":\"One\",\"settings\":{\"foo\":{\"int\":1,\"bar\":\"baz\"}},\"arr_data\":[1],\"field-with_sep\":1}, \r\n {\"id\":2,\"name\":\"Two\",\"settings\":{\"foo\":{\"int\":1,\"bar\":\"baz\"}},\"arr_data\":[1,2],\"field-with_sep\":1}, \r\n {\"id\":3,\"name\":\"Three\",\"settings\":{\"foo\":{\"int\":1,\"bar\":\"baz\"}},\"arr_data\":[1,2,3],\"field-with_sep\":3}]\r\n\r\n# equivalent to supabase.from('complex_items').delete().single();\r\n$ curl 'localhost:3000/complex_items' -X DELETE -H \"Accept: application/vnd.pgrst.object\"\r\n\r\n{\"code\":\"PGRST116\",\"details\":\"The result contains 3 rows\",\"hint\":null,\"message\":\"JSON object requested, multiple (or no) rows returned\"}\r\n\r\n$ curl 'localhost:3000/complex_items' \r\n\r\n[{\"id\":1,\"name\":\"One\",\"settings\":{\"foo\":{\"int\":1,\"bar\":\"baz\"}},\"arr_data\":[1],\"field-with_sep\":1}, \r\n {\"id\":2,\"name\":\"Two\",\"settings\":{\"foo\":{\"int\":1,\"bar\":\"baz\"}},\"arr_data\":[1,2],\"field-with_sep\":1}, \r\n {\"id\":3,\"name\":\"Three\",\"settings\":{\"foo\":{\"int\":1,\"bar\":\"baz\"}},\"arr_data\":[1,2,3],\"field-with_sep\":3}]\r\n```\r\n\r\n> const result = await supabase.from('example').delete().single();\r\n\r\nOn the Supabase platform you also have `pg-safeupdate`, which wouldn't even let the DELETE run without a filter. Is this self-hosted?\r\n\r\nAlso provide a before/after queries of the data you think is being deleted. ",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-08-21T23:41:11Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/461#issuecomment-1687203924"
                },
                {
                    "id": "IC_kwDODheSms5kkSPO",
                    "body": "I must've messed up when testing this, I can't reproduce it either now. Sorry",
                    "author": {
                        "login": "probablykasper"
                    },
                    "createdAt": "2023-08-22T00:22:39Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/461#issuecomment-1687233486"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5vCog6",
            "number": 465,
            "title": "1.8.1 @supabase/node-fetch dependencies breaks browser builds",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nAfter installing the latest dependencies (upgrading to version `1.8.1` of this package), browser builds (plain react app), start breaking because global is undefined. This is a classic error when node modules, in this case `@supabase/node-fetch`, are imported in a browser context.\r\n\r\nThe errors are thrown from this file: ../node_modules/.pnpm/@supabase+node-fetch@2.6.13/node_modules/@supabase/node-fetch/lib/index.mjs\r\n\r\n\r\n## Expected behavior\r\n\r\nNot breaking\r\n\r\n## Workaround\r\n\r\nPin your `@supabase/postgrest-js` version to `1.8.0`.\r\n\r\nE.g. with pnpm:\r\n```json\r\n// package.json\r\n  \"resolutions\": {\r\n    \"@supabase/postgrest-js\": \"1.8.0\"\r\n  }\r\n```\r\n\r\n## Screenshots\r\n\r\n![image](https://github.com/supabase/postgrest-js/assets/13211347/e22b7158-02a0-411d-a57f-d896915c71ec)\r\n![image](https://github.com/supabase/postgrest-js/assets/13211347/b38c0106-f619-4855-9302-7cf3c6d4a2ba)\r\n\r\n\r\n## System information\r\n\r\n- OS: Intel macOS Ventura\r\n- Browser: chrome\r\n- Version of supabase-js: `2.33.1`\r\n- Version of Node.js: `18.16.0`\r\n\r\n## Additional context\r\n\r\n- App is beeing built with Vite in my case\r\n- Related discord issue (I'm not the only one experiencing this): https://discord.com/channels/839993398554656828/1143822827561173092 \r\n",
            "author": {
                "login": "NiklasPor"
            },
            "state": "CLOSED",
            "createdAt": "2023-08-23T09:41:30Z",
            "closedAt": "2023-08-23T15:37:50Z",
            "url": "https://github.com/supabase/postgrest-js/issues/465",
            "comments": [
                {
                    "id": "IC_kwDODheSms5kuhr6",
                    "body": "I've reported this to the team and we will get a fix out soon.",
                    "author": {
                        "login": "silentworks"
                    },
                    "createdAt": "2023-08-23T12:58:23Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/465#issuecomment-1689918202"
                },
                {
                    "id": "IC_kwDODheSms5s1j7j",
                    "body": "This seems to be broken again with the latest release.",
                    "author": {
                        "login": "arxpoetica"
                    },
                    "createdAt": "2023-11-24T18:23:37Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/465#issuecomment-1825980131"
                },
                {
                    "id": "IC_kwDODheSms5s3B3x",
                    "body": "@arxpoetica can you provide some steps to reproduce this please? or provide a minimal reproducible example repo.",
                    "author": {
                        "login": "silentworks"
                    },
                    "createdAt": "2023-11-25T16:04:47Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/465#issuecomment-1826364913"
                },
                {
                    "id": "IC_kwDODheSms5tBTQ1",
                    "body": "Hey, yes\u2014might not come back to it for a while, but I will.",
                    "author": {
                        "login": "arxpoetica"
                    },
                    "createdAt": "2023-11-28T04:35:41Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/465#issuecomment-1829057589"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5vOeR_",
            "number": 468,
            "title": "Error in crossfetch package",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nI just upgraded to the latest Supabase-js package **2.33.1** when I try to use the api, \r\n\r\nUncaught (in promise) SyntaxError: The requested module '/node_modules/.pnpm/cross-fetch@3.1.8/node_modules/cross-fetch/dist/browser-ponyfill.js?v=bd2992b8' does not provide an export named 'default' (at PostgrestBuilder.ts:1:8)\r\n\r\nI uninstalled node_modules and tried to reinstall them and I still get the error, all when running supabase-js\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Go to '\u2026'\r\n2. Click on '\u2026'\r\n3. Scroll down to '\u2026'\r\n4. See error\r\n\r\n## Expected behavior\r\n\r\nA clear and concise description of what you expected to happen.\r\n\r\n## Screenshots\r\n<img width=\"448\" alt=\"Captura de pantalla 2023-08-24 a la(s) 7 27 11 p m\" src=\"https://github.com/supabase/postgrest-js/assets/42183700/b58b5eb7-4c83-4a86-9947-a0ba674db40d\">\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n## System information\r\n\r\n  System:\r\n    OS: macOS 13.5\r\n    CPU: (8) arm64 Apple M1 Pro\r\n    Memory: 185.33 MB / 16.00 GB\r\n    Shell: 5.9 - /bin/zsh\r\n  Binaries:\r\n    Node: 18.14.2 - ~/.nvm/versions/node/v18.14.2/bin/node\r\n    npm: 9.5.0 - ~/.nvm/versions/node/v18.14.2/bin/npm\r\n  Browsers:\r\n    Brave Browser: 116.1.57.47\r\n    Chrome: 116.0.5845.110\r\n    Safari: 16.6\r\n  npmPackages:\r\n    @builder.io/qwik: ^1.2.8 => 1.2.8\r\n    @builder.io/qwik-city: ^1.2.8 => 1.2.8\r\n    @supabase/supabase-js: ^2.33.1 => 2.33.1\r\n    undici: 5.22.1 => 5.22.1\r\n    vite: 4.3.5 => 4.3.5\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "kokecar11"
            },
            "state": "CLOSED",
            "createdAt": "2023-08-25T00:35:27Z",
            "closedAt": "2023-08-29T07:06:41Z",
            "url": "https://github.com/supabase/postgrest-js/issues/468",
            "comments": [
                {
                    "id": "IC_kwDODheSms5lJHBi",
                    "body": "Closing in favor of https://github.com/supabase/supabase-js/issues/845",
                    "author": {
                        "login": "soedirgo"
                    },
                    "createdAt": "2023-08-29T07:06:41Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/468#issuecomment-1696886882"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5vXdAV",
            "number": 469,
            "title": "Typings on query results don't match actual returned values",
            "body": "# Bug report\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nI have a relationship between tables that looks something like this:\r\n\r\n```sql\r\nCREATE TABLE \"event\" (\r\n  \"id\" serial PRIMARY KEY,\r\n  \"slug\" VARCHAR NOT NULL,\r\n   .....a few more columns,\r\n);\r\n\r\nCREATE TABLE \"product\" (\r\n  \"id\" serial PRIMARY KEY,\r\n  \"event_id\" int UNIQUE NOT NULL,\r\n  .....a few more columns,\r\n);\r\n\r\nCREATE INDEX ON \"product\" (\"event_id\");\r\nALTER TABLE \"product\" ADD FOREIGN KEY (\"event_id\") REFERENCES \"event\" (\"id\") ON DELETE CASCADE;\r\n```\r\n\r\nI then query my event table by slug and join on product as such:\r\n\r\n```js\r\nconst { data: event, error } = await db\r\n      .from('event')\r\n      .select('*, product(*)')\r\n      .eq('slug', slug)\r\n      .single()\r\n```\r\nNow my event with a single product should be returned. When I try to target my event doing the following:\r\n\r\n```js\r\nconst product = event?.product\r\n```\r\nProduct typing comes back as an array. But when I log the product to my console, i see its not an array but indeed a single product object. This is causing my typings to be incorrect.\r\n\r\nIs there something im missing in regards to joins that explains this behavior? Or perhaps my tables are incorrect?\r\n\r\n## Expected behavior\r\n\r\nExpect product to not be an array but an object.\r\n\r\n## Screenshot\r\n\r\nThe screenshot shows that when hovering over `event?.product`, it indicates it's an array. But when I log `event?.product`, you can see in my terminal that it's not an array but its an object.\r\n\r\n<img width=\"799\" alt=\"image\" src=\"https://github.com/supabase/postgrest-js/assets/19699368/192545a6-0d17-41e0-9412-08bc9b1426fb\">\r\n\r\n\r\n## System information\r\n\r\n- OS: [macOs]\r\n- Version of supabase-js: [^2.31.0]\r\n- Version of Node.js: [v18.16.1]\r\n",
            "author": {
                "login": "kiyadotdev"
            },
            "state": "OPEN",
            "createdAt": "2023-08-27T09:04:13Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/469",
            "comments": [
                {
                    "id": "IC_kwDODheSms5pp6-o",
                    "body": "We're also experiencing this same issue.\r\n\r\nSeems this other issue is also reporting the same problem: https://github.com/supabase/postgrest-js/issues/477",
                    "author": {
                        "login": "cdimitroulas"
                    },
                    "createdAt": "2023-10-20T11:54:01Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/469#issuecomment-1772597160"
                },
                {
                    "id": "IC_kwDODheSms5s3GH1",
                    "body": "Also experiencing this issue. Any news on the bugfix?",
                    "author": {
                        "login": "FranciscoHS19"
                    },
                    "createdAt": "2023-11-25T17:26:32Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/469#issuecomment-1826382325"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5vfy4V",
            "number": 471,
            "title": "Wrong type for joins with one-to-one relationships",
            "body": "# Bug report\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nI have a `profiles` and a `customers` table, with a one-to-one relationship:\r\n```yml\r\nprofiles: {\r\n  id: text, primary key\r\n  ...\r\n}\r\ncustomers: {\r\n  id: references profiles.id, primary key\r\n  stripe_customer_id: text, unique\r\n  ...\r\n}\r\n```\r\n\r\nWhen doing a join between these, TypeScript thinks the type of `customers` is this:\r\n```ts\r\n{\r\n    stripe_customer_id: string;\r\n}[]\r\n```\r\n\r\nBut when I run the code, this is the actual type I get:\r\n```ts\r\n{\r\n    stripe_customer_id: string;\r\n}\r\n```\r\n\r\nSo when accessing the `stripe_customer_id` property, I get this type error:\r\n> Property 'stripe_customer_id' does not exist on type '{ stripe_customer_id: string; }[]'.\r\n\r\n## To Reproduce\r\n\r\n```js\r\nconst profile_result = await supabase\r\n\t.from('profiles')\r\n\t.select('id, customers ( stripe_customer_id )')\r\n\t.eq('id', params.id)\r\n\t.single()\r\nif (profile_result.data) {\r\n\tconsole.log(profile_result.data.customers.stripe_customer_id)\r\n    //                                        ^\r\n    // Property 'stripe_customer_id' does not exist on\r\n    // type '{ stripe_customer_id: string; }[]'.ts(2339)\r\n}\r\n```\r\n\r\n## Expected behavior\r\n\r\nThe TypeScript type should not be an array for one-to-one relationships. It should match the actual type\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Version of supabase-js: 2.31.0\r\n- Version of Node.js: 18.14.2\r\n\r\n## Additional context\r\n\r\nRelated:\r\n- https://github.com/supabase/supabase-js/issues/723",
            "author": {
                "login": "probablykasper"
            },
            "state": "OPEN",
            "createdAt": "2023-08-04T23:02:13Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/471",
            "comments": [
                {
                    "id": "IC_kwDODheSms5lHuLi",
                    "body": "I'm using this as a workaround for now:\r\n\r\n```typescript\r\nexport function cast<T>(notAnArray: T[]): T {\r\n  return notAnArray as T;\r\n}\r\n```\r\n\r\nAnd then:\r\n\r\n```typescript\r\nconsole.log(cast(profile_result.data.customers).stripe_customer_id)\r\n```",
                    "author": {
                        "login": "aslakhellesoy"
                    },
                    "createdAt": "2023-08-07T11:32:00Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/471#issuecomment-1696522978"
                },
                {
                    "id": "IC_kwDODheSms5lHuLn",
                    "body": "Update: I've changed my workaround to this:\r\n\r\n```typescript\r\nexport function fixOneToOne<T>(objectOrNull: T[]): T | null {\r\n  return (objectOrNull as T) || null;\r\n}\r\n```\r\n\r\nI've changed the return type to `T | null` because the relationship may indeed be `null`. In the example above, this would happen when there is no `customers` record for the given profile.\r\n\r\nIn the example above, the correct type should be:\r\n\r\n```typescript\r\n{\r\n    stripe_customer_id: string;\r\n} | null\r\n```",
                    "author": {
                        "login": "aslakhellesoy"
                    },
                    "createdAt": "2023-08-25T11:17:26Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/471#issuecomment-1696522983"
                },
                {
                    "id": "IC_kwDODheSms5mFwU6",
                    "body": "I encountered the same issue today and I found another workaround.\r\n\r\n```\r\nconst profile_result = await supabase\r\n\t.from('profiles')\r\n\t.select('id, customers ( stripe_customer_id )')\r\n\t.eq('id', params.id)\r\n\t.single()\r\n        .returns<YourType[]>();\r\n\r\n# type definition\r\ntype YourType {\r\n    the type that you expect without the array\r\n}\r\n```",
                    "author": {
                        "login": "FocusCookie"
                    },
                    "createdAt": "2023-09-10T11:07:53Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/471#issuecomment-1712784698"
                },
                {
                    "id": "IC_kwDODheSms5mOYnS",
                    "body": "I am experiencing the exact same issue. As my query is rather nested, workarounds are very inconvenient...\r\n\r\nDoes anyone know, whether an older version does not have this bug included?",
                    "author": {
                        "login": "timlgl"
                    },
                    "createdAt": "2023-09-12T06:08:52Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/471#issuecomment-1715046866"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5vfzK5",
            "number": 472,
            "title": "Database relationships query types not working",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nGiven a schema types definition for a table like so:\r\n```ts\r\n  account: {\r\n        Row: {\r\n          id: string;\r\n          name: string | null;\r\n          type: string | null;\r\n        };\r\n  ...\r\n  },\r\n  my_resource: {\r\n        Row: {\r\n          id: string;\r\n          name: string | null;\r\n          big_account_id: string | null;\r\n          small_account_id: string | null;\r\n        };\r\n        ...\r\n        Relationships: [\r\n          {\r\n            foreignKeyName: 'my_resource_big_account_id_fkey';\r\n            columns: ['big_account_id'];\r\n            referencedRelation: 'account';\r\n            referencedColumns: ['id'];\r\n          },\r\n          {\r\n            foreignKeyName: 'my_resource_small_account_id_fkey';\r\n            columns: ['small_account_id'];\r\n            referencedRelation: 'account';\r\n            referencedColumns: ['id'];\r\n          },\r\n        ];\r\n``` \r\nWhen querying data from `my_resource`, one gets errors or an empty type:\r\n```ts\r\nconst query = `id,key:id,\r\n  name,\r\n  state_location_code,\r\n  big_account_id(*),\r\n  small_account_id(*)`\r\n\r\n// resulting type\r\ntype MyResource = {\r\n    id: string;\r\n    key: string;\r\n    name: string | null;\r\n    big_account_id: {}[];\r\n    small_account_id: {}[];\r\n}\r\n\r\nconst query2 = `id,key:id,\r\n  name,\r\n  state_location_code,\r\n  big_account_id(id,name,type),\r\n  small_account_id(id,name,type)`\r\n\r\n// result type\r\ntype MyResource = {\r\n    id: string;\r\n    key: string;\r\n    name: string | null;\r\n    big_account_id: SelectQueryError<\"Referencing missing column `id`\">[];\r\n    small_account_id: SelectQueryError<\"Referencing missing column `id`\">[];\r\n}\r\n```\r\n\r\nThis only happens when one tries to query data using relations in a query; the `account` type works fine when querying it directly. It also works on other table types where the foreign key id is called `account_id` instead of not matching the foreign table name + `_id`.\r\n\r\n## To Reproduce\r\n\r\n1. Create any 2 tables, with 1:1 foreign key relations on one of them.\r\n2. Name the column something other than `foreign_table` + `_id`\r\n3. Generate the types using the supabase CLI\r\n4. Create a query that select fields belonging to the foreign table using `(*)`\r\n5. The types will be empty or if specifying a field a QueryResult error will appear.\r\n\r\n## Expected behavior\r\n\r\nThe correct types are produced based on the relationships generated by the Supabase DB schema.\r\n\r\n## Screenshots\r\n\r\n## System information\r\n\r\n- Version of supabase-js: 2.33.1\r\n- Version of supabase-cli: 1.91.1\r\n- Version of Node.js: 16.17.0\r\n\r\n",
            "author": {
                "login": "bombillazo"
            },
            "state": "OPEN",
            "createdAt": "2023-08-25T19:36:38Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/472",
            "comments": [
                {
                    "id": "IC_kwDODheSms5lHue_",
                    "body": "I think the issue is the column name, once the name does not match the foreign table name, the query breaks down for relations.",
                    "author": {
                        "login": "bombillazo"
                    },
                    "createdAt": "2023-08-25T19:44:24Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/472#issuecomment-1696524223"
                },
                {
                    "id": "IC_kwDODheSms5lHufC",
                    "body": "ok, it works if I use `account(*)`, the query sees the foreign fields, but how can I specify I want to query both big and small accounts ?",
                    "author": {
                        "login": "bombillazo"
                    },
                    "createdAt": "2023-08-25T20:15:13Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/472#issuecomment-1696524226"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5voA2f",
            "number": 473,
            "title": "`.neq()`: add warning about not matching `null`",
            "body": "# Improve documentation\r\n\r\n## Link \r\n\r\n`.neq()` TSDoc\r\n\r\n## Describe the problem\r\n\r\n`.neq('col', 'foo')` doesn't match `col: null` which is not very intuitive. This should be documented in the TSDoc.\r\n\r\n## Describe the improvement\r\n\r\nAdd a paragraph warning about this behavior.\r\n\r\n## Additional context\r\n\r\nhttps://github.com/supabase/postgrest-js/pull/463#issuecomment-1695304531",
            "author": {
                "login": "soedirgo"
            },
            "state": "OPEN",
            "createdAt": "2023-08-30T02:03:22Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/473",
            "comments": []
        },
        {
            "id": "I_kwDODheSms5v0vCq",
            "number": 474,
            "title": "Error after upgrading to v2.33.1: SelectQueryError<\"Referencing missing column `computed_review_score`\">",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nError after upgrading to 2.33.1 I'm getting this Typescript error: `SelectQueryError<\"Referencing missing column 'computed_review_score'\">`\r\n\r\n`computed_review_score` is a function:\r\n\r\n```plpgsql\r\nCREATE FUNCTION computed_review_score(event event_ticketing.events) RETURNS numeric\r\n    LANGUAGE sql AS\r\n$$\r\nSELECT COALESCE(event.review_score,\r\n                (SELECT ROUND(AVG((VALUE ->> 'score')::NUMERIC), 1) FROM JSONB_ARRAY_ELEMENTS(event.reviews)));\r\n$$;\r\n```\r\n\r\nAnd this is the query:\r\n```js\r\nsupabaseClient\r\n    .rpc('search_events', payload)\r\n    .select(\r\n      '*, computed_review_score'\r\n    )\r\n```\r\n\r\nAlso it is strange that the generated type for this function has unknown for the argument, it should be the table type:\r\n```\r\n...\r\n    Functions: {\r\n      computed_review_score: {\r\n        Args: {\r\n          event: unknown\r\n        }\r\n        Returns: number\r\n      }\r\n    }\r\n...\r\n```\r\n\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Go to '\u2026'\r\n2. Click on '\u2026'\r\n3. Scroll down to '\u2026'\r\n4. See error\r\n\r\n## Expected behavior\r\n\r\nA clear and concise description of what you expected to happen.\r\n\r\n## Screenshots\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n## System information\r\n\r\n- OS: [e.g. macOS, Windows]\r\n- Browser (if applies) [e.g. chrome, safari]\r\n- Version of supabase-js: [e.g. 6.0.2]\r\n- Version of Node.js: [e.g. 10.10.0]\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "whollacsek"
            },
            "state": "OPEN",
            "createdAt": "2023-08-31T18:44:45Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/474",
            "comments": []
        },
        {
            "id": "I_kwDODheSms5wMuo4",
            "number": 475,
            "title": "Postgrest composite type casting error",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nAfter creating a **clone** of my own project I found a problem after executing some functions which relies on a postgrest rpc call. The function itself returns a composite type with the following parameters\r\n\r\n```sql\r\ncreate type tp_minified_application as (\r\n  id bigint,\r\n  assembler tp_company\r\n);\r\n```\r\n\r\nwhere tp_company has the following implementation\r\n\r\n```sql\r\ncreate type tp_company as (\r\n  id text,\r\n  owner text\r\n);\r\n```\r\n\r\nThe function barely makes a simple select * from a table application and returns a set of tp_minified_application.I've tested it and it works fine. \r\n\r\n```sql\r\ncreate or replace function browse_minified_applications()\r\nreturns setof tp_minified_application as\r\n$browse_minified_applications$\r\n  select A.id, C assembler\r\n  from application A\r\n  join company C on C.id = A.assembler\r\n$browse_minified_applications$ language sql;\r\n```\r\n\r\nThe problem I'm facing is that when I make the call within my code\r\n\r\n```js\r\nsupabase.rpc(\"browse_minified_applications\").eq(\"assembler->>id\", '<any_id>'),\r\n```\r\n\r\nI get this error \r\n\r\n`\r\noperator does not exist: tp_company->> unknown\r\n`\r\n\r\nThis could be it but on the other project I have with the exact same code It's working perfectly as it is on the example.\r\n## To Reproduce\r\n\r\nJust creating the types and a simple function should work\r\n\r\n## Expected behavior\r\n\r\nWhenever I make this query it should work and give correct results filtered by the company I'm asking.\r\n\r\n## System information\r\n\r\n- OS: Windows\r\n- Version of supabase-js: 2.33.1\r\n- Version of Node.js: 19.3.0\r\n\r\n## Additional context\r\n\r\nThanks in advance\r\n",
            "author": {
                "login": "Torres1080"
            },
            "state": "OPEN",
            "createdAt": "2023-09-05T16:49:16Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/475",
            "comments": [
                {
                    "id": "IC_kwDODheSms5lwmLu",
                    "body": "I found out that creating an explicit cast between my type and JSON solves the problem, but I'm wondering if there's any other less complicated workaround with the same effect\r\n\r\n```sql\r\r\r\ncreate cast (tp_company as json) with function to_json as implicit;\r\n```",
                    "author": {
                        "login": "Torres1080"
                    },
                    "createdAt": "2023-09-05T20:04:19Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/475#issuecomment-1707238126"
                },
                {
                    "id": "IC_kwDODheSms5lwrUw",
                    "body": "@Torres1080 Hm, this should work normally, could you try the example on:\r\n\r\nhttps://postgrest.org/en/stable/references/api/tables_views.html#composite-array-columns",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-09-05T20:21:33Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/475#issuecomment-1707259184"
                },
                {
                    "id": "IC_kwDODheSms5lwvvl",
                    "body": "@steve-chavez  I did some debugging with my two projects, and the queries I found that are being made under the hood are the following\r\n\r\n![image](https://github.com/supabase/postgrest-js/assets/13919812/9821b053-6caa-44c7-a7b8-743d970ed0e3)\r\n\r\nAs you can appreciate on the left picture (the new project with the bug), there's no such `to_jsonb` call, while on the right picture (the old project), `to_jsonb` It's being called\u2014I don't know why actually.",
                    "author": {
                        "login": "Torres1080"
                    },
                    "createdAt": "2023-09-05T20:37:29Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/475#issuecomment-1707277285"
                },
                {
                    "id": "IC_kwDODheSms5l19VG",
                    "body": "@Torres1080 Can you compare both projects PostgREST versions?\r\n\r\nYou can get it from the `https://<project_ref>.supabase.co/rest/v1` endpoints. There should be an OpenAPI json output with a version field there.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-09-06T15:46:46Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/475#issuecomment-1708643654"
                },
                {
                    "id": "IC_kwDODheSms5l208S",
                    "body": "@steve-chavez 11.2 (not working) vs 11.1 (working)\r\n\r\n![image](https://github.com/supabase/postgrest-js/assets/13919812/88c89923-ed53-4518-ae28-9f87a48ed91e)\r\n",
                    "author": {
                        "login": "Torres1080"
                    },
                    "createdAt": "2023-09-06T18:15:46Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/475#issuecomment-1708871442"
                },
                {
                    "id": "IC_kwDODheSms5mC4Qr",
                    "body": "@Torres1080 Thanks for the report. We're going to fix this on https://github.com/PostgREST/postgrest/issues/2929.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-09-08T17:52:04Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/475#issuecomment-1712030763"
                },
                {
                    "id": "IC_kwDODheSms5mC6Hi",
                    "body": "@steve-chavez You're welcome \ud83d\udc4d ",
                    "author": {
                        "login": "Torres1080"
                    },
                    "createdAt": "2023-09-08T17:58:53Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/475#issuecomment-1712038370"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5xVTQO",
            "number": 477,
            "title": "Wrong type inference for particular join (between a superclass and a subclass)",
            "body": "# Bug report\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application.\r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com).\r\n\r\n## Context\r\n\r\nOur application stores a table called `partners`. Since our partners can be either individual or legal persons, and we store different data for each of these two types of partners, we created two new tables: `indiv_partners` and `legal_partners`.\r\n\r\nThe primary key of `partners` is `id`, while the primary keys of `indiv_partners` and `legal_partners` are both called `id_partner` and reference the `id` column of `partners`.\r\n\r\nWe would like to write a query that retrieves the names of all the partners. That is, if the current partner is an individual, then we want its `first_name` and `last_name` fields. However, if it is a legal person, then we just want its `name` field. Thus, we start with the following code:\r\n\r\n```ts\r\nconst { data } = await supabase\r\n  .from('partners')\r\n  .select('indiv_partners(first_name, last_name), legal_partners(name)')\r\n```\r\n\r\n## Bug description\r\n\r\nThe problem is that the type of `data` gets inferred incorrectly as:\r\n\r\n```ts\r\nconst data: {\r\n  indiv_partners: {\r\n    first_name: string\r\n    last_name: string\r\n  }[]\r\n  legal_partners: {\r\n    name: string\r\n  }[]\r\n}[] | null\r\n```\r\n\r\n## Expected behavior\r\n\r\nThe right type should be:\r\n\r\n```ts\r\nconst data: {\r\n  indiv_partners: {\r\n    first_name: string\r\n    last_name: string\r\n  } | null\r\n  legal_partners: {\r\n    name: string\r\n  } | null\r\n}[] | null\r\n```\r\n\r\nThis is confirmed by the fact that Supabase actually returns an object of this shape (according to my tests).\r\n\r\n## Screenshots\r\n\r\nThe wrong type inference:\r\n\r\n<img width=\"665\" alt=\"ts\" src=\"https://github.com/supabase/supabase-js/assets/24765842/f767991c-56cb-402a-bfe5-ece341c085c4\">",
            "author": {
                "login": "gareth618"
            },
            "state": "OPEN",
            "createdAt": "2023-09-17T21:46:07Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/477",
            "comments": []
        },
        {
            "id": "I_kwDODheSms5xkvoE",
            "number": 478,
            "title": "Using different schema for Supabase prevents build, results in error",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\n\r\nHeya, I'm having trouble trying to use different table schema using Supabase for the template refine project\r\n```ts\r\n// utility/supabaseClient.ts\r\nexport const supabaseClient = createClient(SUPABASE_URL, SUPABASE_KEY, {\r\n    db: {\r\n// problematic part vv\r\n        schema: \"custom\",\r\n    },\r\n    auth: {\r\n        persistSession: true,\r\n    },\r\n});\r\n```\r\n\r\nThat exact code results in the following error.\r\n\r\n```sh\r\n\r\n22:08:57.278    Executing user command: npm run build\r\n22:08:57.892    \r\n22:08:57.892    > data-provider-supabase@3.25.0 build\r\n22:08:57.892    > tsc && refine build\r\n22:08:57.892    \r\n22:09:02.920    src/App.tsx(328,48): error TS2345: Argument of type 'SupabaseClient<any, \"custom\", any>' is not assignable to parameter of type 'SupabaseClient<any, \"public\", any>'.\r\n22:09:02.921      Type '\"custom\"' is not assignable to type '\"public\"'.\r\n22:09:02.921    src/App.tsx(329,48): error TS2345: Argument of type 'SupabaseClient<any, \"custom\", any>' is not assignable to parameter of type 'SupabaseClient<any, \"public\", any>'.\r\n22:09:02.967    Failed: build command exited with code: 2\r\n22:09:03.827    Failed: error occurred while running build command\r\n```\r\n\r\n## To Reproduce\r\n\r\n1. Get the Supabase refine template\r\n2. Change supabaseClient options schema from \"public\" to anything else\r\n3. `npm run build`\r\n4. Error\r\n\r\n## Expected behavior\r\n\r\nWorks\r\n\r\n## Screenshots\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser (if applies): any\r\n- Version of supabase-js: ^2.7.0\r\n- Version of Node.js: v18.17.1\r\n\r\n## Additional context\r\n\r\n```\r\nType '\"product\"' is not assignable to type '\"public\"'.ts(2322)\r\n---\r\n(property) schema?: (\"public\" extends keyof Database ? \"public\" : string & keyof Database) | undefined\r\n```\r\n\r\nAlso `npm start` works but `npm run build` doesn't",
            "author": {
                "login": "damywise"
            },
            "state": "OPEN",
            "createdAt": "2023-09-20T01:32:10Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/478",
            "comments": [
                {
                    "id": "IC_kwDODheSms5rtqmP",
                    "body": "Running into the same problem. It's a blocker for running Edge Function tests as well if I need to create a client and use data in a non-public schema. \r\n```\r\nerror: TS2322 [ERROR]: Type 'SupabaseClient<any, string, any>' is not assignable to type 'SupabaseClient<any, \"public\", any>'.\r\n  Type 'string' is not assignable to type '\"public\"'.\r\n    var client: SupabaseClient = createClient(supabaseUrl, supabaseKey, options) // options has db: { schema: 'my-schema' }\r\n        ~~~~~~\r\n```",
                    "author": {
                        "login": "garygcchiu"
                    },
                    "createdAt": "2023-11-12T13:44:02Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/478#issuecomment-1807133071"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5xsOct",
            "number": 479,
            "title": "Count on foreign table does not exist in type",
            "body": "- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nSelecting count from a foreign table returns Typescript error. This is my query:\r\n\r\n```ts\r\nconst { data } = await supabase\r\n      .from(\"projects\")\r\n      .select(\"*, cards(count)\");\r\n```\r\n\r\nAnd this is the type of `data`:\r\n\r\n```\r\nconst data: {\r\n    created_at: string | null;\r\n    id: string;\r\n    name: string;\r\n    owner_id: string | null;\r\n    updated_at: string | null;\r\n    cards: SelectQueryError<\"Referencing missing column `count`\">[];\r\n}[] | null\r\n```\r\n\r\nAnd more specific:\r\n\r\n```\r\nProperty 'count' does not exist on type 'SelectQueryError<\"Referencing missing column `count`\">'.\r\n```\r\n\r\nWhen selecting `id` instead of `count` on the foreign table everything works as expected.\r\n\r\n## To Reproduce\r\n\r\nSee above\r\n\r\n## Expected behavior\r\n\r\nI expect `count: number` to be part of the generated type\r\n\r\n## Screenshots\r\n\r\n<img width=\"1533\" alt=\"image\" src=\"https://github.com/supabase/supabase/assets/1353789/20ab2fe0-df1e-4d7b-9111-b30e1361cfaa\">\r\n",
            "author": {
                "login": "dejorrit"
            },
            "state": "OPEN",
            "createdAt": "2023-09-20T18:09:44Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/479",
            "comments": [
                {
                    "id": "IC_kwDODheSms5oa6kf",
                    "body": "I have the same problem.\r\n```\r\n\"@supabase/auth-helpers-nextjs\": \"^0.8.1\",\r\n\"@supabase/supabase-js\": \"^2.38.0\",\r\n```",
                    "author": {
                        "login": "ThisIsSimmon"
                    },
                    "createdAt": "2023-10-08T01:32:27Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/479#issuecomment-1751886111"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5x9SGG",
            "number": 480,
            "title": "Incorrect RPC Types After Select",
            "body": "# Bug report\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nThe Typing For RPC Functions is incorrect after a `select`.  I do not have access to `eq`, `contains`, `or`, etc...\r\n\r\nFor example:\r\n```ts\r\nconst { data, error } = await supabase.rpc('custom_function').select('*, author(*)')\r\n.eq(... // can't do this\r\n.or(... // can't do this\r\n```\r\n\r\n## To Reproduce\r\n\r\n1. Create an rpc function that returns a `setof posts` (or any table).\r\n2. Make sure to update your types `supabase gen types typescript --local > database.ts` (or whatever file)\r\n3. Import the types in your createClient as usual per the [generating types](https://supabase.com/docs/guides/api/rest/generating-types)\r\n\r\nThis is the result:\r\n\r\n![rpc function](https://github.com/supabase/supabase-js/assets/8333090/95f81232-9029-4039-a847-9493d8dc5341)\r\n\r\n## Expected behavior\r\n\r\n`from` and `rpc` should work the exact same way:\r\n\r\n![from function](https://github.com/supabase/supabase-js/assets/8333090/fd0f7c63-fccf-422f-ad01-6c30417f31ec)\r\n\r\nYou can see I can scroll a lot further in this example.\r\n\r\n## System information\r\n\r\n- OS: Windows 11\r\n- Version of supabase-js: 2.36.0\r\n- Version of supabase: 1.99.5\r\n- Version of Node.js: 18\r\n\r\n## Additional context\r\n\r\nIt is very important to note that this DOES WORK.  `postgREST` DOES support these filters.  `supabase-js` does not.\r\n\r\nJ\r\n",
            "author": {
                "login": "jdgamble555"
            },
            "state": "CLOSED",
            "createdAt": "2023-09-23T21:55:20Z",
            "closedAt": "2023-11-13T02:39:00Z",
            "url": "https://github.com/supabase/postgrest-js/issues/480",
            "comments": [
                {
                    "id": "IC_kwDODheSms5rupU3",
                    "body": "This can actually be closed out.  You can do the `eq` and all the other filters before the select, which is probably more efficient anyways.  Didn't think of that before.\r\n\r\nJ",
                    "author": {
                        "login": "jdgamble555"
                    },
                    "createdAt": "2023-11-13T02:39:00Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/480#issuecomment-1807390007"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5yEwS1",
            "number": 481,
            "title": "`count: exact` and `head: true` hides errors",
            "body": "## Problem\r\n\r\nIf a table has a high count (say 30_000_000), doing:\r\n\r\n```js\r\nsupabase\r\n.from('table')\r\n.select('id', {count: 'exact', head: true})\r\n```\r\n\r\nWill result in an uninformative error:\r\n\r\n```js\r\n{\r\nerror: { message: '' },\r\ndata: null,\r\ncount: null,\r\nstatus: 500,\r\nstatusText: 'Internal Server Error'\r\n}\r\n```\r\n\r\nBy removing the `head: true` (untested, but assuming is the same as `curl`), we get the actual error:\r\n\r\n```\r\n{\"code\":\"57014\",\"details\":null,\"hint\":null,\"message\":\"canceling statement due to statement timeout\"}\r\n```\r\n\r\n## Solution\r\n\r\nSomehow expose the error message when this happens. Not sure if possible, this might need a special status code from upstream.",
            "author": {
                "login": "steve-chavez"
            },
            "state": "OPEN",
            "createdAt": "2023-09-26T16:06:39Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/481",
            "comments": []
        },
        {
            "id": "I_kwDODheSms5yhvxg",
            "number": 482,
            "title": "Incorrect types on SELECT when spreading related tables",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nSpreading related tables, as described in [this article ](https://supabase.com/blog/postgrest-11-prerelease), are not properly typed.\r\n\r\n```\r\nconst { data } = await supabase.from('films').select(`\r\n    title,\r\n    ...technical_specs (\r\n      camera, laboratory, duration\r\n    )\r\n  `)\r\nconsole.log(data)\r\n```\r\n\r\nyields `ParserError<\"Expected identifier at ...technical_specs (camera, laboratory, duration)`\r\n\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Use the table definitions from https://supabase.com/blog/postgrest-11-prerelease\r\n2. Write the above code within a supabase client environment.\r\n3. Build the project\r\n\r\n## Expected behavior\r\n\r\nThe type should be `{title: string, camera: string, laboratory: string, duration: string}[] | null`\r\n\r\n## System information\r\n\r\n- OS: [e.g. Ubuntu]\r\n- Version of supabase-js: 2.37.0\r\n- Version of Node.js: v18.17.1\r\n",
            "author": {
                "login": "masda70"
            },
            "state": "OPEN",
            "createdAt": "2023-10-02T08:13:25Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/482",
            "comments": []
        },
        {
            "id": "I_kwDODheSms5ysaC-",
            "number": 483,
            "title": "Problem with JS library adding elements using external array keys",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [X] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\nWhen calling a select query after using the update option with an external key, the limit does not work correctly. An error \"_A 'limit' was applied without an explicit 'order'_\" is returned. After adding an additional order, the limit is not applied at all. The problem does not occur when using select alone.\r\n\r\nExample of implementation:\r\n```\r\nsupabase\r\n      .from('home')\r\n      .update(home)\r\n      .eq('id', home.id)\r\n      .select('id, image(url)')\r\n      .limit(1, { foreignTable: 'image' }) // FIX-ME: This is not working;\r\n```\r\nIt is a combination of one to many one house can have many images. As a result, we want to get only one instead of a list of all.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior:\r\n\r\n1. Create two arrays in which one has a key to the other with an external key using a one-to-many relationship. \r\n2. Creation of any elements \r\n3. Calling update query from library and then select with external key and limit constraint\r\n\r\n## Expected behavior\r\n\r\nThe result should be the same as for select called separately.",
            "author": {
                "login": "jakubmarcinowski"
            },
            "state": "OPEN",
            "createdAt": "2023-10-03T04:42:48Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/483",
            "comments": [
                {
                    "id": "IC_kwDODheSms5oA-P0",
                    "body": "Can you share the generated HTTP request of the supabase call? (the URI plus headers)\r\n\r\nIt seems to be related to this feature: https://postgrest.org/en/stable/references/api/tables_views.html#limited-update-delete, which limits the amount of updated rows. But the order should only be required if you limit the root table.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-10-03T14:22:48Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/483#issuecomment-1745085428"
                },
                {
                    "id": "IC_kwDODheSms5oE6-E",
                    "body": "Unfortunately, I don't know how to share queries from your library because I use it on the BED side. If necessary I will transfer to FED and try to get but the case is very simple. To answer your question I don't want to limit how many elements will get the update just the result of select which is executed after the update. I checked and if I execute it as a separate element then it works correctly ie. \r\n\r\nScenario 1:\r\n```\r\nsupabase\r\n.from('home')\r\n.update(home)\r\n.eq('id', home.id)\r\n.select('id, image(url)')\r\n.limit(1, { foreignTable: 'image' })\r\n```\r\nThe result has many \"images\", the limit does not work and i get an error about \"order\"\r\n\r\nScenario 2:\r\n```\r\nsupabase\r\n.from('home')\r\n.update(home)\r\n.eq('id', home.id)\r\n\r\nsupabase\r\n.from('home')\r\n.select('id, image(url)')\r\n.limit(1, { foreignTable: 'image' })\r\n```\r\nThe result is correct images are limited to 1 and there is no error",
                    "author": {
                        "login": "jakubmarcinowski"
                    },
                    "createdAt": "2023-10-04T04:36:16Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/483#issuecomment-1746120580"
                }
            ]
        },
        {
            "id": "I_kwDODheSms5zHuSZ",
            "number": 484,
            "title": "aliasing joined tables in .select('*')",
            "body": "# Improve documentation\r\n\r\nThere's a super nifty feature: renaming columns / tables in a `select()`, to influence the shape of the resulting object. However, it is not really documented anywhere.\r\n\r\n## Link \r\n\r\n[This](https://supabase.com/docs/reference/javascript/select?example=query-the-same-foreign-table-multiple-times) is the only place I've found where renaming is shown, but it's labeled \"Querying the same foreign table multiple times\". \r\n\r\n## Describe the problem\r\n\r\nA vital bit of information is missing. tl;dr: I can do `client.from('books').select('*, author:authors(*)')`. This is super helpful, but is not documented anywhere.\r\n\r\nExample tables:\r\n\r\n```yaml\r\nbooks:\r\n  id: number\r\n  title: text\r\n  isbn: text\r\n  author_id: number # FK > author.id\r\n\r\nauthors:\r\n  id: number\r\n  name: text\r\n```\r\n\r\nNow, I want to fetch book id 1, with the author.\r\n\r\n```ts\r\nconst result = client.from('books').select('*, authors(*)').eq('id', 1).single();\r\nconst book = result.data;\r\nconsole.log(`The book ${book.title} is written by ${book.authors.name}.'`);\r\n```\r\n\r\nThe fact that the property `book.authors` is named as a plural, but the value is a singular author, is not great. This is a pretty common scenario when joining tables. Luckily we can change that like so:\r\n\r\n```ts\r\nconst result = client.from('books').select('*, author:authors(*)').eq('id', 1).single();\r\n                                               //^ Here we add an alias for the table\r\nconst book = result.data;\r\nconsole.log(`The book ${book.title} is written by ${book.author.name}.'`);\r\n```\r\n\r\nThis is much more reasonable. However, documentation of this is missing.\r\n\r\n## Describe the improvement\r\n\r\nOn [this page](https://supabase.com/docs/reference/javascript/select), in the section of fetch examples, add 2 examples. One called \"rename columns\"  and one called \"rename joined tables\". The first example would be to showcase renaming normal columns such as `.select('name:title')`. The second example would be specifically about the use-case described above.\r\n\r\n## Additional context\r\n\r\nIn my code, getting more than one table's data at the same time is very common. And renaming columns like this is an essential tool for making the resulting objects easy to use. I would love it to be a lot clearer to new people reading the docs, that this is possible. It would've saved me a lot of refactoring at least :) \r\n\r\n",
            "author": {
                "login": "c00"
            },
            "state": "OPEN",
            "createdAt": "2023-10-07T16:06:17Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/484",
            "comments": []
        },
        {
            "id": "I_kwDODheSms5zajIp",
            "number": 485,
            "title": "Javascript SDK types don't pick up a `not` null filter",
            "body": "# Bug report\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nUsing the `@supabase/supabase-js` package, I have a `select` operation with a `not` filter to exclude `null` values. However, the \"type\" still thinks there could be `null` values returned in the data set. Later on in code, I have something that expects the `ticket_id` field to not be `null` but I have to add a filter to pass the type checks. \r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Create a table with a field that can be a text or null\r\n2. Using the Javascript SDK, add a query which selects data and has a `.not(\"your_field\", \"eq\", null)`\r\n\r\n## Expected behavior\r\n\r\nThe type should pick up that the `your_field` cannot be `null`\r\n\r\n## Screenshots\r\n\r\n![image](https://github.com/supabase/supabase/assets/9679076/c0b898e9-e149-4235-ab94-fdd470d4513a)\r\n\r\n\r\n## System information\r\n\r\n- OS: mac\r\n- Version of supabase-js: `2.36.0`\r\n- Version of Node.js: `20.5.1`\r\n\r\n## Additional context\r\n\r\nAdd any other context about the problem here.\r\n",
            "author": {
                "login": "rcwestlake"
            },
            "state": "OPEN",
            "createdAt": "2023-10-06T18:08:17Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/485",
            "comments": []
        },
        {
            "id": "I_kwDODheSms50kA-4",
            "number": 488,
            "title": "Not getting proper error message from `PostgrestBuilder`",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [\u2713] I confirm this is a bug with Supabase, not with my own application. \r\n- [\u2713] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nWhen fetch function inside `PostgrestBuilder` fails. The error does not contain proper information why the fetch failed.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Put postgrest server behind self signed certificate\r\n2. Run database query\r\n    ```\r\n    const { data: somedata, error } = supabase\r\n        .from('sometable')\r\n        .select('*')\r\n        .order('somecolumn', { ascending: false })\r\n    ```\r\n3. Getting error message like the below\r\n    <img width=\"624\" alt=\"Screenshot 2023-10-21 at 22 58 43\" src=\"https://github.com/supabase/postgrest-js/assets/20799038/0fe82a7c-0c1f-4c98-942c-95021fe72a52\">\r\n4. It is not very clear what the error is\r\n\r\n## Expected behavior\r\n\r\nThe error should contain clear information that the error is we are not able to verify certificate\r\n\r\n## Screenshots\r\n\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n## System information\r\n\r\n- OS: macOS\r\n- Browser (if applies): NextJS server component\r\n- Version of supabase-js: 2.25.0\r\n- Version of Node.js: 18.18.2\r\n\r\n## Additional context\r\n\r\nAfter spending 2 hours digging through internal library I found out that the error is self signed certificate is not being verified properly (Self signed cert is added properly in container's `/etc/ssl/certs/ca-certificates.crt` path. That is also an issue but I will deal with it separately.)\r\n\r\nThe point is I found where exactly the problem is. It is in `src/PostgrestBuilder.ts` inside `then` function. `res` object's error contains another error named `cause` that contains more information about the error. Which is getting lost. Because it is not getting assigned in new `error` object.\r\n<img width=\"743\" alt=\"Screenshot 2023-10-21 at 23 05 20\" src=\"https://github.com/supabase/postgrest-js/assets/20799038/735cd09f-53cb-4b7c-be41-3e4925461a3b\">\r\n\r\n\r\n",
            "author": {
                "login": "junedkhatri31"
            },
            "state": "OPEN",
            "createdAt": "2023-10-21T17:45:16Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/488",
            "comments": [
                {
                    "id": "IC_kwDODheSms5q3VE6",
                    "body": "This problem hit me too. There's not way to determine the cause of the fetch error or handle it.\r\n\r\nI'd suggest either propogating the original error:\r\n```javascript\r\nreturn {\r\n  error: fetchError,\r\n  data: null,\r\n  ...\r\n}\r\n```\r\nOr a new error encapsulating the original error in its `cause` property:\r\n```javascript\r\nreturn {\r\n  error: new Error(\"Fetch Failed\", {cause: fetchError}),\r\n  ...\r\n}\r\n```",
                    "author": {
                        "login": "deleted"
                    },
                    "createdAt": "2023-11-03T17:54:55Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/488#issuecomment-1792889146"
                }
            ]
        },
        {
            "id": "I_kwDODheSms51C-fn",
            "number": 489,
            "title": "bug: (count) relation types cause TypeScript SelectQueryError",
            "body": "# Bug report\r\n\r\n<!-- \r\n\r\n\u26a0\ufe0f We receive a lot of bug reports which have already been solved or discussed. If you are looking for help, please try these first:\r\n\r\n- Docs: https://docs.supabase.com\r\n- Discussions: https://github.com/supabase/supabase/discussions\r\n- Discord: https://discord.supabase.com\r\n\r\nBefore opening a bug report, please verify the following: \r\n\r\n-->\r\n\r\n- [X] I confirm this is a bug with Supabase, not with my own application. \r\n- [X] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nThe bug is a mismatch between generated types and code behavior. The code below causes a TypeScript error despite functioning correctly.\r\n\r\n## To Reproduce\r\n\r\nSteps to reproduce the behavior, please provide code snippets or a repository:\r\n\r\n1. Create tables using Supabase hosted with the following schemas:\r\n```\r\ncreate table\r\n  public.organizations (\r\n    id uuid not null default gen_random_uuid (),\r\n    created_at timestamp with time zone null default now(),\r\n    human_name text null,\r\n    slug text not null,\r\n    owner_user_id uuid not null default auth.uid (),\r\n    account_type text not null default 'pro'::text,\r\n    feature_flags jsonb null,\r\n    stripe_customer_id text null,\r\n    stripe_subscription_status text null,\r\n    stripe_seats_billed bigint null,\r\n    constraint organizations_pkey primary key (id, slug),\r\n    constraint organizations_id_key unique (id),\r\n    constraint organizations_stripe_customer_id_key unique (stripe_customer_id),\r\n    constraint organizations_owner_user_id_fkey foreign key (owner_user_id) references auth.users (id)\r\n  ) tablespace pg_default;\r\n  \r\n  create table\r\n  public.organization_members (\r\n    id bigint generated by default as identity,\r\n    created_at timestamp with time zone null default now(),\r\n    user_id uuid not null,\r\n    organization_id uuid not null,\r\n    scopes text[] null,\r\n    constraint organization_members_pkey primary key (id, user_id, organization_id),\r\n    constraint organization_members_user_id_key unique (user_id),\r\n    constraint organization_members_organization_id_fkey foreign key (organization_id) references organizations (id),\r\n    constraint organization_members_user_id_fkey foreign key (user_id) references auth.users (id)\r\n  ) tablespace pg_default;\r\n\r\ncreate index if not exists organization_members_user_id_idx on public.organization_members using btree (user_id) tablespace pg_default;\r\n\r\ncreate index if not exists organization_members_organization_id_idx on public.organization_members using hash (organization_id) tablespace pg_default;\r\n```\r\n2. Use supabase CLI to generate types\r\n3. Using the client in `supabase.from('organizations').select('*, organization_members(count)')` leads to type error, SelectQueryError, even though the behavior works as expected and a array with {count} is returned.\r\n\r\n## Expected behavior\r\n\r\nI expect TypeScript to reflect this query with [{ count: number }] since the relation exists. The logic executes correctly and a count is returned, so the problem appears to be only with types. It is possible that because Supabase hosted puts the relations on separate lines from their corresponding column definitions that is throwing the schema builder off.\r\n\r\n## Screenshots\r\n\r\n![CleanShot 2023-10-18 at 12 28 15@2x](https://github.com/supabase/supabase-js/assets/4442130/a6cbeb5b-d272-435e-951f-5b4aec44d2c5)\r\n![CleanShot 2023-10-18 at 12 28 24@2x](https://github.com/supabase/supabase-js/assets/4442130/c59bb6b4-1dab-42b2-87d2-ac03d623991a)\r\n\r\n\r\n## System information\r\n\r\n- OS: macOs\r\n- Browser (if applies) N/A\r\n- Version of supabase-js: 2.38.1\r\n- Version of Node.js: 18.18.2\r\n- Version of TypeScript: 5.2.2\r\n\r\n## Additional context\r\n\r\nAlso using SvelteKit, if that helps.\r\n",
            "author": {
                "login": "wbhob"
            },
            "state": "OPEN",
            "createdAt": "2023-10-18T19:30:39Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/489",
            "comments": [
                {
                    "id": "IC_kwDODheSms5qK7kC",
                    "body": "+1\r\n\r\nRunning into this with a similar schema setup as well",
                    "author": {
                        "login": "ndoherty-xyz"
                    },
                    "createdAt": "2023-10-26T05:11:21Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/489#issuecomment-1781250306"
                }
            ]
        },
        {
            "id": "I_kwDODheSms52HH-N",
            "number": 500,
            "title": "No default export from supabase/node-fetch error",
            "body": "# Bug report\r\n\r\n- [X] I confirm this is a bug with Supabase, not with my own application. \r\n- [X] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\nRecently upgraded my application to the latest nuxtjs/supabase version and have been getting this error on all pages. I have looked at node-fetch source and it does look like there is a default export so not sure why this is occurring. \r\n\r\nI have also done a full clean and reget of all dependencies.\r\n\r\n```\r\nPostgrestBuilder.ts:2 Uncaught SyntaxError: \r\nThe requested module '/_nuxt/node_modules/.pnpm/@supabase+node-fetch@2.6.14/node_modules/@supabase/node-fetch/browser.js?v=a82b1307' \r\ndoes not provide an export named 'default' (at PostgrestBuilder.ts:2:8)\r\n```\r\n\r\n## System information\r\n\r\n- OS: linux mint\r\n- Browser (if applies) [e.g. chrome, safari]\r\n- Version of supabase-js: \"@nuxtjs/supabase\": \"^1.1.3\",\r\n- Version of Node.js: 18\r\n\r\n## Additional context\r\n\r\n\r\n",
            "author": {
                "login": "richard-edwards"
            },
            "state": "OPEN",
            "createdAt": "2023-11-07T15:05:09Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/500",
            "comments": []
        },
        {
            "id": "I_kwDODheSms52TFBT",
            "number": 501,
            "title": "Errors are missing stack trace",
            "body": "# Bug report\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nErrors returned do not include a stack trace because they are throwing a plain object instead of an `Error`. This makes it annoying to track down the root cause of an error because there's no way to tell where it was thrown from.\r\n\r\n## To Reproduce\r\n\r\nWrite a postgrest-js query that returns an error. Notice that `error.stack` is undefined and `error instanceof Error` is false.\r\n\r\n```\r\nimport { PostgrestClient } from 'https://esm.sh/@supabase/postgrest-js@1.8.5';\r\n\r\nconst REST_URL = 'http://localhost:54321/rest/v1';\r\nconst postgrest = new PostgrestClient(REST_URL);\r\n\r\ntry {\r\n  const { data } = await postgrest\r\n    .from('does_not_exist')\r\n    .select('*')\r\n    .throwOnError();\r\n\r\n  console.log(`Got data: ${data}`);\r\n} catch (err) {\r\n  console.log(err);\r\n  console.log(err.stack);\r\n  console.log(err instanceof Error);\r\n}\r\n\r\n// {\r\n//   code: \"42P01\",\r\n//   details: null,\r\n//   hint: null,\r\n//   message: 'relation \"public.does_not_exist\" does not exist'\r\n// }\r\n// undefined\r\n// false\r\n```\r\n\r\n## Expected behavior\r\n\r\nI expect stack to be set on the result. I think it might be good to return a `PostgrestError` that extends `Error` with the error details, but also just throwing a plain `Error` is probably fine too!\r\n",
            "author": {
                "login": "meyer9"
            },
            "state": "OPEN",
            "createdAt": "2023-11-09T02:38:44Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/501",
            "comments": [
                {
                    "id": "IC_kwDODheSms5s43Px",
                    "body": "Is there any chance I can get an update on this issue? It would be extremely useful to have a stack trace on errors thrown by postgrest-js for observability. Let me know if I can do anything to make it easier for maintainers!",
                    "author": {
                        "login": "meyer9"
                    },
                    "createdAt": "2023-11-26T17:47:08Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/501#issuecomment-1826845681"
                }
            ]
        },
        {
            "id": "I_kwDODheSms522a4v",
            "number": 504,
            "title": ".explain() method always return error",
            "body": "# Bug report\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. \r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nChaining the .explain() method to a working query, return this error:\r\n``` \r\nerror: {\r\n    code: '42883',\r\n    details: null,\r\n    hint: 'No function matches the given name and argument types. You might need to add explicit type casts.',\r\n    message: 'function string_agg(record, unknown) does not exist'\r\n  } \r\n```\r\n\r\n## To Reproduce\r\nFollowing the official guide:\r\nhttps://supabase.com/docs/guides/api/rest/debugging-performance\r\n\r\nRun this SQL command:\r\n``` \r\nalter role authenticator set pgrst.db_plan_enabled to 'true';\r\nNOTIFY pgrst, 'reload config'; \r\n```\r\n\r\nQuery some data:\r\n``` \r\nconst data = await supabase.from('countries').select('*').explain()\r\nconsole.log(data)\r\n```\r\n\r\n\r\n## Expected behavior\r\n\r\nResponse similar to this:\r\n``` \r\nAggregate  (cost=33.34..33.36 rows=1 width=112)\r\n  ->  Limit  (cost=0.00..18.33 rows=1000 width=40)\r\n        ->  Seq Scan on countries  (cost=0.00..22.00 rows=1200 width=40) \r\n```\r\n\r\n\r\n## Additional context\r\n\r\nI've tried with /supabase-js & /ssr\r\n",
            "author": {
                "login": "fdgtalk"
            },
            "state": "CLOSED",
            "createdAt": "2023-11-15T03:40:11Z",
            "closedAt": "2023-11-18T01:35:31Z",
            "url": "https://github.com/supabase/postgrest-js/issues/504",
            "comments": [
                {
                    "id": "IC_kwDODheSms5sCXnu",
                    "body": "A bug in `postgrest-js`, somehow it's sending an `undefined`:\r\n\r\n```\r\nAccept: application/vnd.pgrst.plan+text; for=\"undefined\"; options=;\r\n```\r\n\r\nOn https://github.com/supabase/postgrest-js/blob/master/src/PostgrestTransformBuilder.ts#L245-L276\r\n\r\n---\r\n\r\nPostgREST v12 will also give a better error message for this case.",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-11-15T13:43:29Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/504#issuecomment-1812560366"
                },
                {
                    "id": "IC_kwDODheSms5sUf9t",
                    "body": ":tada: This issue has been resolved in version 1.8.6 :tada:\n\nThe release is available on:\n- [GitHub release](https://github.com/supabase/postgrest-js/releases/tag/v1.8.6)\n- [npm package (@latest dist-tag)](https://www.npmjs.com/package/@supabase/postgrest-js/v/1.8.6)\n\nYour **[semantic-release](https://github.com/semantic-release/semantic-release)** bot :package::rocket:",
                    "author": {
                        "login": "github-actions"
                    },
                    "createdAt": "2023-11-18T01:36:45Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/504#issuecomment-1817313133"
                }
            ]
        },
        {
            "id": "I_kwDODheSms53E3VV",
            "number": 505,
            "title": "Querying JSON columns with the special symbols ",
            "body": "# Bug report\r\n- [X] I confirm this is a bug with Supabase, not with my own application. \r\n- [X] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nHi! We are trying to query the data from our jsonb column that has a special symbol @. \r\nWe are following the recommended spec by [schema-dts ](https://github.com/google/schema-dts)\r\n\r\nThis is an example of code snippet we run: \r\n```\r\n   const { data, error } = await supabase\r\n          .from('item')\r\n          .select(\r\n            `*, userId, media3Id(*), blockId!inner(*, media3Id!inner(*), consumptionId), newId, customData`,\r\n          )\r\n          .eq('media3Id->data->>schemaOrg2->>@type', schemaPrefix)\r\n          .eq('userId', input.userId)\r\n          .order('createdAt', { ascending: false });\r\n        if (error) {\r\n ```\r\n \r\n This is the result that we see \r\n ```\r\n unexpected \"@\" expecting \"-\", digit or field name (* or [a..z0..9_$])\r\n ```\r\n \r\n Is there anything that we are missing? \r\n \r\n![Screenshot 2023-11-16 at 12 03 42](https://github.com/supabase/supabase-js/assets/50060130/1e2ed98a-784e-4d9b-91e8-60eff61ab0ea)\r\n\r\n## To Reproduce\r\n1. Insert data into the jsonb column formatted as schema-dts with @type field \r\n2. Query the data by @type  using supabase-js client\r\n",
            "author": {
                "login": "noskovvkirill"
            },
            "state": "OPEN",
            "createdAt": "2023-11-16T19:53:31Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/505",
            "comments": [
                {
                    "id": "IC_kwDODheSms5sM1Vx",
                    "body": "Thanks for the report. I can reproduce:\r\n\r\n```bash\r\ncurl 'localhost:3000/bets?data_json->@type=eq.4'\r\n\r\n{\"code\":\"PGRST100\",\"details\":\"unexpected \\\"@\\\" expecting \\\"-\\\", digit or field name (* or [a..z0..9_$])\",\"hint\":null,\"message\":\"\\\"failed to parse tree path (data_json->@type)\\\" (line 1, column 12)\"}\r\n```",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-11-16T20:59:39Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/505#issuecomment-1815303537"
                },
                {
                    "id": "IC_kwDODheSms5sN2LZ",
                    "body": "As a workaround, you could do:\r\n\r\n```\r\n.eq('media3Id->data->>schemaOrg2', {\"@type\": 1})\r\n```\r\n\r\nI've confirmed this works:\r\n\r\n```\r\ncurl 'localhost:3000/jsontest?json->a->b=eq.\\{\"@type\":1\\}'\r\n\r\n[{\"json\":{\"a\": {\"b\": {\"@type\": 1}}},\"integer\":1}]\r\n```",
                    "author": {
                        "login": "steve-chavez"
                    },
                    "createdAt": "2023-11-17T00:59:28Z",
                    "url": "https://github.com/supabase/postgrest-js/issues/505#issuecomment-1815569113"
                }
            ]
        },
        {
            "id": "I_kwDODheSms54FPuR",
            "number": 508,
            "title": "Type safety is not being adhered on insert queries",
            "body": "I have a insert query in my db which looks like this and I am using the typescript version of supabase-js.\r\n\r\n```\r\nawait supaServiceClient\r\n        .from(\"table_name\")\r\n        .insert({\r\n          column1:value,\r\n          column2:value,\r\n          column3:value\r\n        });\r\n```\r\n\r\nI changed the column \"column1\" to \"newColumn1\" but the above query did not throw any errors where there is no \"column1\". This lead to issues in production where this query stopped working as the insert was failing saying there is no column1 but the compiler did not throw any error. Is this the expected behaviour? If so how do i ensure to get compile time warnings for such scenarios. ",
            "author": {
                "login": "dvrfluxchat"
            },
            "state": "OPEN",
            "createdAt": "2023-11-28T02:45:23Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/508",
            "comments": []
        },
        {
            "id": "I_kwDODheSms54Jl_B",
            "number": 509,
            "title": "Typing issue when querying children",
            "body": "# Bug report\r\n\r\n- [x] I confirm this is a bug with Supabase, not with my own application. (well, I hope!)\r\n- [x] I confirm I have searched the [Docs](https://docs.supabase.com), GitHub [Discussions](https://github.com/supabase/supabase/discussions), and [Discord](https://discord.supabase.com). \r\n\r\n## Describe the bug\r\n\r\nI believe there's a typing issue when querying children of a row. I'm relatively new so this could possibly be user error, but I received no feedback via [Discord](https://discord.com/channels/839993398554656828/1178475723837677680/1178475723837677680) nor [StackOverflow](https://stackoverflow.com/questions/77560230).\r\n\r\n## To Reproduce\r\n\r\nI have the following generated (from supabase-cli) type for my `collections` table:\r\n\r\n```ts\r\nexport interface Database {\r\n  public: {\r\n    Tables: {\r\n      collections: {\r\n        Row: {\r\n          created_at: string\r\n          description: string | null\r\n          id: string\r\n          parent_id: string | null\r\n          short_title: string | null\r\n          title: string | null\r\n          website: string | null\r\n        }\r\n        Insert: {\r\n          created_at?: string\r\n          description?: string | null\r\n          id?: string\r\n          parent_id?: string | null\r\n          short_title?: string | null\r\n          title?: string | null\r\n          website?: string | null\r\n        }\r\n        Update: {\r\n          created_at?: string\r\n          description?: string | null\r\n          id?: string\r\n          parent_id?: string | null\r\n          short_title?: string | null\r\n          title?: string | null\r\n          website?: string | null\r\n        }\r\n        Relationships: [\r\n          {\r\n            foreignKeyName: \"collections_parent_id_fkey\"\r\n            columns: [\"parent_id\"]\r\n            isOneToOne: false\r\n            referencedRelation: \"collections\"\r\n            referencedColumns: [\"id\"]\r\n          }\r\n        ]\r\n      }\r\n```\r\n\r\nI'm grabbing a particular collection like so:\r\n\r\n```ts\r\n    const { data: collection } = await supabase\r\n        .from('collections')\r\n        .select(`*, collections(*)`)\r\n        .eq(`id`, params.id)\r\n        .single()\r\n```\r\n\r\nAnd this is the typing that's been inferred:\r\n\r\n```ts\r\nconst collection: {\r\n    created_at: string;\r\n    description: string | null;\r\n    id: string;\r\n    parent_id: string | null;\r\n    short_title: string | null;\r\n    title: string | null;\r\n    website: string | null;\r\n    collections: {\r\n        created_at: string;\r\n        ... 5 more ...;\r\n        website: string | null;\r\n    } | null;\r\n} | null\r\n```\r\n\r\n## Expected behavior\r\n\r\n\r\nIn particular, `collections` is typed as an object, not an array of objects. However, if I coerce the typing to be `any`, `collections` is an array as expected, so this is just an issue with the generated type. Any clues on what I've done wrong or how to fix things?\r\n\r\n## System information\r\n\r\n- OS: Windows\r\n- Browser: Chrome\r\n- Version of supabase-js: 2.38.5\r\n- Version of Node.js: 10.1.0\r\n- Dev environment: GitHub Codespaces\r\n\r\n",
            "author": {
                "login": "StevenClontz"
            },
            "state": "OPEN",
            "createdAt": "2023-11-29T02:20:09Z",
            "closedAt": null,
            "url": "https://github.com/supabase/postgrest-js/issues/509",
            "comments": []
        }
    ]
}